/** \file
 *  This C++ source file was generated by $ANTLR version 3.5.3-SNAPSHOT
 *
 *     -                for the parser : WNScriptASTParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF

// clang-format off





    #include "WNCore/inc/base.h"
#ifdef _WN_MSVC
    #pragma warning(disable: 4100)
    #pragma warning(disable: 4459)
    #pragma warning(disable: 4703)
#endif
#ifdef _WN_CLANG
    #pragma clang diagnostic ignored "-Wunused-function"
#endif
#ifdef _WN_GCC
    #pragma GCC diagnostic ignored "-Wunused-function"
    #pragma GCC diagnostic ignored "-Wunused-variable"
    #pragma GCC diagnostic ignored "-Wunused-but-set-variable"
    #pragma GCC diagnostic ignored "-Wsign-compare"
#endif
    #include "WNMemory/inc/allocator.h"
    #include "WNScripting/src/WNScriptASTLexer.hpp"
    #include "WNScripting/inc/WNNodeTypes.h"

    using namespace wn;

    #ifndef SET_LOCATION
    #define SET_LOCATION(node, tok) { scripting::source_location loc; \
                                     loc.m_start_index = tok->get_startIndex();\
                                     loc.m_end_index = tok->get_stopIndex();\
                                     loc.m_line_start = tok->get_lineStart();\
                                     loc.m_line_number = tok->get_line();\
                                     loc.m_char_number = tok->get_charPositionInLine();\
                                     node->set_start_location(loc); \
                                   }

    #define SET_LOCATION_FROM_NODE(node, node2) { \
                                        if(node2) { \
                                        node->set_start_location(node2->get_start_location()); \
                                        } \
                                   }
    #define SET_START_LOCATION_FROM_NODE(node, node2) { \
                                        if(node2) { \
                                        scripting::source_location loc = node->get_start_location(); \
                                        scripting::source_location loc2 = node2->get_start_location(); \
                                        loc.m_start_index = loc2.m_start_index; \
                                        loc.m_line_start = loc2.m_line_start; \
                                        loc.m_line_number = loc2.m_line_number; \
                                        loc.m_char_number = loc2.m_char_number; \
                                        node->set_start_location(loc); \
                                        } \
                                    }
    #define SET_END_LOCATION(node, tok) { \
                                        node->set_end_index(tok->get_stopIndex()); \
                                      }
    #define SET_END_LOCATION_FROM_NODE(node, node2) { \
                                            if(node2) { \
                                            node->set_end_index(node2->get_start_location().m_end_index); \
                                            } \
                                            }
    #endif








#include    "WNScriptASTParser.hpp"









using namespace antlr3;



ANTLR_UINT8* WNScriptASTParserTokenNames[72+4]
     = {
        (ANTLR_UINT8*) "<invalid>",
        (ANTLR_UINT8*) "<EOR>",
        (ANTLR_UINT8*) "<DOWN>",
        (ANTLR_UINT8*) "<UP>",
        (ANTLR_UINT8*) "BOOL",
        (ANTLR_UINT8*) "BOOL_TYPE",
        (ANTLR_UINT8*) "BREAK",
        (ANTLR_UINT8*) "CHAR",
        (ANTLR_UINT8*) "CHAR_TYPE",
        (ANTLR_UINT8*) "CLASS",
        (ANTLR_UINT8*) "COLON",
        (ANTLR_UINT8*) "COMMA",
        (ANTLR_UINT8*) "COMMENT",
        (ANTLR_UINT8*) "CONTINUE",
        (ANTLR_UINT8*) "DEFAULT",
        (ANTLR_UINT8*) "DLSQBRACKET",
        (ANTLR_UINT8*) "DO",
        (ANTLR_UINT8*) "DOUBDEC",
        (ANTLR_UINT8*) "DOUBINC",
        (ANTLR_UINT8*) "DRSQBRACKET",
        (ANTLR_UINT8*) "ELSE",
        (ANTLR_UINT8*) "ESC_SEQ",
        (ANTLR_UINT8*) "EXPONENT",
        (ANTLR_UINT8*) "FLOAT",
        (ANTLR_UINT8*) "FLOAT_TYPE",
        (ANTLR_UINT8*) "FOR",
        (ANTLR_UINT8*) "HEX_DIGIT",
        (ANTLR_UINT8*) "ID",
        (ANTLR_UINT8*) "IF",
        (ANTLR_UINT8*) "INCLUDE",
        (ANTLR_UINT8*) "INT",
        (ANTLR_UINT8*) "INT_TYPE",
        (ANTLR_UINT8*) "LBRACE",
        (ANTLR_UINT8*) "LBRACKET",
        (ANTLR_UINT8*) "LENGTH",
        (ANTLR_UINT8*) "LSQBRACKET",
        (ANTLR_UINT8*) "NULLTOK",
        (ANTLR_UINT8*) "OCTAL_ESC",
        (ANTLR_UINT8*) "OVERRIDE",
        (ANTLR_UINT8*) "QUESTION",
        (ANTLR_UINT8*) "RBRACE",
        (ANTLR_UINT8*) "RBRACKET",
        (ANTLR_UINT8*) "RETURN",
        (ANTLR_UINT8*) "RSQBRACKET",
        (ANTLR_UINT8*) "SEMICOLON",
        (ANTLR_UINT8*) "SHARED_REF",
        (ANTLR_UINT8*) "STRING",
        (ANTLR_UINT8*) "STRING_TYPE",
        (ANTLR_UINT8*) "STRUCT",
        (ANTLR_UINT8*) "TYPE",
        (ANTLR_UINT8*) "UNICODE_ESC",
        (ANTLR_UINT8*) "VIRTUAL",
        (ANTLR_UINT8*) "VOID_TYPE",
        (ANTLR_UINT8*) "WEAK_REF",
        (ANTLR_UINT8*) "WHILE",
        (ANTLR_UINT8*) "WS",
        (ANTLR_UINT8*) "'!='",
        (ANTLR_UINT8*) "'%'",
        (ANTLR_UINT8*) "'%='",
        (ANTLR_UINT8*) "'&&'",
        (ANTLR_UINT8*) "'*'",
        (ANTLR_UINT8*) "'*='",
        (ANTLR_UINT8*) "'+'",
        (ANTLR_UINT8*) "'+='",
        (ANTLR_UINT8*) "'-'",
        (ANTLR_UINT8*) "'-='",
        (ANTLR_UINT8*) "'.'",
        (ANTLR_UINT8*) "'/'",
        (ANTLR_UINT8*) "'/='",
        (ANTLR_UINT8*) "'<'",
        (ANTLR_UINT8*) "'<='",
        (ANTLR_UINT8*) "'='",
        (ANTLR_UINT8*) "'=='",
        (ANTLR_UINT8*) "'>'",
        (ANTLR_UINT8*) "'>='",
        (ANTLR_UINT8*) "'||'"
       };




static const char fileName[] = "WNScriptAST.g";



const char* WNScriptASTParser::getGrammarFileName()
{
	return fileName;
}






WNScriptASTParser::WNScriptASTParser( StreamType* instream)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, NULL)

{
	this->init(instream);
}







WNScriptASTParser::WNScriptASTParser( StreamType* instream, RecognizerSharedStateType* state)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, state)

{
	this->init(instream );
}

void WNScriptASTParser::init(StreamType* instream)
{


	this->get_psrstate()->set_tokenNames( WNScriptASTParserTokenNames );


}

void
WNScriptASTParser::reset()
{
    this->get_rec()->reset();
}



WNScriptASTParser::~WNScriptASTParser()
 {
}








static ANTLR_UINT8**	getTokenNames()
{
        return WNScriptASTParserTokenNames;
}





static	ANTLR_BITWORD FOLLOW_TYPE_in_objectType1213_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_objectType1213( FOLLOW_TYPE_in_objectType1213_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRING_TYPE_in_objectType1228_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_TYPE_in_objectType1228( FOLLOW_STRING_TYPE_in_objectType1228_bits, 1 );

static	ANTLR_BITWORD FOLLOW_VOID_TYPE_in_scalarType1257_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_VOID_TYPE_in_scalarType1257( FOLLOW_VOID_TYPE_in_scalarType1257_bits, 1 );

static	ANTLR_BITWORD FOLLOW_INT_TYPE_in_scalarType1269_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_INT_TYPE_in_scalarType1269( FOLLOW_INT_TYPE_in_scalarType1269_bits, 1 );

static	ANTLR_BITWORD FOLLOW_FLOAT_TYPE_in_scalarType1281_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_FLOAT_TYPE_in_scalarType1281( FOLLOW_FLOAT_TYPE_in_scalarType1281_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CHAR_TYPE_in_scalarType1293_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CHAR_TYPE_in_scalarType1293( FOLLOW_CHAR_TYPE_in_scalarType1293_bits, 1 );

static	ANTLR_BITWORD FOLLOW_BOOL_TYPE_in_scalarType1305_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_BOOL_TYPE_in_scalarType1305( FOLLOW_BOOL_TYPE_in_scalarType1305_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_arrayType1333_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_arrayType1333( FOLLOW_scalarType_in_arrayType1333_bits, 1 );

static	ANTLR_BITWORD FOLLOW_objectType_in_arrayType1353_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_objectType_in_arrayType1353( FOLLOW_objectType_in_arrayType1353_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_arrayType1361_bits[]	= { ANTLR_UINT64_LIT(0x00104810C18001B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_arrayType1361( FOLLOW_LSQBRACKET_in_arrayType1361_bits, 1 );

static	ANTLR_BITWORD FOLLOW_constant_in_arrayType1370_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_constant_in_arrayType1370( FOLLOW_constant_in_arrayType1370_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_arrayType1388_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_arrayType1388( FOLLOW_RSQBRACKET_in_arrayType1388_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_dynamicArrayType1417_bits[]	= { ANTLR_UINT64_LIT(0x0000000000008000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_dynamicArrayType1417( FOLLOW_scalarType_in_dynamicArrayType1417_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DLSQBRACKET_in_dynamicArrayType1433_bits[]	= { ANTLR_UINT64_LIT(0x0000000000080000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DLSQBRACKET_in_dynamicArrayType1433( FOLLOW_DLSQBRACKET_in_dynamicArrayType1433_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DRSQBRACKET_in_dynamicArrayType1435_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DRSQBRACKET_in_dynamicArrayType1435( FOLLOW_DRSQBRACKET_in_dynamicArrayType1435_bits, 1 );

static	ANTLR_BITWORD FOLLOW_objectType_in_dynamicArrayType1446_bits[]	= { ANTLR_UINT64_LIT(0x0000000000008000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_objectType_in_dynamicArrayType1446( FOLLOW_objectType_in_dynamicArrayType1446_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DLSQBRACKET_in_dynamicArrayType1462_bits[]	= { ANTLR_UINT64_LIT(0x0000000000080000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DLSQBRACKET_in_dynamicArrayType1462( FOLLOW_DLSQBRACKET_in_dynamicArrayType1462_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DRSQBRACKET_in_dynamicArrayType1464_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DRSQBRACKET_in_dynamicArrayType1464( FOLLOW_DRSQBRACKET_in_dynamicArrayType1464_bits, 1 );

static	ANTLR_BITWORD FOLLOW_objectType_in_compoundType1492_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_objectType_in_compoundType1492( FOLLOW_objectType_in_compoundType1492_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_nonArrayType1519_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_nonArrayType1519( FOLLOW_scalarType_in_nonArrayType1519_bits, 1 );

static	ANTLR_BITWORD FOLLOW_objectType_in_nonArrayType1529_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_objectType_in_nonArrayType1529( FOLLOW_objectType_in_nonArrayType1529_bits, 1 );

static	ANTLR_BITWORD FOLLOW_compoundType_in_type1559_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_compoundType_in_type1559( FOLLOW_compoundType_in_type1559_bits, 1 );

static	ANTLR_BITWORD FOLLOW_arrayType_in_type1569_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arrayType_in_type1569( FOLLOW_arrayType_in_type1569_bits, 1 );

static	ANTLR_BITWORD FOLLOW_dynamicArrayType_in_type1579_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_dynamicArrayType_in_type1579( FOLLOW_dynamicArrayType_in_type1579_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_type1589_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_type1589( FOLLOW_scalarType_in_type1589_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_param1621_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_param1621( FOLLOW_scalarType_in_param1621_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1625_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1625( FOLLOW_ID_in_param1625_bits, 1 );

static	ANTLR_BITWORD FOLLOW_compoundType_in_param1640_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_compoundType_in_param1640( FOLLOW_compoundType_in_param1640_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1644_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1644( FOLLOW_ID_in_param1644_bits, 1 );

static	ANTLR_BITWORD FOLLOW_arrayType_in_param1659_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arrayType_in_param1659( FOLLOW_arrayType_in_param1659_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1663_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1663( FOLLOW_ID_in_param1663_bits, 1 );

static	ANTLR_BITWORD FOLLOW_dynamicArrayType_in_param1678_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_dynamicArrayType_in_param1678( FOLLOW_dynamicArrayType_in_param1678_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1682_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1682( FOLLOW_ID_in_param1682_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SHARED_REF_in_param1695_bits[]	= { ANTLR_UINT64_LIT(0x0002800000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SHARED_REF_in_param1695( FOLLOW_SHARED_REF_in_param1695_bits, 1 );

static	ANTLR_BITWORD FOLLOW_compoundType_in_param1699_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_compoundType_in_param1699( FOLLOW_compoundType_in_param1699_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1703_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1703( FOLLOW_ID_in_param1703_bits, 1 );

static	ANTLR_BITWORD FOLLOW_WEAK_REF_in_param1716_bits[]	= { ANTLR_UINT64_LIT(0x0002800000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_WEAK_REF_in_param1716( FOLLOW_WEAK_REF_in_param1716_bits, 1 );

static	ANTLR_BITWORD FOLLOW_compoundType_in_param1720_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_compoundType_in_param1720( FOLLOW_compoundType_in_param1720_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1725_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1725( FOLLOW_ID_in_param1725_bits, 1 );

static	ANTLR_BITWORD FOLLOW_compoundType_in_param1740_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_compoundType_in_param1740( FOLLOW_compoundType_in_param1740_bits, 1 );

static	ANTLR_BITWORD FOLLOW_QUESTION_in_param1742_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_QUESTION_in_param1742( FOLLOW_QUESTION_in_param1742_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1747_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1747( FOLLOW_ID_in_param1747_bits, 1 );

static	ANTLR_BITWORD FOLLOW_param_in_paramList1779_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000802) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_param_in_paramList1779( FOLLOW_param_in_paramList1779_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COMMA_in_paramList1792_bits[]	= { ANTLR_UINT64_LIT(0x0032A00081000120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COMMA_in_paramList1792( FOLLOW_COMMA_in_paramList1792_bits, 1 );

static	ANTLR_BITWORD FOLLOW_param_in_paramList1796_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000802) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_param_in_paramList1796( FOLLOW_param_in_paramList1796_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_parameterList1828_bits[]	= { ANTLR_UINT64_LIT(0x0032A00081000120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_parameterList1828( FOLLOW_LBRACKET_in_parameterList1828_bits, 1 );

static	ANTLR_BITWORD FOLLOW_paramList_in_parameterList1830_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_paramList_in_parameterList1830( FOLLOW_paramList_in_parameterList1830_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_parameterList1832_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_parameterList1832( FOLLOW_RBRACKET_in_parameterList1832_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_parameterList1849_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_parameterList1849( FOLLOW_LBRACKET_in_parameterList1849_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_parameterList1851_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_parameterList1851( FOLLOW_RBRACKET_in_parameterList1851_bits, 1 );

static	ANTLR_BITWORD FOLLOW_71_in_assign_type1887_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_71_in_assign_type1887( FOLLOW_71_in_assign_type1887_bits, 1 );

static	ANTLR_BITWORD FOLLOW_63_in_assign_type1901_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_63_in_assign_type1901( FOLLOW_63_in_assign_type1901_bits, 1 );

static	ANTLR_BITWORD FOLLOW_65_in_assign_type1914_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_65_in_assign_type1914( FOLLOW_65_in_assign_type1914_bits, 1 );

static	ANTLR_BITWORD FOLLOW_61_in_assign_type1927_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_61_in_assign_type1927( FOLLOW_61_in_assign_type1927_bits, 1 );

static	ANTLR_BITWORD FOLLOW_68_in_assign_type1940_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_68_in_assign_type1940( FOLLOW_68_in_assign_type1940_bits, 1 );

static	ANTLR_BITWORD FOLLOW_58_in_assign_type1953_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_58_in_assign_type1953( FOLLOW_58_in_assign_type1953_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_arglist2011_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000802) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arglist2011( FOLLOW_expr_in_arglist2011_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COMMA_in_arglist2044_bits[]	= { ANTLR_UINT64_LIT(0x0012E016C98609B2), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COMMA_in_arglist2044( FOLLOW_COMMA_in_arglist2044_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_arglist2088_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000802) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arglist2088( FOLLOW_expr_in_arglist2088_bits, 1 );

static	ANTLR_BITWORD FOLLOW_cond_ex_in_expr2163_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_cond_ex_in_expr2163( FOLLOW_cond_ex_in_expr2163_bits, 1 );

static	ANTLR_BITWORD FOLLOW_or_ex_in_cond_ex2201_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_or_ex_in_cond_ex2201( FOLLOW_or_ex_in_cond_ex2201_bits, 1 );

static	ANTLR_BITWORD FOLLOW_QUESTION_in_cond_ex2224_bits[]	= { ANTLR_UINT64_LIT(0x0012E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_QUESTION_in_cond_ex2224( FOLLOW_QUESTION_in_cond_ex2224_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_cond_ex2228_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_cond_ex2228( FOLLOW_expr_in_cond_ex2228_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COLON_in_cond_ex2230_bits[]	= { ANTLR_UINT64_LIT(0x0012E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COLON_in_cond_ex2230( FOLLOW_COLON_in_cond_ex2230_bits, 2 );

static	ANTLR_BITWORD FOLLOW_cond_ex_in_cond_ex2234_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_cond_ex_in_cond_ex2234( FOLLOW_cond_ex_in_cond_ex2234_bits, 1 );

static	ANTLR_BITWORD FOLLOW_and_ex_in_or_ex2281_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000800) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_and_ex_in_or_ex2281( FOLLOW_and_ex_in_or_ex2281_bits, 2 );

static	ANTLR_BITWORD FOLLOW_75_in_or_ex2298_bits[]	= { ANTLR_UINT64_LIT(0x0012E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_75_in_or_ex2298( FOLLOW_75_in_or_ex2298_bits, 2 );

static	ANTLR_BITWORD FOLLOW_and_ex_in_or_ex2302_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000800) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_and_ex_in_or_ex2302( FOLLOW_and_ex_in_or_ex2302_bits, 2 );

static	ANTLR_BITWORD FOLLOW_eq_ex_in_and_ex2345_bits[]	= { ANTLR_UINT64_LIT(0x0800000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_eq_ex_in_and_ex2345( FOLLOW_eq_ex_in_and_ex2345_bits, 1 );

static	ANTLR_BITWORD FOLLOW_59_in_and_ex2362_bits[]	= { ANTLR_UINT64_LIT(0x0012E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_59_in_and_ex2362( FOLLOW_59_in_and_ex2362_bits, 2 );

static	ANTLR_BITWORD FOLLOW_eq_ex_in_and_ex2366_bits[]	= { ANTLR_UINT64_LIT(0x0800000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_eq_ex_in_and_ex2366( FOLLOW_eq_ex_in_and_ex2366_bits, 1 );

static	ANTLR_BITWORD FOLLOW_rel_ex_in_eq_ex2402_bits[]	= { ANTLR_UINT64_LIT(0x0100000000000002), ANTLR_UINT64_LIT(0x0000000000000100) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_rel_ex_in_eq_ex2402( FOLLOW_rel_ex_in_eq_ex2402_bits, 2 );

static	ANTLR_BITWORD FOLLOW_72_in_eq_ex2437_bits[]	= { ANTLR_UINT64_LIT(0x0012E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_72_in_eq_ex2437( FOLLOW_72_in_eq_ex2437_bits, 2 );

static	ANTLR_BITWORD FOLLOW_rel_ex_in_eq_ex2441_bits[]	= { ANTLR_UINT64_LIT(0x0100000000000002), ANTLR_UINT64_LIT(0x0000000000000100) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_rel_ex_in_eq_ex2441( FOLLOW_rel_ex_in_eq_ex2441_bits, 2 );

static	ANTLR_BITWORD FOLLOW_56_in_eq_ex2464_bits[]	= { ANTLR_UINT64_LIT(0x0012E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_56_in_eq_ex2464( FOLLOW_56_in_eq_ex2464_bits, 2 );

static	ANTLR_BITWORD FOLLOW_rel_ex_in_eq_ex2468_bits[]	= { ANTLR_UINT64_LIT(0x0100000000000002), ANTLR_UINT64_LIT(0x0000000000000100) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_rel_ex_in_eq_ex2468( FOLLOW_rel_ex_in_eq_ex2468_bits, 2 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2526_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000660) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2526( FOLLOW_add_ex_in_rel_ex2526_bits, 2 );

static	ANTLR_BITWORD FOLLOW_69_in_rel_ex2562_bits[]	= { ANTLR_UINT64_LIT(0x0012E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_69_in_rel_ex2562( FOLLOW_69_in_rel_ex2562_bits, 2 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2566_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000660) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2566( FOLLOW_add_ex_in_rel_ex2566_bits, 2 );

static	ANTLR_BITWORD FOLLOW_73_in_rel_ex2590_bits[]	= { ANTLR_UINT64_LIT(0x0012E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_73_in_rel_ex2590( FOLLOW_73_in_rel_ex2590_bits, 2 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2594_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000660) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2594( FOLLOW_add_ex_in_rel_ex2594_bits, 2 );

static	ANTLR_BITWORD FOLLOW_70_in_rel_ex2618_bits[]	= { ANTLR_UINT64_LIT(0x0012E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_70_in_rel_ex2618( FOLLOW_70_in_rel_ex2618_bits, 2 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2622_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000660) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2622( FOLLOW_add_ex_in_rel_ex2622_bits, 2 );

static	ANTLR_BITWORD FOLLOW_74_in_rel_ex2646_bits[]	= { ANTLR_UINT64_LIT(0x0012E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_74_in_rel_ex2646( FOLLOW_74_in_rel_ex2646_bits, 2 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2650_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000660) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2650( FOLLOW_add_ex_in_rel_ex2650_bits, 2 );

static	ANTLR_BITWORD FOLLOW_mult_ex_in_add_ex2711_bits[]	= { ANTLR_UINT64_LIT(0x4000000000000002), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_mult_ex_in_add_ex2711( FOLLOW_mult_ex_in_add_ex2711_bits, 2 );

static	ANTLR_BITWORD FOLLOW_62_in_add_ex2746_bits[]	= { ANTLR_UINT64_LIT(0x0012E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_62_in_add_ex2746( FOLLOW_62_in_add_ex2746_bits, 2 );

static	ANTLR_BITWORD FOLLOW_mult_ex_in_add_ex2750_bits[]	= { ANTLR_UINT64_LIT(0x4000000000000002), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_mult_ex_in_add_ex2750( FOLLOW_mult_ex_in_add_ex2750_bits, 2 );

static	ANTLR_BITWORD FOLLOW_64_in_add_ex2772_bits[]	= { ANTLR_UINT64_LIT(0x0012E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_64_in_add_ex2772( FOLLOW_64_in_add_ex2772_bits, 2 );

static	ANTLR_BITWORD FOLLOW_mult_ex_in_add_ex2776_bits[]	= { ANTLR_UINT64_LIT(0x4000000000000002), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_mult_ex_in_add_ex2776( FOLLOW_mult_ex_in_add_ex2776_bits, 2 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex2835_bits[]	= { ANTLR_UINT64_LIT(0x1200000000000002), ANTLR_UINT64_LIT(0x0000000000000008) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex2835( FOLLOW_unary_ex_in_mult_ex2835_bits, 2 );

static	ANTLR_BITWORD FOLLOW_60_in_mult_ex2874_bits[]	= { ANTLR_UINT64_LIT(0x0012E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_60_in_mult_ex2874( FOLLOW_60_in_mult_ex2874_bits, 2 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex2878_bits[]	= { ANTLR_UINT64_LIT(0x1200000000000002), ANTLR_UINT64_LIT(0x0000000000000008) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex2878( FOLLOW_unary_ex_in_mult_ex2878_bits, 2 );

static	ANTLR_BITWORD FOLLOW_67_in_mult_ex2904_bits[]	= { ANTLR_UINT64_LIT(0x0012E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_67_in_mult_ex2904( FOLLOW_67_in_mult_ex2904_bits, 2 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex2908_bits[]	= { ANTLR_UINT64_LIT(0x1200000000000002), ANTLR_UINT64_LIT(0x0000000000000008) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex2908( FOLLOW_unary_ex_in_mult_ex2908_bits, 2 );

static	ANTLR_BITWORD FOLLOW_57_in_mult_ex2934_bits[]	= { ANTLR_UINT64_LIT(0x0012E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_57_in_mult_ex2934( FOLLOW_57_in_mult_ex2934_bits, 2 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex2938_bits[]	= { ANTLR_UINT64_LIT(0x1200000000000002), ANTLR_UINT64_LIT(0x0000000000000008) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex2938( FOLLOW_unary_ex_in_mult_ex2938_bits, 2 );

static	ANTLR_BITWORD FOLLOW_post_ex_in_unary_ex2990_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_post_ex_in_unary_ex2990( FOLLOW_post_ex_in_unary_ex2990_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DOUBINC_in_unary_ex3003_bits[]	= { ANTLR_UINT64_LIT(0x0012E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBINC_in_unary_ex3003( FOLLOW_DOUBINC_in_unary_ex3003_bits, 2 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_unary_ex3007_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_unary_ex3007( FOLLOW_unary_ex_in_unary_ex3007_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DOUBDEC_in_unary_ex3020_bits[]	= { ANTLR_UINT64_LIT(0x0012E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBDEC_in_unary_ex3020( FOLLOW_DOUBDEC_in_unary_ex3020_bits, 2 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_unary_ex3024_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_unary_ex3024( FOLLOW_unary_ex_in_unary_ex3024_bits, 1 );

static	ANTLR_BITWORD FOLLOW_64_in_unary_ex3037_bits[]	= { ANTLR_UINT64_LIT(0x0012E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_64_in_unary_ex3037( FOLLOW_64_in_unary_ex3037_bits, 2 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_unary_ex3041_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_unary_ex3041( FOLLOW_unary_ex_in_unary_ex3041_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_post_ex_proper3079_bits[]	= { ANTLR_UINT64_LIT(0x0012E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_post_ex_proper3079( FOLLOW_LSQBRACKET_in_post_ex_proper3079_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_post_ex_proper3083_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_post_ex_proper3083( FOLLOW_expr_in_post_ex_proper3083_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_post_ex_proper3087_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_post_ex_proper3087( FOLLOW_RSQBRACKET_in_post_ex_proper3087_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_post_ex_proper3102_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_post_ex_proper3102( FOLLOW_LBRACKET_in_post_ex_proper3102_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_post_ex_proper3106_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_post_ex_proper3106( FOLLOW_RBRACKET_in_post_ex_proper3106_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_post_ex_proper3134_bits[]	= { ANTLR_UINT64_LIT(0x0012E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_post_ex_proper3134( FOLLOW_LBRACKET_in_post_ex_proper3134_bits, 2 );

static	ANTLR_BITWORD FOLLOW_arglist_in_post_ex_proper3140_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arglist_in_post_ex_proper3140( FOLLOW_arglist_in_post_ex_proper3140_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_post_ex_proper3144_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_post_ex_proper3144( FOLLOW_RBRACKET_in_post_ex_proper3144_bits, 1 );

static	ANTLR_BITWORD FOLLOW_66_in_post_ex_proper3157_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_66_in_post_ex_proper3157( FOLLOW_66_in_post_ex_proper3157_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_post_ex_proper3161_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_post_ex_proper3161( FOLLOW_ID_in_post_ex_proper3161_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DOUBINC_in_post_ex_proper3188_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBINC_in_post_ex_proper3188( FOLLOW_DOUBINC_in_post_ex_proper3188_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DOUBDEC_in_post_ex_proper3217_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBDEC_in_post_ex_proper3217( FOLLOW_DOUBDEC_in_post_ex_proper3217_bits, 1 );

static	ANTLR_BITWORD FOLLOW_prim_ex_in_post_ex3270_bits[]	= { ANTLR_UINT64_LIT(0x0000000A00060002), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_prim_ex_in_post_ex3270( FOLLOW_prim_ex_in_post_ex3270_bits, 2 );

static	ANTLR_BITWORD FOLLOW_post_ex_proper_in_post_ex3289_bits[]	= { ANTLR_UINT64_LIT(0x0000000A00060002), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_post_ex_proper_in_post_ex3289( FOLLOW_post_ex_proper_in_post_ex3289_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_assignment_or_expression3320_bits[]	= { ANTLR_UINT64_LIT(0xA400000000000002), ANTLR_UINT64_LIT(0x0000000000000092) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_assignment_or_expression3320( FOLLOW_expr_in_assignment_or_expression3320_bits, 2 );

static	ANTLR_BITWORD FOLLOW_assign_type_in_assignment_or_expression3352_bits[]	= { ANTLR_UINT64_LIT(0x0012E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_assign_type_in_assignment_or_expression3352( FOLLOW_assign_type_in_assignment_or_expression3352_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_assignment_or_expression3356_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_assignment_or_expression3356( FOLLOW_expr_in_assignment_or_expression3356_bits, 1 );

static	ANTLR_BITWORD FOLLOW_INT_in_constant3422_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_INT_in_constant3422( FOLLOW_INT_in_constant3422_bits, 1 );

static	ANTLR_BITWORD FOLLOW_FLOAT_in_constant3440_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_FLOAT_in_constant3440( FOLLOW_FLOAT_in_constant3440_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CHAR_in_constant3456_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CHAR_in_constant3456( FOLLOW_CHAR_in_constant3456_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRING_in_constant3473_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_in_constant3473( FOLLOW_STRING_in_constant3473_bits, 1 );

static	ANTLR_BITWORD FOLLOW_BOOL_in_constant3488_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_BOOL_in_constant3488( FOLLOW_BOOL_in_constant3488_bits, 1 );

static	ANTLR_BITWORD FOLLOW_NULLTOK_in_constant3505_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_NULLTOK_in_constant3505( FOLLOW_NULLTOK_in_constant3505_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_constant3520_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_constant3520( FOLLOW_scalarType_in_constant3520_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACE_in_constant3524_bits[]	= { ANTLR_UINT64_LIT(0x0000400000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_constant3524( FOLLOW_LBRACE_in_constant3524_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRING_in_constant3528_bits[]	= { ANTLR_UINT64_LIT(0x0000010000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_in_constant3528( FOLLOW_STRING_in_constant3528_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACE_in_constant3532_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_constant3532( FOLLOW_RBRACE_in_constant3532_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LENGTH_in_builtin_unary3561_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LENGTH_in_builtin_unary3561( FOLLOW_LENGTH_in_builtin_unary3561_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_builtin_unary3563_bits[]	= { ANTLR_UINT64_LIT(0x0012E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_builtin_unary3563( FOLLOW_LBRACKET_in_builtin_unary3563_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_builtin_unary3565_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_builtin_unary3565( FOLLOW_expr_in_builtin_unary3565_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_builtin_unary3567_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_builtin_unary3567( FOLLOW_RBRACKET_in_builtin_unary3567_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_prim_ex3597_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_prim_ex3597( FOLLOW_ID_in_prim_ex3597_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_prim_ex3612_bits[]	= { ANTLR_UINT64_LIT(0x0012E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_prim_ex3612( FOLLOW_LBRACKET_in_prim_ex3612_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_prim_ex3616_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_prim_ex3616( FOLLOW_expr_in_prim_ex3616_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_prim_ex3620_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_prim_ex3620( FOLLOW_RBRACKET_in_prim_ex3620_bits, 1 );

static	ANTLR_BITWORD FOLLOW_constant_in_prim_ex3635_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_constant_in_prim_ex3635( FOLLOW_constant_in_prim_ex3635_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_prim_ex3650_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_prim_ex3650( FOLLOW_scalarType_in_prim_ex3650_bits, 1 );

static	ANTLR_BITWORD FOLLOW_cast_in_prim_ex3656_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_cast_in_prim_ex3656( FOLLOW_cast_in_prim_ex3656_bits, 1 );

static	ANTLR_BITWORD FOLLOW_objectType_in_prim_ex3671_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_objectType_in_prim_ex3671( FOLLOW_objectType_in_prim_ex3671_bits, 1 );

static	ANTLR_BITWORD FOLLOW_structInit_in_prim_ex3675_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_structInit_in_prim_ex3675( FOLLOW_structInit_in_prim_ex3675_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SHARED_REF_in_prim_ex3687_bits[]	= { ANTLR_UINT64_LIT(0x0002800000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SHARED_REF_in_prim_ex3687( FOLLOW_SHARED_REF_in_prim_ex3687_bits, 1 );

static	ANTLR_BITWORD FOLLOW_objectType_in_prim_ex3691_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_objectType_in_prim_ex3691( FOLLOW_objectType_in_prim_ex3691_bits, 1 );

static	ANTLR_BITWORD FOLLOW_structInit_in_prim_ex3695_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_structInit_in_prim_ex3695( FOLLOW_structInit_in_prim_ex3695_bits, 1 );

static	ANTLR_BITWORD FOLLOW_nonArrayType_in_prim_ex3709_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_nonArrayType_in_prim_ex3709( FOLLOW_nonArrayType_in_prim_ex3709_bits, 1 );

static	ANTLR_BITWORD FOLLOW_arrayInit_in_prim_ex3713_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arrayInit_in_prim_ex3713( FOLLOW_arrayInit_in_prim_ex3713_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SHARED_REF_in_prim_ex3725_bits[]	= { ANTLR_UINT64_LIT(0x0012800081000120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SHARED_REF_in_prim_ex3725( FOLLOW_SHARED_REF_in_prim_ex3725_bits, 1 );

static	ANTLR_BITWORD FOLLOW_nonArrayType_in_prim_ex3729_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_nonArrayType_in_prim_ex3729( FOLLOW_nonArrayType_in_prim_ex3729_bits, 1 );

static	ANTLR_BITWORD FOLLOW_arrayInit_in_prim_ex3733_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arrayInit_in_prim_ex3733( FOLLOW_arrayInit_in_prim_ex3733_bits, 1 );

static	ANTLR_BITWORD FOLLOW_nonArrayType_in_prim_ex3747_bits[]	= { ANTLR_UINT64_LIT(0x0000000000008000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_nonArrayType_in_prim_ex3747( FOLLOW_nonArrayType_in_prim_ex3747_bits, 1 );

static	ANTLR_BITWORD FOLLOW_dynamicArrayInit_in_prim_ex3751_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_dynamicArrayInit_in_prim_ex3751( FOLLOW_dynamicArrayInit_in_prim_ex3751_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SHARED_REF_in_prim_ex3763_bits[]	= { ANTLR_UINT64_LIT(0x0012800081000120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SHARED_REF_in_prim_ex3763( FOLLOW_SHARED_REF_in_prim_ex3763_bits, 1 );

static	ANTLR_BITWORD FOLLOW_nonArrayType_in_prim_ex3767_bits[]	= { ANTLR_UINT64_LIT(0x0000000000008000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_nonArrayType_in_prim_ex3767( FOLLOW_nonArrayType_in_prim_ex3767_bits, 1 );

static	ANTLR_BITWORD FOLLOW_dynamicArrayInit_in_prim_ex3771_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_dynamicArrayInit_in_prim_ex3771( FOLLOW_dynamicArrayInit_in_prim_ex3771_bits, 1 );

static	ANTLR_BITWORD FOLLOW_builtin_unary_in_prim_ex3787_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_builtin_unary_in_prim_ex3787( FOLLOW_builtin_unary_in_prim_ex3787_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_cast3816_bits[]	= { ANTLR_UINT64_LIT(0x0012E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_cast3816( FOLLOW_LBRACKET_in_cast3816_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_cast3820_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_cast3820( FOLLOW_expr_in_cast3820_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_cast3824_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_cast3824( FOLLOW_RBRACKET_in_cast3824_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_structInit3853_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_structInit3853( FOLLOW_LBRACKET_in_structInit3853_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_structInit3857_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_structInit3857( FOLLOW_RBRACKET_in_structInit3857_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_arrayInit3893_bits[]	= { ANTLR_UINT64_LIT(0x0012E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_arrayInit3893( FOLLOW_LSQBRACKET_in_arrayInit3893_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_arrayInit3897_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arrayInit3897( FOLLOW_expr_in_arrayInit3897_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_arrayInit3899_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_arrayInit3899( FOLLOW_RSQBRACKET_in_arrayInit3899_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_arrayInit3914_bits[]	= { ANTLR_UINT64_LIT(0x0012E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_arrayInit3914( FOLLOW_LBRACKET_in_arrayInit3914_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_arrayInit3918_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arrayInit3918( FOLLOW_expr_in_arrayInit3918_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_arrayInit3922_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_arrayInit3922( FOLLOW_RBRACKET_in_arrayInit3922_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DLSQBRACKET_in_dynamicArrayInit3960_bits[]	= { ANTLR_UINT64_LIT(0x0012E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DLSQBRACKET_in_dynamicArrayInit3960( FOLLOW_DLSQBRACKET_in_dynamicArrayInit3960_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_dynamicArrayInit3964_bits[]	= { ANTLR_UINT64_LIT(0x0000000000080000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_dynamicArrayInit3964( FOLLOW_expr_in_dynamicArrayInit3964_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DRSQBRACKET_in_dynamicArrayInit3966_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DRSQBRACKET_in_dynamicArrayInit3966( FOLLOW_DRSQBRACKET_in_dynamicArrayInit3966_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_dynamicArrayInit3981_bits[]	= { ANTLR_UINT64_LIT(0x0012E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_dynamicArrayInit3981( FOLLOW_LBRACKET_in_dynamicArrayInit3981_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_dynamicArrayInit3985_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_dynamicArrayInit3985( FOLLOW_expr_in_dynamicArrayInit3985_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_dynamicArrayInit3989_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_dynamicArrayInit3989( FOLLOW_RBRACKET_in_dynamicArrayInit3989_bits, 1 );

static	ANTLR_BITWORD FOLLOW_param_in_declaration4023_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_param_in_declaration4023( FOLLOW_param_in_declaration4023_bits, 2 );

static	ANTLR_BITWORD FOLLOW_71_in_declaration4058_bits[]	= { ANTLR_UINT64_LIT(0x0012E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_71_in_declaration4058( FOLLOW_71_in_declaration4058_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_declaration4065_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_declaration4065( FOLLOW_expr_in_declaration4065_bits, 1 );

static	ANTLR_BITWORD FOLLOW_66_in_inherited_declaration4115_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_66_in_inherited_declaration4115( FOLLOW_66_in_inherited_declaration4115_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_inherited_declaration4119_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_inherited_declaration4119( FOLLOW_ID_in_inherited_declaration4119_bits, 2 );

static	ANTLR_BITWORD FOLLOW_71_in_inherited_declaration4132_bits[]	= { ANTLR_UINT64_LIT(0x0012E016C98641B0), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_71_in_inherited_declaration4132( FOLLOW_71_in_inherited_declaration4132_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_inherited_declaration4168_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_inherited_declaration4168( FOLLOW_expr_in_inherited_declaration4168_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DEFAULT_in_inherited_declaration4194_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DEFAULT_in_inherited_declaration4194( FOLLOW_DEFAULT_in_inherited_declaration4194_bits, 1 );

static	ANTLR_BITWORD FOLLOW_declaration_in_instructionScalar4250_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_declaration_in_instructionScalar4250( FOLLOW_declaration_in_instructionScalar4250_bits, 1 );

static	ANTLR_BITWORD FOLLOW_assignment_or_expression_in_instructionScalar4263_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_assignment_or_expression_in_instructionScalar4263( FOLLOW_assignment_or_expression_in_instructionScalar4263_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CONTINUE_in_continueInst4293_bits[]	= { ANTLR_UINT64_LIT(0x0000100000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CONTINUE_in_continueInst4293( FOLLOW_CONTINUE_in_continueInst4293_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_continueInst4297_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_continueInst4297( FOLLOW_SEMICOLON_in_continueInst4297_bits, 1 );

static	ANTLR_BITWORD FOLLOW_BREAK_in_breakInst4323_bits[]	= { ANTLR_UINT64_LIT(0x0000100000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_BREAK_in_breakInst4323( FOLLOW_BREAK_in_breakInst4323_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_breakInst4327_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_breakInst4327( FOLLOW_SEMICOLON_in_breakInst4327_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RETURN_in_returnInst4354_bits[]	= { ANTLR_UINT64_LIT(0x0012E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RETURN_in_returnInst4354( FOLLOW_RETURN_in_returnInst4354_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_returnInst4356_bits[]	= { ANTLR_UINT64_LIT(0x0000100000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_returnInst4356( FOLLOW_expr_in_returnInst4356_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_returnInst4360_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_returnInst4360( FOLLOW_SEMICOLON_in_returnInst4360_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RETURN_in_returnInst4374_bits[]	= { ANTLR_UINT64_LIT(0x0000100000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RETURN_in_returnInst4374( FOLLOW_RETURN_in_returnInst4374_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_returnInst4378_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_returnInst4378( FOLLOW_SEMICOLON_in_returnInst4378_bits, 1 );

static	ANTLR_BITWORD FOLLOW_WHILE_in_whileInst4411_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_WHILE_in_whileInst4411( FOLLOW_WHILE_in_whileInst4411_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_whileInst4413_bits[]	= { ANTLR_UINT64_LIT(0x0012E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_whileInst4413( FOLLOW_LBRACKET_in_whileInst4413_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_whileInst4415_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_whileInst4415( FOLLOW_expr_in_whileInst4415_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_whileInst4417_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_whileInst4417( FOLLOW_RBRACKET_in_whileInst4417_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_whileInst4419_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_whileInst4419( FOLLOW_instruction_list_in_whileInst4419_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DO_in_doInst4455_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DO_in_doInst4455( FOLLOW_DO_in_doInst4455_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_doInst4457_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_doInst4457( FOLLOW_instruction_list_in_doInst4457_bits, 1 );

static	ANTLR_BITWORD FOLLOW_WHILE_in_doInst4459_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_WHILE_in_doInst4459( FOLLOW_WHILE_in_doInst4459_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_doInst4461_bits[]	= { ANTLR_UINT64_LIT(0x0012E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_doInst4461( FOLLOW_LBRACKET_in_doInst4461_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_doInst4463_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_doInst4463( FOLLOW_expr_in_doInst4463_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_doInst4465_bits[]	= { ANTLR_UINT64_LIT(0x0000100000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_doInst4465( FOLLOW_RBRACKET_in_doInst4465_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_doInst4467_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_doInst4467( FOLLOW_SEMICOLON_in_doInst4467_bits, 1 );

static	ANTLR_BITWORD FOLLOW_FOR_in_forInst4499_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_FOR_in_forInst4499( FOLLOW_FOR_in_forInst4499_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_forInst4501_bits[]	= { ANTLR_UINT64_LIT(0x0032F016C98601B0), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_forInst4501( FOLLOW_LBRACKET_in_forInst4501_bits, 2 );

static	ANTLR_BITWORD FOLLOW_instructionScalar_in_forInst4529_bits[]	= { ANTLR_UINT64_LIT(0x0000100000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instructionScalar_in_forInst4529( FOLLOW_instructionScalar_in_forInst4529_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_forInst4535_bits[]	= { ANTLR_UINT64_LIT(0x0012F016C98601B0), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_forInst4535( FOLLOW_SEMICOLON_in_forInst4535_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_forInst4560_bits[]	= { ANTLR_UINT64_LIT(0x0000100000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_forInst4560( FOLLOW_expr_in_forInst4560_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_forInst4574_bits[]	= { ANTLR_UINT64_LIT(0x0032E216C98601B0), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_forInst4574( FOLLOW_SEMICOLON_in_forInst4574_bits, 2 );

static	ANTLR_BITWORD FOLLOW_instructionScalar_in_forInst4599_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instructionScalar_in_forInst4599( FOLLOW_instructionScalar_in_forInst4599_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_forInst4605_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_forInst4605( FOLLOW_RBRACKET_in_forInst4605_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_forInst4630_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_forInst4630( FOLLOW_instruction_list_in_forInst4630_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ELSE_in_elsemiddle4678_bits[]	= { ANTLR_UINT64_LIT(0x0000000010000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ELSE_in_elsemiddle4678( FOLLOW_ELSE_in_elsemiddle4678_bits, 1 );

static	ANTLR_BITWORD FOLLOW_IF_in_elsemiddle4680_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_IF_in_elsemiddle4680( FOLLOW_IF_in_elsemiddle4680_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_elsemiddle4682_bits[]	= { ANTLR_UINT64_LIT(0x0012E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_elsemiddle4682( FOLLOW_LBRACKET_in_elsemiddle4682_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_elsemiddle4684_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_elsemiddle4684( FOLLOW_expr_in_elsemiddle4684_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_elsemiddle4686_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_elsemiddle4686( FOLLOW_RBRACKET_in_elsemiddle4686_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_elsemiddle4688_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_elsemiddle4688( FOLLOW_instruction_list_in_elsemiddle4688_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ELSE_in_endif4721_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ELSE_in_endif4721( FOLLOW_ELSE_in_endif4721_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_endif4723_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_endif4723( FOLLOW_instruction_list_in_endif4723_bits, 1 );

static	ANTLR_BITWORD FOLLOW_IF_in_ifInst4753_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_IF_in_ifInst4753( FOLLOW_IF_in_ifInst4753_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_ifInst4755_bits[]	= { ANTLR_UINT64_LIT(0x0012E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_ifInst4755( FOLLOW_LBRACKET_in_ifInst4755_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_ifInst4757_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_ifInst4757( FOLLOW_expr_in_ifInst4757_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_ifInst4759_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_ifInst4759( FOLLOW_RBRACKET_in_ifInst4759_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_ifInst4761_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_ifInst4761( FOLLOW_instruction_list_in_ifInst4761_bits, 1 );

static	ANTLR_BITWORD FOLLOW_elsemiddle_in_ifInst4778_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_elsemiddle_in_ifInst4778( FOLLOW_elsemiddle_in_ifInst4778_bits, 1 );

static	ANTLR_BITWORD FOLLOW_endif_in_ifInst4798_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_endif_in_ifInst4798( FOLLOW_endif_in_ifInst4798_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ifInst_in_instruction4832_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ifInst_in_instruction4832( FOLLOW_ifInst_in_instruction4832_bits, 1 );

static	ANTLR_BITWORD FOLLOW_whileInst_in_instruction4853_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_whileInst_in_instruction4853( FOLLOW_whileInst_in_instruction4853_bits, 1 );

static	ANTLR_BITWORD FOLLOW_doInst_in_instruction4870_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_doInst_in_instruction4870( FOLLOW_doInst_in_instruction4870_bits, 1 );

static	ANTLR_BITWORD FOLLOW_forInst_in_instruction4890_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_forInst_in_instruction4890( FOLLOW_forInst_in_instruction4890_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instructionScalar_in_instruction4910_bits[]	= { ANTLR_UINT64_LIT(0x0000100000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instructionScalar_in_instruction4910( FOLLOW_instructionScalar_in_instruction4910_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_instruction4912_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_instruction4912( FOLLOW_SEMICOLON_in_instruction4912_bits, 1 );

static	ANTLR_BITWORD FOLLOW_breakInst_in_instruction4925_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_breakInst_in_instruction4925( FOLLOW_breakInst_in_instruction4925_bits, 1 );

static	ANTLR_BITWORD FOLLOW_continueInst_in_instruction4938_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_continueInst_in_instruction4938( FOLLOW_continueInst_in_instruction4938_bits, 1 );

static	ANTLR_BITWORD FOLLOW_returnInst_in_instruction4951_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_returnInst_in_instruction4951( FOLLOW_returnInst_in_instruction4951_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_instruction4964_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_instruction4964( FOLLOW_instruction_list_in_instruction4964_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACE_in_instruction_list4996_bits[]	= { ANTLR_UINT64_LIT(0x0072E517DB8721F0), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_instruction_list4996( FOLLOW_LBRACE_in_instruction_list4996_bits, 2 );

static	ANTLR_BITWORD FOLLOW_instruction_in_instruction_list5013_bits[]	= { ANTLR_UINT64_LIT(0x0072E517DB8721F0), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_in_instruction_list5013( FOLLOW_instruction_in_instruction_list5013_bits, 2 );

static	ANTLR_BITWORD FOLLOW_RBRACE_in_instruction_list5030_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_instruction_list5030( FOLLOW_RBRACE_in_instruction_list5030_bits, 1 );

static	ANTLR_BITWORD FOLLOW_param_in_function5060_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_param_in_function5060( FOLLOW_param_in_function5060_bits, 1 );

static	ANTLR_BITWORD FOLLOW_parameterList_in_function5062_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_parameterList_in_function5062( FOLLOW_parameterList_in_function5062_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_function5064_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_function5064( FOLLOW_instruction_list_in_function5064_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRUCT_in_structDecl5094_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRUCT_in_structDecl5094( FOLLOW_STRUCT_in_structDecl5094_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_structDecl5096_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_structDecl5096( FOLLOW_TYPE_in_structDecl5096_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACE_in_structDecl5112_bits[]	= { ANTLR_UINT64_LIT(0x0032A10081000120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_structDecl5112( FOLLOW_LBRACE_in_structDecl5112_bits, 1 );

static	ANTLR_BITWORD FOLLOW_declaration_in_structDecl5117_bits[]	= { ANTLR_UINT64_LIT(0x0000100000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_declaration_in_structDecl5117( FOLLOW_declaration_in_structDecl5117_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_structDecl5121_bits[]	= { ANTLR_UINT64_LIT(0x0032A10081000120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_structDecl5121( FOLLOW_SEMICOLON_in_structDecl5121_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACE_in_structDecl5126_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_structDecl5126( FOLLOW_RBRACE_in_structDecl5126_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CLASS_in_classDecl5179_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CLASS_in_classDecl5179( FOLLOW_CLASS_in_classDecl5179_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_classDecl5183_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_classDecl5183( FOLLOW_TYPE_in_classDecl5183_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CLASS_in_classDecl5203_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CLASS_in_classDecl5203( FOLLOW_CLASS_in_classDecl5203_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_classDecl5207_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_classDecl5207( FOLLOW_TYPE_in_classDecl5207_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COLON_in_classDecl5209_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COLON_in_classDecl5209( FOLLOW_COLON_in_classDecl5209_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_classDecl5213_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_classDecl5213( FOLLOW_TYPE_in_classDecl5213_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACE_in_classDecl5240_bits[]	= { ANTLR_UINT64_LIT(0x003AA14081000120), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_classDecl5240( FOLLOW_LBRACE_in_classDecl5240_bits, 2 );

static	ANTLR_BITWORD FOLLOW_declaration_in_classDecl5283_bits[]	= { ANTLR_UINT64_LIT(0x0000100000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_declaration_in_classDecl5283( FOLLOW_declaration_in_classDecl5283_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_classDecl5287_bits[]	= { ANTLR_UINT64_LIT(0x003AA14081000120), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_classDecl5287( FOLLOW_SEMICOLON_in_classDecl5287_bits, 2 );

static	ANTLR_BITWORD FOLLOW_inherited_declaration_in_classDecl5313_bits[]	= { ANTLR_UINT64_LIT(0x0000100000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_inherited_declaration_in_classDecl5313( FOLLOW_inherited_declaration_in_classDecl5313_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_classDecl5317_bits[]	= { ANTLR_UINT64_LIT(0x003AA14081000120), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_classDecl5317( FOLLOW_SEMICOLON_in_classDecl5317_bits, 2 );

static	ANTLR_BITWORD FOLLOW_function_in_classDecl5343_bits[]	= { ANTLR_UINT64_LIT(0x003AA14081000120), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl5343( FOLLOW_function_in_classDecl5343_bits, 2 );

static	ANTLR_BITWORD FOLLOW_VIRTUAL_in_classDecl5372_bits[]	= { ANTLR_UINT64_LIT(0x0032A00081000120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_VIRTUAL_in_classDecl5372( FOLLOW_VIRTUAL_in_classDecl5372_bits, 1 );

static	ANTLR_BITWORD FOLLOW_function_in_classDecl5376_bits[]	= { ANTLR_UINT64_LIT(0x003AA14081000120), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl5376( FOLLOW_function_in_classDecl5376_bits, 2 );

static	ANTLR_BITWORD FOLLOW_OVERRIDE_in_classDecl5402_bits[]	= { ANTLR_UINT64_LIT(0x0032A00081000120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_OVERRIDE_in_classDecl5402( FOLLOW_OVERRIDE_in_classDecl5402_bits, 1 );

static	ANTLR_BITWORD FOLLOW_function_in_classDecl5406_bits[]	= { ANTLR_UINT64_LIT(0x003AA14081000120), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl5406( FOLLOW_function_in_classDecl5406_bits, 2 );

static	ANTLR_BITWORD FOLLOW_RBRACE_in_classDecl5442_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_classDecl5442( FOLLOW_RBRACE_in_classDecl5442_bits, 1 );

static	ANTLR_BITWORD FOLLOW_INCLUDE_in_inc5472_bits[]	= { ANTLR_UINT64_LIT(0x0000400000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_INCLUDE_in_inc5472( FOLLOW_INCLUDE_in_inc5472_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRING_in_inc5474_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_in_inc5474( FOLLOW_STRING_in_inc5474_bits, 1 );

static	ANTLR_BITWORD FOLLOW_function_in_program5520_bits[]	= { ANTLR_UINT64_LIT(0x0033A000A1000322) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_program5520( FOLLOW_function_in_program5520_bits, 1 );

static	ANTLR_BITWORD FOLLOW_structDecl_in_program5542_bits[]	= { ANTLR_UINT64_LIT(0x0033A000A1000322) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_structDecl_in_program5542( FOLLOW_structDecl_in_program5542_bits, 1 );

static	ANTLR_BITWORD FOLLOW_classDecl_in_program5562_bits[]	= { ANTLR_UINT64_LIT(0x0033A000A1000322) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_classDecl_in_program5562( FOLLOW_classDecl_in_program5562_bits, 1 );

static	ANTLR_BITWORD FOLLOW_inc_in_program5583_bits[]	= { ANTLR_UINT64_LIT(0x0033A000A1000322) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_inc_in_program5583( FOLLOW_inc_in_program5583_bits, 1 );









scripting::type*
WNScriptASTParser::objectType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    const ImplTraits::CommonTokenType* TYPE1 = NULL;
    const ImplTraits::CommonTokenType* STRING_TYPE2 = NULL;






        node = nullptr;



    {
        {

            ANTLR_UINT32 alt1;

            alt1=2;

            switch ( this->LA(1) )
            {
            case TYPE:
            	{
            		alt1=1;
            	}
                break;
            case STRING_TYPE:
            	{
            		alt1=2;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 1 );
                ex->set_state( 0 );


                goto ruleobjectTypeEx;

            }

            switch (alt1)
            {
        	case 1:
        	    {
        	        TYPE1 =  this->matchToken(TYPE, &FOLLOW_TYPE_in_objectType1213);
        	        if  (this->hasException())
        	        {
        	            goto ruleobjectTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, (TYPE1->getText()).c_str()); SET_LOCATION(node, TYPE1);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        STRING_TYPE2 =  this->matchToken(STRING_TYPE, &FOLLOW_STRING_TYPE_in_objectType1228);
        	        if  (this->hasException())
        	        {
        	            goto ruleobjectTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::string_type); SET_LOCATION(node, STRING_TYPE2);
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleobjectTypeEx;
    ruleobjectTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::type*
WNScriptASTParser::scalarType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    const ImplTraits::CommonTokenType* VOID_TYPE3 = NULL;
    const ImplTraits::CommonTokenType* INT_TYPE4 = NULL;
    const ImplTraits::CommonTokenType* FLOAT_TYPE5 = NULL;
    const ImplTraits::CommonTokenType* CHAR_TYPE6 = NULL;
    const ImplTraits::CommonTokenType* BOOL_TYPE7 = NULL;






        node = nullptr;



    {
        {

            ANTLR_UINT32 alt2;

            alt2=5;

            switch ( this->LA(1) )
            {
            case VOID_TYPE:
            	{
            		alt2=1;
            	}
                break;
            case INT_TYPE:
            	{
            		alt2=2;
            	}
                break;
            case FLOAT_TYPE:
            	{
            		alt2=3;
            	}
                break;
            case CHAR_TYPE:
            	{
            		alt2=4;
            	}
                break;
            case BOOL_TYPE:
            	{
            		alt2=5;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 2 );
                ex->set_state( 0 );


                goto rulescalarTypeEx;

            }

            switch (alt2)
            {
        	case 1:
        	    {
        	        VOID_TYPE3 =  this->matchToken(VOID_TYPE, &FOLLOW_VOID_TYPE_in_scalarType1257);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::void_type); SET_LOCATION(node, VOID_TYPE3);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        INT_TYPE4 =  this->matchToken(INT_TYPE, &FOLLOW_INT_TYPE_in_scalarType1269);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::int_type); SET_LOCATION(node, INT_TYPE4);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        FLOAT_TYPE5 =  this->matchToken(FLOAT_TYPE, &FOLLOW_FLOAT_TYPE_in_scalarType1281);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::float_type); SET_LOCATION(node, FLOAT_TYPE5);
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        CHAR_TYPE6 =  this->matchToken(CHAR_TYPE, &FOLLOW_CHAR_TYPE_in_scalarType1293);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::char_type); SET_LOCATION(node, CHAR_TYPE6);
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        BOOL_TYPE7 =  this->matchToken(BOOL_TYPE, &FOLLOW_BOOL_TYPE_in_scalarType1305);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::bool_type); SET_LOCATION(node, BOOL_TYPE7);
        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulescalarTypeEx;
    rulescalarTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::type*
WNScriptASTParser::arrayType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    const ImplTraits::CommonTokenType* LSQBRACKET10 = NULL;
    const ImplTraits::CommonTokenType* RSQBRACKET12 = NULL;
    scripting::type* scalarType8;
    scripting::type* objectType9;
    scripting::constant_expression* constant11;





        node = nullptr;



    {
        {
            {
                int alt3=2;
                switch ( this->LA(1) )
                {
                case BOOL_TYPE:
                case CHAR_TYPE:
                case FLOAT_TYPE:
                case INT_TYPE:
                case VOID_TYPE:
                	{
                		alt3=1;
                	}
                    break;
                case STRING_TYPE:
                case TYPE:
                	{
                		alt3=2;
                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 3 );
                    ex->set_state( 0 );


                    goto rulearrayTypeEx;

                }

                switch (alt3)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_scalarType_in_arrayType1333);
            	        scalarType8=scalarType();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulearrayTypeEx;
            	        }


            	        {
            	             node = scalarType8
            	            ; SET_LOCATION_FROM_NODE(node, scalarType8
            	            );
            	            						node = m_allocator->construct<scripting::array_type>(m_allocator, node);
            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        this->followPush(FOLLOW_objectType_in_arrayType1353);
            	        objectType9=objectType();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulearrayTypeEx;
            	        }


            	        {
            	             node = objectType9
            	            ; SET_LOCATION_FROM_NODE(node, objectType9
            	            );
            	                                node->set_reference_type(scripting::reference_type::unique);
            	            					node = m_allocator->construct<scripting::array_type>(m_allocator, node);
            	        }


            	    }
            	    break;

                }
            }

            {
                LSQBRACKET10 =  this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_arrayType1361);
                if  (this->hasException())
                {
                    goto rulearrayTypeEx;
                }


                {
                     SET_LOCATION(node, LSQBRACKET10);
                }


            }


            {
                int alt4=2;
                switch ( this->LA(1) )
                {
                    case BOOL:
                    case BOOL_TYPE:
                    case CHAR:
                    case CHAR_TYPE:
                    case FLOAT:
                    case FLOAT_TYPE:
                    case INT:
                    case INT_TYPE:
                    case NULLTOK:
                    case STRING:
                    case VOID_TYPE:
                    	{
                    		alt4=1;
                    	}
                        break;
                }

                switch (alt4)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_constant_in_arrayType1370);
            	        constant11=constant();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulearrayTypeEx;
            	        }


            	        {
            	             scripting::cast_to<scripting::array_type>(node)->set_constant(constant11
            	            );
            	        }


            	    }
            	    break;

                }
            }

            {
                RSQBRACKET12 =  this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_arrayType1388);
                if  (this->hasException())
                {
                    goto rulearrayTypeEx;
                }


                {
                     SET_END_LOCATION(node, RSQBRACKET12);
                }


            }


        }

    }
    goto rulearrayTypeEx;
    rulearrayTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::type*
WNScriptASTParser::dynamicArrayType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    const ImplTraits::CommonTokenType* DRSQBRACKET14 = NULL;
    const ImplTraits::CommonTokenType* DLSQBRACKET15 = NULL;
    const ImplTraits::CommonTokenType* DRSQBRACKET17 = NULL;
    const ImplTraits::CommonTokenType* DLSQBRACKET18 = NULL;
    scripting::type* scalarType13;
    scripting::type* objectType16;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt5;

            alt5=2;

            switch ( this->LA(1) )
            {
            case BOOL_TYPE:
            case CHAR_TYPE:
            case FLOAT_TYPE:
            case INT_TYPE:
            case VOID_TYPE:
            	{
            		alt5=1;
            	}
                break;
            case STRING_TYPE:
            case TYPE:
            	{
            		alt5=2;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 5 );
                ex->set_state( 0 );


                goto ruledynamicArrayTypeEx;

            }

            switch (alt5)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_dynamicArrayType1417);
        	        scalarType13=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruledynamicArrayTypeEx;
        	        }


        	        {
        	             node = scalarType13
        	            ; SET_LOCATION_FROM_NODE(node, scalarType13
        	            );
        	        }


        	        {
        	            DLSQBRACKET15 =  this->matchToken(DLSQBRACKET, &FOLLOW_DLSQBRACKET_in_dynamicArrayType1433);
        	            if  (this->hasException())
        	            {
        	                goto ruledynamicArrayTypeEx;
        	            }


        	            DRSQBRACKET14 =  this->matchToken(DRSQBRACKET, &FOLLOW_DRSQBRACKET_in_dynamicArrayType1435);
        	            if  (this->hasException())
        	            {
        	                goto ruledynamicArrayTypeEx;
        	            }


        	            {

        	                                   SET_END_LOCATION(node, DRSQBRACKET14);
        	                                   node = m_allocator->construct<scripting::dynamic_array_type>(m_allocator, node);
        	                                   SET_LOCATION(node, DLSQBRACKET15);
        	                                   SET_END_LOCATION(node, DRSQBRACKET14);

        	            }


        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_objectType_in_dynamicArrayType1446);
        	        objectType16=objectType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruledynamicArrayTypeEx;
        	        }


        	        {
        	             node = objectType16
        	            ; SET_LOCATION_FROM_NODE(node, objectType16
        	            );
        	                                node->set_reference_type(scripting::reference_type::unique);
        	        }


        	        {
        	            DLSQBRACKET18 =  this->matchToken(DLSQBRACKET, &FOLLOW_DLSQBRACKET_in_dynamicArrayType1462);
        	            if  (this->hasException())
        	            {
        	                goto ruledynamicArrayTypeEx;
        	            }


        	            DRSQBRACKET17 =  this->matchToken(DRSQBRACKET, &FOLLOW_DRSQBRACKET_in_dynamicArrayType1464);
        	            if  (this->hasException())
        	            {
        	                goto ruledynamicArrayTypeEx;
        	            }


        	            {

        	                                   SET_END_LOCATION(node, DRSQBRACKET17);
        	                                   node = m_allocator->construct<scripting::dynamic_array_type>(m_allocator, node);
        	                                   SET_LOCATION(node, DLSQBRACKET18);
        	                                   SET_END_LOCATION(node, DRSQBRACKET17);

        	            }


        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruledynamicArrayTypeEx;
    ruledynamicArrayTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::type*
WNScriptASTParser::compoundType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    scripting::type* objectType19;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_objectType_in_compoundType1492);
            objectType19=objectType();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecompoundTypeEx;
            }


            {
                 node = objectType19
                ;
            }


        }

    }
    goto rulecompoundTypeEx;
    rulecompoundTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::type*
WNScriptASTParser::nonArrayType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    scripting::type* scalarType20;
    scripting::type* objectType21;





      node = nullptr;



    {
        {

            ANTLR_UINT32 alt6;

            alt6=2;

            switch ( this->LA(1) )
            {
            case BOOL_TYPE:
            case CHAR_TYPE:
            case FLOAT_TYPE:
            case INT_TYPE:
            case VOID_TYPE:
            	{
            		alt6=1;
            	}
                break;
            case STRING_TYPE:
            case TYPE:
            	{
            		alt6=2;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 6 );
                ex->set_state( 0 );


                goto rulenonArrayTypeEx;

            }

            switch (alt6)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_nonArrayType1519);
        	        scalarType20=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenonArrayTypeEx;
        	        }


        	        {
        	             node = scalarType20
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_objectType_in_nonArrayType1529);
        	        objectType21=objectType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenonArrayTypeEx;
        	        }


        	        {
        	             node = objectType21
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulenonArrayTypeEx;
    rulenonArrayTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::type*
WNScriptASTParser::type()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    scripting::type* compoundType22;
    scripting::type* arrayType23;
    scripting::type* dynamicArrayType24;
    scripting::type* scalarType25;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt7;

            alt7=4;

            switch ( this->LA(1) )
            {
            case TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case EOF:
            			{
            				alt7=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				alt7=2;
            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				alt7=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 1 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case STRING_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case EOF:
            			{
            				alt7=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				alt7=2;
            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				alt7=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 2 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case VOID_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LSQBRACKET:
            			{
            				alt7=2;
            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				alt7=3;
            			}
            		    break;
            		case EOF:
            			{
            				alt7=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 3 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case INT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LSQBRACKET:
            			{
            				alt7=2;
            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				alt7=3;
            			}
            		    break;
            		case EOF:
            			{
            				alt7=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 4 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case FLOAT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LSQBRACKET:
            			{
            				alt7=2;
            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				alt7=3;
            			}
            		    break;
            		case EOF:
            			{
            				alt7=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 5 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case CHAR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LSQBRACKET:
            			{
            				alt7=2;
            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				alt7=3;
            			}
            		    break;
            		case EOF:
            			{
            				alt7=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 6 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case BOOL_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LSQBRACKET:
            			{
            				alt7=2;
            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				alt7=3;
            			}
            		    break;
            		case EOF:
            			{
            				alt7=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 7 );


            		    goto ruletypeEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 7 );
                ex->set_state( 0 );


                goto ruletypeEx;

            }

            switch (alt7)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_compoundType_in_type1559);
        	        compoundType22=compoundType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruletypeEx;
        	        }


        	        {
        	             node = compoundType22
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_arrayType_in_type1569);
        	        arrayType23=arrayType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruletypeEx;
        	        }


        	        {
        	             node = arrayType23
        	            ;
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        this->followPush(FOLLOW_dynamicArrayType_in_type1579);
        	        dynamicArrayType24=dynamicArrayType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruletypeEx;
        	        }


        	        {
        	             node = dynamicArrayType24
        	            ;
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_type1589);
        	        scalarType25=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruletypeEx;
        	        }


        	        {
        	             node = scalarType25
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruletypeEx;
    ruletypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::parameter*
WNScriptASTParser::param()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::parameter* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* aa = NULL;
    const ImplTraits::CommonTokenType* dd = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    const ImplTraits::CommonTokenType* e = NULL;
    const ImplTraits::CommonTokenType* g = NULL;
    const ImplTraits::CommonTokenType* SHARED_REF27 = NULL;
    const ImplTraits::CommonTokenType* WEAK_REF28 = NULL;
    scripting::type* bb;
    scripting::type* cc;
    scripting::type* b;
    scripting::type* d;
    scripting::type* f;
    scripting::type* scalarType26;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt8;

            alt8=7;

            switch ( this->LA(1) )
            {
            case VOID_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt8=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				alt8=3;
            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				alt8=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 8 );
            		    ex->set_state( 1 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case INT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt8=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				alt8=3;
            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				alt8=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 8 );
            		    ex->set_state( 2 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case FLOAT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt8=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				alt8=3;
            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				alt8=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 8 );
            		    ex->set_state( 3 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case CHAR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt8=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				alt8=3;
            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				alt8=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 8 );
            		    ex->set_state( 4 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case BOOL_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt8=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				alt8=3;
            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				alt8=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 8 );
            		    ex->set_state( 5 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt8=2;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				alt8=3;
            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				alt8=4;
            			}
            		    break;
            		case QUESTION:
            			{
            				alt8=7;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 8 );
            		    ex->set_state( 6 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case STRING_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt8=2;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				alt8=3;
            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				alt8=4;
            			}
            		    break;
            		case QUESTION:
            			{
            				alt8=7;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 8 );
            		    ex->set_state( 7 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case SHARED_REF:
            	{
            		alt8=5;
            	}
                break;
            case WEAK_REF:
            	{
            		alt8=6;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 8 );
                ex->set_state( 0 );


                goto ruleparamEx;

            }

            switch (alt8)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_param1621);
        	        scalarType26=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        a =  this->matchToken(ID, &FOLLOW_ID_in_param1625);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                        node = m_allocator->construct<scripting::parameter>(m_allocator, scalarType26
        	            , (a->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            scalarType26
        	            ); SET_END_LOCATION(node, a);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_compoundType_in_param1640);
        	        bb=compoundType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        aa =  this->matchToken(ID, &FOLLOW_ID_in_param1644);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                        bb
        	            ->set_reference_type(scripting::reference_type::unique);
        	                        node = m_allocator->construct<scripting::parameter>(m_allocator, bb
        	            , (aa->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            bb
        	            ); SET_END_LOCATION(node, aa);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        this->followPush(FOLLOW_arrayType_in_param1659);
        	        cc=arrayType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        dd =  this->matchToken(ID, &FOLLOW_ID_in_param1663);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                        cc
        	            ->set_reference_type(scripting::reference_type::unique);
        	                        node = m_allocator->construct<scripting::parameter>(m_allocator, cc
        	            , (dd->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            cc
        	            ); SET_END_LOCATION(node, dd);
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        this->followPush(FOLLOW_dynamicArrayType_in_param1678);
        	        cc=dynamicArrayType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        dd =  this->matchToken(ID, &FOLLOW_ID_in_param1682);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                        cc
        	            ->set_reference_type(scripting::reference_type::raw);
        	                        node = m_allocator->construct<scripting::parameter>(m_allocator, cc
        	            , (dd->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            cc
        	            ); SET_END_LOCATION(node, dd);
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        SHARED_REF27 =  this->matchToken(SHARED_REF, &FOLLOW_SHARED_REF_in_param1695);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        this->followPush(FOLLOW_compoundType_in_param1699);
        	        b=compoundType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        c =  this->matchToken(ID, &FOLLOW_ID_in_param1703);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                       b
        	            ->set_reference_type(scripting::reference_type::shared);
        	                       node = m_allocator->construct<scripting::parameter>(m_allocator, b
        	            , (c->getText()).c_str()); SET_LOCATION(node, SHARED_REF27); SET_END_LOCATION(node, c);

        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	        WEAK_REF28 =  this->matchToken(WEAK_REF, &FOLLOW_WEAK_REF_in_param1716);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        this->followPush(FOLLOW_compoundType_in_param1720);
        	        d=compoundType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        e =  this->matchToken(ID, &FOLLOW_ID_in_param1725);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                       d
        	            ->set_reference_type(scripting::reference_type::weak);
        	                       node = m_allocator->construct<scripting::parameter>(m_allocator, d
        	            , (e->getText()).c_str()); SET_LOCATION(node, WEAK_REF28); SET_END_LOCATION(node, e);

        	        }


        	    }
        	    break;
        	case 7:
        	    {
        	        this->followPush(FOLLOW_compoundType_in_param1740);
        	        f=compoundType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	         this->matchToken(QUESTION, &FOLLOW_QUESTION_in_param1742);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        g =  this->matchToken(ID, &FOLLOW_ID_in_param1747);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                       f
        	            ->set_reference_type(scripting::reference_type::nullable);
        	                       node = m_allocator->construct<scripting::parameter>(m_allocator, f
        	            , (g->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            f
        	            ); SET_END_LOCATION(node, g);

        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleparamEx;
    ruleparamEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::parameter_list*
WNScriptASTParser::paramList()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::parameter_list* node;


    scripting::parameter* a;
    scripting::parameter* b;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_param_in_paramList1779);
            a=param();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleparamListEx;
            }


            {
                 node = m_allocator->construct<scripting::parameter_list>(m_allocator, a
                ); SET_LOCATION_FROM_NODE(node, a
                );
            }



            for (;;)
            {
                int alt9=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt9=1;
                	}
                    break;

                }

                switch (alt9)
                {
            	case 1:
            	    {
            	         this->matchToken(COMMA, &FOLLOW_COMMA_in_paramList1792);
            	        if  (this->hasException())
            	        {
            	            goto ruleparamListEx;
            	        }


            	        this->followPush(FOLLOW_param_in_paramList1796);
            	        b=param();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleparamListEx;
            	        }


            	        {
            	             node
            	            ->add_parameter(b
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop9;
            	    break;
                }
            }
            loop9: ;


        }

    }
    goto ruleparamListEx;
    ruleparamListEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::parameter_list*
WNScriptASTParser::parameterList()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::parameter_list* node;


    const ImplTraits::CommonTokenType* LBRACKET30 = NULL;
    const ImplTraits::CommonTokenType* RBRACKET31 = NULL;
    scripting::parameter_list* paramList29;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt10;

            alt10=2;

            switch ( this->LA(1) )
            {
            case LBRACKET:
            	{
            		switch ( this->LA(2) )
            		{
            		case RBRACKET:
            			{
            				alt10=2;
            			}
            		    break;
            		case BOOL_TYPE:
            		case CHAR_TYPE:
            		case FLOAT_TYPE:
            		case INT_TYPE:
            		case SHARED_REF:
            		case STRING_TYPE:
            		case TYPE:
            		case VOID_TYPE:
            		case WEAK_REF:
            			{
            				alt10=1;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 10 );
            		    ex->set_state( 1 );


            		    goto ruleparameterListEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 10 );
                ex->set_state( 0 );


                goto ruleparameterListEx;

            }

            switch (alt10)
            {
        	case 1:
        	    {
        	        LBRACKET30 =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_parameterList1828);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        this->followPush(FOLLOW_paramList_in_parameterList1830);
        	        paramList29=paramList();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        RBRACKET31 =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_parameterList1832);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        {
        	             node = paramList29
        	            ; SET_LOCATION(node, LBRACKET30); SET_END_LOCATION(node, RBRACKET31);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	         this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_parameterList1849);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	         this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_parameterList1851);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        {
        	             node = nullptr;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleparameterListEx;
    ruleparameterListEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::assign_type
WNScriptASTParser::assign_type()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::assign_type node;







        node = scripting::assign_type::equal;



    {
        {

            ANTLR_UINT32 alt11;

            alt11=6;

            switch ( this->LA(1) )
            {
            case 71:
            	{
            		alt11=1;
            	}
                break;
            case 63:
            	{
            		alt11=2;
            	}
                break;
            case 65:
            	{
            		alt11=3;
            	}
                break;
            case 61:
            	{
            		alt11=4;
            	}
                break;
            case 68:
            	{
            		alt11=5;
            	}
                break;
            case 58:
            	{
            		alt11=6;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 11 );
                ex->set_state( 0 );


                goto ruleassign_typeEx;

            }

            switch (alt11)
            {
        	case 1:
        	    {
        	         this->matchToken(71, &FOLLOW_71_in_assign_type1887);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::equal;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	         this->matchToken(63, &FOLLOW_63_in_assign_type1901);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::add_equal;
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	         this->matchToken(65, &FOLLOW_65_in_assign_type1914);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::sub_equal;
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	         this->matchToken(61, &FOLLOW_61_in_assign_type1927);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::mult_equal;
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	         this->matchToken(68, &FOLLOW_68_in_assign_type1940);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::div_equal;
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	         this->matchToken(58, &FOLLOW_58_in_assign_type1953);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::mod_equal;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleassign_typeEx;
    ruleassign_typeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::arg_list*
WNScriptASTParser::arglist()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::arg_list* node;


    scripting::expression* a;
    scripting::expression* d;





        node = m_allocator->construct<scripting::arg_list>(m_allocator);



    {
        {
            {
                {
                    this->followPush(FOLLOW_expr_in_arglist2011);
                    a=expr();

                    this->followPop();
                    if  (this->hasException())
                    {
                        goto rulearglistEx;
                    }


                    {
                         node->add_expression(a
                        ); SET_LOCATION_FROM_NODE(node, a
                        );
                    }


                }


            }



            for (;;)
            {
                int alt13=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt13=1;
                	}
                    break;

                }

                switch (alt13)
                {
            	case 1:
            	    {
            	         this->matchToken(COMMA, &FOLLOW_COMMA_in_arglist2044);
            	        if  (this->hasException())
            	        {
            	            goto rulearglistEx;
            	        }


            	        {
            	            int alt12=2;
            	            switch ( this->LA(1) )
            	            {
            	            case BOOL:
            	            case BOOL_TYPE:
            	            case CHAR:
            	            case CHAR_TYPE:
            	            case DOUBDEC:
            	            case DOUBINC:
            	            case FLOAT:
            	            case FLOAT_TYPE:
            	            case ID:
            	            case INT:
            	            case INT_TYPE:
            	            case LBRACKET:
            	            case LENGTH:
            	            case NULLTOK:
            	            case SHARED_REF:
            	            case STRING:
            	            case STRING_TYPE:
            	            case TYPE:
            	            case VOID_TYPE:
            	            case 64:
            	            	{
            	            		alt12=1;
            	            	}
            	                break;
            	            case COMMA:
            	            case RBRACKET:
            	            	{
            	            		alt12=2;
            	            	}
            	                break;

            	            default:
            	                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 12 );
            	                ex->set_state( 0 );


            	                goto rulearglistEx;

            	            }

            	            switch (alt12)
            	            {
            	        	case 1:
            	        	    {
            	        	        {
            	        	            this->followPush(FOLLOW_expr_in_arglist2088);
            	        	            d=expr();

            	        	            this->followPop();
            	        	            if  (this->hasException())
            	        	            {
            	        	                goto rulearglistEx;
            	        	            }


            	        	            {
            	        	                 node->add_expression(d
            	        	                , true); SET_END_LOCATION_FROM_NODE(node, d
            	        	                );
            	        	            }


            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    {
            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

            	default:
            	    goto loop13;
            	    break;
                }
            }
            loop13: ;


        }

    }
    goto rulearglistEx;
    rulearglistEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::expr()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* cond_ex32;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_cond_ex_in_expr2163);
            cond_ex32=cond_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexprEx;
            }


            {
                 node = cond_ex32
                ;
            }


        }

    }
    goto ruleexprEx;
    ruleexprEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::cond_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* or_ex33;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_or_ex_in_cond_ex2201);
            or_ex33=or_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecond_exEx;
            }


            {
                 node = or_ex33
                ;
            }


            {
                int alt14=2;
                switch ( this->LA(1) )
                {
                    case QUESTION:
                    	{
                    		alt14=1;
                    	}
                        break;
                }

                switch (alt14)
                {
            	case 1:
            	    {
            	         this->matchToken(QUESTION, &FOLLOW_QUESTION_in_cond_ex2224);
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	        this->followPush(FOLLOW_expr_in_cond_ex2228);
            	        b=expr();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	         this->matchToken(COLON, &FOLLOW_COLON_in_cond_ex2230);
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	        this->followPush(FOLLOW_cond_ex_in_cond_ex2234);
            	        c=cond_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	        {
            	             node = m_allocator->construct<scripting::cond_expression>(m_allocator, node, b
            	            , c
            	            );  SET_LOCATION_FROM_NODE(node, or_ex33
            	            ); SET_END_LOCATION_FROM_NODE(node, c
            	            );
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    goto rulecond_exEx;
    rulecond_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::or_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_and_ex_in_or_ex2281);
            a=and_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleor_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt15=2;
                switch ( this->LA(1) )
                {
                case 75:
                	{
                		alt15=1;
                	}
                    break;

                }

                switch (alt15)
                {
            	case 1:
            	    {
            	         this->matchToken(75, &FOLLOW_75_in_or_ex2298);
            	        if  (this->hasException())
            	        {
            	            goto ruleor_exEx;
            	        }


            	        this->followPush(FOLLOW_and_ex_in_or_ex2302);
            	        b=and_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleor_exEx;
            	        }


            	        {
            	             node = m_allocator->construct<scripting::short_circuit_expression>(m_allocator, scripting::short_circuit_type::or_operator, node, b
            	            ); SET_LOCATION_FROM_NODE(node, a
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop15;
            	    break;
                }
            }
            loop15: ;


        }

    }
    goto ruleor_exEx;
    ruleor_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::and_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_eq_ex_in_and_ex2345);
            a=eq_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleand_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt16=2;
                switch ( this->LA(1) )
                {
                case 59:
                	{
                		alt16=1;
                	}
                    break;

                }

                switch (alt16)
                {
            	case 1:
            	    {
            	         this->matchToken(59, &FOLLOW_59_in_and_ex2362);
            	        if  (this->hasException())
            	        {
            	            goto ruleand_exEx;
            	        }


            	        this->followPush(FOLLOW_eq_ex_in_and_ex2366);
            	        b=eq_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleand_exEx;
            	        }


            	        {
            	            node = m_allocator->construct<scripting::short_circuit_expression>(m_allocator, scripting::short_circuit_type::and_operator, node, b
            	            ); SET_LOCATION_FROM_NODE(node, a
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop16;
            	    break;
                }
            }
            loop16: ;


        }

    }
    goto ruleand_exEx;
    ruleand_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::eq_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_rel_ex_in_eq_ex2402);
            a=rel_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleeq_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt17=3;
                switch ( this->LA(1) )
                {
                case 72:
                	{
                		alt17=1;
                	}
                    break;
                case 56:
                	{
                		alt17=2;
                	}
                    break;

                }

                switch (alt17)
                {
            	case 1:
            	    {
            	        {
            	             this->matchToken(72, &FOLLOW_72_in_eq_ex2437);
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            this->followPush(FOLLOW_rel_ex_in_eq_ex2441);
            	            b=rel_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_equal, node, b
            	                );  SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	             this->matchToken(56, &FOLLOW_56_in_eq_ex2464);
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            this->followPush(FOLLOW_rel_ex_in_eq_ex2468);
            	            c=rel_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_not_equal, node, c
            	                ); SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                );
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop17;
            	    break;
                }
            }
            loop17: ;


        }

    }
    goto ruleeq_exEx;
    ruleeq_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::rel_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* d;
    scripting::expression* e;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_add_ex_in_rel_ex2526);
            a=add_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulerel_exEx;
            }


            {
                 node=a
                ;
            }



            for (;;)
            {
                int alt18=5;
                switch ( this->LA(1) )
                {
                case 69:
                	{
                		alt18=1;
                	}
                    break;
                case 73:
                	{
                		alt18=2;
                	}
                    break;
                case 70:
                	{
                		alt18=3;
                	}
                    break;
                case 74:
                	{
                		alt18=4;
                	}
                    break;

                }

                switch (alt18)
                {
            	case 1:
            	    {
            	        {
            	             this->matchToken(69, &FOLLOW_69_in_rel_ex2562);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex2566);
            	            b=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_less_than, node, b
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	             this->matchToken(73, &FOLLOW_73_in_rel_ex2590);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex2594);
            	            c=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_greater_than, node, c
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	        {
            	             this->matchToken(70, &FOLLOW_70_in_rel_ex2618);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex2622);
            	            d=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_less_than_or_equal, node, d
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, d
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 4:
            	    {
            	        {
            	             this->matchToken(74, &FOLLOW_74_in_rel_ex2646);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex2650);
            	            e=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_greater_than_or_equal, node, e
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, e
            	                );
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop18;
            	    break;
                }
            }
            loop18: ;


        }

    }
    goto rulerel_exEx;
    rulerel_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::add_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_mult_ex_in_add_ex2711);
            a=mult_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleadd_exEx;
            }


            {
                node = a
                ;
            }



            for (;;)
            {
                int alt19=3;
                switch ( this->LA(1) )
                {
                case 62:
                	{
                		alt19=1;
                	}
                    break;
                case 64:
                	{
                		alt19=2;
                	}
                    break;

                }

                switch (alt19)
                {
            	case 1:
            	    {
            	        {
            	             this->matchToken(62, &FOLLOW_62_in_add_ex2746);
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            this->followPush(FOLLOW_mult_ex_in_add_ex2750);
            	            b=mult_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_add, node, b
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	             this->matchToken(64, &FOLLOW_64_in_add_ex2772);
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            this->followPush(FOLLOW_mult_ex_in_add_ex2776);
            	            c=mult_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_sub, node, c
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                );
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop19;
            	    break;
                }
            }
            loop19: ;


        }

    }
    goto ruleadd_exEx;
    ruleadd_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::mult_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* d;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_unary_ex_in_mult_ex2835);
            a=unary_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemult_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt20=4;
                switch ( this->LA(1) )
                {
                case 60:
                	{
                		alt20=1;
                	}
                    break;
                case 67:
                	{
                		alt20=2;
                	}
                    break;
                case 57:
                	{
                		alt20=3;
                	}
                    break;

                }

                switch (alt20)
                {
            	case 1:
            	    {
            	        {
            	             this->matchToken(60, &FOLLOW_60_in_mult_ex2874);
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            this->followPush(FOLLOW_unary_ex_in_mult_ex2878);
            	            b=unary_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_mult, node, b
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	             this->matchToken(67, &FOLLOW_67_in_mult_ex2904);
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            this->followPush(FOLLOW_unary_ex_in_mult_ex2908);
            	            c=unary_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_div, node, c
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	        {
            	             this->matchToken(57, &FOLLOW_57_in_mult_ex2934);
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            this->followPush(FOLLOW_unary_ex_in_mult_ex2938);
            	            d=unary_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_mod, node, d
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, d
            	                );
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop20;
            	    break;
                }
            }
            loop20: ;


        }

    }
    goto rulemult_exEx;
    rulemult_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::unary_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* d;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt21;

            alt21=4;

            switch ( this->LA(1) )
            {
            case BOOL:
            case BOOL_TYPE:
            case CHAR:
            case CHAR_TYPE:
            case FLOAT:
            case FLOAT_TYPE:
            case ID:
            case INT:
            case INT_TYPE:
            case LBRACKET:
            case LENGTH:
            case NULLTOK:
            case SHARED_REF:
            case STRING:
            case STRING_TYPE:
            case TYPE:
            case VOID_TYPE:
            	{
            		alt21=1;
            	}
                break;
            case DOUBINC:
            	{
            		alt21=2;
            	}
                break;
            case DOUBDEC:
            	{
            		alt21=3;
            	}
                break;
            case 64:
            	{
            		alt21=4;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 21 );
                ex->set_state( 0 );


                goto ruleunary_exEx;

            }

            switch (alt21)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_post_ex_in_unary_ex2990);
        	        a=post_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             node = a
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	         this->matchToken(DOUBINC, &FOLLOW_DOUBINC_in_unary_ex3003);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        this->followPush(FOLLOW_unary_ex_in_unary_ex3007);
        	        b=unary_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             scripting::node* t = node; node = m_allocator->construct<scripting::unary_expression>(m_allocator, scripting::unary_type::pre_increment, b
        	            );   SET_LOCATION_FROM_NODE(node, t); SET_END_LOCATION_FROM_NODE(node, b
        	            );
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	         this->matchToken(DOUBDEC, &FOLLOW_DOUBDEC_in_unary_ex3020);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        this->followPush(FOLLOW_unary_ex_in_unary_ex3024);
        	        c=unary_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             scripting::node* t = node; node = m_allocator->construct<scripting::unary_expression>(m_allocator, scripting::unary_type::pre_decrement, c
        	            );   SET_LOCATION_FROM_NODE(node, t); SET_END_LOCATION_FROM_NODE(node, c
        	            );
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	         this->matchToken(64, &FOLLOW_64_in_unary_ex3037);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        this->followPush(FOLLOW_unary_ex_in_unary_ex3041);
        	        d=unary_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             scripting::node* t = node; node = m_allocator->construct<scripting::unary_expression>(m_allocator, scripting::unary_type::negation, d
        	            );   SET_LOCATION_FROM_NODE(node, t); SET_END_LOCATION_FROM_NODE(node, d
        	            );
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleunary_exEx;
    ruleunary_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::post_expression*
WNScriptASTParser::post_ex_proper()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::post_expression* node;


    const ImplTraits::CommonTokenType* d = NULL;
    const ImplTraits::CommonTokenType* e = NULL;
    const ImplTraits::CommonTokenType* f = NULL;
    const ImplTraits::CommonTokenType* g = NULL;
    const ImplTraits::CommonTokenType* h = NULL;
    const ImplTraits::CommonTokenType* i = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    const ImplTraits::CommonTokenType* DOUBINC34 = NULL;
    const ImplTraits::CommonTokenType* DOUBDEC35 = NULL;
    scripting::expression* a;
    scripting::arg_list* b;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt22;

            alt22=6;

            switch ( this->LA(1) )
            {
            case LSQBRACKET:
            	{
            		alt22=1;
            	}
                break;
            case LBRACKET:
            	{
            		switch ( this->LA(2) )
            		{
            		case RBRACKET:
            			{
            				alt22=2;
            			}
            		    break;
            		case BOOL:
            		case BOOL_TYPE:
            		case CHAR:
            		case CHAR_TYPE:
            		case DOUBDEC:
            		case DOUBINC:
            		case FLOAT:
            		case FLOAT_TYPE:
            		case ID:
            		case INT:
            		case INT_TYPE:
            		case LBRACKET:
            		case LENGTH:
            		case NULLTOK:
            		case SHARED_REF:
            		case STRING:
            		case STRING_TYPE:
            		case TYPE:
            		case VOID_TYPE:
            		case 64:
            			{
            				alt22=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 22 );
            		    ex->set_state( 2 );


            		    goto rulepost_ex_properEx;

            		}

            	}
                break;
            case 66:
            	{
            		alt22=4;
            	}
                break;
            case DOUBINC:
            	{
            		alt22=5;
            	}
                break;
            case DOUBDEC:
            	{
            		alt22=6;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 22 );
                ex->set_state( 0 );


                goto rulepost_ex_properEx;

            }

            switch (alt22)
            {
        	case 1:
        	    {
        	        d =  this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_post_ex_proper3079);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_post_ex_proper3083);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        e =  this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_post_ex_proper3087);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::array_access_expression>(m_allocator, a
        	            ); SET_LOCATION(node, d); SET_END_LOCATION(node, e);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        f =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_post_ex_proper3102);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        g =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_post_ex_proper3106);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::function_call_expression>(m_allocator); SET_LOCATION(node, f); SET_END_LOCATION(node, g);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        h =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_post_ex_proper3134);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        this->followPush(FOLLOW_arglist_in_post_ex_proper3140);
        	        b=arglist();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        i =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_post_ex_proper3144);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::function_call_expression>(m_allocator, b
        	            ); SET_LOCATION(node, h); SET_END_LOCATION(node, i);
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	         this->matchToken(66, &FOLLOW_66_in_post_ex_proper3157);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        c =  this->matchToken(ID, &FOLLOW_ID_in_post_ex_proper3161);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::member_access_expression>(m_allocator, (c->getText()).c_str()); SET_LOCATION(node, c);
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        DOUBINC34 =  this->matchToken(DOUBINC, &FOLLOW_DOUBINC_in_post_ex_proper3188);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::post_unary_expression>(m_allocator, scripting::post_unary_type::post_increment); SET_LOCATION(node, DOUBINC34);
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	        DOUBDEC35 =  this->matchToken(DOUBDEC, &FOLLOW_DOUBDEC_in_post_ex_proper3217);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::post_unary_expression>(m_allocator, scripting::post_unary_type::post_decrement); SET_LOCATION(node, DOUBDEC35);
        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulepost_ex_properEx;
    rulepost_ex_properEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::post_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::post_expression* a;
    scripting::expression * prim_ex36;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_prim_ex_in_post_ex3270);
            prim_ex36=prim_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulepost_exEx;
            }


            {
                 node = prim_ex36
                ;
            }



            for (;;)
            {
                int alt23=2;
                switch ( this->LA(1) )
                {
                case DOUBDEC:
                case DOUBINC:
                case LBRACKET:
                case LSQBRACKET:
                case 66:
                	{
                		alt23=1;
                	}
                    break;

                }

                switch (alt23)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_post_ex_proper_in_post_ex3289);
            	        a=post_ex_proper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulepost_exEx;
            	        }


            	        {
            	            a
            	            ->add_base_expression(node); SET_END_LOCATION_FROM_NODE(a
            	            , node); node = a
            	            ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop23;
            	    break;
                }
            }
            loop23: ;


        }

    }
    goto rulepost_exEx;
    rulepost_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::assignment_or_expression()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    scripting::expression* a;
    scripting::assign_type b;
    scripting::expression* c;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_expr_in_assignment_or_expression3320);
            a=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleassignment_or_expressionEx;
            }


            {
                int alt24=2;
                switch ( this->LA(1) )
                {
                case 58:
                case 61:
                case 63:
                case 65:
                case 68:
                case 71:
                	{
                		alt24=1;
                	}
                    break;
                case RBRACKET:
                case SEMICOLON:
                	{
                		alt24=2;
                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 24 );
                    ex->set_state( 0 );


                    goto ruleassignment_or_expressionEx;

                }

                switch (alt24)
                {
            	case 1:
            	    {
            	        {
            	            this->followPush(FOLLOW_assign_type_in_assignment_or_expression3352);
            	            b=assign_type();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleassignment_or_expressionEx;
            	            }


            	            this->followPush(FOLLOW_expr_in_assignment_or_expression3356);
            	            c=expr();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleassignment_or_expressionEx;
            	            }


            	            {

            	                                  scripting::lvalue* lval = m_allocator->construct<scripting::lvalue>(m_allocator, a
            	                );
            	                                  SET_LOCATION_FROM_NODE(lval, c
            	                );

            	                                  scripting::assignment_instruction* assign = m_allocator->construct<scripting::assignment_instruction>(m_allocator, lval);
            	                                  SET_LOCATION_FROM_NODE(assign , lval);

            	                                  assign->add_value(b
            	                , c
            	                );
            	                                  SET_END_LOCATION_FROM_NODE(assign, c
            	                );
            	                                  node = assign;

            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	            {

            	                                  node = m_allocator->construct<scripting::expression_instruction>(m_allocator, a
            	                );
            	                                  SET_LOCATION_FROM_NODE(node, a
            	                );

            	            }


            	        }


            	    }
            	    break;

                }
            }

        }

    }
    goto ruleassignment_or_expressionEx;
    ruleassignment_or_expressionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::constant_expression*
WNScriptASTParser::constant()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::constant_expression* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* b = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    const ImplTraits::CommonTokenType* d = NULL;
    const ImplTraits::CommonTokenType* e = NULL;
    const ImplTraits::CommonTokenType* g = NULL;
    const ImplTraits::CommonTokenType* h = NULL;
    const ImplTraits::CommonTokenType* i = NULL;
    scripting::type* f;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt25;

            alt25=7;

            switch ( this->LA(1) )
            {
            case INT:
            	{
            		alt25=1;
            	}
                break;
            case FLOAT:
            	{
            		alt25=2;
            	}
                break;
            case CHAR:
            	{
            		alt25=3;
            	}
                break;
            case STRING:
            	{
            		alt25=4;
            	}
                break;
            case BOOL:
            	{
            		alt25=5;
            	}
                break;
            case NULLTOK:
            	{
            		alt25=6;
            	}
                break;
            case BOOL_TYPE:
            case CHAR_TYPE:
            case FLOAT_TYPE:
            case INT_TYPE:
            case VOID_TYPE:
            	{
            		alt25=7;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 25 );
                ex->set_state( 0 );


                goto ruleconstantEx;

            }

            switch (alt25)
            {
        	case 1:
        	    {
        	        a =  this->matchToken(INT, &FOLLOW_INT_in_constant3422);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::int_type); SET_LOCATION(type_node, a); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, (a->getText()).c_str()); SET_LOCATION(node, a);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        b =  this->matchToken(FLOAT, &FOLLOW_FLOAT_in_constant3440);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::float_type); SET_LOCATION(type_node, b); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, (b->getText()).c_str()); SET_LOCATION(node, b);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        c =  this->matchToken(CHAR, &FOLLOW_CHAR_in_constant3456);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::char_type); SET_LOCATION(type_node, c); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, (c->getText()).c_str()); SET_LOCATION(node, c);
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        d =  this->matchToken(STRING, &FOLLOW_STRING_in_constant3473);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::string_type); SET_LOCATION(type_node, d); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, (d->getText()).c_str()); SET_LOCATION(node, d);
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        e =  this->matchToken(BOOL, &FOLLOW_BOOL_in_constant3488);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::bool_type); SET_LOCATION(type_node, e); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, (e->getText()).c_str()); SET_LOCATION(node, e);
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	        g =  this->matchToken(NULLTOK, &FOLLOW_NULLTOK_in_constant3505);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::nullptr_type); SET_LOCATION(type_node, g); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, "null"); SET_LOCATION(node, g);
        	        }


        	    }
        	    break;
        	case 7:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_constant3520);
        	        f=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        g =  this->matchToken(LBRACE, &FOLLOW_LBRACE_in_constant3524);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        h =  this->matchToken(STRING, &FOLLOW_STRING_in_constant3528);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        i =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_constant3532);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::constant_expression>(m_allocator, f
        	            , (h->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            f
        	            ); SET_END_LOCATION(node, i);
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleconstantEx;
    ruleconstantEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::builtin_unary_expression*
WNScriptASTParser::builtin_unary()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::builtin_unary_expression* node;


    const ImplTraits::CommonTokenType* LENGTH38 = NULL;
    const ImplTraits::CommonTokenType* RBRACKET39 = NULL;
    scripting::expression* expr37;





        node = nullptr;



    {
        {
            LENGTH38 =  this->matchToken(LENGTH, &FOLLOW_LENGTH_in_builtin_unary3561);
            if  (this->hasException())
            {
                goto rulebuiltin_unaryEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_builtin_unary3563);
            if  (this->hasException())
            {
                goto rulebuiltin_unaryEx;
            }


            this->followPush(FOLLOW_expr_in_builtin_unary3565);
            expr37=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebuiltin_unaryEx;
            }


            RBRACKET39 =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_builtin_unary3567);
            if  (this->hasException())
            {
                goto rulebuiltin_unaryEx;
            }


            {
                 node = m_allocator->construct<scripting::builtin_unary_expression>(m_allocator, scripting::builtin_unary_type::length, expr37
                ); SET_LOCATION(node, LENGTH38); SET_END_LOCATION(node, RBRACKET39);
            }


        }

    }
    goto rulebuiltin_unaryEx;
    rulebuiltin_unaryEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression *
WNScriptASTParser::prim_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression * node;


    const ImplTraits::CommonTokenType* ba = NULL;
    const ImplTraits::CommonTokenType* bb = NULL;
    const ImplTraits::CommonTokenType* ID40 = NULL;
    scripting::expression* a;
    scripting::constant_expression* b;
    scripting::type* c;
    scripting::cast_expression* f;
    scripting::type* e;
    scripting::struct_allocation_expression* h;
    scripting::type* i;
    scripting::struct_allocation_expression* j;
    scripting::type* k;
    scripting::array_allocation_expression* l;
    scripting::type* m;
    scripting::array_allocation_expression* n;
    scripting::type* o;
    scripting::dynamic_array_allocation_expression* p;
    scripting::type* q;
    scripting::dynamic_array_allocation_expression* r;
    scripting::builtin_unary_expression* u;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt26;

            alt26=11;

            switch ( this->LA(1) )
            {
            case ID:
            	{
            		alt26=1;
            	}
                break;
            case LBRACKET:
            	{
            		alt26=2;
            	}
                break;
            case BOOL:
            case CHAR:
            case FLOAT:
            case INT:
            case NULLTOK:
            case STRING:
            	{
            		alt26=3;
            	}
                break;
            case VOID_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt26=3;
            			}
            		    break;
            		case LBRACKET:
            			{
            				alt26=4;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				alt26=7;
            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				alt26=9;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 26 );
            		    ex->set_state( 4 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case INT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt26=3;
            			}
            		    break;
            		case LBRACKET:
            			{
            				alt26=4;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				alt26=7;
            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				alt26=9;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 26 );
            		    ex->set_state( 5 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case FLOAT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt26=3;
            			}
            		    break;
            		case LBRACKET:
            			{
            				alt26=4;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				alt26=7;
            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				alt26=9;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 26 );
            		    ex->set_state( 6 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case CHAR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt26=3;
            			}
            		    break;
            		case LBRACKET:
            			{
            				alt26=4;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				alt26=7;
            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				alt26=9;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 26 );
            		    ex->set_state( 7 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case BOOL_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt26=3;
            			}
            		    break;
            		case LBRACKET:
            			{
            				alt26=4;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				alt26=7;
            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				alt26=9;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 26 );
            		    ex->set_state( 8 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACKET:
            			{
            				alt26=5;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				alt26=7;
            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				alt26=9;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 26 );
            		    ex->set_state( 9 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case STRING_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACKET:
            			{
            				alt26=5;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				alt26=7;
            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				alt26=9;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 26 );
            		    ex->set_state( 10 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case SHARED_REF:
            	{
            		switch ( this->LA(2) )
            		{
            		case TYPE:
            			{
            				switch ( this->LA(3) )
            				{
            				case LBRACKET:
            					{
            						alt26=6;
            					}
            				    break;
            				case LSQBRACKET:
            					{
            						alt26=8;
            					}
            				    break;
            				case DLSQBRACKET:
            					{
            						alt26=10;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 26 );
            				    ex->set_state( 17 );


            				    goto ruleprim_exEx;

            				}

            			}
            		    break;
            		case STRING_TYPE:
            			{
            				switch ( this->LA(3) )
            				{
            				case LBRACKET:
            					{
            						alt26=6;
            					}
            				    break;
            				case LSQBRACKET:
            					{
            						alt26=8;
            					}
            				    break;
            				case DLSQBRACKET:
            					{
            						alt26=10;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 26 );
            				    ex->set_state( 18 );


            				    goto ruleprim_exEx;

            				}

            			}
            		    break;
            		case VOID_TYPE:
            			{
            				switch ( this->LA(3) )
            				{
            				case LSQBRACKET:
            					{
            						alt26=8;
            					}
            				    break;
            				case DLSQBRACKET:
            					{
            						alt26=10;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 26 );
            				    ex->set_state( 19 );


            				    goto ruleprim_exEx;

            				}

            			}
            		    break;
            		case INT_TYPE:
            			{
            				switch ( this->LA(3) )
            				{
            				case LSQBRACKET:
            					{
            						alt26=8;
            					}
            				    break;
            				case DLSQBRACKET:
            					{
            						alt26=10;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 26 );
            				    ex->set_state( 20 );


            				    goto ruleprim_exEx;

            				}

            			}
            		    break;
            		case FLOAT_TYPE:
            			{
            				switch ( this->LA(3) )
            				{
            				case LSQBRACKET:
            					{
            						alt26=8;
            					}
            				    break;
            				case DLSQBRACKET:
            					{
            						alt26=10;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 26 );
            				    ex->set_state( 21 );


            				    goto ruleprim_exEx;

            				}

            			}
            		    break;
            		case CHAR_TYPE:
            			{
            				switch ( this->LA(3) )
            				{
            				case LSQBRACKET:
            					{
            						alt26=8;
            					}
            				    break;
            				case DLSQBRACKET:
            					{
            						alt26=10;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 26 );
            				    ex->set_state( 22 );


            				    goto ruleprim_exEx;

            				}

            			}
            		    break;
            		case BOOL_TYPE:
            			{
            				switch ( this->LA(3) )
            				{
            				case LSQBRACKET:
            					{
            						alt26=8;
            					}
            				    break;
            				case DLSQBRACKET:
            					{
            						alt26=10;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 26 );
            				    ex->set_state( 23 );


            				    goto ruleprim_exEx;

            				}

            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 26 );
            		    ex->set_state( 11 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case LENGTH:
            	{
            		alt26=11;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 26 );
                ex->set_state( 0 );


                goto ruleprim_exEx;

            }

            switch (alt26)
            {
        	case 1:
        	    {
        	        ID40 =  this->matchToken(ID, &FOLLOW_ID_in_prim_ex3597);
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::id_expression>(m_allocator, (ID40->getText()).c_str()); SET_LOCATION(node, ID40);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        ba =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_prim_ex3612);
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_prim_ex3616);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        bb =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_prim_ex3620);
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	            node = a
        	            ; SET_LOCATION(node, ba); SET_END_LOCATION(node, bb);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        this->followPush(FOLLOW_constant_in_prim_ex3635);
        	        b=constant();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	            node = b
        	            ;
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_prim_ex3650);
        	        c=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	            this->followPush(FOLLOW_cast_in_prim_ex3656);
        	            f=cast();

        	            this->followPop();
        	            if  (this->hasException())
        	            {
        	                goto ruleprim_exEx;
        	            }


        	        }


        	        {
        	             f
        	            ->set_type(c
        	            ); node=f
        	            ; SET_START_LOCATION_FROM_NODE(node, c
        	            );
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        this->followPush(FOLLOW_objectType_in_prim_ex3671);
        	        e=objectType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        this->followPush(FOLLOW_structInit_in_prim_ex3675);
        	        h=structInit();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	             h
        	            ->set_type(e
        	            ); node=h
        	            ; SET_START_LOCATION_FROM_NODE(node, e
        	            );
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	         this->matchToken(SHARED_REF, &FOLLOW_SHARED_REF_in_prim_ex3687);
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        this->followPush(FOLLOW_objectType_in_prim_ex3691);
        	        i=objectType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        this->followPush(FOLLOW_structInit_in_prim_ex3695);
        	        j=structInit();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	             i
        	            ->set_reference_type(scripting::reference_type::shared); j
        	            ->set_type(i
        	            ); node=j
        	            ; SET_START_LOCATION_FROM_NODE(node, i
        	            );
        	        }


        	    }
        	    break;
        	case 7:
        	    {
        	        this->followPush(FOLLOW_nonArrayType_in_prim_ex3709);
        	        k=nonArrayType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        this->followPush(FOLLOW_arrayInit_in_prim_ex3713);
        	        l=arrayInit();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	             l
        	            ->set_type(k
        	            ); node=l
        	            ; SET_START_LOCATION_FROM_NODE(node, k
        	            );
        	        }


        	    }
        	    break;
        	case 8:
        	    {
        	         this->matchToken(SHARED_REF, &FOLLOW_SHARED_REF_in_prim_ex3725);
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        this->followPush(FOLLOW_nonArrayType_in_prim_ex3729);
        	        m=nonArrayType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        this->followPush(FOLLOW_arrayInit_in_prim_ex3733);
        	        n=arrayInit();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	             n
        	            ->set_type(m
        	            ); node=n
        	            ; SET_START_LOCATION_FROM_NODE(node, m
        	            );
        	        }


        	    }
        	    break;
        	case 9:
        	    {
        	        this->followPush(FOLLOW_nonArrayType_in_prim_ex3747);
        	        o=nonArrayType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        this->followPush(FOLLOW_dynamicArrayInit_in_prim_ex3751);
        	        p=dynamicArrayInit();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	             p
        	            ->set_type(o
        	            ); node=p
        	            ; SET_START_LOCATION_FROM_NODE(node, o
        	            );
        	        }


        	    }
        	    break;
        	case 10:
        	    {
        	         this->matchToken(SHARED_REF, &FOLLOW_SHARED_REF_in_prim_ex3763);
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        this->followPush(FOLLOW_nonArrayType_in_prim_ex3767);
        	        q=nonArrayType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        this->followPush(FOLLOW_dynamicArrayInit_in_prim_ex3771);
        	        r=dynamicArrayInit();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	             r
        	            ->set_type(q
        	            ); node=r
        	            ; SET_START_LOCATION_FROM_NODE(node, q
        	            );
        	        }


        	    }
        	    break;
        	case 11:
        	    {
        	        this->followPush(FOLLOW_builtin_unary_in_prim_ex3787);
        	        u=builtin_unary();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	            node = u
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleprim_exEx;
    ruleprim_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::cast_expression*
WNScriptASTParser::cast()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::cast_expression* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    scripting::expression* b;





      node = nullptr;



    {
        {
            a =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_cast3816);
            if  (this->hasException())
            {
                goto rulecastEx;
            }


            this->followPush(FOLLOW_expr_in_cast3820);
            b=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecastEx;
            }


            c =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_cast3824);
            if  (this->hasException())
            {
                goto rulecastEx;
            }


            {
                 node = m_allocator->construct<scripting::cast_expression>(m_allocator, b
                ); SET_LOCATION(node, a); SET_END_LOCATION(node, c);
            }


        }

    }
    goto rulecastEx;
    rulecastEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::struct_allocation_expression*
WNScriptASTParser::structInit()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::struct_allocation_expression* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* b = NULL;






        node = nullptr;



    {
        {
            a =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_structInit3853);
            if  (this->hasException())
            {
                goto rulestructInitEx;
            }


            b =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_structInit3857);
            if  (this->hasException())
            {
                goto rulestructInitEx;
            }


            {
                 node = m_allocator->construct<scripting::struct_allocation_expression>(m_allocator); SET_LOCATION(node, a); SET_END_LOCATION(node, b);
            }


        }

    }
    goto rulestructInitEx;
    rulestructInitEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::array_allocation_expression*
WNScriptASTParser::arrayInit()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::array_allocation_expression* node;


    const ImplTraits::CommonTokenType* c = NULL;
    scripting::expression* e;
    scripting::expression* b;





        node = m_allocator->construct<scripting::array_allocation_expression>(m_allocator);



    {
        {
            {
                 this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_arrayInit3893);
                if  (this->hasException())
                {
                    goto rulearrayInitEx;
                }


                this->followPush(FOLLOW_expr_in_arrayInit3897);
                e=expr();

                this->followPop();
                if  (this->hasException())
                {
                    goto rulearrayInitEx;
                }


                 this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_arrayInit3899);
                if  (this->hasException())
                {
                    goto rulearrayInitEx;
                }


                {
                     node->add_expression(e
                    );
                }


            }


            {
                 this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_arrayInit3914);
                if  (this->hasException())
                {
                    goto rulearrayInitEx;
                }


                this->followPush(FOLLOW_expr_in_arrayInit3918);
                b=expr();

                this->followPop();
                if  (this->hasException())
                {
                    goto rulearrayInitEx;
                }


                c =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_arrayInit3922);
                if  (this->hasException())
                {
                    goto rulearrayInitEx;
                }


                {
                     node->set_copy_initializer(b); SET_LOCATION(node, c);
                }


            }


        }

    }
    goto rulearrayInitEx;
    rulearrayInitEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::dynamic_array_allocation_expression*
WNScriptASTParser::dynamicArrayInit()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::dynamic_array_allocation_expression* node;


    const ImplTraits::CommonTokenType* c = NULL;
    scripting::expression* e;
    scripting::expression* b;





        node = m_allocator->construct<scripting::dynamic_array_allocation_expression>(m_allocator);



    {
        {
            {
                 this->matchToken(DLSQBRACKET, &FOLLOW_DLSQBRACKET_in_dynamicArrayInit3960);
                if  (this->hasException())
                {
                    goto ruledynamicArrayInitEx;
                }


                this->followPush(FOLLOW_expr_in_dynamicArrayInit3964);
                e=expr();

                this->followPop();
                if  (this->hasException())
                {
                    goto ruledynamicArrayInitEx;
                }


                 this->matchToken(DRSQBRACKET, &FOLLOW_DRSQBRACKET_in_dynamicArrayInit3966);
                if  (this->hasException())
                {
                    goto ruledynamicArrayInitEx;
                }


                {
                     node->add_expression(e
                    );
                }


            }


            {
                 this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_dynamicArrayInit3981);
                if  (this->hasException())
                {
                    goto ruledynamicArrayInitEx;
                }


                this->followPush(FOLLOW_expr_in_dynamicArrayInit3985);
                b=expr();

                this->followPop();
                if  (this->hasException())
                {
                    goto ruledynamicArrayInitEx;
                }


                c =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_dynamicArrayInit3989);
                if  (this->hasException())
                {
                    goto ruledynamicArrayInitEx;
                }


                {
                     node->set_copy_initializer(b); SET_LOCATION(node, c);
                }


            }


        }

    }
    goto ruledynamicArrayInitEx;
    ruledynamicArrayInitEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::declaration*
WNScriptASTParser::declaration()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::declaration* node;


    scripting::parameter* a;
    scripting::expression* c;





        node =  m_allocator->construct<scripting::declaration>(m_allocator);



    {
        {
            this->followPush(FOLLOW_param_in_declaration4023);
            a=param();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledeclarationEx;
            }


            {
                 node->set_parameter(a
                ); SET_LOCATION_FROM_NODE(node, a
                );
            }


            {
                {
                     this->matchToken(71, &FOLLOW_71_in_declaration4058);
                    if  (this->hasException())
                    {
                        goto ruledeclarationEx;
                    }


                    {
                        {
                            this->followPush(FOLLOW_expr_in_declaration4065);
                            c=expr();

                            this->followPop();
                            if  (this->hasException())
                            {
                                goto ruledeclarationEx;
                            }


                        }


                        {
                             node->add_expression_initializer(c
                            ); SET_END_LOCATION_FROM_NODE(node, c
                            );
                        }


                    }


                }


            }


        }

    }
    goto ruledeclarationEx;
    ruledeclarationEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::declaration*
WNScriptASTParser::inherited_declaration()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::declaration* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* d = NULL;
    scripting::expression* c;





        node =  m_allocator->construct<scripting::declaration>(m_allocator);



    {
        {
             this->matchToken(66, &FOLLOW_66_in_inherited_declaration4115);
            if  (this->hasException())
            {
                goto ruleinherited_declarationEx;
            }


            a =  this->matchToken(ID, &FOLLOW_ID_in_inherited_declaration4119);
            if  (this->hasException())
            {
                goto ruleinherited_declarationEx;
            }


            {
                 node->set_inherited_parameter((a->getText()).c_str());  SET_LOCATION(node, a);
            }


            {
                 this->matchToken(71, &FOLLOW_71_in_inherited_declaration4132);
                if  (this->hasException())
                {
                    goto ruleinherited_declarationEx;
                }


                {
                    int alt27=2;
                    switch ( this->LA(1) )
                    {
                    case BOOL:
                    case BOOL_TYPE:
                    case CHAR:
                    case CHAR_TYPE:
                    case DOUBDEC:
                    case DOUBINC:
                    case FLOAT:
                    case FLOAT_TYPE:
                    case ID:
                    case INT:
                    case INT_TYPE:
                    case LBRACKET:
                    case LENGTH:
                    case NULLTOK:
                    case SHARED_REF:
                    case STRING:
                    case STRING_TYPE:
                    case TYPE:
                    case VOID_TYPE:
                    case 64:
                    	{
                    		alt27=1;
                    	}
                        break;
                    case DEFAULT:
                    	{
                    		alt27=2;
                    	}
                        break;

                    default:
                        ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                        ex->set_decisionNum( 27 );
                        ex->set_state( 0 );


                        goto ruleinherited_declarationEx;

                    }

                    switch (alt27)
                    {
                	case 1:
                	    {
                	        {
                	            this->followPush(FOLLOW_expr_in_inherited_declaration4168);
                	            c=expr();

                	            this->followPop();
                	            if  (this->hasException())
                	            {
                	                goto ruleinherited_declarationEx;
                	            }


                	            {
                	                 node->add_expression_initializer(c
                	                ); SET_END_LOCATION_FROM_NODE(node, c
                	                );
                	            }


                	        }


                	    }
                	    break;
                	case 2:
                	    {
                	        {
                	            d =  this->matchToken(DEFAULT, &FOLLOW_DEFAULT_in_inherited_declaration4194);
                	            if  (this->hasException())
                	            {
                	                goto ruleinherited_declarationEx;
                	            }


                	            {
                	                 node->set_default_initialization(); SET_END_LOCATION(node, d);
                	            }


                	        }


                	    }
                	    break;

                    }
                }

            }


        }

    }
    goto ruleinherited_declarationEx;
    ruleinherited_declarationEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::instructionScalar()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    scripting::declaration* declaration41;
    scripting::instruction* assignment_or_expression42;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt28;

            alt28=2;

            switch ( this->LA(1) )
            {
            case VOID_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt28=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case INT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt28=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt28=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 27 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 56:
            						case 57:
            						case 59:
            						case 60:
            						case 62:
            						case 64:
            						case 66:
            						case 67:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 75:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 16 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt28=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt28=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 27 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 56:
            						case 57:
            						case 59:
            						case 60:
            						case 62:
            						case 64:
            						case 66:
            						case 67:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 75:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 17 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt28=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt28=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 27 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 56:
            						case 57:
            						case 59:
            						case 60:
            						case 62:
            						case 64:
            						case 66:
            						case 67:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 75:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 18 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt28=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt28=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 27 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 56:
            						case 57:
            						case 59:
            						case 60:
            						case 62:
            						case 64:
            						case 66:
            						case 67:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 75:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 19 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt28=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt28=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 27 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 56:
            						case 57:
            						case 59:
            						case 60:
            						case 62:
            						case 64:
            						case 66:
            						case 67:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 75:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 20 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case NULLTOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt28=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt28=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 27 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 56:
            						case 57:
            						case 59:
            						case 60:
            						case 62:
            						case 64:
            						case 66:
            						case 67:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 75:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 21 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case VOID_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt28=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt28=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 28 );
            														    ex->set_state( 27 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 56:
            												case 57:
            												case 59:
            												case 60:
            												case 62:
            												case 64:
            												case 66:
            												case 67:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 75:
            													{
            														alt28=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 28 );
            												    ex->set_state( 30 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 28 );
            										    ex->set_state( 29 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 22 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt28=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt28=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 28 );
            														    ex->set_state( 27 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 56:
            												case 57:
            												case 59:
            												case 60:
            												case 62:
            												case 64:
            												case 66:
            												case 67:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 75:
            													{
            														alt28=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 28 );
            												    ex->set_state( 30 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 28 );
            										    ex->set_state( 29 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 23 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt28=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt28=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 28 );
            														    ex->set_state( 27 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 56:
            												case 57:
            												case 59:
            												case 60:
            												case 62:
            												case 64:
            												case 66:
            												case 67:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 75:
            													{
            														alt28=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 28 );
            												    ex->set_state( 30 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 28 );
            										    ex->set_state( 29 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 24 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt28=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt28=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 28 );
            														    ex->set_state( 27 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 56:
            												case 57:
            												case 59:
            												case 60:
            												case 62:
            												case 64:
            												case 66:
            												case 67:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 75:
            													{
            														alt28=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 28 );
            												    ex->set_state( 30 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 28 );
            										    ex->set_state( 29 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 25 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt28=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt28=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 28 );
            														    ex->set_state( 27 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 56:
            												case 57:
            												case 59:
            												case 60:
            												case 62:
            												case 64:
            												case 66:
            												case 67:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 75:
            													{
            														alt28=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 28 );
            												    ex->set_state( 30 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 28 );
            										    ex->set_state( 29 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 26 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case RSQBRACKET:
            					{
            						alt28=1;
            					}
            				    break;
            				case DOUBDEC:
            				case DOUBINC:
            				case ID:
            				case LBRACKET:
            				case LENGTH:
            				case SHARED_REF:
            				case STRING_TYPE:
            				case TYPE:
            				case 64:
            					{
            						alt28=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 28 );
            				    ex->set_state( 11 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case DRSQBRACKET:
            					{
            						alt28=1;
            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case SHARED_REF:
            				case STRING:
            				case STRING_TYPE:
            				case TYPE:
            				case VOID_TYPE:
            				case 64:
            					{
            						alt28=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 28 );
            				    ex->set_state( 12 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt28=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 28 );
            		    ex->set_state( 1 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case INT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt28=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case INT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt28=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt28=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 27 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 56:
            						case 57:
            						case 59:
            						case 60:
            						case 62:
            						case 64:
            						case 66:
            						case 67:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 75:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 16 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt28=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt28=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 27 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 56:
            						case 57:
            						case 59:
            						case 60:
            						case 62:
            						case 64:
            						case 66:
            						case 67:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 75:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 17 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt28=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt28=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 27 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 56:
            						case 57:
            						case 59:
            						case 60:
            						case 62:
            						case 64:
            						case 66:
            						case 67:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 75:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 18 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt28=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt28=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 27 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 56:
            						case 57:
            						case 59:
            						case 60:
            						case 62:
            						case 64:
            						case 66:
            						case 67:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 75:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 19 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt28=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt28=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 27 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 56:
            						case 57:
            						case 59:
            						case 60:
            						case 62:
            						case 64:
            						case 66:
            						case 67:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 75:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 20 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case NULLTOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt28=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt28=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 27 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 56:
            						case 57:
            						case 59:
            						case 60:
            						case 62:
            						case 64:
            						case 66:
            						case 67:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 75:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 21 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case VOID_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt28=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt28=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 28 );
            														    ex->set_state( 27 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 56:
            												case 57:
            												case 59:
            												case 60:
            												case 62:
            												case 64:
            												case 66:
            												case 67:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 75:
            													{
            														alt28=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 28 );
            												    ex->set_state( 30 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 28 );
            										    ex->set_state( 29 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 22 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt28=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt28=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 28 );
            														    ex->set_state( 27 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 56:
            												case 57:
            												case 59:
            												case 60:
            												case 62:
            												case 64:
            												case 66:
            												case 67:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 75:
            													{
            														alt28=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 28 );
            												    ex->set_state( 30 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 28 );
            										    ex->set_state( 29 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 23 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt28=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt28=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 28 );
            														    ex->set_state( 27 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 56:
            												case 57:
            												case 59:
            												case 60:
            												case 62:
            												case 64:
            												case 66:
            												case 67:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 75:
            													{
            														alt28=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 28 );
            												    ex->set_state( 30 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 28 );
            										    ex->set_state( 29 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 24 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt28=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt28=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 28 );
            														    ex->set_state( 27 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 56:
            												case 57:
            												case 59:
            												case 60:
            												case 62:
            												case 64:
            												case 66:
            												case 67:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 75:
            													{
            														alt28=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 28 );
            												    ex->set_state( 30 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 28 );
            										    ex->set_state( 29 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 25 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt28=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt28=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 28 );
            														    ex->set_state( 27 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 56:
            												case 57:
            												case 59:
            												case 60:
            												case 62:
            												case 64:
            												case 66:
            												case 67:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 75:
            													{
            														alt28=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 28 );
            												    ex->set_state( 30 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 28 );
            										    ex->set_state( 29 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 26 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case RSQBRACKET:
            					{
            						alt28=1;
            					}
            				    break;
            				case DOUBDEC:
            				case DOUBINC:
            				case ID:
            				case LBRACKET:
            				case LENGTH:
            				case SHARED_REF:
            				case STRING_TYPE:
            				case TYPE:
            				case 64:
            					{
            						alt28=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 28 );
            				    ex->set_state( 11 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case DRSQBRACKET:
            					{
            						alt28=1;
            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case SHARED_REF:
            				case STRING:
            				case STRING_TYPE:
            				case TYPE:
            				case VOID_TYPE:
            				case 64:
            					{
            						alt28=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 28 );
            				    ex->set_state( 12 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt28=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 28 );
            		    ex->set_state( 2 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case FLOAT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt28=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case INT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt28=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt28=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 27 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 56:
            						case 57:
            						case 59:
            						case 60:
            						case 62:
            						case 64:
            						case 66:
            						case 67:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 75:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 16 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt28=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt28=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 27 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 56:
            						case 57:
            						case 59:
            						case 60:
            						case 62:
            						case 64:
            						case 66:
            						case 67:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 75:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 17 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt28=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt28=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 27 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 56:
            						case 57:
            						case 59:
            						case 60:
            						case 62:
            						case 64:
            						case 66:
            						case 67:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 75:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 18 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt28=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt28=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 27 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 56:
            						case 57:
            						case 59:
            						case 60:
            						case 62:
            						case 64:
            						case 66:
            						case 67:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 75:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 19 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt28=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt28=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 27 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 56:
            						case 57:
            						case 59:
            						case 60:
            						case 62:
            						case 64:
            						case 66:
            						case 67:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 75:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 20 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case NULLTOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt28=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt28=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 27 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 56:
            						case 57:
            						case 59:
            						case 60:
            						case 62:
            						case 64:
            						case 66:
            						case 67:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 75:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 21 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case VOID_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt28=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt28=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 28 );
            														    ex->set_state( 27 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 56:
            												case 57:
            												case 59:
            												case 60:
            												case 62:
            												case 64:
            												case 66:
            												case 67:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 75:
            													{
            														alt28=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 28 );
            												    ex->set_state( 30 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 28 );
            										    ex->set_state( 29 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 22 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt28=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt28=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 28 );
            														    ex->set_state( 27 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 56:
            												case 57:
            												case 59:
            												case 60:
            												case 62:
            												case 64:
            												case 66:
            												case 67:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 75:
            													{
            														alt28=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 28 );
            												    ex->set_state( 30 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 28 );
            										    ex->set_state( 29 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 23 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt28=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt28=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 28 );
            														    ex->set_state( 27 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 56:
            												case 57:
            												case 59:
            												case 60:
            												case 62:
            												case 64:
            												case 66:
            												case 67:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 75:
            													{
            														alt28=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 28 );
            												    ex->set_state( 30 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 28 );
            										    ex->set_state( 29 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 24 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt28=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt28=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 28 );
            														    ex->set_state( 27 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 56:
            												case 57:
            												case 59:
            												case 60:
            												case 62:
            												case 64:
            												case 66:
            												case 67:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 75:
            													{
            														alt28=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 28 );
            												    ex->set_state( 30 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 28 );
            										    ex->set_state( 29 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 25 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt28=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt28=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 28 );
            														    ex->set_state( 27 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 56:
            												case 57:
            												case 59:
            												case 60:
            												case 62:
            												case 64:
            												case 66:
            												case 67:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 75:
            													{
            														alt28=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 28 );
            												    ex->set_state( 30 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 28 );
            										    ex->set_state( 29 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 26 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case RSQBRACKET:
            					{
            						alt28=1;
            					}
            				    break;
            				case DOUBDEC:
            				case DOUBINC:
            				case ID:
            				case LBRACKET:
            				case LENGTH:
            				case SHARED_REF:
            				case STRING_TYPE:
            				case TYPE:
            				case 64:
            					{
            						alt28=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 28 );
            				    ex->set_state( 11 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case DRSQBRACKET:
            					{
            						alt28=1;
            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case SHARED_REF:
            				case STRING:
            				case STRING_TYPE:
            				case TYPE:
            				case VOID_TYPE:
            				case 64:
            					{
            						alt28=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 28 );
            				    ex->set_state( 12 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt28=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 28 );
            		    ex->set_state( 3 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case CHAR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt28=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case INT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt28=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt28=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 27 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 56:
            						case 57:
            						case 59:
            						case 60:
            						case 62:
            						case 64:
            						case 66:
            						case 67:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 75:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 16 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt28=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt28=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 27 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 56:
            						case 57:
            						case 59:
            						case 60:
            						case 62:
            						case 64:
            						case 66:
            						case 67:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 75:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 17 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt28=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt28=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 27 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 56:
            						case 57:
            						case 59:
            						case 60:
            						case 62:
            						case 64:
            						case 66:
            						case 67:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 75:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 18 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt28=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt28=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 27 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 56:
            						case 57:
            						case 59:
            						case 60:
            						case 62:
            						case 64:
            						case 66:
            						case 67:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 75:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 19 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt28=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt28=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 27 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 56:
            						case 57:
            						case 59:
            						case 60:
            						case 62:
            						case 64:
            						case 66:
            						case 67:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 75:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 20 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case NULLTOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt28=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt28=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 27 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 56:
            						case 57:
            						case 59:
            						case 60:
            						case 62:
            						case 64:
            						case 66:
            						case 67:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 75:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 21 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case VOID_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt28=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt28=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 28 );
            														    ex->set_state( 27 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 56:
            												case 57:
            												case 59:
            												case 60:
            												case 62:
            												case 64:
            												case 66:
            												case 67:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 75:
            													{
            														alt28=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 28 );
            												    ex->set_state( 30 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 28 );
            										    ex->set_state( 29 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 22 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt28=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt28=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 28 );
            														    ex->set_state( 27 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 56:
            												case 57:
            												case 59:
            												case 60:
            												case 62:
            												case 64:
            												case 66:
            												case 67:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 75:
            													{
            														alt28=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 28 );
            												    ex->set_state( 30 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 28 );
            										    ex->set_state( 29 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 23 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt28=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt28=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 28 );
            														    ex->set_state( 27 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 56:
            												case 57:
            												case 59:
            												case 60:
            												case 62:
            												case 64:
            												case 66:
            												case 67:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 75:
            													{
            														alt28=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 28 );
            												    ex->set_state( 30 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 28 );
            										    ex->set_state( 29 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 24 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt28=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt28=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 28 );
            														    ex->set_state( 27 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 56:
            												case 57:
            												case 59:
            												case 60:
            												case 62:
            												case 64:
            												case 66:
            												case 67:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 75:
            													{
            														alt28=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 28 );
            												    ex->set_state( 30 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 28 );
            										    ex->set_state( 29 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 25 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt28=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt28=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 28 );
            														    ex->set_state( 27 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 56:
            												case 57:
            												case 59:
            												case 60:
            												case 62:
            												case 64:
            												case 66:
            												case 67:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 75:
            													{
            														alt28=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 28 );
            												    ex->set_state( 30 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 28 );
            										    ex->set_state( 29 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 26 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case RSQBRACKET:
            					{
            						alt28=1;
            					}
            				    break;
            				case DOUBDEC:
            				case DOUBINC:
            				case ID:
            				case LBRACKET:
            				case LENGTH:
            				case SHARED_REF:
            				case STRING_TYPE:
            				case TYPE:
            				case 64:
            					{
            						alt28=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 28 );
            				    ex->set_state( 11 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case DRSQBRACKET:
            					{
            						alt28=1;
            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case SHARED_REF:
            				case STRING:
            				case STRING_TYPE:
            				case TYPE:
            				case VOID_TYPE:
            				case 64:
            					{
            						alt28=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 28 );
            				    ex->set_state( 12 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt28=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 28 );
            		    ex->set_state( 4 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case BOOL_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt28=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case INT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt28=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt28=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 27 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 56:
            						case 57:
            						case 59:
            						case 60:
            						case 62:
            						case 64:
            						case 66:
            						case 67:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 75:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 16 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt28=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt28=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 27 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 56:
            						case 57:
            						case 59:
            						case 60:
            						case 62:
            						case 64:
            						case 66:
            						case 67:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 75:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 17 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt28=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt28=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 27 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 56:
            						case 57:
            						case 59:
            						case 60:
            						case 62:
            						case 64:
            						case 66:
            						case 67:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 75:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 18 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt28=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt28=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 27 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 56:
            						case 57:
            						case 59:
            						case 60:
            						case 62:
            						case 64:
            						case 66:
            						case 67:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 75:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 19 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt28=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt28=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 27 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 56:
            						case 57:
            						case 59:
            						case 60:
            						case 62:
            						case 64:
            						case 66:
            						case 67:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 75:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 20 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case NULLTOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt28=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt28=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 27 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 56:
            						case 57:
            						case 59:
            						case 60:
            						case 62:
            						case 64:
            						case 66:
            						case 67:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 75:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 21 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case VOID_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt28=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt28=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 28 );
            														    ex->set_state( 27 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 56:
            												case 57:
            												case 59:
            												case 60:
            												case 62:
            												case 64:
            												case 66:
            												case 67:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 75:
            													{
            														alt28=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 28 );
            												    ex->set_state( 30 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 28 );
            										    ex->set_state( 29 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 22 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt28=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt28=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 28 );
            														    ex->set_state( 27 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 56:
            												case 57:
            												case 59:
            												case 60:
            												case 62:
            												case 64:
            												case 66:
            												case 67:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 75:
            													{
            														alt28=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 28 );
            												    ex->set_state( 30 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 28 );
            										    ex->set_state( 29 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 23 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt28=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt28=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 28 );
            														    ex->set_state( 27 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 56:
            												case 57:
            												case 59:
            												case 60:
            												case 62:
            												case 64:
            												case 66:
            												case 67:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 75:
            													{
            														alt28=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 28 );
            												    ex->set_state( 30 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 28 );
            										    ex->set_state( 29 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 24 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt28=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt28=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 28 );
            														    ex->set_state( 27 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 56:
            												case 57:
            												case 59:
            												case 60:
            												case 62:
            												case 64:
            												case 66:
            												case 67:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 75:
            													{
            														alt28=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 28 );
            												    ex->set_state( 30 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 28 );
            										    ex->set_state( 29 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 25 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt28=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt28=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 28 );
            														    ex->set_state( 27 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 56:
            												case 57:
            												case 59:
            												case 60:
            												case 62:
            												case 64:
            												case 66:
            												case 67:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 75:
            													{
            														alt28=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 28 );
            												    ex->set_state( 30 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 28 );
            										    ex->set_state( 29 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 26 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case RSQBRACKET:
            					{
            						alt28=1;
            					}
            				    break;
            				case DOUBDEC:
            				case DOUBINC:
            				case ID:
            				case LBRACKET:
            				case LENGTH:
            				case SHARED_REF:
            				case STRING_TYPE:
            				case TYPE:
            				case 64:
            					{
            						alt28=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 28 );
            				    ex->set_state( 11 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case DRSQBRACKET:
            					{
            						alt28=1;
            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case SHARED_REF:
            				case STRING:
            				case STRING_TYPE:
            				case TYPE:
            				case VOID_TYPE:
            				case 64:
            					{
            						alt28=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 28 );
            				    ex->set_state( 12 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt28=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 28 );
            		    ex->set_state( 5 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            		case QUESTION:
            			{
            				alt28=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case INT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt28=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt28=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 27 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 56:
            						case 57:
            						case 59:
            						case 60:
            						case 62:
            						case 64:
            						case 66:
            						case 67:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 75:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 16 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt28=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt28=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 27 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 56:
            						case 57:
            						case 59:
            						case 60:
            						case 62:
            						case 64:
            						case 66:
            						case 67:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 75:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 17 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt28=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt28=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 27 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 56:
            						case 57:
            						case 59:
            						case 60:
            						case 62:
            						case 64:
            						case 66:
            						case 67:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 75:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 18 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt28=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt28=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 27 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 56:
            						case 57:
            						case 59:
            						case 60:
            						case 62:
            						case 64:
            						case 66:
            						case 67:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 75:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 19 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt28=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt28=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 27 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 56:
            						case 57:
            						case 59:
            						case 60:
            						case 62:
            						case 64:
            						case 66:
            						case 67:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 75:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 20 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case NULLTOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt28=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt28=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 27 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 56:
            						case 57:
            						case 59:
            						case 60:
            						case 62:
            						case 64:
            						case 66:
            						case 67:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 75:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 21 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case VOID_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt28=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt28=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 28 );
            														    ex->set_state( 27 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 56:
            												case 57:
            												case 59:
            												case 60:
            												case 62:
            												case 64:
            												case 66:
            												case 67:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 75:
            													{
            														alt28=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 28 );
            												    ex->set_state( 30 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 28 );
            										    ex->set_state( 29 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 22 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt28=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt28=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 28 );
            														    ex->set_state( 27 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 56:
            												case 57:
            												case 59:
            												case 60:
            												case 62:
            												case 64:
            												case 66:
            												case 67:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 75:
            													{
            														alt28=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 28 );
            												    ex->set_state( 30 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 28 );
            										    ex->set_state( 29 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 23 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt28=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt28=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 28 );
            														    ex->set_state( 27 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 56:
            												case 57:
            												case 59:
            												case 60:
            												case 62:
            												case 64:
            												case 66:
            												case 67:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 75:
            													{
            														alt28=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 28 );
            												    ex->set_state( 30 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 28 );
            										    ex->set_state( 29 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 24 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt28=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt28=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 28 );
            														    ex->set_state( 27 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 56:
            												case 57:
            												case 59:
            												case 60:
            												case 62:
            												case 64:
            												case 66:
            												case 67:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 75:
            													{
            														alt28=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 28 );
            												    ex->set_state( 30 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 28 );
            										    ex->set_state( 29 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 25 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt28=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt28=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 28 );
            														    ex->set_state( 27 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 56:
            												case 57:
            												case 59:
            												case 60:
            												case 62:
            												case 64:
            												case 66:
            												case 67:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 75:
            													{
            														alt28=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 28 );
            												    ex->set_state( 30 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 28 );
            										    ex->set_state( 29 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 26 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case RSQBRACKET:
            					{
            						alt28=1;
            					}
            				    break;
            				case DOUBDEC:
            				case DOUBINC:
            				case ID:
            				case LBRACKET:
            				case LENGTH:
            				case SHARED_REF:
            				case STRING_TYPE:
            				case TYPE:
            				case 64:
            					{
            						alt28=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 28 );
            				    ex->set_state( 11 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case DRSQBRACKET:
            					{
            						alt28=1;
            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case SHARED_REF:
            				case STRING:
            				case STRING_TYPE:
            				case TYPE:
            				case VOID_TYPE:
            				case 64:
            					{
            						alt28=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 28 );
            				    ex->set_state( 13 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACKET:
            			{
            				alt28=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 28 );
            		    ex->set_state( 6 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case STRING_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            		case QUESTION:
            			{
            				alt28=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case INT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt28=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt28=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 27 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 56:
            						case 57:
            						case 59:
            						case 60:
            						case 62:
            						case 64:
            						case 66:
            						case 67:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 75:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 16 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt28=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt28=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 27 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 56:
            						case 57:
            						case 59:
            						case 60:
            						case 62:
            						case 64:
            						case 66:
            						case 67:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 75:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 17 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt28=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt28=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 27 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 56:
            						case 57:
            						case 59:
            						case 60:
            						case 62:
            						case 64:
            						case 66:
            						case 67:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 75:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 18 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt28=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt28=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 27 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 56:
            						case 57:
            						case 59:
            						case 60:
            						case 62:
            						case 64:
            						case 66:
            						case 67:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 75:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 19 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt28=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt28=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 27 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 56:
            						case 57:
            						case 59:
            						case 60:
            						case 62:
            						case 64:
            						case 66:
            						case 67:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 75:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 20 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case NULLTOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt28=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt28=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 27 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 56:
            						case 57:
            						case 59:
            						case 60:
            						case 62:
            						case 64:
            						case 66:
            						case 67:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 75:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 21 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case VOID_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt28=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt28=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 28 );
            														    ex->set_state( 27 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 56:
            												case 57:
            												case 59:
            												case 60:
            												case 62:
            												case 64:
            												case 66:
            												case 67:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 75:
            													{
            														alt28=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 28 );
            												    ex->set_state( 30 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 28 );
            										    ex->set_state( 29 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 22 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt28=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt28=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 28 );
            														    ex->set_state( 27 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 56:
            												case 57:
            												case 59:
            												case 60:
            												case 62:
            												case 64:
            												case 66:
            												case 67:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 75:
            													{
            														alt28=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 28 );
            												    ex->set_state( 30 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 28 );
            										    ex->set_state( 29 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 23 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt28=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt28=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 28 );
            														    ex->set_state( 27 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 56:
            												case 57:
            												case 59:
            												case 60:
            												case 62:
            												case 64:
            												case 66:
            												case 67:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 75:
            													{
            														alt28=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 28 );
            												    ex->set_state( 30 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 28 );
            										    ex->set_state( 29 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 24 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt28=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt28=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 28 );
            														    ex->set_state( 27 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 56:
            												case 57:
            												case 59:
            												case 60:
            												case 62:
            												case 64:
            												case 66:
            												case 67:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 75:
            													{
            														alt28=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 28 );
            												    ex->set_state( 30 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 28 );
            										    ex->set_state( 29 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 25 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt28=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt28=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 28 );
            														    ex->set_state( 27 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 56:
            												case 57:
            												case 59:
            												case 60:
            												case 62:
            												case 64:
            												case 66:
            												case 67:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 75:
            													{
            														alt28=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 28 );
            												    ex->set_state( 30 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 28 );
            										    ex->set_state( 29 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 28 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt28=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 28 );
            						    ex->set_state( 26 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case RSQBRACKET:
            					{
            						alt28=1;
            					}
            				    break;
            				case DOUBDEC:
            				case DOUBINC:
            				case ID:
            				case LBRACKET:
            				case LENGTH:
            				case SHARED_REF:
            				case STRING_TYPE:
            				case TYPE:
            				case 64:
            					{
            						alt28=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 28 );
            				    ex->set_state( 11 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case DRSQBRACKET:
            					{
            						alt28=1;
            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case SHARED_REF:
            				case STRING:
            				case STRING_TYPE:
            				case TYPE:
            				case VOID_TYPE:
            				case 64:
            					{
            						alt28=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 28 );
            				    ex->set_state( 13 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACKET:
            			{
            				alt28=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 28 );
            		    ex->set_state( 7 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case SHARED_REF:
            	{
            		switch ( this->LA(2) )
            		{
            		case TYPE:
            			{
            				switch ( this->LA(3) )
            				{
            				case ID:
            					{
            						alt28=1;
            					}
            				    break;
            				case DLSQBRACKET:
            				case LBRACKET:
            				case LSQBRACKET:
            					{
            						alt28=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 28 );
            				    ex->set_state( 14 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case STRING_TYPE:
            			{
            				switch ( this->LA(3) )
            				{
            				case ID:
            					{
            						alt28=1;
            					}
            				    break;
            				case DLSQBRACKET:
            				case LBRACKET:
            				case LSQBRACKET:
            					{
            						alt28=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 28 );
            				    ex->set_state( 15 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case BOOL_TYPE:
            		case CHAR_TYPE:
            		case FLOAT_TYPE:
            		case INT_TYPE:
            		case VOID_TYPE:
            			{
            				alt28=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 28 );
            		    ex->set_state( 8 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case WEAK_REF:
            	{
            		alt28=1;
            	}
                break;
            case BOOL:
            case CHAR:
            case DOUBDEC:
            case DOUBINC:
            case FLOAT:
            case ID:
            case INT:
            case LBRACKET:
            case LENGTH:
            case NULLTOK:
            case STRING:
            case 64:
            	{
            		alt28=2;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 28 );
                ex->set_state( 0 );


                goto ruleinstructionScalarEx;

            }

            switch (alt28)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_declaration_in_instructionScalar4250);
        	        declaration41=declaration();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionScalarEx;
        	        }


        	        {
        	            node = declaration41
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_assignment_or_expression_in_instructionScalar4263);
        	        assignment_or_expression42=assignment_or_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionScalarEx;
        	        }


        	        {
        	            node = assignment_or_expression42
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleinstructionScalarEx;
    ruleinstructionScalarEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::continue_instruction*
WNScriptASTParser::continueInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::continue_instruction* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* b = NULL;






      node = nullptr;



    {
        {
            a =  this->matchToken(CONTINUE, &FOLLOW_CONTINUE_in_continueInst4293);
            if  (this->hasException())
            {
                goto rulecontinueInstEx;
            }


            b =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_continueInst4297);
            if  (this->hasException())
            {
                goto rulecontinueInstEx;
            }


            {
                 node = m_allocator->construct<scripting::continue_instruction>(m_allocator); SET_LOCATION(node, a); SET_END_LOCATION(node, b);
            }


        }

    }
    goto rulecontinueInstEx;
    rulecontinueInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::break_instruction*
WNScriptASTParser::breakInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::break_instruction* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* b = NULL;






        node = nullptr;



    {
        {
            a =  this->matchToken(BREAK, &FOLLOW_BREAK_in_breakInst4323);
            if  (this->hasException())
            {
                goto rulebreakInstEx;
            }


            b =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_breakInst4327);
            if  (this->hasException())
            {
                goto rulebreakInstEx;
            }


            {
                 node = m_allocator->construct<scripting::break_instruction>(m_allocator); SET_LOCATION(node, a); SET_END_LOCATION(node, b);
            }


        }

    }
    goto rulebreakInstEx;
    rulebreakInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::return_instruction*
WNScriptASTParser::returnInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::return_instruction* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* b = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    const ImplTraits::CommonTokenType* d = NULL;
    scripting::expression* expr43;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt29;

            alt29=2;

            switch ( this->LA(1) )
            {
            case RETURN:
            	{
            		switch ( this->LA(2) )
            		{
            		case SEMICOLON:
            			{
            				alt29=2;
            			}
            		    break;
            		case BOOL:
            		case BOOL_TYPE:
            		case CHAR:
            		case CHAR_TYPE:
            		case DOUBDEC:
            		case DOUBINC:
            		case FLOAT:
            		case FLOAT_TYPE:
            		case ID:
            		case INT:
            		case INT_TYPE:
            		case LBRACKET:
            		case LENGTH:
            		case NULLTOK:
            		case SHARED_REF:
            		case STRING:
            		case STRING_TYPE:
            		case TYPE:
            		case VOID_TYPE:
            		case 64:
            			{
            				alt29=1;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 29 );
            		    ex->set_state( 1 );


            		    goto rulereturnInstEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 29 );
                ex->set_state( 0 );


                goto rulereturnInstEx;

            }

            switch (alt29)
            {
        	case 1:
        	    {
        	        a =  this->matchToken(RETURN, &FOLLOW_RETURN_in_returnInst4354);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_returnInst4356);
        	        expr43=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        b =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_returnInst4360);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::return_instruction>(m_allocator, expr43
        	            ); SET_LOCATION(node, a); SET_END_LOCATION(node, b);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        c =  this->matchToken(RETURN, &FOLLOW_RETURN_in_returnInst4374);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        d =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_returnInst4378);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::return_instruction>(m_allocator); SET_LOCATION(node, c); SET_END_LOCATION(node, d);
        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulereturnInstEx;
    rulereturnInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::whileInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    const ImplTraits::CommonTokenType* WHILE46 = NULL;
    scripting::expression* expr44;
    scripting::instruction_list* instruction_list45;





        node = nullptr;



    {
        {
            WHILE46 =  this->matchToken(WHILE, &FOLLOW_WHILE_in_whileInst4411);
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_whileInst4413);
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


            this->followPush(FOLLOW_expr_in_whileInst4415);
            expr44=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_whileInst4417);
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


            this->followPush(FOLLOW_instruction_list_in_whileInst4419);
            instruction_list45=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


            {
                 node = m_allocator->construct<scripting::while_instruction>(m_allocator, expr44
                , instruction_list45
                ); SET_LOCATION(node, WHILE46); SET_END_LOCATION_FROM_NODE(node,
                instruction_list45
                );
            }


        }

    }
    goto rulewhileInstEx;
    rulewhileInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::doInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    const ImplTraits::CommonTokenType* DO49 = NULL;
    const ImplTraits::CommonTokenType* SEMICOLON50 = NULL;
    scripting::expression* expr47;
    scripting::instruction_list* instruction_list48;





        node = nullptr;



    {
        {
            DO49 =  this->matchToken(DO, &FOLLOW_DO_in_doInst4455);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            this->followPush(FOLLOW_instruction_list_in_doInst4457);
            instruction_list48=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


             this->matchToken(WHILE, &FOLLOW_WHILE_in_doInst4459);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_doInst4461);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            this->followPush(FOLLOW_expr_in_doInst4463);
            expr47=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_doInst4465);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            SEMICOLON50 =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_doInst4467);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            {
                node = m_allocator->construct<scripting::do_instruction>(m_allocator, expr47
                , instruction_list48
                ); SET_LOCATION(node, DO49); SET_END_LOCATION(node, SEMICOLON50);
            }


        }

    }
    goto ruledoInstEx;
    ruledoInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::for_instruction*
WNScriptASTParser::forInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::for_instruction* node;


    const ImplTraits::CommonTokenType* FOR51 = NULL;
    scripting::instruction* a;
    scripting::expression* b;
    scripting::instruction* c;
    scripting::instruction_list* d;





        node =  m_allocator->construct<scripting::for_instruction>(m_allocator);



    {
        {
            FOR51 =  this->matchToken(FOR, &FOLLOW_FOR_in_forInst4499);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_forInst4501);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            {
                 SET_LOCATION(node, FOR51);
            }


            {
                int alt30=2;
                switch ( this->LA(1) )
                {
                    case BOOL:
                    case BOOL_TYPE:
                    case CHAR:
                    case CHAR_TYPE:
                    case DOUBDEC:
                    case DOUBINC:
                    case FLOAT:
                    case FLOAT_TYPE:
                    case ID:
                    case INT:
                    case INT_TYPE:
                    case LBRACKET:
                    case LENGTH:
                    case NULLTOK:
                    case SHARED_REF:
                    case STRING:
                    case STRING_TYPE:
                    case TYPE:
                    case VOID_TYPE:
                    case WEAK_REF:
                    case 64:
                    	{
                    		alt30=1;
                    	}
                        break;
                }

                switch (alt30)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_instructionScalar_in_forInst4529);
            	        a=instructionScalar();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleforInstEx;
            	        }


            	        {
            	            node->add_initializer(a
            	            );
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_forInst4535);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            {
                int alt31=2;
                switch ( this->LA(1) )
                {
                    case BOOL:
                    case BOOL_TYPE:
                    case CHAR:
                    case CHAR_TYPE:
                    case DOUBDEC:
                    case DOUBINC:
                    case FLOAT:
                    case FLOAT_TYPE:
                    case ID:
                    case INT:
                    case INT_TYPE:
                    case LBRACKET:
                    case LENGTH:
                    case NULLTOK:
                    case SHARED_REF:
                    case STRING:
                    case STRING_TYPE:
                    case TYPE:
                    case VOID_TYPE:
                    case 64:
                    	{
                    		alt31=1;
                    	}
                        break;
                }

                switch (alt31)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_expr_in_forInst4560);
            	        b=expr();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleforInstEx;
            	        }


            	        {
            	            node->add_condition(b
            	            );
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_forInst4574);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            {
                int alt32=2;
                switch ( this->LA(1) )
                {
                    case BOOL:
                    case BOOL_TYPE:
                    case CHAR:
                    case CHAR_TYPE:
                    case DOUBDEC:
                    case DOUBINC:
                    case FLOAT:
                    case FLOAT_TYPE:
                    case ID:
                    case INT:
                    case INT_TYPE:
                    case LBRACKET:
                    case LENGTH:
                    case NULLTOK:
                    case SHARED_REF:
                    case STRING:
                    case STRING_TYPE:
                    case TYPE:
                    case VOID_TYPE:
                    case WEAK_REF:
                    case 64:
                    	{
                    		alt32=1;
                    	}
                        break;
                }

                switch (alt32)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_instructionScalar_in_forInst4599);
            	        c=instructionScalar();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleforInstEx;
            	        }


            	        {
            	            node->add_post_op(c
            	            );
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_forInst4605);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            {
                this->followPush(FOLLOW_instruction_list_in_forInst4630);
                d=instruction_list();

                this->followPop();
                if  (this->hasException())
                {
                    goto ruleforInstEx;
                }


                {
                    node->add_body(d
                    ); SET_END_LOCATION_FROM_NODE(node, d
                    );
                }


            }


        }

    }
    goto ruleforInstEx;
    ruleforInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::else_if_instruction*
WNScriptASTParser::elsemiddle()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::else_if_instruction* node;


    const ImplTraits::CommonTokenType* ELSE54 = NULL;
    scripting::expression* expr52;
    scripting::instruction_list* instruction_list53;





        node = nullptr;



    {
        {
            ELSE54 =  this->matchToken(ELSE, &FOLLOW_ELSE_in_elsemiddle4678);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


             this->matchToken(IF, &FOLLOW_IF_in_elsemiddle4680);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_elsemiddle4682);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


            this->followPush(FOLLOW_expr_in_elsemiddle4684);
            expr52=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_elsemiddle4686);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


            this->followPush(FOLLOW_instruction_list_in_elsemiddle4688);
            instruction_list53=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


            {
                 node = m_allocator->construct<scripting::else_if_instruction>(m_allocator, expr52
                , instruction_list53
                ); SET_LOCATION(node, ELSE54); SET_END_LOCATION_FROM_NODE(node,
                instruction_list53
                );
            }


        }

    }
    goto ruleelsemiddleEx;
    ruleelsemiddleEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction_list*
WNScriptASTParser::endif()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction_list* node;


    scripting::instruction_list* instruction_list55;





        node = nullptr;



    {
        {
             this->matchToken(ELSE, &FOLLOW_ELSE_in_endif4721);
            if  (this->hasException())
            {
                goto ruleendifEx;
            }


            this->followPush(FOLLOW_instruction_list_in_endif4723);
            instruction_list55=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleendifEx;
            }


            {
                node = instruction_list55
                ;
            }


        }

    }
    goto ruleendifEx;
    ruleendifEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::if_instruction*
WNScriptASTParser::ifInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::if_instruction* node;


    const ImplTraits::CommonTokenType* IF58 = NULL;
    scripting::expression* expr56;
    scripting::instruction_list* instruction_list57;
    scripting::else_if_instruction* elsemiddle59;
    scripting::instruction_list* endif60;





        node = nullptr;



    {
        {
            IF58 =  this->matchToken(IF, &FOLLOW_IF_in_ifInst4753);
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_ifInst4755);
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


            this->followPush(FOLLOW_expr_in_ifInst4757);
            expr56=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_ifInst4759);
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


            this->followPush(FOLLOW_instruction_list_in_ifInst4761);
            instruction_list57=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


            {
                node = m_allocator->construct<scripting::if_instruction>(m_allocator, expr56
                , instruction_list57
                ); SET_LOCATION(node, IF58); SET_END_LOCATION_FROM_NODE(node,
                instruction_list57
                );
            }



            for (;;)
            {
                int alt33=2;
                switch ( this->LA(1) )
                {
                case ELSE:
                	{
                		switch ( this->LA(2) )
                		{
                		case IF:
                			{
                				alt33=1;
                			}
                		    break;

                		}

                	}
                    break;

                }

                switch (alt33)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_elsemiddle_in_ifInst4778);
            	        elsemiddle59=elsemiddle();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleifInstEx;
            	        }


            	        {
            	            node->add_else_if(elsemiddle59
            	            ); SET_END_LOCATION_FROM_NODE(node, elsemiddle59
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop33;
            	    break;
                }
            }
            loop33: ;


            {
                int alt34=2;
                switch ( this->LA(1) )
                {
                    case ELSE:
                    	{
                    		alt34=1;
                    	}
                        break;
                }

                switch (alt34)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_endif_in_ifInst4798);
            	        endif60=endif();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleifInstEx;
            	        }


            	        {
            	            node->add_else(endif60
            	            ); SET_LOCATION(node, IF58); SET_END_LOCATION_FROM_NODE(node,
            	            endif60
            	            );
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    goto ruleifInstEx;
    ruleifInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::instruction()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    scripting::if_instruction* ifInst61;
    scripting::instruction* whileInst62;
    scripting::instruction* doInst63;
    scripting::for_instruction* forInst64;
    scripting::instruction* instructionScalar65;
    scripting::break_instruction* breakInst66;
    scripting::continue_instruction* continueInst67;
    scripting::return_instruction* returnInst68;
    scripting::instruction_list* instruction_list69;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt35;

            alt35=9;

            switch ( this->LA(1) )
            {
            case IF:
            	{
            		alt35=1;
            	}
                break;
            case WHILE:
            	{
            		alt35=2;
            	}
                break;
            case DO:
            	{
            		alt35=3;
            	}
                break;
            case FOR:
            	{
            		alt35=4;
            	}
                break;
            case BOOL:
            case BOOL_TYPE:
            case CHAR:
            case CHAR_TYPE:
            case DOUBDEC:
            case DOUBINC:
            case FLOAT:
            case FLOAT_TYPE:
            case ID:
            case INT:
            case INT_TYPE:
            case LBRACKET:
            case LENGTH:
            case NULLTOK:
            case SHARED_REF:
            case STRING:
            case STRING_TYPE:
            case TYPE:
            case VOID_TYPE:
            case WEAK_REF:
            case 64:
            	{
            		alt35=5;
            	}
                break;
            case BREAK:
            	{
            		alt35=6;
            	}
                break;
            case CONTINUE:
            	{
            		alt35=7;
            	}
                break;
            case RETURN:
            	{
            		alt35=8;
            	}
                break;
            case LBRACE:
            	{
            		alt35=9;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 35 );
                ex->set_state( 0 );


                goto ruleinstructionEx;

            }

            switch (alt35)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_ifInst_in_instruction4832);
        	        ifInst61=ifInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	             node = ifInst61
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_whileInst_in_instruction4853);
        	        whileInst62=whileInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = whileInst62
        	            ;
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        this->followPush(FOLLOW_doInst_in_instruction4870);
        	        doInst63=doInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = doInst63
        	            ;
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        this->followPush(FOLLOW_forInst_in_instruction4890);
        	        forInst64=forInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = forInst64
        	            ;
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        this->followPush(FOLLOW_instructionScalar_in_instruction4910);
        	        instructionScalar65=instructionScalar();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	         this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_instruction4912);
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = instructionScalar65
        	            ;
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	        this->followPush(FOLLOW_breakInst_in_instruction4925);
        	        breakInst66=breakInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = breakInst66
        	            ;
        	        }


        	    }
        	    break;
        	case 7:
        	    {
        	        this->followPush(FOLLOW_continueInst_in_instruction4938);
        	        continueInst67=continueInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = continueInst67
        	            ;
        	        }


        	    }
        	    break;
        	case 8:
        	    {
        	        this->followPush(FOLLOW_returnInst_in_instruction4951);
        	        returnInst68=returnInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = returnInst68
        	            ;
        	        }


        	    }
        	    break;
        	case 9:
        	    {
        	        this->followPush(FOLLOW_instruction_list_in_instruction4964);
        	        instruction_list69=instruction_list();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	             node = instruction_list69
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleinstructionEx;
    ruleinstructionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction_list*
WNScriptASTParser::instruction_list()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction_list* node;


    const ImplTraits::CommonTokenType* lb = NULL;
    const ImplTraits::CommonTokenType* rb = NULL;
    scripting::instruction* b;





        node = m_allocator->construct<scripting::instruction_list>(m_allocator);



    {
        {
            lb =  this->matchToken(LBRACE, &FOLLOW_LBRACE_in_instruction_list4996);
            if  (this->hasException())
            {
                goto ruleinstruction_listEx;
            }



            for (;;)
            {
                int alt36=2;
                switch ( this->LA(1) )
                {
                case BOOL:
                case BOOL_TYPE:
                case BREAK:
                case CHAR:
                case CHAR_TYPE:
                case CONTINUE:
                case DO:
                case DOUBDEC:
                case DOUBINC:
                case FLOAT:
                case FLOAT_TYPE:
                case FOR:
                case ID:
                case IF:
                case INT:
                case INT_TYPE:
                case LBRACE:
                case LBRACKET:
                case LENGTH:
                case NULLTOK:
                case RETURN:
                case SHARED_REF:
                case STRING:
                case STRING_TYPE:
                case TYPE:
                case VOID_TYPE:
                case WEAK_REF:
                case WHILE:
                case 64:
                	{
                		alt36=1;
                	}
                    break;

                }

                switch (alt36)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_instruction_in_instruction_list5013);
            	        b=instruction();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleinstruction_listEx;
            	        }


            	        {
            	            node->add_instruction(b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop36;
            	    break;
                }
            }
            loop36: ;


            rb =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_instruction_list5030);
            if  (this->hasException())
            {
                goto ruleinstruction_listEx;
            }


            {

                          SET_LOCATION(node, lb); SET_END_LOCATION(node, rb);

            }


        }

    }
    goto ruleinstruction_listEx;
    ruleinstruction_listEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::function*
WNScriptASTParser::function()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::function* node;


    scripting::parameter* param70;
    scripting::parameter_list* parameterList71;
    scripting::instruction_list* instruction_list72;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_param_in_function5060);
            param70=param();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefunctionEx;
            }


            this->followPush(FOLLOW_parameterList_in_function5062);
            parameterList71=parameterList();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefunctionEx;
            }


            this->followPush(FOLLOW_instruction_list_in_function5064);
            instruction_list72=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefunctionEx;
            }


            {
                 node = m_allocator->construct<scripting::function>(m_allocator, param70
                , parameterList71
                , instruction_list72
                ); SET_LOCATION_FROM_NODE(node, param70
                ); SET_END_LOCATION_FROM_NODE(node, instruction_list72
                );
            }


        }

    }
    goto rulefunctionEx;
    rulefunctionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::struct_definition*
WNScriptASTParser::structDecl()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::struct_definition* node;


    const ImplTraits::CommonTokenType* TYPE73 = NULL;
    const ImplTraits::CommonTokenType* STRUCT74 = NULL;
    const ImplTraits::CommonTokenType* RBRACE75 = NULL;
    scripting::declaration* a;





        node = nullptr;



    {
        {
            STRUCT74 =  this->matchToken(STRUCT, &FOLLOW_STRUCT_in_structDecl5094);
            if  (this->hasException())
            {
                goto rulestructDeclEx;
            }


            TYPE73 =  this->matchToken(TYPE, &FOLLOW_TYPE_in_structDecl5096);
            if  (this->hasException())
            {
                goto rulestructDeclEx;
            }


            {
                node= m_allocator->construct<scripting::struct_definition>(m_allocator, (TYPE73->getText()).c_str()); SET_LOCATION(node, STRUCT74);
            }


             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_structDecl5112);
            if  (this->hasException())
            {
                goto rulestructDeclEx;
            }



            for (;;)
            {
                int alt37=2;
                switch ( this->LA(1) )
                {
                case BOOL_TYPE:
                case CHAR_TYPE:
                case FLOAT_TYPE:
                case INT_TYPE:
                case SHARED_REF:
                case STRING_TYPE:
                case TYPE:
                case VOID_TYPE:
                case WEAK_REF:
                	{
                		alt37=1;
                	}
                    break;

                }

                switch (alt37)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_declaration_in_structDecl5117);
            	        a=declaration();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulestructDeclEx;
            	        }


            	        {
            	             node->add_struct_elem(a
            	            );
            	        }


            	         this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_structDecl5121);
            	        if  (this->hasException())
            	        {
            	            goto rulestructDeclEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop37;
            	    break;
                }
            }
            loop37: ;


            RBRACE75 =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_structDecl5126);
            if  (this->hasException())
            {
                goto rulestructDeclEx;
            }


            {
                 SET_END_LOCATION(node, RBRACE75);
            }


        }

    }
    goto rulestructDeclEx;
    rulestructDeclEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::struct_definition*
WNScriptASTParser::classDecl()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::struct_definition* node;


    const ImplTraits::CommonTokenType* f = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    const ImplTraits::CommonTokenType* g = NULL;
    const ImplTraits::CommonTokenType* d = NULL;
    const ImplTraits::CommonTokenType* e = NULL;
    const ImplTraits::CommonTokenType* RBRACE76 = NULL;
    scripting::declaration* a;
    scripting::declaration* j;
    scripting::function* b;
    scripting::function* h;
    scripting::function* i;





        node = nullptr;



    {
        {
            {
                int alt38=2;
                switch ( this->LA(1) )
                {
                case CLASS:
                	{
                		switch ( this->LA(2) )
                		{
                		case TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case COLON:
                					{
                						alt38=2;
                					}
                				    break;
                				case LBRACE:
                					{
                						alt38=1;
                					}
                				    break;

                				default:
                				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 38 );
                				    ex->set_state( 2 );


                				    goto ruleclassDeclEx;

                				}

                			}
                		    break;

                		default:
                		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 38 );
                		    ex->set_state( 1 );


                		    goto ruleclassDeclEx;

                		}

                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 38 );
                    ex->set_state( 0 );


                    goto ruleclassDeclEx;

                }

                switch (alt38)
                {
            	case 1:
            	    {
            	        {
            	            f =  this->matchToken(CLASS, &FOLLOW_CLASS_in_classDecl5179);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            c =  this->matchToken(TYPE, &FOLLOW_TYPE_in_classDecl5183);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                node= m_allocator->construct<scripting::struct_definition>(m_allocator, (c->getText()).c_str(), true); SET_LOCATION(node, f);
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	            g =  this->matchToken(CLASS, &FOLLOW_CLASS_in_classDecl5203);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            d =  this->matchToken(TYPE, &FOLLOW_TYPE_in_classDecl5207);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	             this->matchToken(COLON, &FOLLOW_COLON_in_classDecl5209);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            e =  this->matchToken(TYPE, &FOLLOW_TYPE_in_classDecl5213);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                node= m_allocator->construct<scripting::struct_definition>(m_allocator, (d->getText()).c_str(), true, (e->getText()).c_str()); SET_LOCATION(node, g);
            	            }


            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_classDecl5240);
            if  (this->hasException())
            {
                goto ruleclassDeclEx;
            }



            for (;;)
            {
                int alt39=6;
                switch ( this->LA(1) )
                {
                case VOID_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 71:
                					{
                						alt39=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt39=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 71:
                											{
                												alt39=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt39=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 71:
                											{
                												alt39=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt39=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 71:
                											{
                												alt39=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt39=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 71:
                											{
                												alt39=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt39=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 71:
                											{
                												alt39=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt39=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 71:
                											{
                												alt39=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt39=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 71:
                																	{
                																		alt39=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt39=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 71:
                																	{
                																		alt39=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt39=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 71:
                																	{
                																		alt39=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt39=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 71:
                																	{
                																		alt39=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt39=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 71:
                																	{
                																		alt39=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt39=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 71:
                									{
                										alt39=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt39=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 71:
                									{
                										alt39=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt39=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case INT_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 71:
                					{
                						alt39=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt39=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 71:
                											{
                												alt39=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt39=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 71:
                											{
                												alt39=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt39=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 71:
                											{
                												alt39=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt39=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 71:
                											{
                												alt39=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt39=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 71:
                											{
                												alt39=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt39=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 71:
                											{
                												alt39=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt39=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 71:
                																	{
                																		alt39=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt39=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 71:
                																	{
                																		alt39=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt39=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 71:
                																	{
                																		alt39=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt39=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 71:
                																	{
                																		alt39=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt39=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 71:
                																	{
                																		alt39=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt39=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 71:
                									{
                										alt39=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt39=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 71:
                									{
                										alt39=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt39=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case FLOAT_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 71:
                					{
                						alt39=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt39=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 71:
                											{
                												alt39=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt39=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 71:
                											{
                												alt39=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt39=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 71:
                											{
                												alt39=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt39=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 71:
                											{
                												alt39=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt39=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 71:
                											{
                												alt39=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt39=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 71:
                											{
                												alt39=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt39=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 71:
                																	{
                																		alt39=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt39=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 71:
                																	{
                																		alt39=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt39=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 71:
                																	{
                																		alt39=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt39=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 71:
                																	{
                																		alt39=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt39=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 71:
                																	{
                																		alt39=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt39=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 71:
                									{
                										alt39=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt39=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 71:
                									{
                										alt39=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt39=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case CHAR_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 71:
                					{
                						alt39=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt39=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 71:
                											{
                												alt39=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt39=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 71:
                											{
                												alt39=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt39=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 71:
                											{
                												alt39=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt39=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 71:
                											{
                												alt39=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt39=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 71:
                											{
                												alt39=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt39=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 71:
                											{
                												alt39=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt39=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 71:
                																	{
                																		alt39=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt39=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 71:
                																	{
                																		alt39=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt39=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 71:
                																	{
                																		alt39=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt39=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 71:
                																	{
                																		alt39=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt39=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 71:
                																	{
                																		alt39=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt39=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 71:
                									{
                										alt39=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt39=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 71:
                									{
                										alt39=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt39=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case BOOL_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 71:
                					{
                						alt39=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt39=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 71:
                											{
                												alt39=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt39=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 71:
                											{
                												alt39=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt39=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 71:
                											{
                												alt39=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt39=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 71:
                											{
                												alt39=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt39=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 71:
                											{
                												alt39=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt39=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 71:
                											{
                												alt39=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt39=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 71:
                																	{
                																		alt39=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt39=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 71:
                																	{
                																		alt39=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt39=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 71:
                																	{
                																		alt39=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt39=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 71:
                																	{
                																		alt39=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt39=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 71:
                																	{
                																		alt39=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt39=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 71:
                									{
                										alt39=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt39=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 71:
                									{
                										alt39=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt39=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 71:
                					{
                						alt39=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt39=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 71:
                											{
                												alt39=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt39=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 71:
                											{
                												alt39=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt39=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 71:
                											{
                												alt39=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt39=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 71:
                											{
                												alt39=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt39=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 71:
                											{
                												alt39=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt39=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 71:
                											{
                												alt39=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt39=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 71:
                																	{
                																		alt39=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt39=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 71:
                																	{
                																		alt39=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt39=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 71:
                																	{
                																		alt39=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt39=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 71:
                																	{
                																		alt39=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt39=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 71:
                																	{
                																		alt39=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt39=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 71:
                									{
                										alt39=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt39=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 71:
                									{
                										alt39=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt39=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case QUESTION:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 71:
                							{
                								alt39=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt39=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case STRING_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 71:
                					{
                						alt39=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt39=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 71:
                											{
                												alt39=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt39=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 71:
                											{
                												alt39=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt39=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 71:
                											{
                												alt39=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt39=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 71:
                											{
                												alt39=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt39=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 71:
                											{
                												alt39=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt39=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 71:
                											{
                												alt39=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt39=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 71:
                																	{
                																		alt39=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt39=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 71:
                																	{
                																		alt39=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt39=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 71:
                																	{
                																		alt39=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt39=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 71:
                																	{
                																		alt39=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt39=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 71:
                																	{
                																		alt39=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt39=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 71:
                									{
                										alt39=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt39=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 71:
                									{
                										alt39=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt39=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case QUESTION:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 71:
                							{
                								alt39=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt39=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case SHARED_REF:
                	{
                		switch ( this->LA(2) )
                		{
                		case TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 71:
                							{
                								alt39=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt39=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case STRING_TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 71:
                							{
                								alt39=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt39=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case WEAK_REF:
                	{
                		switch ( this->LA(2) )
                		{
                		case TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 71:
                							{
                								alt39=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt39=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case STRING_TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 71:
                							{
                								alt39=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt39=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case 66:
                	{
                		alt39=2;
                	}
                    break;
                case VIRTUAL:
                	{
                		alt39=4;
                	}
                    break;
                case OVERRIDE:
                	{
                		alt39=5;
                	}
                    break;

                }

                switch (alt39)
                {
            	case 1:
            	    {
            	        {
            	            this->followPush(FOLLOW_declaration_in_classDecl5283);
            	            a=declaration();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_struct_elem(a
            	                );
            	            }


            	             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_classDecl5287);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	            this->followPush(FOLLOW_inherited_declaration_in_classDecl5313);
            	            j=inherited_declaration();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_struct_elem(j
            	                );
            	            }


            	             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_classDecl5317);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	        {
            	            this->followPush(FOLLOW_function_in_classDecl5343);
            	            b=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_function(b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 4:
            	    {
            	        {
            	             this->matchToken(VIRTUAL, &FOLLOW_VIRTUAL_in_classDecl5372);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            this->followPush(FOLLOW_function_in_classDecl5376);
            	            h=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_function(h
            	                ); h
            	                ->set_is_virtual(true);
            	            }


            	        }


            	    }
            	    break;
            	case 5:
            	    {
            	        {
            	             this->matchToken(OVERRIDE, &FOLLOW_OVERRIDE_in_classDecl5402);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            this->followPush(FOLLOW_function_in_classDecl5406);
            	            i=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_function(i
            	                ); i
            	                ->set_is_override(true);
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop39;
            	    break;
                }
            }
            loop39: ;


            RBRACE76 =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_classDecl5442);
            if  (this->hasException())
            {
                goto ruleclassDeclEx;
            }


            {
                 SET_END_LOCATION(node, RBRACE76);
            }


        }

    }
    goto ruleclassDeclEx;
    ruleclassDeclEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






const char*
WNScriptASTParser::inc()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    const char* file;


    const ImplTraits::CommonTokenType* STRING77 = NULL;






        file = nullptr;



    {
        {
             this->matchToken(INCLUDE, &FOLLOW_INCLUDE_in_inc5472);
            if  (this->hasException())
            {
                goto ruleincEx;
            }


            STRING77 =  this->matchToken(STRING, &FOLLOW_STRING_in_inc5474);
            if  (this->hasException())
            {
                goto ruleincEx;
            }


            {
                 file = (STRING77->getText()).c_str();
            }


        }

    }
    goto ruleincEx;
    ruleincEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return file;
}






scripting::script_file*
WNScriptASTParser::program()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::script_file* node;


    scripting::function* function78;
    scripting::struct_definition* structDecl79;
    scripting::struct_definition* classDecl80;
    const char* inc81;





        node = m_allocator->construct<scripting::script_file>(m_allocator);



    {
        {

            for (;;)
            {
                int alt40=5;
                switch ( this->LA(1) )
                {
                case BOOL_TYPE:
                case CHAR_TYPE:
                case FLOAT_TYPE:
                case INT_TYPE:
                case SHARED_REF:
                case STRING_TYPE:
                case TYPE:
                case VOID_TYPE:
                case WEAK_REF:
                	{
                		alt40=1;
                	}
                    break;
                case STRUCT:
                	{
                		alt40=2;
                	}
                    break;
                case CLASS:
                	{
                		alt40=3;
                	}
                    break;
                case INCLUDE:
                	{
                		alt40=4;
                	}
                    break;

                }

                switch (alt40)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_function_in_program5520);
            	        function78=function();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_function(function78
            	            );
            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        this->followPush(FOLLOW_structDecl_in_program5542);
            	        structDecl79=structDecl();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_struct(structDecl79
            	            );
            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	        this->followPush(FOLLOW_classDecl_in_program5562);
            	        classDecl80=classDecl();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_struct(classDecl80
            	            );
            	        }


            	    }
            	    break;
            	case 4:
            	    {
            	        this->followPush(FOLLOW_inc_in_program5583);
            	        inc81=inc();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_include(inc81
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop40;
            	    break;
                }
            }
            loop40: ;


        }

    }
    goto ruleprogramEx;
    ruleprogramEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}

















