/** \file
 *  This C++ source file was generated by $ANTLR version 3.5.3-SNAPSHOT
 *
 *     -                for the parser : WNScriptASTParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF






    #include "WNCore/inc/WNBase.h"
#ifdef _WN_MSVC
    #pragma warning(disable: 4100)
    #pragma warning(disable: 4459)
    #pragma warning(disable: 4703)
#endif
    #include "WNMemory/inc/WNAllocator.h"
	  #include "WNScripting/src/WNScriptASTLexer.hpp"
    #include "WNScripting/inc/WNNodeTypes.h"

    using namespace wn;

    #ifndef SET_LOCATION
    #define SET_LOCATION(node, tok) { scripting::source_location loc; \
                                     loc.m_start_index = tok->get_startIndex();\
                                     loc.m_end_index = tok->get_stopIndex();\
                                     loc.m_line_start = tok->get_lineStart();\
                                     loc.m_line_number = tok->get_line();\
                                     loc.m_char_number = tok->get_charPositionInLine();\
                                     node->set_start_location(loc); \
                                   }

    #define SET_LOCATION_FROM_NODE(node, node2) { \
                                        if(node2) { \
                                        node->set_start_location(node2->get_start_location()); \
                                        } \
                                   }
    #define SET_START_LOCATION_FROM_NODE(node, node2) { \
                                        if(node2) { \
                                        scripting::source_location loc = node->get_start_location(); \
                                        scripting::source_location loc2 = node2->get_start_location(); \
                                        loc.m_start_index = loc2.m_start_index; \
                                        loc.m_line_start = loc2.m_line_start; \
                                        loc.m_line_number = loc2.m_line_number; \
                                        loc.m_char_number = loc2.m_char_number; \
                                        node->set_start_location(loc); \
                                        } \
                                    }
    #define SET_END_LOCATION(node, tok) { \
                                        node->set_end_index(tok->get_stopIndex()); \
                                      }
    #define SET_END_LOCATION_FROM_NODE(node, node2) { \
                                            if(node2) { \
                                            node->set_end_index(node2->get_start_location().m_end_index); \
                                            } \
                                            }
    #endif








#include    "WNScriptASTParser.hpp"









using namespace antlr3;



ANTLR_UINT8* WNScriptASTParserTokenNames[64+4]
     = {
        (ANTLR_UINT8*) "<invalid>",
        (ANTLR_UINT8*) "<EOR>",
        (ANTLR_UINT8*) "<DOWN>",
        (ANTLR_UINT8*) "<UP>",
        (ANTLR_UINT8*) "BOOL",
        (ANTLR_UINT8*) "BOOL_TYPE",
        (ANTLR_UINT8*) "CHAR",
        (ANTLR_UINT8*) "CHAR_TYPE",
        (ANTLR_UINT8*) "CLASS",
        (ANTLR_UINT8*) "COLON",
        (ANTLR_UINT8*) "COMMA",
        (ANTLR_UINT8*) "COMMENT",
        (ANTLR_UINT8*) "DO",
        (ANTLR_UINT8*) "DOUBDEC",
        (ANTLR_UINT8*) "DOUBINC",
        (ANTLR_UINT8*) "ELSE",
        (ANTLR_UINT8*) "ESC_SEQ",
        (ANTLR_UINT8*) "EXPONENT",
        (ANTLR_UINT8*) "FLOAT",
        (ANTLR_UINT8*) "FLOAT_TYPE",
        (ANTLR_UINT8*) "FOR",
        (ANTLR_UINT8*) "HEX_DIGIT",
        (ANTLR_UINT8*) "ID",
        (ANTLR_UINT8*) "IF",
        (ANTLR_UINT8*) "INCLUDE",
        (ANTLR_UINT8*) "INT",
        (ANTLR_UINT8*) "INT_TYPE",
        (ANTLR_UINT8*) "LBRACE",
        (ANTLR_UINT8*) "LBRACKET",
        (ANTLR_UINT8*) "LSQBRACKET",
        (ANTLR_UINT8*) "NULLTOK",
        (ANTLR_UINT8*) "OCTAL_ESC",
        (ANTLR_UINT8*) "OVERRIDE",
        (ANTLR_UINT8*) "RBRACE",
        (ANTLR_UINT8*) "RBRACKET",
        (ANTLR_UINT8*) "RETURN",
        (ANTLR_UINT8*) "RSQBRACKET",
        (ANTLR_UINT8*) "SEMICOLON",
        (ANTLR_UINT8*) "STRING",
        (ANTLR_UINT8*) "STRING_TYPE",
        (ANTLR_UINT8*) "STRUCT",
        (ANTLR_UINT8*) "TYPE",
        (ANTLR_UINT8*) "UNICODE_ESC",
        (ANTLR_UINT8*) "VIRTUAL",
        (ANTLR_UINT8*) "VOID_TYPE",
        (ANTLR_UINT8*) "WHILE",
        (ANTLR_UINT8*) "WS",
        (ANTLR_UINT8*) "'!='",
        (ANTLR_UINT8*) "'%'",
        (ANTLR_UINT8*) "'%='",
        (ANTLR_UINT8*) "'&&'",
        (ANTLR_UINT8*) "'*'",
        (ANTLR_UINT8*) "'*='",
        (ANTLR_UINT8*) "'+'",
        (ANTLR_UINT8*) "'+='",
        (ANTLR_UINT8*) "'-'",
        (ANTLR_UINT8*) "'-='",
        (ANTLR_UINT8*) "'.'",
        (ANTLR_UINT8*) "'/'",
        (ANTLR_UINT8*) "'/='",
        (ANTLR_UINT8*) "'<'",
        (ANTLR_UINT8*) "'<='",
        (ANTLR_UINT8*) "'='",
        (ANTLR_UINT8*) "'=='",
        (ANTLR_UINT8*) "'>'",
        (ANTLR_UINT8*) "'>='",
        (ANTLR_UINT8*) "'?'",
        (ANTLR_UINT8*) "'||'"
       };




static const char fileName[] = "WNScriptAST.g";



const char* WNScriptASTParser::getGrammarFileName()
{
	return fileName;
}






WNScriptASTParser::WNScriptASTParser( StreamType* instream)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, NULL)

{
	this->init(instream);
}







WNScriptASTParser::WNScriptASTParser( StreamType* instream, RecognizerSharedStateType* state)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, state)

{
	this->init(instream );
}

void WNScriptASTParser::init(StreamType* instream)
{


	this->get_psrstate()->set_tokenNames( WNScriptASTParserTokenNames );


}

void
WNScriptASTParser::reset()
{
    this->get_rec()->reset();
}



WNScriptASTParser::~WNScriptASTParser()
 {
}








static ANTLR_UINT8**	getTokenNames()
{
        return WNScriptASTParserTokenNames;
}





static	ANTLR_BITWORD FOLLOW_TYPE_in_scalarType1127_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_scalarType1127( FOLLOW_TYPE_in_scalarType1127_bits, 1 );

static	ANTLR_BITWORD FOLLOW_VOID_TYPE_in_scalarType1142_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_VOID_TYPE_in_scalarType1142( FOLLOW_VOID_TYPE_in_scalarType1142_bits, 1 );

static	ANTLR_BITWORD FOLLOW_INT_TYPE_in_scalarType1154_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_INT_TYPE_in_scalarType1154( FOLLOW_INT_TYPE_in_scalarType1154_bits, 1 );

static	ANTLR_BITWORD FOLLOW_FLOAT_TYPE_in_scalarType1166_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_FLOAT_TYPE_in_scalarType1166( FOLLOW_FLOAT_TYPE_in_scalarType1166_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CHAR_TYPE_in_scalarType1178_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CHAR_TYPE_in_scalarType1178( FOLLOW_CHAR_TYPE_in_scalarType1178_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRING_TYPE_in_scalarType1190_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_TYPE_in_scalarType1190( FOLLOW_STRING_TYPE_in_scalarType1190_bits, 1 );

static	ANTLR_BITWORD FOLLOW_BOOL_TYPE_in_scalarType1202_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_BOOL_TYPE_in_scalarType1202( FOLLOW_BOOL_TYPE_in_scalarType1202_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_type1235_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_type1235( FOLLOW_scalarType_in_type1235_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_type1256_bits[]	= { ANTLR_UINT64_LIT(0x0000001000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_type1256( FOLLOW_LSQBRACKET_in_type1256_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_type1258_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_type1258( FOLLOW_RSQBRACKET_in_type1258_bits, 1 );

static	ANTLR_BITWORD FOLLOW_type_in_param1290_bits[]	= { ANTLR_UINT64_LIT(0x0000000000400000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_type_in_param1290( FOLLOW_type_in_param1290_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1292_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1292( FOLLOW_ID_in_param1292_bits, 1 );

static	ANTLR_BITWORD FOLLOW_param_in_paramList1324_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000402) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_param_in_paramList1324( FOLLOW_param_in_paramList1324_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COMMA_in_paramList1337_bits[]	= { ANTLR_UINT64_LIT(0x00001280040800A0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COMMA_in_paramList1337( FOLLOW_COMMA_in_paramList1337_bits, 1 );

static	ANTLR_BITWORD FOLLOW_param_in_paramList1341_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000402) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_param_in_paramList1341( FOLLOW_param_in_paramList1341_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_parameterList1373_bits[]	= { ANTLR_UINT64_LIT(0x00001280040800A0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_parameterList1373( FOLLOW_LBRACKET_in_parameterList1373_bits, 1 );

static	ANTLR_BITWORD FOLLOW_paramList_in_parameterList1375_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_paramList_in_parameterList1375( FOLLOW_paramList_in_parameterList1375_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_parameterList1377_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_parameterList1377( FOLLOW_RBRACKET_in_parameterList1377_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_parameterList1394_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_parameterList1394( FOLLOW_LBRACKET_in_parameterList1394_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_parameterList1396_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_parameterList1396( FOLLOW_RBRACKET_in_parameterList1396_bits, 1 );

static	ANTLR_BITWORD FOLLOW_62_in_assign_type1432_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_62_in_assign_type1432( FOLLOW_62_in_assign_type1432_bits, 1 );

static	ANTLR_BITWORD FOLLOW_54_in_assign_type1446_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_54_in_assign_type1446( FOLLOW_54_in_assign_type1446_bits, 1 );

static	ANTLR_BITWORD FOLLOW_56_in_assign_type1459_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_56_in_assign_type1459( FOLLOW_56_in_assign_type1459_bits, 1 );

static	ANTLR_BITWORD FOLLOW_52_in_assign_type1472_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_52_in_assign_type1472( FOLLOW_52_in_assign_type1472_bits, 1 );

static	ANTLR_BITWORD FOLLOW_59_in_assign_type1485_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_59_in_assign_type1485( FOLLOW_59_in_assign_type1485_bits, 1 );

static	ANTLR_BITWORD FOLLOW_49_in_assign_type1498_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_49_in_assign_type1498( FOLLOW_49_in_assign_type1498_bits, 1 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_lvalue1528_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_lvalue1528( FOLLOW_unary_ex_in_lvalue1528_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_arglist1586_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000402) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arglist1586( FOLLOW_expr_in_arglist1586_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COMMA_in_arglist1619_bits[]	= { ANTLR_UINT64_LIT(0x008012C0564C64F2) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COMMA_in_arglist1619( FOLLOW_COMMA_in_arglist1619_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_arglist1663_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000402) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arglist1663( FOLLOW_expr_in_arglist1663_bits, 1 );

static	ANTLR_BITWORD FOLLOW_cond_ex_in_expr1738_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_cond_ex_in_expr1738( FOLLOW_cond_ex_in_expr1738_bits, 1 );

static	ANTLR_BITWORD FOLLOW_or_ex_in_cond_ex1776_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_or_ex_in_cond_ex1776( FOLLOW_or_ex_in_cond_ex1776_bits, 2 );

static	ANTLR_BITWORD FOLLOW_66_in_cond_ex1799_bits[]	= { ANTLR_UINT64_LIT(0x008012C0564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_66_in_cond_ex1799( FOLLOW_66_in_cond_ex1799_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_cond_ex1803_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000200) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_cond_ex1803( FOLLOW_expr_in_cond_ex1803_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COLON_in_cond_ex1805_bits[]	= { ANTLR_UINT64_LIT(0x008012C0564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COLON_in_cond_ex1805( FOLLOW_COLON_in_cond_ex1805_bits, 1 );

static	ANTLR_BITWORD FOLLOW_cond_ex_in_cond_ex1809_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_cond_ex_in_cond_ex1809( FOLLOW_cond_ex_in_cond_ex1809_bits, 1 );

static	ANTLR_BITWORD FOLLOW_and_ex_in_or_ex1856_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000008) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_and_ex_in_or_ex1856( FOLLOW_and_ex_in_or_ex1856_bits, 2 );

static	ANTLR_BITWORD FOLLOW_67_in_or_ex1873_bits[]	= { ANTLR_UINT64_LIT(0x008012C0564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_67_in_or_ex1873( FOLLOW_67_in_or_ex1873_bits, 1 );

static	ANTLR_BITWORD FOLLOW_and_ex_in_or_ex1877_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000008) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_and_ex_in_or_ex1877( FOLLOW_and_ex_in_or_ex1877_bits, 2 );

static	ANTLR_BITWORD FOLLOW_eq_ex_in_and_ex1920_bits[]	= { ANTLR_UINT64_LIT(0x0004000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_eq_ex_in_and_ex1920( FOLLOW_eq_ex_in_and_ex1920_bits, 1 );

static	ANTLR_BITWORD FOLLOW_50_in_and_ex1937_bits[]	= { ANTLR_UINT64_LIT(0x008012C0564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_50_in_and_ex1937( FOLLOW_50_in_and_ex1937_bits, 1 );

static	ANTLR_BITWORD FOLLOW_eq_ex_in_and_ex1941_bits[]	= { ANTLR_UINT64_LIT(0x0004000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_eq_ex_in_and_ex1941( FOLLOW_eq_ex_in_and_ex1941_bits, 1 );

static	ANTLR_BITWORD FOLLOW_rel_ex_in_eq_ex1977_bits[]	= { ANTLR_UINT64_LIT(0x8000800000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_rel_ex_in_eq_ex1977( FOLLOW_rel_ex_in_eq_ex1977_bits, 1 );

static	ANTLR_BITWORD FOLLOW_63_in_eq_ex2012_bits[]	= { ANTLR_UINT64_LIT(0x008012C0564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_63_in_eq_ex2012( FOLLOW_63_in_eq_ex2012_bits, 1 );

static	ANTLR_BITWORD FOLLOW_rel_ex_in_eq_ex2016_bits[]	= { ANTLR_UINT64_LIT(0x8000800000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_rel_ex_in_eq_ex2016( FOLLOW_rel_ex_in_eq_ex2016_bits, 1 );

static	ANTLR_BITWORD FOLLOW_47_in_eq_ex2039_bits[]	= { ANTLR_UINT64_LIT(0x008012C0564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_47_in_eq_ex2039( FOLLOW_47_in_eq_ex2039_bits, 1 );

static	ANTLR_BITWORD FOLLOW_rel_ex_in_eq_ex2043_bits[]	= { ANTLR_UINT64_LIT(0x8000800000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_rel_ex_in_eq_ex2043( FOLLOW_rel_ex_in_eq_ex2043_bits, 1 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2101_bits[]	= { ANTLR_UINT64_LIT(0x3000000000000002), ANTLR_UINT64_LIT(0x0000000000000003) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2101( FOLLOW_add_ex_in_rel_ex2101_bits, 2 );

static	ANTLR_BITWORD FOLLOW_60_in_rel_ex2137_bits[]	= { ANTLR_UINT64_LIT(0x008012C0564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_60_in_rel_ex2137( FOLLOW_60_in_rel_ex2137_bits, 1 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2141_bits[]	= { ANTLR_UINT64_LIT(0x3000000000000002), ANTLR_UINT64_LIT(0x0000000000000003) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2141( FOLLOW_add_ex_in_rel_ex2141_bits, 2 );

static	ANTLR_BITWORD FOLLOW_64_in_rel_ex2165_bits[]	= { ANTLR_UINT64_LIT(0x008012C0564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_64_in_rel_ex2165( FOLLOW_64_in_rel_ex2165_bits, 1 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2169_bits[]	= { ANTLR_UINT64_LIT(0x3000000000000002), ANTLR_UINT64_LIT(0x0000000000000003) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2169( FOLLOW_add_ex_in_rel_ex2169_bits, 2 );

static	ANTLR_BITWORD FOLLOW_61_in_rel_ex2193_bits[]	= { ANTLR_UINT64_LIT(0x008012C0564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_61_in_rel_ex2193( FOLLOW_61_in_rel_ex2193_bits, 1 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2197_bits[]	= { ANTLR_UINT64_LIT(0x3000000000000002), ANTLR_UINT64_LIT(0x0000000000000003) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2197( FOLLOW_add_ex_in_rel_ex2197_bits, 2 );

static	ANTLR_BITWORD FOLLOW_65_in_rel_ex2221_bits[]	= { ANTLR_UINT64_LIT(0x008012C0564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_65_in_rel_ex2221( FOLLOW_65_in_rel_ex2221_bits, 1 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2225_bits[]	= { ANTLR_UINT64_LIT(0x3000000000000002), ANTLR_UINT64_LIT(0x0000000000000003) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2225( FOLLOW_add_ex_in_rel_ex2225_bits, 2 );

static	ANTLR_BITWORD FOLLOW_mult_ex_in_add_ex2286_bits[]	= { ANTLR_UINT64_LIT(0x00A0000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_mult_ex_in_add_ex2286( FOLLOW_mult_ex_in_add_ex2286_bits, 1 );

static	ANTLR_BITWORD FOLLOW_53_in_add_ex2321_bits[]	= { ANTLR_UINT64_LIT(0x008012C0564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_53_in_add_ex2321( FOLLOW_53_in_add_ex2321_bits, 1 );

static	ANTLR_BITWORD FOLLOW_mult_ex_in_add_ex2325_bits[]	= { ANTLR_UINT64_LIT(0x00A0000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_mult_ex_in_add_ex2325( FOLLOW_mult_ex_in_add_ex2325_bits, 1 );

static	ANTLR_BITWORD FOLLOW_55_in_add_ex2347_bits[]	= { ANTLR_UINT64_LIT(0x008012C0564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_55_in_add_ex2347( FOLLOW_55_in_add_ex2347_bits, 1 );

static	ANTLR_BITWORD FOLLOW_mult_ex_in_add_ex2351_bits[]	= { ANTLR_UINT64_LIT(0x00A0000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_mult_ex_in_add_ex2351( FOLLOW_mult_ex_in_add_ex2351_bits, 1 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex2410_bits[]	= { ANTLR_UINT64_LIT(0x0409000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex2410( FOLLOW_unary_ex_in_mult_ex2410_bits, 1 );

static	ANTLR_BITWORD FOLLOW_51_in_mult_ex2449_bits[]	= { ANTLR_UINT64_LIT(0x008012C0564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_51_in_mult_ex2449( FOLLOW_51_in_mult_ex2449_bits, 1 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex2453_bits[]	= { ANTLR_UINT64_LIT(0x0409000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex2453( FOLLOW_unary_ex_in_mult_ex2453_bits, 1 );

static	ANTLR_BITWORD FOLLOW_58_in_mult_ex2479_bits[]	= { ANTLR_UINT64_LIT(0x008012C0564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_58_in_mult_ex2479( FOLLOW_58_in_mult_ex2479_bits, 1 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex2483_bits[]	= { ANTLR_UINT64_LIT(0x0409000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex2483( FOLLOW_unary_ex_in_mult_ex2483_bits, 1 );

static	ANTLR_BITWORD FOLLOW_48_in_mult_ex2509_bits[]	= { ANTLR_UINT64_LIT(0x008012C0564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_48_in_mult_ex2509( FOLLOW_48_in_mult_ex2509_bits, 1 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex2513_bits[]	= { ANTLR_UINT64_LIT(0x0409000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex2513( FOLLOW_unary_ex_in_mult_ex2513_bits, 1 );

static	ANTLR_BITWORD FOLLOW_post_ex_in_unary_ex2565_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_post_ex_in_unary_ex2565( FOLLOW_post_ex_in_unary_ex2565_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DOUBINC_in_unary_ex2578_bits[]	= { ANTLR_UINT64_LIT(0x008012C0564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBINC_in_unary_ex2578( FOLLOW_DOUBINC_in_unary_ex2578_bits, 1 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_unary_ex2582_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_unary_ex2582( FOLLOW_unary_ex_in_unary_ex2582_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DOUBDEC_in_unary_ex2595_bits[]	= { ANTLR_UINT64_LIT(0x008012C0564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBDEC_in_unary_ex2595( FOLLOW_DOUBDEC_in_unary_ex2595_bits, 1 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_unary_ex2599_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_unary_ex2599( FOLLOW_unary_ex_in_unary_ex2599_bits, 1 );

static	ANTLR_BITWORD FOLLOW_55_in_unary_ex2612_bits[]	= { ANTLR_UINT64_LIT(0x008012C0564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_55_in_unary_ex2612( FOLLOW_55_in_unary_ex2612_bits, 1 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_unary_ex2616_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_unary_ex2616( FOLLOW_unary_ex_in_unary_ex2616_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_post_ex_proper2654_bits[]	= { ANTLR_UINT64_LIT(0x008012C0564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_post_ex_proper2654( FOLLOW_LSQBRACKET_in_post_ex_proper2654_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_post_ex_proper2658_bits[]	= { ANTLR_UINT64_LIT(0x0000001000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_post_ex_proper2658( FOLLOW_expr_in_post_ex_proper2658_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_post_ex_proper2662_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_post_ex_proper2662( FOLLOW_RSQBRACKET_in_post_ex_proper2662_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_post_ex_proper2677_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_post_ex_proper2677( FOLLOW_LBRACKET_in_post_ex_proper2677_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_post_ex_proper2681_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_post_ex_proper2681( FOLLOW_RBRACKET_in_post_ex_proper2681_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_post_ex_proper2709_bits[]	= { ANTLR_UINT64_LIT(0x008012C0564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_post_ex_proper2709( FOLLOW_LBRACKET_in_post_ex_proper2709_bits, 1 );

static	ANTLR_BITWORD FOLLOW_arglist_in_post_ex_proper2715_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arglist_in_post_ex_proper2715( FOLLOW_arglist_in_post_ex_proper2715_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_post_ex_proper2719_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_post_ex_proper2719( FOLLOW_RBRACKET_in_post_ex_proper2719_bits, 1 );

static	ANTLR_BITWORD FOLLOW_57_in_post_ex_proper2732_bits[]	= { ANTLR_UINT64_LIT(0x0000000000400000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_57_in_post_ex_proper2732( FOLLOW_57_in_post_ex_proper2732_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_post_ex_proper2736_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_post_ex_proper2736( FOLLOW_ID_in_post_ex_proper2736_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DOUBINC_in_post_ex_proper2763_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBINC_in_post_ex_proper2763( FOLLOW_DOUBINC_in_post_ex_proper2763_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DOUBDEC_in_post_ex_proper2792_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBDEC_in_post_ex_proper2792( FOLLOW_DOUBDEC_in_post_ex_proper2792_bits, 1 );

static	ANTLR_BITWORD FOLLOW_prim_ex_in_post_ex2845_bits[]	= { ANTLR_UINT64_LIT(0x0200000030006002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_prim_ex_in_post_ex2845( FOLLOW_prim_ex_in_post_ex2845_bits, 1 );

static	ANTLR_BITWORD FOLLOW_post_ex_proper_in_post_ex2864_bits[]	= { ANTLR_UINT64_LIT(0x0200000030006002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_post_ex_proper_in_post_ex2864( FOLLOW_post_ex_proper_in_post_ex2864_bits, 1 );

static	ANTLR_BITWORD FOLLOW_lvalue_in_assignment2893_bits[]	= { ANTLR_UINT64_LIT(0x4952000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_lvalue_in_assignment2893( FOLLOW_lvalue_in_assignment2893_bits, 1 );

static	ANTLR_BITWORD FOLLOW_assign_type_in_assignment2906_bits[]	= { ANTLR_UINT64_LIT(0x008012C0564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_assign_type_in_assignment2906( FOLLOW_assign_type_in_assignment2906_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_assignment2908_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_assignment2908( FOLLOW_expr_in_assignment2908_bits, 1 );

static	ANTLR_BITWORD FOLLOW_INT_in_constant2943_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_INT_in_constant2943( FOLLOW_INT_in_constant2943_bits, 1 );

static	ANTLR_BITWORD FOLLOW_FLOAT_in_constant2961_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_FLOAT_in_constant2961( FOLLOW_FLOAT_in_constant2961_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CHAR_in_constant2977_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CHAR_in_constant2977( FOLLOW_CHAR_in_constant2977_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRING_in_constant2994_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_in_constant2994( FOLLOW_STRING_in_constant2994_bits, 1 );

static	ANTLR_BITWORD FOLLOW_BOOL_in_constant3009_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_BOOL_in_constant3009( FOLLOW_BOOL_in_constant3009_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_constant3026_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_constant3026( FOLLOW_scalarType_in_constant3026_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACE_in_constant3030_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_constant3030( FOLLOW_LBRACE_in_constant3030_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRING_in_constant3034_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_in_constant3034( FOLLOW_STRING_in_constant3034_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACE_in_constant3038_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_constant3038( FOLLOW_RBRACE_in_constant3038_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_prim_ex3068_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_prim_ex3068( FOLLOW_ID_in_prim_ex3068_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_prim_ex3083_bits[]	= { ANTLR_UINT64_LIT(0x008012C0564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_prim_ex3083( FOLLOW_LBRACKET_in_prim_ex3083_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_prim_ex3087_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_prim_ex3087( FOLLOW_expr_in_prim_ex3087_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_prim_ex3091_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_prim_ex3091( FOLLOW_RBRACKET_in_prim_ex3091_bits, 1 );

static	ANTLR_BITWORD FOLLOW_constant_in_prim_ex3106_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_constant_in_prim_ex3106( FOLLOW_constant_in_prim_ex3106_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_prim_ex3121_bits[]	= { ANTLR_UINT64_LIT(0x0000000030000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_prim_ex3121( FOLLOW_scalarType_in_prim_ex3121_bits, 1 );

static	ANTLR_BITWORD FOLLOW_structInit_in_prim_ex3153_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_structInit_in_prim_ex3153( FOLLOW_structInit_in_prim_ex3153_bits, 1 );

static	ANTLR_BITWORD FOLLOW_cast_in_prim_ex3178_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_cast_in_prim_ex3178( FOLLOW_cast_in_prim_ex3178_bits, 1 );

static	ANTLR_BITWORD FOLLOW_arrayInit_in_prim_ex3201_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arrayInit_in_prim_ex3201( FOLLOW_arrayInit_in_prim_ex3201_bits, 1 );

static	ANTLR_BITWORD FOLLOW_NULLTOK_in_prim_ex3230_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_NULLTOK_in_prim_ex3230( FOLLOW_NULLTOK_in_prim_ex3230_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_cast3259_bits[]	= { ANTLR_UINT64_LIT(0x008012C0564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_cast3259( FOLLOW_LBRACKET_in_cast3259_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_cast3263_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_cast3263( FOLLOW_expr_in_cast3263_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_cast3267_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_cast3267( FOLLOW_RBRACKET_in_cast3267_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_structInit3296_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_structInit3296( FOLLOW_LBRACKET_in_structInit3296_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_structInit3300_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_structInit3300( FOLLOW_RBRACKET_in_structInit3300_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_arrayInit3362_bits[]	= { ANTLR_UINT64_LIT(0x008012C0564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_arrayInit3362( FOLLOW_LSQBRACKET_in_arrayInit3362_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_arrayInit3366_bits[]	= { ANTLR_UINT64_LIT(0x0000001000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arrayInit3366( FOLLOW_expr_in_arrayInit3366_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_arrayInit3368_bits[]	= { ANTLR_UINT64_LIT(0x0000000030000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_arrayInit3368( FOLLOW_RSQBRACKET_in_arrayInit3368_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_arrayInit3392_bits[]	= { ANTLR_UINT64_LIT(0x0000001000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_arrayInit3392( FOLLOW_LSQBRACKET_in_arrayInit3392_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_arrayInit3394_bits[]	= { ANTLR_UINT64_LIT(0x0000000030000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_arrayInit3394( FOLLOW_RSQBRACKET_in_arrayInit3394_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_arrayInit3432_bits[]	= { ANTLR_UINT64_LIT(0x0000001000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_arrayInit3432( FOLLOW_LSQBRACKET_in_arrayInit3432_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_arrayInit3434_bits[]	= { ANTLR_UINT64_LIT(0x0000000030000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_arrayInit3434( FOLLOW_RSQBRACKET_in_arrayInit3434_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_arrayInit3475_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_arrayInit3475( FOLLOW_LBRACKET_in_arrayInit3475_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_arrayInit3479_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_arrayInit3479( FOLLOW_RBRACKET_in_arrayInit3479_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_arrayInit3513_bits[]	= { ANTLR_UINT64_LIT(0x008012C0564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_arrayInit3513( FOLLOW_LBRACKET_in_arrayInit3513_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_arrayInit3517_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arrayInit3517( FOLLOW_expr_in_arrayInit3517_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_arrayInit3521_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_arrayInit3521( FOLLOW_RBRACKET_in_arrayInit3521_bits, 1 );

static	ANTLR_BITWORD FOLLOW_param_in_declaration3566_bits[]	= { ANTLR_UINT64_LIT(0x4000000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_param_in_declaration3566( FOLLOW_param_in_declaration3566_bits, 1 );

static	ANTLR_BITWORD FOLLOW_62_in_declaration3601_bits[]	= { ANTLR_UINT64_LIT(0x008012C0564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_62_in_declaration3601( FOLLOW_62_in_declaration3601_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_declaration3608_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_declaration3608( FOLLOW_expr_in_declaration3608_bits, 1 );

static	ANTLR_BITWORD FOLLOW_declaration_in_instructionScalar3657_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_declaration_in_instructionScalar3657( FOLLOW_declaration_in_instructionScalar3657_bits, 1 );

static	ANTLR_BITWORD FOLLOW_assignment_in_instructionScalar3670_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_assignment_in_instructionScalar3670( FOLLOW_assignment_in_instructionScalar3670_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RETURN_in_returnInst3702_bits[]	= { ANTLR_UINT64_LIT(0x008012C0564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RETURN_in_returnInst3702( FOLLOW_RETURN_in_returnInst3702_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_returnInst3704_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_returnInst3704( FOLLOW_expr_in_returnInst3704_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_returnInst3708_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_returnInst3708( FOLLOW_SEMICOLON_in_returnInst3708_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RETURN_in_returnInst3722_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RETURN_in_returnInst3722( FOLLOW_RETURN_in_returnInst3722_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_returnInst3726_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_returnInst3726( FOLLOW_SEMICOLON_in_returnInst3726_bits, 1 );

static	ANTLR_BITWORD FOLLOW_WHILE_in_whileInst3759_bits[]	= { ANTLR_UINT64_LIT(0x0000000010000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_WHILE_in_whileInst3759( FOLLOW_WHILE_in_whileInst3759_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_whileInst3761_bits[]	= { ANTLR_UINT64_LIT(0x008012C0564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_whileInst3761( FOLLOW_LBRACKET_in_whileInst3761_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_whileInst3763_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_whileInst3763( FOLLOW_expr_in_whileInst3763_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_whileInst3765_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_whileInst3765( FOLLOW_RBRACKET_in_whileInst3765_bits, 1 );

static	ANTLR_BITWORD FOLLOW_body_in_whileInst3767_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_body_in_whileInst3767( FOLLOW_body_in_whileInst3767_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DO_in_doInst3803_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DO_in_doInst3803( FOLLOW_DO_in_doInst3803_bits, 1 );

static	ANTLR_BITWORD FOLLOW_body_in_doInst3805_bits[]	= { ANTLR_UINT64_LIT(0x0000200000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_body_in_doInst3805( FOLLOW_body_in_doInst3805_bits, 1 );

static	ANTLR_BITWORD FOLLOW_WHILE_in_doInst3807_bits[]	= { ANTLR_UINT64_LIT(0x0000000010000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_WHILE_in_doInst3807( FOLLOW_WHILE_in_doInst3807_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_doInst3809_bits[]	= { ANTLR_UINT64_LIT(0x008012C0564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_doInst3809( FOLLOW_LBRACKET_in_doInst3809_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_doInst3811_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_doInst3811( FOLLOW_expr_in_doInst3811_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_doInst3813_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_doInst3813( FOLLOW_RBRACKET_in_doInst3813_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_doInst3815_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_doInst3815( FOLLOW_SEMICOLON_in_doInst3815_bits, 1 );

static	ANTLR_BITWORD FOLLOW_FOR_in_forInst3847_bits[]	= { ANTLR_UINT64_LIT(0x0000000010000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_FOR_in_forInst3847( FOLLOW_FOR_in_forInst3847_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_forInst3849_bits[]	= { ANTLR_UINT64_LIT(0x008012E0564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_forInst3849( FOLLOW_LBRACKET_in_forInst3849_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instructionScalar_in_forInst3877_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instructionScalar_in_forInst3877( FOLLOW_instructionScalar_in_forInst3877_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_forInst3883_bits[]	= { ANTLR_UINT64_LIT(0x008012E0564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_forInst3883( FOLLOW_SEMICOLON_in_forInst3883_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_forInst3908_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_forInst3908( FOLLOW_expr_in_forInst3908_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_forInst3922_bits[]	= { ANTLR_UINT64_LIT(0x008012C4564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_forInst3922( FOLLOW_SEMICOLON_in_forInst3922_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instructionScalar_in_forInst3947_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instructionScalar_in_forInst3947( FOLLOW_instructionScalar_in_forInst3947_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_forInst3953_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_forInst3953( FOLLOW_RBRACKET_in_forInst3953_bits, 1 );

static	ANTLR_BITWORD FOLLOW_body_in_forInst3978_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_body_in_forInst3978( FOLLOW_body_in_forInst3978_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ELSE_in_elsemiddle4026_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ELSE_in_elsemiddle4026( FOLLOW_ELSE_in_elsemiddle4026_bits, 1 );

static	ANTLR_BITWORD FOLLOW_IF_in_elsemiddle4028_bits[]	= { ANTLR_UINT64_LIT(0x0000000010000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_IF_in_elsemiddle4028( FOLLOW_IF_in_elsemiddle4028_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_elsemiddle4030_bits[]	= { ANTLR_UINT64_LIT(0x008012C0564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_elsemiddle4030( FOLLOW_LBRACKET_in_elsemiddle4030_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_elsemiddle4032_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_elsemiddle4032( FOLLOW_expr_in_elsemiddle4032_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_elsemiddle4034_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_elsemiddle4034( FOLLOW_RBRACKET_in_elsemiddle4034_bits, 1 );

static	ANTLR_BITWORD FOLLOW_body_in_elsemiddle4036_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_body_in_elsemiddle4036( FOLLOW_body_in_elsemiddle4036_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ELSE_in_endif4069_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ELSE_in_endif4069( FOLLOW_ELSE_in_endif4069_bits, 1 );

static	ANTLR_BITWORD FOLLOW_body_in_endif4071_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_body_in_endif4071( FOLLOW_body_in_endif4071_bits, 1 );

static	ANTLR_BITWORD FOLLOW_IF_in_ifInst4101_bits[]	= { ANTLR_UINT64_LIT(0x0000000010000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_IF_in_ifInst4101( FOLLOW_IF_in_ifInst4101_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_ifInst4103_bits[]	= { ANTLR_UINT64_LIT(0x008012C0564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_ifInst4103( FOLLOW_LBRACKET_in_ifInst4103_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_ifInst4105_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_ifInst4105( FOLLOW_expr_in_ifInst4105_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_ifInst4107_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_ifInst4107( FOLLOW_RBRACKET_in_ifInst4107_bits, 1 );

static	ANTLR_BITWORD FOLLOW_body_in_ifInst4109_bits[]	= { ANTLR_UINT64_LIT(0x0000000000008002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_body_in_ifInst4109( FOLLOW_body_in_ifInst4109_bits, 1 );

static	ANTLR_BITWORD FOLLOW_elsemiddle_in_ifInst4126_bits[]	= { ANTLR_UINT64_LIT(0x0000000000008002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_elsemiddle_in_ifInst4126( FOLLOW_elsemiddle_in_ifInst4126_bits, 1 );

static	ANTLR_BITWORD FOLLOW_endif_in_ifInst4146_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_endif_in_ifInst4146( FOLLOW_endif_in_ifInst4146_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ifInst_in_instruction4180_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ifInst_in_instruction4180( FOLLOW_ifInst_in_instruction4180_bits, 1 );

static	ANTLR_BITWORD FOLLOW_whileInst_in_instruction4201_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_whileInst_in_instruction4201( FOLLOW_whileInst_in_instruction4201_bits, 1 );

static	ANTLR_BITWORD FOLLOW_doInst_in_instruction4218_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_doInst_in_instruction4218( FOLLOW_doInst_in_instruction4218_bits, 1 );

static	ANTLR_BITWORD FOLLOW_forInst_in_instruction4238_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_forInst_in_instruction4238( FOLLOW_forInst_in_instruction4238_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instructionScalar_in_instruction4258_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instructionScalar_in_instruction4258( FOLLOW_instructionScalar_in_instruction4258_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_instruction4260_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_instruction4260( FOLLOW_SEMICOLON_in_instruction4260_bits, 1 );

static	ANTLR_BITWORD FOLLOW_returnInst_in_instruction4273_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_returnInst_in_instruction4273( FOLLOW_returnInst_in_instruction4273_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_in_instruction_list4305_bits[]	= { ANTLR_UINT64_LIT(0x008032C856DC70F2) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_in_instruction_list4305( FOLLOW_instruction_in_instruction_list4305_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_in_instruction_list4321_bits[]	= { ANTLR_UINT64_LIT(0x008032C856DC70F2) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_in_instruction_list4321( FOLLOW_instruction_in_instruction_list4321_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACE_in_body4355_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_body4355( FOLLOW_LBRACE_in_body4355_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACE_in_body4359_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_body4359( FOLLOW_RBRACE_in_body4359_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACE_in_body4374_bits[]	= { ANTLR_UINT64_LIT(0x008032C856DC70F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_body4374( FOLLOW_LBRACE_in_body4374_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_body4376_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_body4376( FOLLOW_instruction_list_in_body4376_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACE_in_body4380_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_body4380( FOLLOW_RBRACE_in_body4380_bits, 1 );

static	ANTLR_BITWORD FOLLOW_param_in_function4410_bits[]	= { ANTLR_UINT64_LIT(0x0000000010000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_param_in_function4410( FOLLOW_param_in_function4410_bits, 1 );

static	ANTLR_BITWORD FOLLOW_parameterList_in_function4412_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_parameterList_in_function4412( FOLLOW_parameterList_in_function4412_bits, 1 );

static	ANTLR_BITWORD FOLLOW_body_in_function4414_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_body_in_function4414( FOLLOW_body_in_function4414_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRUCT_in_structDecl4444_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRUCT_in_structDecl4444( FOLLOW_STRUCT_in_structDecl4444_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_structDecl4446_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_structDecl4446( FOLLOW_TYPE_in_structDecl4446_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACE_in_structDecl4462_bits[]	= { ANTLR_UINT64_LIT(0x00001282040800A0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_structDecl4462( FOLLOW_LBRACE_in_structDecl4462_bits, 1 );

static	ANTLR_BITWORD FOLLOW_declaration_in_structDecl4467_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_declaration_in_structDecl4467( FOLLOW_declaration_in_structDecl4467_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_structDecl4471_bits[]	= { ANTLR_UINT64_LIT(0x00001282040800A0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_structDecl4471( FOLLOW_SEMICOLON_in_structDecl4471_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACE_in_structDecl4476_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_structDecl4476( FOLLOW_RBRACE_in_structDecl4476_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CLASS_in_classDecl4529_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CLASS_in_classDecl4529( FOLLOW_CLASS_in_classDecl4529_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_classDecl4533_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_classDecl4533( FOLLOW_TYPE_in_classDecl4533_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CLASS_in_classDecl4553_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CLASS_in_classDecl4553( FOLLOW_CLASS_in_classDecl4553_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_classDecl4557_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000200) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_classDecl4557( FOLLOW_TYPE_in_classDecl4557_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COLON_in_classDecl4559_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COLON_in_classDecl4559( FOLLOW_COLON_in_classDecl4559_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_classDecl4563_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_classDecl4563( FOLLOW_TYPE_in_classDecl4563_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACE_in_classDecl4590_bits[]	= { ANTLR_UINT64_LIT(0x00001A83040800A0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_classDecl4590( FOLLOW_LBRACE_in_classDecl4590_bits, 1 );

static	ANTLR_BITWORD FOLLOW_declaration_in_classDecl4633_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_declaration_in_classDecl4633( FOLLOW_declaration_in_classDecl4633_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_classDecl4637_bits[]	= { ANTLR_UINT64_LIT(0x00001A83040800A0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_classDecl4637( FOLLOW_SEMICOLON_in_classDecl4637_bits, 1 );

static	ANTLR_BITWORD FOLLOW_function_in_classDecl4663_bits[]	= { ANTLR_UINT64_LIT(0x00001A83040800A0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl4663( FOLLOW_function_in_classDecl4663_bits, 1 );

static	ANTLR_BITWORD FOLLOW_VIRTUAL_in_classDecl4692_bits[]	= { ANTLR_UINT64_LIT(0x00001280040800A0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_VIRTUAL_in_classDecl4692( FOLLOW_VIRTUAL_in_classDecl4692_bits, 1 );

static	ANTLR_BITWORD FOLLOW_function_in_classDecl4696_bits[]	= { ANTLR_UINT64_LIT(0x00001A83040800A0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl4696( FOLLOW_function_in_classDecl4696_bits, 1 );

static	ANTLR_BITWORD FOLLOW_OVERRIDE_in_classDecl4722_bits[]	= { ANTLR_UINT64_LIT(0x00001280040800A0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_OVERRIDE_in_classDecl4722( FOLLOW_OVERRIDE_in_classDecl4722_bits, 1 );

static	ANTLR_BITWORD FOLLOW_function_in_classDecl4726_bits[]	= { ANTLR_UINT64_LIT(0x00001A83040800A0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl4726( FOLLOW_function_in_classDecl4726_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACE_in_classDecl4762_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_classDecl4762( FOLLOW_RBRACE_in_classDecl4762_bits, 1 );

static	ANTLR_BITWORD FOLLOW_INCLUDE_in_inc4792_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_INCLUDE_in_inc4792( FOLLOW_INCLUDE_in_inc4792_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRING_in_inc4794_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_in_inc4794( FOLLOW_STRING_in_inc4794_bits, 1 );

static	ANTLR_BITWORD FOLLOW_function_in_program4840_bits[]	= { ANTLR_UINT64_LIT(0x00001380050801A2) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_program4840( FOLLOW_function_in_program4840_bits, 1 );

static	ANTLR_BITWORD FOLLOW_structDecl_in_program4862_bits[]	= { ANTLR_UINT64_LIT(0x00001380050801A2) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_structDecl_in_program4862( FOLLOW_structDecl_in_program4862_bits, 1 );

static	ANTLR_BITWORD FOLLOW_classDecl_in_program4882_bits[]	= { ANTLR_UINT64_LIT(0x00001380050801A2) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_classDecl_in_program4882( FOLLOW_classDecl_in_program4882_bits, 1 );

static	ANTLR_BITWORD FOLLOW_inc_in_program4903_bits[]	= { ANTLR_UINT64_LIT(0x00001380050801A2) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_inc_in_program4903( FOLLOW_inc_in_program4903_bits, 1 );









static const ANTLR_INT32 dfa27_eot[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa27_eof[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa27_min[13] =
    {
	4, 22, 22, 22, 22, 22, 22, 22, -1, 4, -1, 22, 36
    };
static const ANTLR_INT32 dfa27_max[13] =
    {
	55, 29, 29, 29, 29, 29, 29, 29, -1, 55, -1, 29, 36
    };
static const ANTLR_INT32 dfa27_accept[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, 2, -1, 1, -1, -1
    };
static const ANTLR_INT32 dfa27_special[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };


static const ANTLR_INT32* dfa27_T_empty	 =   NULL;

static const ANTLR_INT32 dfa27_T0[] =
    {
	10, -1, -1, -1, -1, 8, 8, 9
    };
static const ANTLR_INT32 dfa27_T1[] =
    {
	11
    };
static const ANTLR_INT32 dfa27_T2[] =
    {
	8, 7, 8, 5, -1, -1, -1, -1, -1, 8, 8, -1, -1, -1, 8, 4, -1, -1, 8, -1,
	-1, 8, 3, -1, 8, -1, 8, -1, -1, -1, -1, -1, -1, -1, 8, 6, -1, 1, -1, -1,
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8
    };
static const ANTLR_INT32 dfa27_T3[] =
    {
	8, 8, 8, 8, -1, -1, -1, -1, -1, 8, 8, -1, -1, -1, 8, 8, -1, -1, 8, -1,
	-1, 8, 8, -1, 8, -1, 8, -1, -1, -1, -1, -1, 11, -1, 8, 8, -1, 8, -1, -1,
	8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8
    };
static const ANTLR_INT32 dfa27_T4[] =
    {
	10, -1, -1, -1, -1, -1, 8, 12
    };





static const ANTLR_INT32 * const dfa27_transitions[] =
{
    dfa27_T2, dfa27_T0, dfa27_T0, dfa27_T0, dfa27_T0, dfa27_T0, dfa27_T0,
    dfa27_T0, NULL, dfa27_T3, NULL, dfa27_T4, dfa27_T1
};




class WNScriptASTParserCyclicDFA27 : public CyclicDFA< WNScriptASTParserImplTraits, WNScriptASTParser >, public WNScriptASTParserTokens
{
public:
	typedef CyclicDFA< WNScriptASTParserImplTraits, WNScriptASTParser >  BaseType;
	typedef BaseType::ContextType CtxType;

private:


public:
	WNScriptASTParserCyclicDFA27( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{

	}

};

static WNScriptASTParserCyclicDFA27  cdfa27(
	    27,

	    (const ANTLR_UCHAR*)"496:1: instructionScalar returns [scripting::instruction* node] : ( declaration | assignment );",
	    dfa27_eot,
	    dfa27_eof,
	    dfa27_min,
	    dfa27_max,
	    dfa27_accept,
	    dfa27_special,
	    dfa27_transitions

	);







static const ANTLR_INT32 dfa39_eot[16] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa39_eof[16] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa39_min[16] =
    {
	5, -1, 22, 22, 22, 22, 22, 22, 22, -1, -1, 36, 28, 22, -1, -1
    };
static const ANTLR_INT32 dfa39_max[16] =
    {
	44, -1, 29, 29, 29, 29, 29, 29, 29, -1, -1, 36, 62, 29, -1, -1
    };
static const ANTLR_INT32 dfa39_accept[16] =
    {
	-1, 5, -1, -1, -1, -1, -1, -1, -1, 3, 4, -1, -1, -1, 1, 2
    };
static const ANTLR_INT32 dfa39_special[16] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };


static const ANTLR_INT32* dfa39_T_empty	 =   NULL;

static const ANTLR_INT32 dfa39_T0[] =
    {
	15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14
    };
static const ANTLR_INT32 dfa39_T1[] =
    {
	12, -1, -1, -1, -1, -1, -1, 11
    };
static const ANTLR_INT32 dfa39_T2[] =
    {
	8, -1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1,
	-1, -1, 4, -1, -1, -1, -1, -1, 10, 1, -1, -1, -1, -1, -1, 7, -1, 2, -1,
	9, 3
    };
static const ANTLR_INT32 dfa39_T3[] =
    {
	13
    };





static const ANTLR_INT32 * const dfa39_transitions[] =
{
    dfa39_T2, NULL, dfa39_T1, dfa39_T1, dfa39_T1, dfa39_T1, dfa39_T1, dfa39_T1,
    dfa39_T1, NULL, NULL, dfa39_T3, dfa39_T0, dfa39_T1, NULL, NULL
};




class WNScriptASTParserCyclicDFA39 : public CyclicDFA< WNScriptASTParserImplTraits, WNScriptASTParser >, public WNScriptASTParserTokens
{
public:
	typedef CyclicDFA< WNScriptASTParserImplTraits, WNScriptASTParser >  BaseType;
	typedef BaseType::ContextType CtxType;

private:


public:
	WNScriptASTParserCyclicDFA39( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{

	}

};

static WNScriptASTParserCyclicDFA39  cdfa39(
	    39,

	    (const ANTLR_UCHAR*)"()* loopback of 612:17: ( (a= declaration SEMICOLON ) | (b= function ) | ( VIRTUAL h= function ) | ( OVERRIDE i= function ) )*",
	    dfa39_eot,
	    dfa39_eof,
	    dfa39_min,
	    dfa39_max,
	    dfa39_accept,
	    dfa39_special,
	    dfa39_transitions

	);
















scripting::type*
WNScriptASTParser::scalarType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    const ImplTraits::CommonTokenType* TYPE1 = NULL;
    const ImplTraits::CommonTokenType* VOID_TYPE2 = NULL;
    const ImplTraits::CommonTokenType* INT_TYPE3 = NULL;
    const ImplTraits::CommonTokenType* FLOAT_TYPE4 = NULL;
    const ImplTraits::CommonTokenType* CHAR_TYPE5 = NULL;
    const ImplTraits::CommonTokenType* STRING_TYPE6 = NULL;
    const ImplTraits::CommonTokenType* BOOL_TYPE7 = NULL;






        node = wn_nullptr;



    {
        {

            ANTLR_UINT32 alt1;

            alt1=7;

            switch ( this->LA(1) )
            {
            case TYPE:
            	{
            		alt1=1;
            	}
                break;
            case VOID_TYPE:
            	{
            		alt1=2;
            	}
                break;
            case INT_TYPE:
            	{
            		alt1=3;
            	}
                break;
            case FLOAT_TYPE:
            	{
            		alt1=4;
            	}
                break;
            case CHAR_TYPE:
            	{
            		alt1=5;
            	}
                break;
            case STRING_TYPE:
            	{
            		alt1=6;
            	}
                break;
            case BOOL_TYPE:
            	{
            		alt1=7;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 1 );
                ex->set_state( 0 );


                goto rulescalarTypeEx;

            }

            switch (alt1)
            {
        	case 1:
        	    {
        	        TYPE1 =  this->matchToken(TYPE, &FOLLOW_TYPE_in_scalarType1127);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::type>(m_allocator, (TYPE1->getText()).c_str()); SET_LOCATION(node, TYPE1);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        VOID_TYPE2 =  this->matchToken(VOID_TYPE, &FOLLOW_VOID_TYPE_in_scalarType1142);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::type>(m_allocator, scripting::type_classification::void_type); SET_LOCATION(node, VOID_TYPE2);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        INT_TYPE3 =  this->matchToken(INT_TYPE, &FOLLOW_INT_TYPE_in_scalarType1154);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::type>(m_allocator, scripting::type_classification::int_type); SET_LOCATION(node, INT_TYPE3);
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        FLOAT_TYPE4 =  this->matchToken(FLOAT_TYPE, &FOLLOW_FLOAT_TYPE_in_scalarType1166);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::type>(m_allocator, scripting::type_classification::float_type); SET_LOCATION(node, FLOAT_TYPE4);
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        CHAR_TYPE5 =  this->matchToken(CHAR_TYPE, &FOLLOW_CHAR_TYPE_in_scalarType1178);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::type>(m_allocator, scripting::type_classification::char_type); SET_LOCATION(node, CHAR_TYPE5);
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	        STRING_TYPE6 =  this->matchToken(STRING_TYPE, &FOLLOW_STRING_TYPE_in_scalarType1190);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::type>(m_allocator, scripting::type_classification::string_type); SET_LOCATION(node, STRING_TYPE6);
        	        }


        	    }
        	    break;
        	case 7:
        	    {
        	        BOOL_TYPE7 =  this->matchToken(BOOL_TYPE, &FOLLOW_BOOL_TYPE_in_scalarType1202);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::type>(m_allocator, scripting::type_classification::bool_type); SET_LOCATION(node, BOOL_TYPE7);
        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulescalarTypeEx;
    rulescalarTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::type*
WNScriptASTParser::type()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    const ImplTraits::CommonTokenType* RSQBRACKET9 = NULL;
    scripting::type* scalarType8;





        node = wn_nullptr;



    {
        {
            this->followPush(FOLLOW_scalarType_in_type1235);
            scalarType8=scalarType();

            this->followPop();
            if  (this->hasException())
            {
                goto ruletypeEx;
            }


            {
                 node = scalarType8
                ; SET_LOCATION_FROM_NODE(node, scalarType8
                );
            }



            for (;;)
            {
                int alt2=2;
                switch ( this->LA(1) )
                {
                case LSQBRACKET:
                	{
                		alt2=1;
                	}
                    break;

                }

                switch (alt2)
                {
            	case 1:
            	    {
            	         this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_type1256);
            	        if  (this->hasException())
            	        {
            	            goto ruletypeEx;
            	        }


            	        RSQBRACKET9 =  this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_type1258);
            	        if  (this->hasException())
            	        {
            	            goto ruletypeEx;
            	        }


            	        {
            	             node->add_array_level(); SET_END_LOCATION(node, RSQBRACKET9);
            	        }


            	    }
            	    break;

            	default:
            	    goto loop2;
            	    break;
                }
            }
            loop2: ;


        }

    }
    goto ruletypeEx;
    ruletypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::parameter*
WNScriptASTParser::param()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::parameter* node;


    const ImplTraits::CommonTokenType* ID11 = NULL;
    scripting::type* type10;





        node = wn_nullptr;



    {
        {
            this->followPush(FOLLOW_type_in_param1290);
            type10=type();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleparamEx;
            }


            ID11 =  this->matchToken(ID, &FOLLOW_ID_in_param1292);
            if  (this->hasException())
            {
                goto ruleparamEx;
            }


            {
                node = m_allocator->make_allocated<scripting::parameter>(m_allocator, type10
                , (ID11->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
                type10
                ); SET_END_LOCATION(node, ID11);
            }


        }

    }
    goto ruleparamEx;
    ruleparamEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::parameter_list*
WNScriptASTParser::paramList()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::parameter_list* node;


    scripting::parameter* a;
    scripting::parameter* b;





        node = wn_nullptr;



    {
        {
            this->followPush(FOLLOW_param_in_paramList1324);
            a=param();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleparamListEx;
            }


            {
                 node = m_allocator->make_allocated<scripting::parameter_list>(m_allocator, a
                ); SET_LOCATION_FROM_NODE(node, a
                );
            }



            for (;;)
            {
                int alt3=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt3=1;
                	}
                    break;

                }

                switch (alt3)
                {
            	case 1:
            	    {
            	         this->matchToken(COMMA, &FOLLOW_COMMA_in_paramList1337);
            	        if  (this->hasException())
            	        {
            	            goto ruleparamListEx;
            	        }


            	        this->followPush(FOLLOW_param_in_paramList1341);
            	        b=param();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleparamListEx;
            	        }


            	        {
            	             node
            	            ->add_parameter(b
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop3;
            	    break;
                }
            }
            loop3: ;


        }

    }
    goto ruleparamListEx;
    ruleparamListEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::parameter_list*
WNScriptASTParser::parameterList()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::parameter_list* node;


    const ImplTraits::CommonTokenType* LBRACKET13 = NULL;
    const ImplTraits::CommonTokenType* RBRACKET14 = NULL;
    scripting::parameter_list* paramList12;





        node = wn_nullptr;



    {
        {

            ANTLR_UINT32 alt4;

            alt4=2;

            switch ( this->LA(1) )
            {
            case LBRACKET:
            	{
            		switch ( this->LA(2) )
            		{
            		case RBRACKET:
            			{
            				alt4=2;
            			}
            		    break;
            		case BOOL_TYPE:
            		case CHAR_TYPE:
            		case FLOAT_TYPE:
            		case INT_TYPE:
            		case STRING_TYPE:
            		case TYPE:
            		case VOID_TYPE:
            			{
            				alt4=1;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 4 );
            		    ex->set_state( 1 );


            		    goto ruleparameterListEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 4 );
                ex->set_state( 0 );


                goto ruleparameterListEx;

            }

            switch (alt4)
            {
        	case 1:
        	    {
        	        LBRACKET13 =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_parameterList1373);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        this->followPush(FOLLOW_paramList_in_parameterList1375);
        	        paramList12=paramList();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        RBRACKET14 =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_parameterList1377);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        {
        	             node = paramList12
        	            ; SET_LOCATION(node, LBRACKET13); SET_END_LOCATION(node, RBRACKET14);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	         this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_parameterList1394);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	         this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_parameterList1396);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        {
        	             node = wn_nullptr;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleparameterListEx;
    ruleparameterListEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::assign_type
WNScriptASTParser::assign_type()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::assign_type node;







        node = scripting::assign_type::equal;



    {
        {

            ANTLR_UINT32 alt5;

            alt5=6;

            switch ( this->LA(1) )
            {
            case 62:
            	{
            		alt5=1;
            	}
                break;
            case 54:
            	{
            		alt5=2;
            	}
                break;
            case 56:
            	{
            		alt5=3;
            	}
                break;
            case 52:
            	{
            		alt5=4;
            	}
                break;
            case 59:
            	{
            		alt5=5;
            	}
                break;
            case 49:
            	{
            		alt5=6;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 5 );
                ex->set_state( 0 );


                goto ruleassign_typeEx;

            }

            switch (alt5)
            {
        	case 1:
        	    {
        	         this->matchToken(62, &FOLLOW_62_in_assign_type1432);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::equal;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	         this->matchToken(54, &FOLLOW_54_in_assign_type1446);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::add_equal;
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	         this->matchToken(56, &FOLLOW_56_in_assign_type1459);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::sub_equal;
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	         this->matchToken(52, &FOLLOW_52_in_assign_type1472);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::mult_equal;
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	         this->matchToken(59, &FOLLOW_59_in_assign_type1485);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::div_equal;
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	         this->matchToken(49, &FOLLOW_49_in_assign_type1498);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::mod_equal;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleassign_typeEx;
    ruleassign_typeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::lvalue*
WNScriptASTParser::lvalue()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::lvalue* node;


    scripting::expression* unary_ex15;





        node = wn_nullptr;



    {
        {
            this->followPush(FOLLOW_unary_ex_in_lvalue1528);
            unary_ex15=unary_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelvalueEx;
            }


            {
                 node = m_allocator->make_allocated<scripting::lvalue>(m_allocator, unary_ex15
                ); SET_LOCATION_FROM_NODE(node, unary_ex15
                );
            }


        }

    }
    goto rulelvalueEx;
    rulelvalueEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::arg_list*
WNScriptASTParser::arglist()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::arg_list* node;


    scripting::expression* a;
    scripting::expression* d;





        node = m_allocator->make_allocated<scripting::arg_list>(m_allocator);



    {
        {
            {
                {
                    this->followPush(FOLLOW_expr_in_arglist1586);
                    a=expr();

                    this->followPop();
                    if  (this->hasException())
                    {
                        goto rulearglistEx;
                    }


                    {
                         node->add_expression(a
                        ); SET_LOCATION_FROM_NODE(node, a
                        );
                    }


                }


            }



            for (;;)
            {
                int alt7=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt7=1;
                	}
                    break;

                }

                switch (alt7)
                {
            	case 1:
            	    {
            	         this->matchToken(COMMA, &FOLLOW_COMMA_in_arglist1619);
            	        if  (this->hasException())
            	        {
            	            goto rulearglistEx;
            	        }


            	        {
            	            int alt6=2;
            	            switch ( this->LA(1) )
            	            {
            	            case BOOL:
            	            case BOOL_TYPE:
            	            case CHAR:
            	            case CHAR_TYPE:
            	            case DOUBDEC:
            	            case DOUBINC:
            	            case FLOAT:
            	            case FLOAT_TYPE:
            	            case ID:
            	            case INT:
            	            case INT_TYPE:
            	            case LBRACKET:
            	            case NULLTOK:
            	            case STRING:
            	            case STRING_TYPE:
            	            case TYPE:
            	            case VOID_TYPE:
            	            case 55:
            	            	{
            	            		alt6=1;
            	            	}
            	                break;
            	            case COMMA:
            	            case RBRACKET:
            	            	{
            	            		alt6=2;
            	            	}
            	                break;

            	            default:
            	                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 6 );
            	                ex->set_state( 0 );


            	                goto rulearglistEx;

            	            }

            	            switch (alt6)
            	            {
            	        	case 1:
            	        	    {
            	        	        {
            	        	            this->followPush(FOLLOW_expr_in_arglist1663);
            	        	            d=expr();

            	        	            this->followPop();
            	        	            if  (this->hasException())
            	        	            {
            	        	                goto rulearglistEx;
            	        	            }


            	        	            {
            	        	                 node->add_expression(d
            	        	                , wn_true); SET_END_LOCATION_FROM_NODE(node, d
            	        	                );
            	        	            }


            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    {
            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

            	default:
            	    goto loop7;
            	    break;
                }
            }
            loop7: ;


        }

    }
    goto rulearglistEx;
    rulearglistEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::expr()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* cond_ex16;





        node = wn_nullptr;



    {
        {
            this->followPush(FOLLOW_cond_ex_in_expr1738);
            cond_ex16=cond_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexprEx;
            }


            {
                 node = cond_ex16
                ;
            }


        }

    }
    goto ruleexprEx;
    ruleexprEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::cond_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* or_ex17;





        node = wn_nullptr;



    {
        {
            this->followPush(FOLLOW_or_ex_in_cond_ex1776);
            or_ex17=or_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecond_exEx;
            }


            {
                 node = or_ex17
                ;
            }


            {
                int alt8=2;
                switch ( this->LA(1) )
                {
                    case 66:
                    	{
                    		alt8=1;
                    	}
                        break;
                }

                switch (alt8)
                {
            	case 1:
            	    {
            	         this->matchToken(66, &FOLLOW_66_in_cond_ex1799);
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	        this->followPush(FOLLOW_expr_in_cond_ex1803);
            	        b=expr();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	         this->matchToken(COLON, &FOLLOW_COLON_in_cond_ex1805);
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	        this->followPush(FOLLOW_cond_ex_in_cond_ex1809);
            	        c=cond_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	        {
            	             node = m_allocator->make_allocated<scripting::cond_expression>(m_allocator, node, b
            	            , c
            	            );  SET_LOCATION_FROM_NODE(node, or_ex17
            	            ); SET_END_LOCATION_FROM_NODE(node, c
            	            );
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    goto rulecond_exEx;
    rulecond_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::or_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;





        node = wn_nullptr;



    {
        {
            this->followPush(FOLLOW_and_ex_in_or_ex1856);
            a=and_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleor_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt9=2;
                switch ( this->LA(1) )
                {
                case 67:
                	{
                		alt9=1;
                	}
                    break;

                }

                switch (alt9)
                {
            	case 1:
            	    {
            	         this->matchToken(67, &FOLLOW_67_in_or_ex1873);
            	        if  (this->hasException())
            	        {
            	            goto ruleor_exEx;
            	        }


            	        this->followPush(FOLLOW_and_ex_in_or_ex1877);
            	        b=and_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleor_exEx;
            	        }


            	        {
            	             node = m_allocator->make_allocated<scripting::short_circuit_expression>(m_allocator, scripting::short_circuit_type::or_operator, node, b
            	            ); SET_LOCATION_FROM_NODE(node, a
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop9;
            	    break;
                }
            }
            loop9: ;


        }

    }
    goto ruleor_exEx;
    ruleor_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::and_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;





        node = wn_nullptr;



    {
        {
            this->followPush(FOLLOW_eq_ex_in_and_ex1920);
            a=eq_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleand_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt10=2;
                switch ( this->LA(1) )
                {
                case 50:
                	{
                		alt10=1;
                	}
                    break;

                }

                switch (alt10)
                {
            	case 1:
            	    {
            	         this->matchToken(50, &FOLLOW_50_in_and_ex1937);
            	        if  (this->hasException())
            	        {
            	            goto ruleand_exEx;
            	        }


            	        this->followPush(FOLLOW_eq_ex_in_and_ex1941);
            	        b=eq_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleand_exEx;
            	        }


            	        {
            	            node = m_allocator->make_allocated<scripting::short_circuit_expression>(m_allocator, scripting::short_circuit_type::and_operator, node, b
            	            ); SET_LOCATION_FROM_NODE(node, a
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop10;
            	    break;
                }
            }
            loop10: ;


        }

    }
    goto ruleand_exEx;
    ruleand_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::eq_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;





        node = wn_nullptr;



    {
        {
            this->followPush(FOLLOW_rel_ex_in_eq_ex1977);
            a=rel_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleeq_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt11=3;
                switch ( this->LA(1) )
                {
                case 63:
                	{
                		alt11=1;
                	}
                    break;
                case 47:
                	{
                		alt11=2;
                	}
                    break;

                }

                switch (alt11)
                {
            	case 1:
            	    {
            	        {
            	             this->matchToken(63, &FOLLOW_63_in_eq_ex2012);
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            this->followPush(FOLLOW_rel_ex_in_eq_ex2016);
            	            b=rel_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            {
            	                node = m_allocator->make_allocated<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_equal, node, b
            	                );  SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	             this->matchToken(47, &FOLLOW_47_in_eq_ex2039);
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            this->followPush(FOLLOW_rel_ex_in_eq_ex2043);
            	            c=rel_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            {
            	                node = m_allocator->make_allocated<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_not_equal, node, c
            	                ); SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                );
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop11;
            	    break;
                }
            }
            loop11: ;


        }

    }
    goto ruleeq_exEx;
    ruleeq_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::rel_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* d;
    scripting::expression* e;





        node = wn_nullptr;



    {
        {
            this->followPush(FOLLOW_add_ex_in_rel_ex2101);
            a=add_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulerel_exEx;
            }


            {
                 node=a
                ;
            }



            for (;;)
            {
                int alt12=5;
                switch ( this->LA(1) )
                {
                case 60:
                	{
                		alt12=1;
                	}
                    break;
                case 64:
                	{
                		alt12=2;
                	}
                    break;
                case 61:
                	{
                		alt12=3;
                	}
                    break;
                case 65:
                	{
                		alt12=4;
                	}
                    break;

                }

                switch (alt12)
                {
            	case 1:
            	    {
            	        {
            	             this->matchToken(60, &FOLLOW_60_in_rel_ex2137);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex2141);
            	            b=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->make_allocated<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_less_than, node, b
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	             this->matchToken(64, &FOLLOW_64_in_rel_ex2165);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex2169);
            	            c=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->make_allocated<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_greater_than, node, c
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	        {
            	             this->matchToken(61, &FOLLOW_61_in_rel_ex2193);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex2197);
            	            d=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->make_allocated<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_less_than_or_equal, node, d
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, d
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 4:
            	    {
            	        {
            	             this->matchToken(65, &FOLLOW_65_in_rel_ex2221);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex2225);
            	            e=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->make_allocated<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_greater_than_or_equal, node, e
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, e
            	                );
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop12;
            	    break;
                }
            }
            loop12: ;


        }

    }
    goto rulerel_exEx;
    rulerel_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::add_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;





        node = wn_nullptr;



    {
        {
            this->followPush(FOLLOW_mult_ex_in_add_ex2286);
            a=mult_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleadd_exEx;
            }


            {
                node = a
                ;
            }



            for (;;)
            {
                int alt13=3;
                switch ( this->LA(1) )
                {
                case 53:
                	{
                		alt13=1;
                	}
                    break;
                case 55:
                	{
                		alt13=2;
                	}
                    break;

                }

                switch (alt13)
                {
            	case 1:
            	    {
            	        {
            	             this->matchToken(53, &FOLLOW_53_in_add_ex2321);
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            this->followPush(FOLLOW_mult_ex_in_add_ex2325);
            	            b=mult_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            {
            	                node = m_allocator->make_allocated<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_add, node, b
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	             this->matchToken(55, &FOLLOW_55_in_add_ex2347);
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            this->followPush(FOLLOW_mult_ex_in_add_ex2351);
            	            c=mult_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            {
            	                node = m_allocator->make_allocated<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_sub, node, c
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                );
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop13;
            	    break;
                }
            }
            loop13: ;


        }

    }
    goto ruleadd_exEx;
    ruleadd_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::mult_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* d;





        node = wn_nullptr;



    {
        {
            this->followPush(FOLLOW_unary_ex_in_mult_ex2410);
            a=unary_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemult_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt14=4;
                switch ( this->LA(1) )
                {
                case 51:
                	{
                		alt14=1;
                	}
                    break;
                case 58:
                	{
                		alt14=2;
                	}
                    break;
                case 48:
                	{
                		alt14=3;
                	}
                    break;

                }

                switch (alt14)
                {
            	case 1:
            	    {
            	        {
            	             this->matchToken(51, &FOLLOW_51_in_mult_ex2449);
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            this->followPush(FOLLOW_unary_ex_in_mult_ex2453);
            	            b=unary_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            {
            	                node = m_allocator->make_allocated<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_mult, node, b
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	             this->matchToken(58, &FOLLOW_58_in_mult_ex2479);
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            this->followPush(FOLLOW_unary_ex_in_mult_ex2483);
            	            c=unary_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            {
            	                node = m_allocator->make_allocated<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_div, node, c
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	        {
            	             this->matchToken(48, &FOLLOW_48_in_mult_ex2509);
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            this->followPush(FOLLOW_unary_ex_in_mult_ex2513);
            	            d=unary_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            {
            	                node = m_allocator->make_allocated<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_mod, node, d
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, d
            	                );
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop14;
            	    break;
                }
            }
            loop14: ;


        }

    }
    goto rulemult_exEx;
    rulemult_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::unary_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* d;





        node = wn_nullptr;



    {
        {

            ANTLR_UINT32 alt15;

            alt15=4;

            switch ( this->LA(1) )
            {
            case BOOL:
            case BOOL_TYPE:
            case CHAR:
            case CHAR_TYPE:
            case FLOAT:
            case FLOAT_TYPE:
            case ID:
            case INT:
            case INT_TYPE:
            case LBRACKET:
            case NULLTOK:
            case STRING:
            case STRING_TYPE:
            case TYPE:
            case VOID_TYPE:
            	{
            		alt15=1;
            	}
                break;
            case DOUBINC:
            	{
            		alt15=2;
            	}
                break;
            case DOUBDEC:
            	{
            		alt15=3;
            	}
                break;
            case 55:
            	{
            		alt15=4;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 15 );
                ex->set_state( 0 );


                goto ruleunary_exEx;

            }

            switch (alt15)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_post_ex_in_unary_ex2565);
        	        a=post_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             node = a
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	         this->matchToken(DOUBINC, &FOLLOW_DOUBINC_in_unary_ex2578);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        this->followPush(FOLLOW_unary_ex_in_unary_ex2582);
        	        b=unary_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             scripting::node* t = node; node = m_allocator->make_allocated<scripting::unary_expression>(m_allocator, scripting::unary_type::pre_increment, b
        	            );   SET_LOCATION_FROM_NODE(node, t); SET_END_LOCATION_FROM_NODE(node, b
        	            );
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	         this->matchToken(DOUBDEC, &FOLLOW_DOUBDEC_in_unary_ex2595);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        this->followPush(FOLLOW_unary_ex_in_unary_ex2599);
        	        c=unary_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             scripting::node* t = node; node = m_allocator->make_allocated<scripting::unary_expression>(m_allocator, scripting::unary_type::pre_decrement, c
        	            );   SET_LOCATION_FROM_NODE(node, t); SET_END_LOCATION_FROM_NODE(node, c
        	            );
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	         this->matchToken(55, &FOLLOW_55_in_unary_ex2612);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        this->followPush(FOLLOW_unary_ex_in_unary_ex2616);
        	        d=unary_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             scripting::node* t = node; node = m_allocator->make_allocated<scripting::unary_expression>(m_allocator, scripting::unary_type::negation, d
        	            );   SET_LOCATION_FROM_NODE(node, t); SET_END_LOCATION_FROM_NODE(node, d
        	            );
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleunary_exEx;
    ruleunary_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::post_expression*
WNScriptASTParser::post_ex_proper()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::post_expression* node;


    const ImplTraits::CommonTokenType* d = NULL;
    const ImplTraits::CommonTokenType* e = NULL;
    const ImplTraits::CommonTokenType* f = NULL;
    const ImplTraits::CommonTokenType* g = NULL;
    const ImplTraits::CommonTokenType* h = NULL;
    const ImplTraits::CommonTokenType* i = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    const ImplTraits::CommonTokenType* DOUBINC18 = NULL;
    const ImplTraits::CommonTokenType* DOUBDEC19 = NULL;
    scripting::expression* a;
    scripting::arg_list* b;





        node = wn_nullptr;



    {
        {

            ANTLR_UINT32 alt16;

            alt16=6;

            switch ( this->LA(1) )
            {
            case LSQBRACKET:
            	{
            		alt16=1;
            	}
                break;
            case LBRACKET:
            	{
            		switch ( this->LA(2) )
            		{
            		case RBRACKET:
            			{
            				alt16=2;
            			}
            		    break;
            		case BOOL:
            		case BOOL_TYPE:
            		case CHAR:
            		case CHAR_TYPE:
            		case DOUBDEC:
            		case DOUBINC:
            		case FLOAT:
            		case FLOAT_TYPE:
            		case ID:
            		case INT:
            		case INT_TYPE:
            		case LBRACKET:
            		case NULLTOK:
            		case STRING:
            		case STRING_TYPE:
            		case TYPE:
            		case VOID_TYPE:
            		case 55:
            			{
            				alt16=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 16 );
            		    ex->set_state( 2 );


            		    goto rulepost_ex_properEx;

            		}

            	}
                break;
            case 57:
            	{
            		alt16=4;
            	}
                break;
            case DOUBINC:
            	{
            		alt16=5;
            	}
                break;
            case DOUBDEC:
            	{
            		alt16=6;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 16 );
                ex->set_state( 0 );


                goto rulepost_ex_properEx;

            }

            switch (alt16)
            {
        	case 1:
        	    {
        	        d =  this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_post_ex_proper2654);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_post_ex_proper2658);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        e =  this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_post_ex_proper2662);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::array_access_expression>(m_allocator, a
        	            ); SET_LOCATION(node, d); SET_END_LOCATION(node, e);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        f =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_post_ex_proper2677);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        g =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_post_ex_proper2681);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::function_call_expression>(m_allocator); SET_LOCATION(node, f); SET_END_LOCATION(node, g);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        h =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_post_ex_proper2709);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        this->followPush(FOLLOW_arglist_in_post_ex_proper2715);
        	        b=arglist();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        i =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_post_ex_proper2719);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::function_call_expression>(m_allocator, b
        	            ); SET_LOCATION(node, h); SET_END_LOCATION(node, i);
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	         this->matchToken(57, &FOLLOW_57_in_post_ex_proper2732);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        c =  this->matchToken(ID, &FOLLOW_ID_in_post_ex_proper2736);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::member_access_expression>(m_allocator, (c->getText()).c_str()); SET_LOCATION(node, c);
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        DOUBINC18 =  this->matchToken(DOUBINC, &FOLLOW_DOUBINC_in_post_ex_proper2763);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::post_unary_expression>(m_allocator, scripting::post_unary_type::post_increment); SET_LOCATION(node, DOUBINC18);
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	        DOUBDEC19 =  this->matchToken(DOUBDEC, &FOLLOW_DOUBDEC_in_post_ex_proper2792);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::post_unary_expression>(m_allocator, scripting::post_unary_type::post_decrement); SET_LOCATION(node, DOUBDEC19);
        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulepost_ex_properEx;
    rulepost_ex_properEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::post_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::post_expression* a;
    scripting::expression * prim_ex20;





        node = wn_nullptr;



    {
        {
            this->followPush(FOLLOW_prim_ex_in_post_ex2845);
            prim_ex20=prim_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulepost_exEx;
            }


            {
                 node = prim_ex20
                ;
            }



            for (;;)
            {
                int alt17=2;
                switch ( this->LA(1) )
                {
                case DOUBDEC:
                case DOUBINC:
                case LBRACKET:
                case LSQBRACKET:
                case 57:
                	{
                		alt17=1;
                	}
                    break;

                }

                switch (alt17)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_post_ex_proper_in_post_ex2864);
            	        a=post_ex_proper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulepost_exEx;
            	        }


            	        {
            	            a
            	            ->add_base_expression(node); SET_END_LOCATION_FROM_NODE(a
            	            , node); node = a
            	            ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop17;
            	    break;
                }
            }
            loop17: ;


        }

    }
    goto rulepost_exEx;
    rulepost_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::assignment_instruction*
WNScriptASTParser::assignment()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::assignment_instruction* node;


    scripting::lvalue* lvalue21;
    scripting::assign_type assign_type22;
    scripting::expression* expr23;





        node = wn_nullptr;



    {
        {
            this->followPush(FOLLOW_lvalue_in_assignment2893);
            lvalue21=lvalue();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleassignmentEx;
            }


            {
                 node = m_allocator->make_allocated<scripting::assignment_instruction>(m_allocator, lvalue21
                ); SET_LOCATION_FROM_NODE(node, lvalue21
                );
            }


            {
                int alt18=2;
                switch ( this->LA(1) )
                {
                    case 49:
                    case 52:
                    case 54:
                    case 56:
                    case 59:
                    case 62:
                    	{
                    		alt18=1;
                    	}
                        break;
                }

                switch (alt18)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_assign_type_in_assignment2906);
            	        assign_type22=assign_type();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }


            	        this->followPush(FOLLOW_expr_in_assignment2908);
            	        expr23=expr();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }


            	        {
            	             node->add_value(assign_type22
            	            , expr23
            	            ); SET_END_LOCATION_FROM_NODE(node, expr23
            	            );
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    goto ruleassignmentEx;
    ruleassignmentEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::constant_expression*
WNScriptASTParser::constant()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::constant_expression* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* b = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    const ImplTraits::CommonTokenType* d = NULL;
    const ImplTraits::CommonTokenType* e = NULL;
    const ImplTraits::CommonTokenType* g = NULL;
    const ImplTraits::CommonTokenType* h = NULL;
    const ImplTraits::CommonTokenType* i = NULL;
    scripting::type* f;





        node = wn_nullptr;



    {
        {

            ANTLR_UINT32 alt19;

            alt19=6;

            switch ( this->LA(1) )
            {
            case INT:
            	{
            		alt19=1;
            	}
                break;
            case FLOAT:
            	{
            		alt19=2;
            	}
                break;
            case CHAR:
            	{
            		alt19=3;
            	}
                break;
            case STRING:
            	{
            		alt19=4;
            	}
                break;
            case BOOL:
            	{
            		alt19=5;
            	}
                break;
            case BOOL_TYPE:
            case CHAR_TYPE:
            case FLOAT_TYPE:
            case INT_TYPE:
            case STRING_TYPE:
            case TYPE:
            case VOID_TYPE:
            	{
            		alt19=6;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 19 );
                ex->set_state( 0 );


                goto ruleconstantEx;

            }

            switch (alt19)
            {
        	case 1:
        	    {
        	        a =  this->matchToken(INT, &FOLLOW_INT_in_constant2943);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->make_allocated<scripting::type>(m_allocator, scripting::type_classification::int_type); SET_LOCATION(type_node, a); node = m_allocator->make_allocated<scripting::constant_expression>(m_allocator, type_node, (a->getText()).c_str()); SET_LOCATION(node, a);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        b =  this->matchToken(FLOAT, &FOLLOW_FLOAT_in_constant2961);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->make_allocated<scripting::type>(m_allocator, scripting::type_classification::float_type); SET_LOCATION(type_node, b); node = m_allocator->make_allocated<scripting::constant_expression>(m_allocator, type_node, (b->getText()).c_str()); SET_LOCATION(node, b);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        c =  this->matchToken(CHAR, &FOLLOW_CHAR_in_constant2977);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->make_allocated<scripting::type>(m_allocator, scripting::type_classification::char_type); SET_LOCATION(type_node, c); node = m_allocator->make_allocated<scripting::constant_expression>(m_allocator, type_node, (c->getText()).c_str()); SET_LOCATION(node, c);
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        d =  this->matchToken(STRING, &FOLLOW_STRING_in_constant2994);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->make_allocated<scripting::type>(m_allocator, scripting::type_classification::string_type); SET_LOCATION(type_node, d); node = m_allocator->make_allocated<scripting::constant_expression>(m_allocator, type_node, (d->getText()).c_str()); SET_LOCATION(node, d);
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        e =  this->matchToken(BOOL, &FOLLOW_BOOL_in_constant3009);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->make_allocated<scripting::type>(m_allocator, scripting::type_classification::bool_type); SET_LOCATION(type_node, e); node = m_allocator->make_allocated<scripting::constant_expression>(m_allocator, type_node, (e->getText()).c_str()); SET_LOCATION(node, e);
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_constant3026);
        	        f=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        g =  this->matchToken(LBRACE, &FOLLOW_LBRACE_in_constant3030);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        h =  this->matchToken(STRING, &FOLLOW_STRING_in_constant3034);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        i =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_constant3038);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::constant_expression>(m_allocator, f
        	            , (h->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            f
        	            ); SET_END_LOCATION(node, i);
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleconstantEx;
    ruleconstantEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression *
WNScriptASTParser::prim_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression * node;


    const ImplTraits::CommonTokenType* ba = NULL;
    const ImplTraits::CommonTokenType* bb = NULL;
    const ImplTraits::CommonTokenType* d = NULL;
    const ImplTraits::CommonTokenType* ID24 = NULL;
    scripting::expression* a;
    scripting::constant_expression* b;
    scripting::type* c;
    scripting::struct_allocation_expression* e;
    scripting::cast_expression* f;
    scripting::array_allocation_expression* g;





        node = wn_nullptr;



    {
        {

            ANTLR_UINT32 alt21;

            alt21=5;

            switch ( this->LA(1) )
            {
            case ID:
            	{
            		alt21=1;
            	}
                break;
            case LBRACKET:
            	{
            		alt21=2;
            	}
                break;
            case BOOL:
            case CHAR:
            case FLOAT:
            case INT:
            case STRING:
            	{
            		alt21=3;
            	}
                break;
            case TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt21=3;
            			}
            		    break;
            		case LBRACKET:
            		case LSQBRACKET:
            			{
            				alt21=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 21 );
            		    ex->set_state( 4 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case VOID_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt21=3;
            			}
            		    break;
            		case LBRACKET:
            		case LSQBRACKET:
            			{
            				alt21=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 21 );
            		    ex->set_state( 5 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case INT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt21=3;
            			}
            		    break;
            		case LBRACKET:
            		case LSQBRACKET:
            			{
            				alt21=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 21 );
            		    ex->set_state( 6 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case FLOAT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt21=3;
            			}
            		    break;
            		case LBRACKET:
            		case LSQBRACKET:
            			{
            				alt21=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 21 );
            		    ex->set_state( 7 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case CHAR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt21=3;
            			}
            		    break;
            		case LBRACKET:
            		case LSQBRACKET:
            			{
            				alt21=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 21 );
            		    ex->set_state( 8 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case STRING_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt21=3;
            			}
            		    break;
            		case LBRACKET:
            		case LSQBRACKET:
            			{
            				alt21=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 21 );
            		    ex->set_state( 9 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case BOOL_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt21=3;
            			}
            		    break;
            		case LBRACKET:
            		case LSQBRACKET:
            			{
            				alt21=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 21 );
            		    ex->set_state( 10 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case NULLTOK:
            	{
            		alt21=5;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 21 );
                ex->set_state( 0 );


                goto ruleprim_exEx;

            }

            switch (alt21)
            {
        	case 1:
        	    {
        	        ID24 =  this->matchToken(ID, &FOLLOW_ID_in_prim_ex3068);
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::id_expression>(m_allocator, (ID24->getText()).c_str()); SET_LOCATION(node, ID24);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        ba =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_prim_ex3083);
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_prim_ex3087);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        bb =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_prim_ex3091);
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	            node = a
        	            ; SET_LOCATION(node, ba); SET_END_LOCATION(node, bb);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        this->followPush(FOLLOW_constant_in_prim_ex3106);
        	        b=constant();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	            node = b
        	            ;
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_prim_ex3121);
        	        c=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	            int alt20=3;
        	            switch ( this->LA(1) )
        	            {
        	            case LBRACKET:
        	            	{
        	            		switch ( this->LA(2) )
        	            		{
        	            		case RBRACKET:
        	            			{
        	            				alt20=1;
        	            			}
        	            		    break;
        	            		case BOOL:
        	            		case BOOL_TYPE:
        	            		case CHAR:
        	            		case CHAR_TYPE:
        	            		case DOUBDEC:
        	            		case DOUBINC:
        	            		case FLOAT:
        	            		case FLOAT_TYPE:
        	            		case ID:
        	            		case INT:
        	            		case INT_TYPE:
        	            		case LBRACKET:
        	            		case NULLTOK:
        	            		case STRING:
        	            		case STRING_TYPE:
        	            		case TYPE:
        	            		case VOID_TYPE:
        	            		case 55:
        	            			{
        	            				alt20=2;
        	            			}
        	            		    break;

        	            		default:
        	            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	            		    ex->set_decisionNum( 20 );
        	            		    ex->set_state( 1 );


        	            		    goto ruleprim_exEx;

        	            		}

        	            	}
        	                break;
        	            case LSQBRACKET:
        	            	{
        	            		alt20=3;
        	            	}
        	                break;

        	            default:
        	                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                ex->set_decisionNum( 20 );
        	                ex->set_state( 0 );


        	                goto ruleprim_exEx;

        	            }

        	            switch (alt20)
        	            {
        	        	case 1:
        	        	    {
        	        	        {
        	        	            this->followPush(FOLLOW_structInit_in_prim_ex3153);
        	        	            e=structInit();

        	        	            this->followPop();
        	        	            if  (this->hasException())
        	        	            {
        	        	                goto ruleprim_exEx;
        	        	            }


        	        	        }


        	        	        {
        	        	             e
        	        	            ->set_type(c
        	        	            ); node=e
        	        	            ; SET_START_LOCATION_FROM_NODE(node, c
        	        	            );
        	        	        }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    {
        	        	        {
        	        	            this->followPush(FOLLOW_cast_in_prim_ex3178);
        	        	            f=cast();

        	        	            this->followPop();
        	        	            if  (this->hasException())
        	        	            {
        	        	                goto ruleprim_exEx;
        	        	            }


        	        	        }


        	        	        {
        	        	             f
        	        	            ->set_type(c
        	        	            ); node=f
        	        	            ; SET_START_LOCATION_FROM_NODE(node, c
        	        	            );
        	        	        }


        	        	    }
        	        	    break;
        	        	case 3:
        	        	    {
        	        	        {
        	        	            this->followPush(FOLLOW_arrayInit_in_prim_ex3201);
        	        	            g=arrayInit();

        	        	            this->followPop();
        	        	            if  (this->hasException())
        	        	            {
        	        	                goto ruleprim_exEx;
        	        	            }


        	        	        }


        	        	        {
        	        	             g
        	        	            ->set_type(c
        	        	            ); node=g
        	        	            ; SET_START_LOCATION_FROM_NODE(node, c
        	        	            );
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 5:
        	    {
        	        d =  this->matchToken(NULLTOK, &FOLLOW_NULLTOK_in_prim_ex3230);
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::null_allocation_expression>(m_allocator); SET_LOCATION(node, d);
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleprim_exEx;
    ruleprim_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::cast_expression*
WNScriptASTParser::cast()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::cast_expression* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    scripting::expression* b;





      node = wn_nullptr;



    {
        {
            a =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_cast3259);
            if  (this->hasException())
            {
                goto rulecastEx;
            }


            this->followPush(FOLLOW_expr_in_cast3263);
            b=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecastEx;
            }


            c =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_cast3267);
            if  (this->hasException())
            {
                goto rulecastEx;
            }


            {
                 node = m_allocator->make_allocated<scripting::cast_expression>(m_allocator, b
                ); SET_LOCATION(node, a); SET_END_LOCATION(node, c);
            }


        }

    }
    goto rulecastEx;
    rulecastEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::struct_allocation_expression*
WNScriptASTParser::structInit()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::struct_allocation_expression* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* b = NULL;






        node = wn_nullptr;



    {
        {
            a =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_structInit3296);
            if  (this->hasException())
            {
                goto rulestructInitEx;
            }


            b =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_structInit3300);
            if  (this->hasException())
            {
                goto rulestructInitEx;
            }


            {
                 node = m_allocator->make_allocated<scripting::struct_allocation_expression>(m_allocator); SET_LOCATION(node, a); SET_END_LOCATION(node, b);
            }


        }

    }
    goto rulestructInitEx;
    rulestructInitEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::array_allocation_expression*
WNScriptASTParser::arrayInit()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::array_allocation_expression* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    scripting::expression* e;
    scripting::expression* b;





        node = m_allocator->make_allocated<scripting::array_allocation_expression>(m_allocator);



    {
        {
            {
                int alt25=2;
                switch ( this->LA(1) )
                {
                case LSQBRACKET:
                	{
                		switch ( this->LA(2) )
                		{
                		case RSQBRACKET:
                			{
                				alt25=2;
                			}
                		    break;
                		case BOOL:
                		case BOOL_TYPE:
                		case CHAR:
                		case CHAR_TYPE:
                		case DOUBDEC:
                		case DOUBINC:
                		case FLOAT:
                		case FLOAT_TYPE:
                		case ID:
                		case INT:
                		case INT_TYPE:
                		case LBRACKET:
                		case NULLTOK:
                		case STRING:
                		case STRING_TYPE:
                		case TYPE:
                		case VOID_TYPE:
                		case 55:
                			{
                				alt25=1;
                			}
                		    break;

                		default:
                		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 25 );
                		    ex->set_state( 1 );


                		    goto rulearrayInitEx;

                		}

                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 25 );
                    ex->set_state( 0 );


                    goto rulearrayInitEx;

                }

                switch (alt25)
                {
            	case 1:
            	    {
            	        {
            	            {
            	                int cnt22=0;

            	                for (;;)
            	                {
            	                    int alt22=2;
            	            	switch ( this->LA(1) )
            	            	{
            	            	case LSQBRACKET:
            	            		{
            	            			switch ( this->LA(2) )
            	            			{
            	            			case BOOL:
            	            			case BOOL_TYPE:
            	            			case CHAR:
            	            			case CHAR_TYPE:
            	            			case DOUBDEC:
            	            			case DOUBINC:
            	            			case FLOAT:
            	            			case FLOAT_TYPE:
            	            			case ID:
            	            			case INT:
            	            			case INT_TYPE:
            	            			case LBRACKET:
            	            			case NULLTOK:
            	            			case STRING:
            	            			case STRING_TYPE:
            	            			case TYPE:
            	            			case VOID_TYPE:
            	            			case 55:
            	            				{
            	            					alt22=1;
            	            				}
            	            			    break;

            	            			}

            	            		}
            	            	    break;

            	            	}

            	            	switch (alt22)
            	            	{
            	            	    case 1:
            	            	        {
            	            	             this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_arrayInit3362);
            	            	            if  (this->hasException())
            	            	            {
            	            	                goto rulearrayInitEx;
            	            	            }


            	            	            this->followPush(FOLLOW_expr_in_arrayInit3366);
            	            	            e=expr();

            	            	            this->followPop();
            	            	            if  (this->hasException())
            	            	            {
            	            	                goto rulearrayInitEx;
            	            	            }


            	            	             this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_arrayInit3368);
            	            	            if  (this->hasException())
            	            	            {
            	            	                goto rulearrayInitEx;
            	            	            }


            	            	            {
            	            	                 node->add_expression(e
            	            	                );
            	            	            }


            	            	        }
            	            	        break;

            	            	    default:

            	            		if ( cnt22 >= 1 )
            	            		{
            	            		    goto loop22;
            	            		}


            	            		new ANTLR_Exception< WNScriptASTParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            	            		goto rulearrayInitEx;
            	            	}
            	            	cnt22++;
            	                }
            	                loop22: ;
            	            }


            	            for (;;)
            	            {
            	                int alt23=2;
            	                switch ( this->LA(1) )
            	                {
            	                case LSQBRACKET:
            	                	{
            	                		alt23=1;
            	                	}
            	                    break;

            	                }

            	                switch (alt23)
            	                {
            	            	case 1:
            	            	    {
            	            	         this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_arrayInit3392);
            	            	        if  (this->hasException())
            	            	        {
            	            	            goto rulearrayInitEx;
            	            	        }


            	            	         this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_arrayInit3394);
            	            	        if  (this->hasException())
            	            	        {
            	            	            goto rulearrayInitEx;
            	            	        }


            	            	        {
            	            	             node->add_level();
            	            	        }


            	            	    }
            	            	    break;

            	            	default:
            	            	    goto loop23;
            	            	    break;
            	                }
            	            }
            	            loop23: ;


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	            int cnt24=0;

            	            for (;;)
            	            {
            	                int alt24=2;
            	        	switch ( this->LA(1) )
            	        	{
            	        	case LSQBRACKET:
            	        		{
            	        			alt24=1;
            	        		}
            	        	    break;

            	        	}

            	        	switch (alt24)
            	        	{
            	        	    case 1:
            	        	        {
            	        	             this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_arrayInit3432);
            	        	            if  (this->hasException())
            	        	            {
            	        	                goto rulearrayInitEx;
            	        	            }


            	        	             this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_arrayInit3434);
            	        	            if  (this->hasException())
            	        	            {
            	        	                goto rulearrayInitEx;
            	        	            }


            	        	            {
            	        	                 node->add_level();
            	        	            }


            	        	        }
            	        	        break;

            	        	    default:

            	        		if ( cnt24 >= 1 )
            	        		{
            	        		    goto loop24;
            	        		}


            	        		new ANTLR_Exception< WNScriptASTParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            	        		goto rulearrayInitEx;
            	        	}
            	        	cnt24++;
            	            }
            	            loop24: ;
            	        }

            	    }
            	    break;

                }
            }

            {
                int alt26=2;
                switch ( this->LA(1) )
                {
                case LBRACKET:
                	{
                		switch ( this->LA(2) )
                		{
                		case RBRACKET:
                			{
                				alt26=1;
                			}
                		    break;
                		case BOOL:
                		case BOOL_TYPE:
                		case CHAR:
                		case CHAR_TYPE:
                		case DOUBDEC:
                		case DOUBINC:
                		case FLOAT:
                		case FLOAT_TYPE:
                		case ID:
                		case INT:
                		case INT_TYPE:
                		case LBRACKET:
                		case NULLTOK:
                		case STRING:
                		case STRING_TYPE:
                		case TYPE:
                		case VOID_TYPE:
                		case 55:
                			{
                				alt26=2;
                			}
                		    break;

                		default:
                		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 26 );
                		    ex->set_state( 1 );


                		    goto rulearrayInitEx;

                		}

                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 26 );
                    ex->set_state( 0 );


                    goto rulearrayInitEx;

                }

                switch (alt26)
                {
            	case 1:
            	    {
            	        {
            	             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_arrayInit3475);
            	            if  (this->hasException())
            	            {
            	                goto rulearrayInitEx;
            	            }


            	            a =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_arrayInit3479);
            	            if  (this->hasException())
            	            {
            	                goto rulearrayInitEx;
            	            }


            	            {
            	                 SET_LOCATION(node, a);
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_arrayInit3513);
            	            if  (this->hasException())
            	            {
            	                goto rulearrayInitEx;
            	            }


            	            this->followPush(FOLLOW_expr_in_arrayInit3517);
            	            b=expr();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulearrayInitEx;
            	            }


            	            c =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_arrayInit3521);
            	            if  (this->hasException())
            	            {
            	                goto rulearrayInitEx;
            	            }


            	            {
            	                 node->set_copy_initializer(b); SET_LOCATION(node, c);
            	            }


            	        }


            	    }
            	    break;

                }
            }

        }

    }
    goto rulearrayInitEx;
    rulearrayInitEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::declaration*
WNScriptASTParser::declaration()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::declaration* node;


    scripting::parameter* a;
    scripting::expression* c;





        node =  m_allocator->make_allocated<scripting::declaration>(m_allocator);



    {
        {
            this->followPush(FOLLOW_param_in_declaration3566);
            a=param();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledeclarationEx;
            }


            {
                 node->set_parameter(a
                ); SET_LOCATION_FROM_NODE(node, a
                );
            }


            {
                {
                     this->matchToken(62, &FOLLOW_62_in_declaration3601);
                    if  (this->hasException())
                    {
                        goto ruledeclarationEx;
                    }


                    {
                        {
                            this->followPush(FOLLOW_expr_in_declaration3608);
                            c=expr();

                            this->followPop();
                            if  (this->hasException())
                            {
                                goto ruledeclarationEx;
                            }


                        }


                        {
                             node->add_expression_initializer(c
                            ); SET_END_LOCATION_FROM_NODE(node, c
                            );
                        }


                    }


                }


            }


        }

    }
    goto ruledeclarationEx;
    ruledeclarationEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::instructionScalar()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    scripting::declaration* declaration25;
    scripting::assignment_instruction* assignment26;





        node = wn_nullptr;



    {
        {

            ANTLR_UINT32 alt27;

            alt27=2;

            alt27 = cdfa27.predict(this, this->get_rec(), this->get_istream(), cdfa27 );
            if  (this->hasException())
            {
                goto ruleinstructionScalarEx;
            }

            switch (alt27)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_declaration_in_instructionScalar3657);
        	        declaration25=declaration();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionScalarEx;
        	        }


        	        {
        	            node = declaration25
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_assignment_in_instructionScalar3670);
        	        assignment26=assignment();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionScalarEx;
        	        }


        	        {
        	            node = assignment26
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleinstructionScalarEx;
    ruleinstructionScalarEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::return_instruction*
WNScriptASTParser::returnInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::return_instruction* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* b = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    const ImplTraits::CommonTokenType* d = NULL;
    scripting::expression* expr27;





        node = wn_nullptr;



    {
        {

            ANTLR_UINT32 alt28;

            alt28=2;

            switch ( this->LA(1) )
            {
            case RETURN:
            	{
            		switch ( this->LA(2) )
            		{
            		case SEMICOLON:
            			{
            				alt28=2;
            			}
            		    break;
            		case BOOL:
            		case BOOL_TYPE:
            		case CHAR:
            		case CHAR_TYPE:
            		case DOUBDEC:
            		case DOUBINC:
            		case FLOAT:
            		case FLOAT_TYPE:
            		case ID:
            		case INT:
            		case INT_TYPE:
            		case LBRACKET:
            		case NULLTOK:
            		case STRING:
            		case STRING_TYPE:
            		case TYPE:
            		case VOID_TYPE:
            		case 55:
            			{
            				alt28=1;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 28 );
            		    ex->set_state( 1 );


            		    goto rulereturnInstEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 28 );
                ex->set_state( 0 );


                goto rulereturnInstEx;

            }

            switch (alt28)
            {
        	case 1:
        	    {
        	        a =  this->matchToken(RETURN, &FOLLOW_RETURN_in_returnInst3702);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_returnInst3704);
        	        expr27=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        b =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_returnInst3708);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::return_instruction>(m_allocator, expr27
        	            ); SET_LOCATION(node, a); SET_END_LOCATION(node, b);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        c =  this->matchToken(RETURN, &FOLLOW_RETURN_in_returnInst3722);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        d =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_returnInst3726);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::return_instruction>(m_allocator); SET_LOCATION(node, c); SET_END_LOCATION(node, d);
        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulereturnInstEx;
    rulereturnInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::whileInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    const ImplTraits::CommonTokenType* WHILE30 = NULL;
    scripting::expression* expr28;
    scripting::instruction_list* body29;





        node = wn_nullptr;



    {
        {
            WHILE30 =  this->matchToken(WHILE, &FOLLOW_WHILE_in_whileInst3759);
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_whileInst3761);
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


            this->followPush(FOLLOW_expr_in_whileInst3763);
            expr28=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_whileInst3765);
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


            this->followPush(FOLLOW_body_in_whileInst3767);
            body29=body();

            this->followPop();
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


            {
                 node = m_allocator->make_allocated<scripting::while_instruction>(m_allocator, expr28
                , body29
                ); SET_LOCATION(node, WHILE30); SET_END_LOCATION_FROM_NODE(node,
                body29
                );
            }


        }

    }
    goto rulewhileInstEx;
    rulewhileInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::doInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    const ImplTraits::CommonTokenType* DO33 = NULL;
    const ImplTraits::CommonTokenType* SEMICOLON34 = NULL;
    scripting::expression* expr31;
    scripting::instruction_list* body32;





        node = wn_nullptr;



    {
        {
            DO33 =  this->matchToken(DO, &FOLLOW_DO_in_doInst3803);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            this->followPush(FOLLOW_body_in_doInst3805);
            body32=body();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


             this->matchToken(WHILE, &FOLLOW_WHILE_in_doInst3807);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_doInst3809);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            this->followPush(FOLLOW_expr_in_doInst3811);
            expr31=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_doInst3813);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            SEMICOLON34 =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_doInst3815);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            {
                node = m_allocator->make_allocated<scripting::do_instruction>(m_allocator, expr31
                , body32
                ); SET_LOCATION(node, DO33); SET_END_LOCATION(node, SEMICOLON34);
            }


        }

    }
    goto ruledoInstEx;
    ruledoInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::for_instruction*
WNScriptASTParser::forInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::for_instruction* node;


    const ImplTraits::CommonTokenType* FOR35 = NULL;
    scripting::instruction* a;
    scripting::expression* b;
    scripting::instruction* c;
    scripting::instruction_list* d;





        node =  m_allocator->make_allocated<scripting::for_instruction>(m_allocator);



    {
        {
            FOR35 =  this->matchToken(FOR, &FOLLOW_FOR_in_forInst3847);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_forInst3849);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            {
                 SET_LOCATION(node, FOR35);
            }


            {
                int alt29=2;
                switch ( this->LA(1) )
                {
                    case BOOL:
                    case BOOL_TYPE:
                    case CHAR:
                    case CHAR_TYPE:
                    case DOUBDEC:
                    case DOUBINC:
                    case FLOAT:
                    case FLOAT_TYPE:
                    case ID:
                    case INT:
                    case INT_TYPE:
                    case LBRACKET:
                    case NULLTOK:
                    case STRING:
                    case STRING_TYPE:
                    case TYPE:
                    case VOID_TYPE:
                    case 55:
                    	{
                    		alt29=1;
                    	}
                        break;
                }

                switch (alt29)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_instructionScalar_in_forInst3877);
            	        a=instructionScalar();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleforInstEx;
            	        }


            	        {
            	            node->add_initializer(a
            	            );
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_forInst3883);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            {
                int alt30=2;
                switch ( this->LA(1) )
                {
                    case BOOL:
                    case BOOL_TYPE:
                    case CHAR:
                    case CHAR_TYPE:
                    case DOUBDEC:
                    case DOUBINC:
                    case FLOAT:
                    case FLOAT_TYPE:
                    case ID:
                    case INT:
                    case INT_TYPE:
                    case LBRACKET:
                    case NULLTOK:
                    case STRING:
                    case STRING_TYPE:
                    case TYPE:
                    case VOID_TYPE:
                    case 55:
                    	{
                    		alt30=1;
                    	}
                        break;
                }

                switch (alt30)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_expr_in_forInst3908);
            	        b=expr();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleforInstEx;
            	        }


            	        {
            	            node->add_condition(b
            	            );
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_forInst3922);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            {
                int alt31=2;
                switch ( this->LA(1) )
                {
                    case BOOL:
                    case BOOL_TYPE:
                    case CHAR:
                    case CHAR_TYPE:
                    case DOUBDEC:
                    case DOUBINC:
                    case FLOAT:
                    case FLOAT_TYPE:
                    case ID:
                    case INT:
                    case INT_TYPE:
                    case LBRACKET:
                    case NULLTOK:
                    case STRING:
                    case STRING_TYPE:
                    case TYPE:
                    case VOID_TYPE:
                    case 55:
                    	{
                    		alt31=1;
                    	}
                        break;
                }

                switch (alt31)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_instructionScalar_in_forInst3947);
            	        c=instructionScalar();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleforInstEx;
            	        }


            	        {
            	            node->add_post_op(c
            	            );
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_forInst3953);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            {
                this->followPush(FOLLOW_body_in_forInst3978);
                d=body();

                this->followPop();
                if  (this->hasException())
                {
                    goto ruleforInstEx;
                }


                {
                    node->add_body(d
                    ); SET_END_LOCATION_FROM_NODE(node, d
                    );
                }


            }


        }

    }
    goto ruleforInstEx;
    ruleforInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::else_if_instruction*
WNScriptASTParser::elsemiddle()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::else_if_instruction* node;


    const ImplTraits::CommonTokenType* ELSE38 = NULL;
    scripting::expression* expr36;
    scripting::instruction_list* body37;





        node = wn_nullptr;



    {
        {
            ELSE38 =  this->matchToken(ELSE, &FOLLOW_ELSE_in_elsemiddle4026);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


             this->matchToken(IF, &FOLLOW_IF_in_elsemiddle4028);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_elsemiddle4030);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


            this->followPush(FOLLOW_expr_in_elsemiddle4032);
            expr36=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_elsemiddle4034);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


            this->followPush(FOLLOW_body_in_elsemiddle4036);
            body37=body();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


            {
                 node = m_allocator->make_allocated<scripting::else_if_instruction>(m_allocator, expr36
                , body37
                ); SET_LOCATION(node, ELSE38); SET_END_LOCATION_FROM_NODE(node,
                body37
                );
            }


        }

    }
    goto ruleelsemiddleEx;
    ruleelsemiddleEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction_list*
WNScriptASTParser::endif()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction_list* node;


    scripting::instruction_list* body39;





        node = wn_nullptr;



    {
        {
             this->matchToken(ELSE, &FOLLOW_ELSE_in_endif4069);
            if  (this->hasException())
            {
                goto ruleendifEx;
            }


            this->followPush(FOLLOW_body_in_endif4071);
            body39=body();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleendifEx;
            }


            {
                node = body39
                ;
            }


        }

    }
    goto ruleendifEx;
    ruleendifEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::if_instruction*
WNScriptASTParser::ifInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::if_instruction* node;


    const ImplTraits::CommonTokenType* IF42 = NULL;
    scripting::expression* expr40;
    scripting::instruction_list* body41;
    scripting::else_if_instruction* elsemiddle43;
    scripting::instruction_list* endif44;





        node = wn_nullptr;



    {
        {
            IF42 =  this->matchToken(IF, &FOLLOW_IF_in_ifInst4101);
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_ifInst4103);
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


            this->followPush(FOLLOW_expr_in_ifInst4105);
            expr40=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_ifInst4107);
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


            this->followPush(FOLLOW_body_in_ifInst4109);
            body41=body();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


            {
                node = m_allocator->make_allocated<scripting::if_instruction>(m_allocator, expr40
                , body41
                ); SET_LOCATION(node, IF42); SET_END_LOCATION_FROM_NODE(node,
                body41
                );
            }



            for (;;)
            {
                int alt32=2;
                switch ( this->LA(1) )
                {
                case ELSE:
                	{
                		switch ( this->LA(2) )
                		{
                		case IF:
                			{
                				alt32=1;
                			}
                		    break;

                		}

                	}
                    break;

                }

                switch (alt32)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_elsemiddle_in_ifInst4126);
            	        elsemiddle43=elsemiddle();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleifInstEx;
            	        }


            	        {
            	            node->add_else_if(elsemiddle43
            	            ); SET_END_LOCATION_FROM_NODE(node, elsemiddle43
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop32;
            	    break;
                }
            }
            loop32: ;


            {
                int alt33=2;
                switch ( this->LA(1) )
                {
                    case ELSE:
                    	{
                    		alt33=1;
                    	}
                        break;
                }

                switch (alt33)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_endif_in_ifInst4146);
            	        endif44=endif();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleifInstEx;
            	        }


            	        {
            	            node->add_else(endif44
            	            ); SET_LOCATION(node, IF42); SET_END_LOCATION_FROM_NODE(node,
            	            endif44
            	            );
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    goto ruleifInstEx;
    ruleifInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::instruction()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    scripting::if_instruction* ifInst45;
    scripting::instruction* whileInst46;
    scripting::instruction* doInst47;
    scripting::for_instruction* forInst48;
    scripting::instruction* instructionScalar49;
    scripting::return_instruction* returnInst50;





        node = wn_nullptr;



    {
        {

            ANTLR_UINT32 alt34;

            alt34=6;

            switch ( this->LA(1) )
            {
            case IF:
            	{
            		alt34=1;
            	}
                break;
            case WHILE:
            	{
            		alt34=2;
            	}
                break;
            case DO:
            	{
            		alt34=3;
            	}
                break;
            case FOR:
            	{
            		alt34=4;
            	}
                break;
            case BOOL:
            case BOOL_TYPE:
            case CHAR:
            case CHAR_TYPE:
            case DOUBDEC:
            case DOUBINC:
            case FLOAT:
            case FLOAT_TYPE:
            case ID:
            case INT:
            case INT_TYPE:
            case LBRACKET:
            case NULLTOK:
            case STRING:
            case STRING_TYPE:
            case TYPE:
            case VOID_TYPE:
            case 55:
            	{
            		alt34=5;
            	}
                break;
            case RETURN:
            	{
            		alt34=6;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 34 );
                ex->set_state( 0 );


                goto ruleinstructionEx;

            }

            switch (alt34)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_ifInst_in_instruction4180);
        	        ifInst45=ifInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	             node = ifInst45
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_whileInst_in_instruction4201);
        	        whileInst46=whileInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = whileInst46
        	            ;
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        this->followPush(FOLLOW_doInst_in_instruction4218);
        	        doInst47=doInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = doInst47
        	            ;
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        this->followPush(FOLLOW_forInst_in_instruction4238);
        	        forInst48=forInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = forInst48
        	            ;
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        this->followPush(FOLLOW_instructionScalar_in_instruction4258);
        	        instructionScalar49=instructionScalar();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	         this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_instruction4260);
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = instructionScalar49
        	            ;
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	        this->followPush(FOLLOW_returnInst_in_instruction4273);
        	        returnInst50=returnInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = returnInst50
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleinstructionEx;
    ruleinstructionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction_list*
WNScriptASTParser::instruction_list()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction_list* node;


    scripting::instruction* a;
    scripting::instruction* b;





        node = wn_nullptr;



    {
        {
            this->followPush(FOLLOW_instruction_in_instruction_list4305);
            a=instruction();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleinstruction_listEx;
            }


            {
                node = m_allocator->make_allocated<scripting::instruction_list>(m_allocator, a
                ); SET_LOCATION_FROM_NODE(node, a
                );
            }



            for (;;)
            {
                int alt35=2;
                switch ( this->LA(1) )
                {
                case BOOL:
                case BOOL_TYPE:
                case CHAR:
                case CHAR_TYPE:
                case DO:
                case DOUBDEC:
                case DOUBINC:
                case FLOAT:
                case FLOAT_TYPE:
                case FOR:
                case ID:
                case IF:
                case INT:
                case INT_TYPE:
                case LBRACKET:
                case NULLTOK:
                case RETURN:
                case STRING:
                case STRING_TYPE:
                case TYPE:
                case VOID_TYPE:
                case WHILE:
                case 55:
                	{
                		alt35=1;
                	}
                    break;

                }

                switch (alt35)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_instruction_in_instruction_list4321);
            	        b=instruction();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleinstruction_listEx;
            	        }


            	        {
            	            node->add_instruction(b
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop35;
            	    break;
                }
            }
            loop35: ;


        }

    }
    goto ruleinstruction_listEx;
    ruleinstruction_listEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction_list*
WNScriptASTParser::body()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction_list* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* b = NULL;
    const ImplTraits::CommonTokenType* d = NULL;
    const ImplTraits::CommonTokenType* e = NULL;
    scripting::instruction_list* instruction_list51;





        node = wn_nullptr;



    {
        {

            ANTLR_UINT32 alt36;

            alt36=2;

            switch ( this->LA(1) )
            {
            case LBRACE:
            	{
            		switch ( this->LA(2) )
            		{
            		case RBRACE:
            			{
            				alt36=1;
            			}
            		    break;
            		case BOOL:
            		case BOOL_TYPE:
            		case CHAR:
            		case CHAR_TYPE:
            		case DO:
            		case DOUBDEC:
            		case DOUBINC:
            		case FLOAT:
            		case FLOAT_TYPE:
            		case FOR:
            		case ID:
            		case IF:
            		case INT:
            		case INT_TYPE:
            		case LBRACKET:
            		case NULLTOK:
            		case RETURN:
            		case STRING:
            		case STRING_TYPE:
            		case TYPE:
            		case VOID_TYPE:
            		case WHILE:
            		case 55:
            			{
            				alt36=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 36 );
            		    ex->set_state( 1 );


            		    goto rulebodyEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 36 );
                ex->set_state( 0 );


                goto rulebodyEx;

            }

            switch (alt36)
            {
        	case 1:
        	    {
        	        a =  this->matchToken(LBRACE, &FOLLOW_LBRACE_in_body4355);
        	        if  (this->hasException())
        	        {
        	            goto rulebodyEx;
        	        }


        	        b =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_body4359);
        	        if  (this->hasException())
        	        {
        	            goto rulebodyEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::instruction_list>(m_allocator); SET_LOCATION(node, a); SET_END_LOCATION(node, b);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        d =  this->matchToken(LBRACE, &FOLLOW_LBRACE_in_body4374);
        	        if  (this->hasException())
        	        {
        	            goto rulebodyEx;
        	        }


        	        this->followPush(FOLLOW_instruction_list_in_body4376);
        	        instruction_list51=instruction_list();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulebodyEx;
        	        }


        	        e =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_body4380);
        	        if  (this->hasException())
        	        {
        	            goto rulebodyEx;
        	        }


        	        {
        	            node = instruction_list51
        	            ; SET_LOCATION(node, d); SET_END_LOCATION(node, e);
        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulebodyEx;
    rulebodyEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::function*
WNScriptASTParser::function()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::function* node;


    scripting::parameter* param52;
    scripting::parameter_list* parameterList53;
    scripting::instruction_list* body54;





        node = wn_nullptr;



    {
        {
            this->followPush(FOLLOW_param_in_function4410);
            param52=param();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefunctionEx;
            }


            this->followPush(FOLLOW_parameterList_in_function4412);
            parameterList53=parameterList();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefunctionEx;
            }


            this->followPush(FOLLOW_body_in_function4414);
            body54=body();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefunctionEx;
            }


            {
                 node = m_allocator->make_allocated<scripting::function>(m_allocator, param52
                , parameterList53
                , body54
                ); SET_LOCATION_FROM_NODE(node, param52
                ); SET_END_LOCATION_FROM_NODE(node, body54
                );
            }


        }

    }
    goto rulefunctionEx;
    rulefunctionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::struct_definition*
WNScriptASTParser::structDecl()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::struct_definition* node;


    const ImplTraits::CommonTokenType* TYPE55 = NULL;
    const ImplTraits::CommonTokenType* STRUCT56 = NULL;
    const ImplTraits::CommonTokenType* RBRACE57 = NULL;
    scripting::declaration* a;





        node = wn_nullptr;



    {
        {
            STRUCT56 =  this->matchToken(STRUCT, &FOLLOW_STRUCT_in_structDecl4444);
            if  (this->hasException())
            {
                goto rulestructDeclEx;
            }


            TYPE55 =  this->matchToken(TYPE, &FOLLOW_TYPE_in_structDecl4446);
            if  (this->hasException())
            {
                goto rulestructDeclEx;
            }


            {
                node= m_allocator->make_allocated<scripting::struct_definition>(m_allocator, (TYPE55->getText()).c_str()); SET_LOCATION(node, STRUCT56);
            }


             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_structDecl4462);
            if  (this->hasException())
            {
                goto rulestructDeclEx;
            }



            for (;;)
            {
                int alt37=2;
                switch ( this->LA(1) )
                {
                case BOOL_TYPE:
                case CHAR_TYPE:
                case FLOAT_TYPE:
                case INT_TYPE:
                case STRING_TYPE:
                case TYPE:
                case VOID_TYPE:
                	{
                		alt37=1;
                	}
                    break;

                }

                switch (alt37)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_declaration_in_structDecl4467);
            	        a=declaration();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulestructDeclEx;
            	        }


            	        {
            	             node->add_struct_elem(a
            	            );
            	        }


            	         this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_structDecl4471);
            	        if  (this->hasException())
            	        {
            	            goto rulestructDeclEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop37;
            	    break;
                }
            }
            loop37: ;


            RBRACE57 =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_structDecl4476);
            if  (this->hasException())
            {
                goto rulestructDeclEx;
            }


            {
                 SET_END_LOCATION(node, RBRACE57);
            }


        }

    }
    goto rulestructDeclEx;
    rulestructDeclEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::struct_definition*
WNScriptASTParser::classDecl()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::struct_definition* node;


    const ImplTraits::CommonTokenType* f = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    const ImplTraits::CommonTokenType* g = NULL;
    const ImplTraits::CommonTokenType* d = NULL;
    const ImplTraits::CommonTokenType* e = NULL;
    const ImplTraits::CommonTokenType* RBRACE58 = NULL;
    scripting::declaration* a;
    scripting::function* b;
    scripting::function* h;
    scripting::function* i;





        node = wn_nullptr;



    {
        {
            {
                int alt38=2;
                switch ( this->LA(1) )
                {
                case CLASS:
                	{
                		switch ( this->LA(2) )
                		{
                		case TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case COLON:
                					{
                						alt38=2;
                					}
                				    break;
                				case LBRACE:
                					{
                						alt38=1;
                					}
                				    break;

                				default:
                				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 38 );
                				    ex->set_state( 2 );


                				    goto ruleclassDeclEx;

                				}

                			}
                		    break;

                		default:
                		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 38 );
                		    ex->set_state( 1 );


                		    goto ruleclassDeclEx;

                		}

                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 38 );
                    ex->set_state( 0 );


                    goto ruleclassDeclEx;

                }

                switch (alt38)
                {
            	case 1:
            	    {
            	        {
            	            f =  this->matchToken(CLASS, &FOLLOW_CLASS_in_classDecl4529);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            c =  this->matchToken(TYPE, &FOLLOW_TYPE_in_classDecl4533);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                node= m_allocator->make_allocated<scripting::struct_definition>(m_allocator, (c->getText()).c_str(), true); SET_LOCATION(node, f);
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	            g =  this->matchToken(CLASS, &FOLLOW_CLASS_in_classDecl4553);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            d =  this->matchToken(TYPE, &FOLLOW_TYPE_in_classDecl4557);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	             this->matchToken(COLON, &FOLLOW_COLON_in_classDecl4559);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            e =  this->matchToken(TYPE, &FOLLOW_TYPE_in_classDecl4563);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                node= m_allocator->make_allocated<scripting::struct_definition>(m_allocator, (d->getText()).c_str(), true, (e->getText()).c_str()); SET_LOCATION(node, g);
            	            }


            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_classDecl4590);
            if  (this->hasException())
            {
                goto ruleclassDeclEx;
            }



            for (;;)
            {
                int alt39=5;
                alt39 = cdfa39.predict(this, this->get_rec(), this->get_istream(), cdfa39 );
                if  (this->hasException())
                {
                    goto ruleclassDeclEx;
                }

                switch (alt39)
                {
            	case 1:
            	    {
            	        {
            	            this->followPush(FOLLOW_declaration_in_classDecl4633);
            	            a=declaration();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_struct_elem(a
            	                );
            	            }


            	             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_classDecl4637);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	            this->followPush(FOLLOW_function_in_classDecl4663);
            	            b=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_function(b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	        {
            	             this->matchToken(VIRTUAL, &FOLLOW_VIRTUAL_in_classDecl4692);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            this->followPush(FOLLOW_function_in_classDecl4696);
            	            h=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_function(h
            	                ); h
            	                ->set_is_virtual(wn_true);
            	            }


            	        }


            	    }
            	    break;
            	case 4:
            	    {
            	        {
            	             this->matchToken(OVERRIDE, &FOLLOW_OVERRIDE_in_classDecl4722);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            this->followPush(FOLLOW_function_in_classDecl4726);
            	            i=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_function(i
            	                ); i
            	                ->set_is_override(wn_true);
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop39;
            	    break;
                }
            }
            loop39: ;


            RBRACE58 =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_classDecl4762);
            if  (this->hasException())
            {
                goto ruleclassDeclEx;
            }


            {
                 SET_END_LOCATION(node, RBRACE58);
            }


        }

    }
    goto ruleclassDeclEx;
    ruleclassDeclEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






const wn_char*
WNScriptASTParser::inc()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    const wn_char* file;


    const ImplTraits::CommonTokenType* STRING59 = NULL;






        file = wn_nullptr;



    {
        {
             this->matchToken(INCLUDE, &FOLLOW_INCLUDE_in_inc4792);
            if  (this->hasException())
            {
                goto ruleincEx;
            }


            STRING59 =  this->matchToken(STRING, &FOLLOW_STRING_in_inc4794);
            if  (this->hasException())
            {
                goto ruleincEx;
            }


            {
                 file = (STRING59->getText()).c_str();
            }


        }

    }
    goto ruleincEx;
    ruleincEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return file;
}






scripting::script_file*
WNScriptASTParser::program()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::script_file* node;


    scripting::function* function60;
    scripting::struct_definition* structDecl61;
    scripting::struct_definition* classDecl62;
    const wn_char* inc63;





        node = m_allocator->make_allocated<scripting::script_file>(m_allocator);



    {
        {

            for (;;)
            {
                int alt40=5;
                switch ( this->LA(1) )
                {
                case BOOL_TYPE:
                case CHAR_TYPE:
                case FLOAT_TYPE:
                case INT_TYPE:
                case STRING_TYPE:
                case TYPE:
                case VOID_TYPE:
                	{
                		alt40=1;
                	}
                    break;
                case STRUCT:
                	{
                		alt40=2;
                	}
                    break;
                case CLASS:
                	{
                		alt40=3;
                	}
                    break;
                case INCLUDE:
                	{
                		alt40=4;
                	}
                    break;

                }

                switch (alt40)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_function_in_program4840);
            	        function60=function();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_function(function60
            	            );
            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        this->followPush(FOLLOW_structDecl_in_program4862);
            	        structDecl61=structDecl();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_struct(structDecl61
            	            );
            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	        this->followPush(FOLLOW_classDecl_in_program4882);
            	        classDecl62=classDecl();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_struct(classDecl62
            	            );
            	        }


            	    }
            	    break;
            	case 4:
            	    {
            	        this->followPush(FOLLOW_inc_in_program4903);
            	        inc63=inc();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_include(inc63
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop40;
            	    break;
                }
            }
            loop40: ;


        }

    }
    goto ruleprogramEx;
    ruleprogramEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}

















