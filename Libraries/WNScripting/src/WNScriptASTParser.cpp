/** \file
 *  This C++ source file was generated by $ANTLR version 3.5.3-SNAPSHOT
 *
 *     -                for the parser : WNScriptASTParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF






    #include "WNCore/inc/WNBase.h"
#ifdef _WN_MSVC
    #pragma warning(disable: 4100)
    #pragma warning(disable: 4459)
    #pragma warning(disable: 4703)
#endif
    #include "WNMemory/inc/WNAllocator.h"
    #include "WNScripting/src/WNScriptASTLexer.hpp"
    #include "WNScripting/inc/WNNodeTypes.h"

    using namespace wn;

    #ifndef SET_LOCATION
    #define SET_LOCATION(node, tok) { scripting::source_location loc; \
                                     loc.m_start_index = tok->get_startIndex();\
                                     loc.m_end_index = tok->get_stopIndex();\
                                     loc.m_line_start = tok->get_lineStart();\
                                     loc.m_line_number = tok->get_line();\
                                     loc.m_char_number = tok->get_charPositionInLine();\
                                     node->set_start_location(loc); \
                                   }

    #define SET_LOCATION_FROM_NODE(node, node2) { \
                                        if(node2) { \
                                        node->set_start_location(node2->get_start_location()); \
                                        } \
                                   }
    #define SET_START_LOCATION_FROM_NODE(node, node2) { \
                                        if(node2) { \
                                        scripting::source_location loc = node->get_start_location(); \
                                        scripting::source_location loc2 = node2->get_start_location(); \
                                        loc.m_start_index = loc2.m_start_index; \
                                        loc.m_line_start = loc2.m_line_start; \
                                        loc.m_line_number = loc2.m_line_number; \
                                        loc.m_char_number = loc2.m_char_number; \
                                        node->set_start_location(loc); \
                                        } \
                                    }
    #define SET_END_LOCATION(node, tok) { \
                                        node->set_end_index(tok->get_stopIndex()); \
                                      }
    #define SET_END_LOCATION_FROM_NODE(node, node2) { \
                                            if(node2) { \
                                            node->set_end_index(node2->get_start_location().m_end_index); \
                                            } \
                                            }
    #endif








#include    "WNScriptASTParser.hpp"









using namespace antlr3;



ANTLR_UINT8* WNScriptASTParserTokenNames[68+4]
     = {
        (ANTLR_UINT8*) "<invalid>",
        (ANTLR_UINT8*) "<EOR>",
        (ANTLR_UINT8*) "<DOWN>",
        (ANTLR_UINT8*) "<UP>",
        (ANTLR_UINT8*) "BOOL",
        (ANTLR_UINT8*) "BOOL_TYPE",
        (ANTLR_UINT8*) "BREAK",
        (ANTLR_UINT8*) "CHAR",
        (ANTLR_UINT8*) "CHAR_TYPE",
        (ANTLR_UINT8*) "CLASS",
        (ANTLR_UINT8*) "COLON",
        (ANTLR_UINT8*) "COMMA",
        (ANTLR_UINT8*) "COMMENT",
        (ANTLR_UINT8*) "CONTINUE",
        (ANTLR_UINT8*) "DO",
        (ANTLR_UINT8*) "DOUBDEC",
        (ANTLR_UINT8*) "DOUBINC",
        (ANTLR_UINT8*) "ELSE",
        (ANTLR_UINT8*) "ESC_SEQ",
        (ANTLR_UINT8*) "EXPONENT",
        (ANTLR_UINT8*) "FLOAT",
        (ANTLR_UINT8*) "FLOAT_TYPE",
        (ANTLR_UINT8*) "FOR",
        (ANTLR_UINT8*) "HEX_DIGIT",
        (ANTLR_UINT8*) "ID",
        (ANTLR_UINT8*) "IF",
        (ANTLR_UINT8*) "INCLUDE",
        (ANTLR_UINT8*) "INT",
        (ANTLR_UINT8*) "INT_TYPE",
        (ANTLR_UINT8*) "LBRACE",
        (ANTLR_UINT8*) "LBRACKET",
        (ANTLR_UINT8*) "LSQBRACKET",
        (ANTLR_UINT8*) "NULLTOK",
        (ANTLR_UINT8*) "OCTAL_ESC",
        (ANTLR_UINT8*) "OVERRIDE",
        (ANTLR_UINT8*) "QUESTION",
        (ANTLR_UINT8*) "RBRACE",
        (ANTLR_UINT8*) "RBRACKET",
        (ANTLR_UINT8*) "RETURN",
        (ANTLR_UINT8*) "RSQBRACKET",
        (ANTLR_UINT8*) "SEMICOLON",
        (ANTLR_UINT8*) "SHARED_REF",
        (ANTLR_UINT8*) "STRING",
        (ANTLR_UINT8*) "STRING_TYPE",
        (ANTLR_UINT8*) "STRUCT",
        (ANTLR_UINT8*) "TYPE",
        (ANTLR_UINT8*) "UNICODE_ESC",
        (ANTLR_UINT8*) "VIRTUAL",
        (ANTLR_UINT8*) "VOID_TYPE",
        (ANTLR_UINT8*) "WEAK_REF",
        (ANTLR_UINT8*) "WHILE",
        (ANTLR_UINT8*) "WS",
        (ANTLR_UINT8*) "'!='",
        (ANTLR_UINT8*) "'%'",
        (ANTLR_UINT8*) "'%='",
        (ANTLR_UINT8*) "'&&'",
        (ANTLR_UINT8*) "'*'",
        (ANTLR_UINT8*) "'*='",
        (ANTLR_UINT8*) "'+'",
        (ANTLR_UINT8*) "'+='",
        (ANTLR_UINT8*) "'-'",
        (ANTLR_UINT8*) "'-='",
        (ANTLR_UINT8*) "'.'",
        (ANTLR_UINT8*) "'/'",
        (ANTLR_UINT8*) "'/='",
        (ANTLR_UINT8*) "'<'",
        (ANTLR_UINT8*) "'<='",
        (ANTLR_UINT8*) "'='",
        (ANTLR_UINT8*) "'=='",
        (ANTLR_UINT8*) "'>'",
        (ANTLR_UINT8*) "'>='",
        (ANTLR_UINT8*) "'||'"
       };




static const char fileName[] = "WNScriptAST.g";



const char* WNScriptASTParser::getGrammarFileName()
{
	return fileName;
}






WNScriptASTParser::WNScriptASTParser( StreamType* instream)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, NULL)

{
	this->init(instream);
}







WNScriptASTParser::WNScriptASTParser( StreamType* instream, RecognizerSharedStateType* state)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, state)

{
	this->init(instream );
}

void WNScriptASTParser::init(StreamType* instream)
{


	this->get_psrstate()->set_tokenNames( WNScriptASTParserTokenNames );


}

void
WNScriptASTParser::reset()
{
    this->get_rec()->reset();
}



WNScriptASTParser::~WNScriptASTParser()
 {
}








static ANTLR_UINT8**	getTokenNames()
{
        return WNScriptASTParserTokenNames;
}





static	ANTLR_BITWORD FOLLOW_TYPE_in_objectType1166_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_objectType1166( FOLLOW_TYPE_in_objectType1166_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRING_TYPE_in_objectType1181_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_TYPE_in_objectType1181( FOLLOW_STRING_TYPE_in_objectType1181_bits, 1 );

static	ANTLR_BITWORD FOLLOW_VOID_TYPE_in_scalarType1210_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_VOID_TYPE_in_scalarType1210( FOLLOW_VOID_TYPE_in_scalarType1210_bits, 1 );

static	ANTLR_BITWORD FOLLOW_INT_TYPE_in_scalarType1222_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_INT_TYPE_in_scalarType1222( FOLLOW_INT_TYPE_in_scalarType1222_bits, 1 );

static	ANTLR_BITWORD FOLLOW_FLOAT_TYPE_in_scalarType1234_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_FLOAT_TYPE_in_scalarType1234( FOLLOW_FLOAT_TYPE_in_scalarType1234_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CHAR_TYPE_in_scalarType1246_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CHAR_TYPE_in_scalarType1246( FOLLOW_CHAR_TYPE_in_scalarType1246_bits, 1 );

static	ANTLR_BITWORD FOLLOW_BOOL_TYPE_in_scalarType1258_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_BOOL_TYPE_in_scalarType1258( FOLLOW_BOOL_TYPE_in_scalarType1258_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_compoundType1285_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_compoundType1285( FOLLOW_scalarType_in_compoundType1285_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_compoundType1301_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_compoundType1301( FOLLOW_LSQBRACKET_in_compoundType1301_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_compoundType1303_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_compoundType1303( FOLLOW_RSQBRACKET_in_compoundType1303_bits, 1 );

static	ANTLR_BITWORD FOLLOW_objectType_in_compoundType1315_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_objectType_in_compoundType1315( FOLLOW_objectType_in_compoundType1315_bits, 1 );

static	ANTLR_BITWORD FOLLOW_compoundType_in_type1345_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_compoundType_in_type1345( FOLLOW_compoundType_in_type1345_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_type1355_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_type1355( FOLLOW_scalarType_in_type1355_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_param1387_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_param1387( FOLLOW_scalarType_in_param1387_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1391_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1391( FOLLOW_ID_in_param1391_bits, 1 );

static	ANTLR_BITWORD FOLLOW_compoundType_in_param1406_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_compoundType_in_param1406( FOLLOW_compoundType_in_param1406_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1410_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1410( FOLLOW_ID_in_param1410_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SHARED_REF_in_param1423_bits[]	= { ANTLR_UINT64_LIT(0x0001280010200120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SHARED_REF_in_param1423( FOLLOW_SHARED_REF_in_param1423_bits, 1 );

static	ANTLR_BITWORD FOLLOW_compoundType_in_param1427_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_compoundType_in_param1427( FOLLOW_compoundType_in_param1427_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1431_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1431( FOLLOW_ID_in_param1431_bits, 1 );

static	ANTLR_BITWORD FOLLOW_WEAK_REF_in_param1444_bits[]	= { ANTLR_UINT64_LIT(0x0001280010200120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_WEAK_REF_in_param1444( FOLLOW_WEAK_REF_in_param1444_bits, 1 );

static	ANTLR_BITWORD FOLLOW_compoundType_in_param1448_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_compoundType_in_param1448( FOLLOW_compoundType_in_param1448_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1453_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1453( FOLLOW_ID_in_param1453_bits, 1 );

static	ANTLR_BITWORD FOLLOW_compoundType_in_param1468_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_compoundType_in_param1468( FOLLOW_compoundType_in_param1468_bits, 1 );

static	ANTLR_BITWORD FOLLOW_QUESTION_in_param1470_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_QUESTION_in_param1470( FOLLOW_QUESTION_in_param1470_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1475_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1475( FOLLOW_ID_in_param1475_bits, 1 );

static	ANTLR_BITWORD FOLLOW_param_in_paramList1507_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000802) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_param_in_paramList1507( FOLLOW_param_in_paramList1507_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COMMA_in_paramList1520_bits[]	= { ANTLR_UINT64_LIT(0x00032A0010200120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COMMA_in_paramList1520( FOLLOW_COMMA_in_paramList1520_bits, 1 );

static	ANTLR_BITWORD FOLLOW_param_in_paramList1524_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000802) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_param_in_paramList1524( FOLLOW_param_in_paramList1524_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_parameterList1556_bits[]	= { ANTLR_UINT64_LIT(0x00032A0010200120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_parameterList1556( FOLLOW_LBRACKET_in_parameterList1556_bits, 1 );

static	ANTLR_BITWORD FOLLOW_paramList_in_parameterList1558_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_paramList_in_parameterList1558( FOLLOW_paramList_in_parameterList1558_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_parameterList1560_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_parameterList1560( FOLLOW_RBRACKET_in_parameterList1560_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_parameterList1577_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_parameterList1577( FOLLOW_LBRACKET_in_parameterList1577_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_parameterList1579_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_parameterList1579( FOLLOW_RBRACKET_in_parameterList1579_bits, 1 );

static	ANTLR_BITWORD FOLLOW_67_in_assign_type1615_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_67_in_assign_type1615( FOLLOW_67_in_assign_type1615_bits, 1 );

static	ANTLR_BITWORD FOLLOW_59_in_assign_type1629_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_59_in_assign_type1629( FOLLOW_59_in_assign_type1629_bits, 1 );

static	ANTLR_BITWORD FOLLOW_61_in_assign_type1642_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_61_in_assign_type1642( FOLLOW_61_in_assign_type1642_bits, 1 );

static	ANTLR_BITWORD FOLLOW_57_in_assign_type1655_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_57_in_assign_type1655( FOLLOW_57_in_assign_type1655_bits, 1 );

static	ANTLR_BITWORD FOLLOW_64_in_assign_type1668_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_64_in_assign_type1668( FOLLOW_64_in_assign_type1668_bits, 1 );

static	ANTLR_BITWORD FOLLOW_54_in_assign_type1681_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_54_in_assign_type1681( FOLLOW_54_in_assign_type1681_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_arglist1739_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000802) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arglist1739( FOLLOW_expr_in_arglist1739_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COMMA_in_arglist1772_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593189B2) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COMMA_in_arglist1772( FOLLOW_COMMA_in_arglist1772_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_arglist1816_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000802) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arglist1816( FOLLOW_expr_in_arglist1816_bits, 1 );

static	ANTLR_BITWORD FOLLOW_cond_ex_in_expr1891_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_cond_ex_in_expr1891( FOLLOW_cond_ex_in_expr1891_bits, 1 );

static	ANTLR_BITWORD FOLLOW_or_ex_in_cond_ex1929_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_or_ex_in_cond_ex1929( FOLLOW_or_ex_in_cond_ex1929_bits, 1 );

static	ANTLR_BITWORD FOLLOW_QUESTION_in_cond_ex1952_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_QUESTION_in_cond_ex1952( FOLLOW_QUESTION_in_cond_ex1952_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_cond_ex1956_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_cond_ex1956( FOLLOW_expr_in_cond_ex1956_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COLON_in_cond_ex1958_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COLON_in_cond_ex1958( FOLLOW_COLON_in_cond_ex1958_bits, 1 );

static	ANTLR_BITWORD FOLLOW_cond_ex_in_cond_ex1962_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_cond_ex_in_cond_ex1962( FOLLOW_cond_ex_in_cond_ex1962_bits, 1 );

static	ANTLR_BITWORD FOLLOW_and_ex_in_or_ex2009_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000080) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_and_ex_in_or_ex2009( FOLLOW_and_ex_in_or_ex2009_bits, 2 );

static	ANTLR_BITWORD FOLLOW_71_in_or_ex2026_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_71_in_or_ex2026( FOLLOW_71_in_or_ex2026_bits, 1 );

static	ANTLR_BITWORD FOLLOW_and_ex_in_or_ex2030_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000080) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_and_ex_in_or_ex2030( FOLLOW_and_ex_in_or_ex2030_bits, 2 );

static	ANTLR_BITWORD FOLLOW_eq_ex_in_and_ex2073_bits[]	= { ANTLR_UINT64_LIT(0x0080000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_eq_ex_in_and_ex2073( FOLLOW_eq_ex_in_and_ex2073_bits, 1 );

static	ANTLR_BITWORD FOLLOW_55_in_and_ex2090_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_55_in_and_ex2090( FOLLOW_55_in_and_ex2090_bits, 1 );

static	ANTLR_BITWORD FOLLOW_eq_ex_in_and_ex2094_bits[]	= { ANTLR_UINT64_LIT(0x0080000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_eq_ex_in_and_ex2094( FOLLOW_eq_ex_in_and_ex2094_bits, 1 );

static	ANTLR_BITWORD FOLLOW_rel_ex_in_eq_ex2130_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_rel_ex_in_eq_ex2130( FOLLOW_rel_ex_in_eq_ex2130_bits, 2 );

static	ANTLR_BITWORD FOLLOW_68_in_eq_ex2165_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_68_in_eq_ex2165( FOLLOW_68_in_eq_ex2165_bits, 1 );

static	ANTLR_BITWORD FOLLOW_rel_ex_in_eq_ex2169_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_rel_ex_in_eq_ex2169( FOLLOW_rel_ex_in_eq_ex2169_bits, 2 );

static	ANTLR_BITWORD FOLLOW_52_in_eq_ex2192_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_52_in_eq_ex2192( FOLLOW_52_in_eq_ex2192_bits, 1 );

static	ANTLR_BITWORD FOLLOW_rel_ex_in_eq_ex2196_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_rel_ex_in_eq_ex2196( FOLLOW_rel_ex_in_eq_ex2196_bits, 2 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2254_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000066) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2254( FOLLOW_add_ex_in_rel_ex2254_bits, 2 );

static	ANTLR_BITWORD FOLLOW_65_in_rel_ex2290_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_65_in_rel_ex2290( FOLLOW_65_in_rel_ex2290_bits, 1 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2294_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000066) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2294( FOLLOW_add_ex_in_rel_ex2294_bits, 2 );

static	ANTLR_BITWORD FOLLOW_69_in_rel_ex2318_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_69_in_rel_ex2318( FOLLOW_69_in_rel_ex2318_bits, 1 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2322_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000066) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2322( FOLLOW_add_ex_in_rel_ex2322_bits, 2 );

static	ANTLR_BITWORD FOLLOW_66_in_rel_ex2346_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_66_in_rel_ex2346( FOLLOW_66_in_rel_ex2346_bits, 1 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2350_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000066) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2350( FOLLOW_add_ex_in_rel_ex2350_bits, 2 );

static	ANTLR_BITWORD FOLLOW_70_in_rel_ex2374_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_70_in_rel_ex2374( FOLLOW_70_in_rel_ex2374_bits, 1 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2378_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000066) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2378( FOLLOW_add_ex_in_rel_ex2378_bits, 2 );

static	ANTLR_BITWORD FOLLOW_mult_ex_in_add_ex2439_bits[]	= { ANTLR_UINT64_LIT(0x1400000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_mult_ex_in_add_ex2439( FOLLOW_mult_ex_in_add_ex2439_bits, 1 );

static	ANTLR_BITWORD FOLLOW_58_in_add_ex2474_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_58_in_add_ex2474( FOLLOW_58_in_add_ex2474_bits, 1 );

static	ANTLR_BITWORD FOLLOW_mult_ex_in_add_ex2478_bits[]	= { ANTLR_UINT64_LIT(0x1400000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_mult_ex_in_add_ex2478( FOLLOW_mult_ex_in_add_ex2478_bits, 1 );

static	ANTLR_BITWORD FOLLOW_60_in_add_ex2500_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_60_in_add_ex2500( FOLLOW_60_in_add_ex2500_bits, 1 );

static	ANTLR_BITWORD FOLLOW_mult_ex_in_add_ex2504_bits[]	= { ANTLR_UINT64_LIT(0x1400000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_mult_ex_in_add_ex2504( FOLLOW_mult_ex_in_add_ex2504_bits, 1 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex2563_bits[]	= { ANTLR_UINT64_LIT(0x8120000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex2563( FOLLOW_unary_ex_in_mult_ex2563_bits, 1 );

static	ANTLR_BITWORD FOLLOW_56_in_mult_ex2602_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_56_in_mult_ex2602( FOLLOW_56_in_mult_ex2602_bits, 1 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex2606_bits[]	= { ANTLR_UINT64_LIT(0x8120000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex2606( FOLLOW_unary_ex_in_mult_ex2606_bits, 1 );

static	ANTLR_BITWORD FOLLOW_63_in_mult_ex2632_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_63_in_mult_ex2632( FOLLOW_63_in_mult_ex2632_bits, 1 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex2636_bits[]	= { ANTLR_UINT64_LIT(0x8120000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex2636( FOLLOW_unary_ex_in_mult_ex2636_bits, 1 );

static	ANTLR_BITWORD FOLLOW_53_in_mult_ex2662_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_53_in_mult_ex2662( FOLLOW_53_in_mult_ex2662_bits, 1 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex2666_bits[]	= { ANTLR_UINT64_LIT(0x8120000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex2666( FOLLOW_unary_ex_in_mult_ex2666_bits, 1 );

static	ANTLR_BITWORD FOLLOW_post_ex_in_unary_ex2718_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_post_ex_in_unary_ex2718( FOLLOW_post_ex_in_unary_ex2718_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DOUBINC_in_unary_ex2731_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBINC_in_unary_ex2731( FOLLOW_DOUBINC_in_unary_ex2731_bits, 1 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_unary_ex2735_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_unary_ex2735( FOLLOW_unary_ex_in_unary_ex2735_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DOUBDEC_in_unary_ex2748_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBDEC_in_unary_ex2748( FOLLOW_DOUBDEC_in_unary_ex2748_bits, 1 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_unary_ex2752_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_unary_ex2752( FOLLOW_unary_ex_in_unary_ex2752_bits, 1 );

static	ANTLR_BITWORD FOLLOW_60_in_unary_ex2765_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_60_in_unary_ex2765( FOLLOW_60_in_unary_ex2765_bits, 1 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_unary_ex2769_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_unary_ex2769( FOLLOW_unary_ex_in_unary_ex2769_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_post_ex_proper2807_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_post_ex_proper2807( FOLLOW_LSQBRACKET_in_post_ex_proper2807_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_post_ex_proper2811_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_post_ex_proper2811( FOLLOW_expr_in_post_ex_proper2811_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_post_ex_proper2815_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_post_ex_proper2815( FOLLOW_RSQBRACKET_in_post_ex_proper2815_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_post_ex_proper2830_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_post_ex_proper2830( FOLLOW_LBRACKET_in_post_ex_proper2830_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_post_ex_proper2834_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_post_ex_proper2834( FOLLOW_RBRACKET_in_post_ex_proper2834_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_post_ex_proper2862_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_post_ex_proper2862( FOLLOW_LBRACKET_in_post_ex_proper2862_bits, 1 );

static	ANTLR_BITWORD FOLLOW_arglist_in_post_ex_proper2868_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arglist_in_post_ex_proper2868( FOLLOW_arglist_in_post_ex_proper2868_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_post_ex_proper2872_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_post_ex_proper2872( FOLLOW_RBRACKET_in_post_ex_proper2872_bits, 1 );

static	ANTLR_BITWORD FOLLOW_62_in_post_ex_proper2885_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_62_in_post_ex_proper2885( FOLLOW_62_in_post_ex_proper2885_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_post_ex_proper2889_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_post_ex_proper2889( FOLLOW_ID_in_post_ex_proper2889_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DOUBINC_in_post_ex_proper2916_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBINC_in_post_ex_proper2916( FOLLOW_DOUBINC_in_post_ex_proper2916_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DOUBDEC_in_post_ex_proper2945_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBDEC_in_post_ex_proper2945( FOLLOW_DOUBDEC_in_post_ex_proper2945_bits, 1 );

static	ANTLR_BITWORD FOLLOW_prim_ex_in_post_ex2998_bits[]	= { ANTLR_UINT64_LIT(0x40000000C0018002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_prim_ex_in_post_ex2998( FOLLOW_prim_ex_in_post_ex2998_bits, 1 );

static	ANTLR_BITWORD FOLLOW_post_ex_proper_in_post_ex3017_bits[]	= { ANTLR_UINT64_LIT(0x40000000C0018002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_post_ex_proper_in_post_ex3017( FOLLOW_post_ex_proper_in_post_ex3017_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_assignment_or_expression3048_bits[]	= { ANTLR_UINT64_LIT(0x2A40000000000002), ANTLR_UINT64_LIT(0x0000000000000009) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_assignment_or_expression3048( FOLLOW_expr_in_assignment_or_expression3048_bits, 2 );

static	ANTLR_BITWORD FOLLOW_assign_type_in_assignment_or_expression3080_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_assign_type_in_assignment_or_expression3080( FOLLOW_assign_type_in_assignment_or_expression3080_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_assignment_or_expression3084_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_assignment_or_expression3084( FOLLOW_expr_in_assignment_or_expression3084_bits, 1 );

static	ANTLR_BITWORD FOLLOW_INT_in_constant3150_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_INT_in_constant3150( FOLLOW_INT_in_constant3150_bits, 1 );

static	ANTLR_BITWORD FOLLOW_FLOAT_in_constant3168_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_FLOAT_in_constant3168( FOLLOW_FLOAT_in_constant3168_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CHAR_in_constant3184_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CHAR_in_constant3184( FOLLOW_CHAR_in_constant3184_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRING_in_constant3201_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_in_constant3201( FOLLOW_STRING_in_constant3201_bits, 1 );

static	ANTLR_BITWORD FOLLOW_BOOL_in_constant3216_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_BOOL_in_constant3216( FOLLOW_BOOL_in_constant3216_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_constant3233_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_constant3233( FOLLOW_scalarType_in_constant3233_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACE_in_constant3237_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_constant3237( FOLLOW_LBRACE_in_constant3237_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRING_in_constant3241_bits[]	= { ANTLR_UINT64_LIT(0x0000001000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_in_constant3241( FOLLOW_STRING_in_constant3241_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACE_in_constant3245_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_constant3245( FOLLOW_RBRACE_in_constant3245_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_prim_ex3275_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_prim_ex3275( FOLLOW_ID_in_prim_ex3275_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_prim_ex3290_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_prim_ex3290( FOLLOW_LBRACKET_in_prim_ex3290_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_prim_ex3294_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_prim_ex3294( FOLLOW_expr_in_prim_ex3294_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_prim_ex3298_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_prim_ex3298( FOLLOW_RBRACKET_in_prim_ex3298_bits, 1 );

static	ANTLR_BITWORD FOLLOW_constant_in_prim_ex3313_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_constant_in_prim_ex3313( FOLLOW_constant_in_prim_ex3313_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_prim_ex3328_bits[]	= { ANTLR_UINT64_LIT(0x00000000C0000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_prim_ex3328( FOLLOW_scalarType_in_prim_ex3328_bits, 1 );

static	ANTLR_BITWORD FOLLOW_cast_in_prim_ex3348_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_cast_in_prim_ex3348( FOLLOW_cast_in_prim_ex3348_bits, 1 );

static	ANTLR_BITWORD FOLLOW_arrayInit_in_prim_ex3371_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arrayInit_in_prim_ex3371( FOLLOW_arrayInit_in_prim_ex3371_bits, 1 );

static	ANTLR_BITWORD FOLLOW_NULLTOK_in_prim_ex3400_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_NULLTOK_in_prim_ex3400( FOLLOW_NULLTOK_in_prim_ex3400_bits, 1 );

static	ANTLR_BITWORD FOLLOW_objectType_in_prim_ex3414_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_objectType_in_prim_ex3414( FOLLOW_objectType_in_prim_ex3414_bits, 1 );

static	ANTLR_BITWORD FOLLOW_structInit_in_prim_ex3418_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_structInit_in_prim_ex3418( FOLLOW_structInit_in_prim_ex3418_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SHARED_REF_in_prim_ex3430_bits[]	= { ANTLR_UINT64_LIT(0x0000280000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SHARED_REF_in_prim_ex3430( FOLLOW_SHARED_REF_in_prim_ex3430_bits, 1 );

static	ANTLR_BITWORD FOLLOW_objectType_in_prim_ex3434_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_objectType_in_prim_ex3434( FOLLOW_objectType_in_prim_ex3434_bits, 1 );

static	ANTLR_BITWORD FOLLOW_structInit_in_prim_ex3438_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_structInit_in_prim_ex3438( FOLLOW_structInit_in_prim_ex3438_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_cast3467_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_cast3467( FOLLOW_LBRACKET_in_cast3467_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_cast3471_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_cast3471( FOLLOW_expr_in_cast3471_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_cast3475_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_cast3475( FOLLOW_RBRACKET_in_cast3475_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_structInit3504_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_structInit3504( FOLLOW_LBRACKET_in_structInit3504_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_structInit3508_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_structInit3508( FOLLOW_RBRACKET_in_structInit3508_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_arrayInit3570_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_arrayInit3570( FOLLOW_LSQBRACKET_in_arrayInit3570_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_arrayInit3574_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arrayInit3574( FOLLOW_expr_in_arrayInit3574_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_arrayInit3576_bits[]	= { ANTLR_UINT64_LIT(0x00000000C0000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_arrayInit3576( FOLLOW_RSQBRACKET_in_arrayInit3576_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_arrayInit3600_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_arrayInit3600( FOLLOW_LSQBRACKET_in_arrayInit3600_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_arrayInit3602_bits[]	= { ANTLR_UINT64_LIT(0x00000000C0000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_arrayInit3602( FOLLOW_RSQBRACKET_in_arrayInit3602_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_arrayInit3640_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_arrayInit3640( FOLLOW_LSQBRACKET_in_arrayInit3640_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_arrayInit3642_bits[]	= { ANTLR_UINT64_LIT(0x00000000C0000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_arrayInit3642( FOLLOW_RSQBRACKET_in_arrayInit3642_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_arrayInit3683_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_arrayInit3683( FOLLOW_LBRACKET_in_arrayInit3683_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_arrayInit3687_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_arrayInit3687( FOLLOW_RBRACKET_in_arrayInit3687_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_arrayInit3721_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_arrayInit3721( FOLLOW_LBRACKET_in_arrayInit3721_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_arrayInit3725_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arrayInit3725( FOLLOW_expr_in_arrayInit3725_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_arrayInit3729_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_arrayInit3729( FOLLOW_RBRACKET_in_arrayInit3729_bits, 1 );

static	ANTLR_BITWORD FOLLOW_param_in_declaration3773_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000008) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_param_in_declaration3773( FOLLOW_param_in_declaration3773_bits, 2 );

static	ANTLR_BITWORD FOLLOW_67_in_declaration3808_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_67_in_declaration3808( FOLLOW_67_in_declaration3808_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_declaration3815_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_declaration3815( FOLLOW_expr_in_declaration3815_bits, 1 );

static	ANTLR_BITWORD FOLLOW_declaration_in_instructionScalar3864_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_declaration_in_instructionScalar3864( FOLLOW_declaration_in_instructionScalar3864_bits, 1 );

static	ANTLR_BITWORD FOLLOW_assignment_or_expression_in_instructionScalar3877_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_assignment_or_expression_in_instructionScalar3877( FOLLOW_assignment_or_expression_in_instructionScalar3877_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CONTINUE_in_continueInst3907_bits[]	= { ANTLR_UINT64_LIT(0x0000010000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CONTINUE_in_continueInst3907( FOLLOW_CONTINUE_in_continueInst3907_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_continueInst3911_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_continueInst3911( FOLLOW_SEMICOLON_in_continueInst3911_bits, 1 );

static	ANTLR_BITWORD FOLLOW_BREAK_in_breakInst3937_bits[]	= { ANTLR_UINT64_LIT(0x0000010000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_BREAK_in_breakInst3937( FOLLOW_BREAK_in_breakInst3937_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_breakInst3941_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_breakInst3941( FOLLOW_SEMICOLON_in_breakInst3941_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RETURN_in_returnInst3968_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RETURN_in_returnInst3968( FOLLOW_RETURN_in_returnInst3968_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_returnInst3970_bits[]	= { ANTLR_UINT64_LIT(0x0000010000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_returnInst3970( FOLLOW_expr_in_returnInst3970_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_returnInst3974_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_returnInst3974( FOLLOW_SEMICOLON_in_returnInst3974_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RETURN_in_returnInst3988_bits[]	= { ANTLR_UINT64_LIT(0x0000010000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RETURN_in_returnInst3988( FOLLOW_RETURN_in_returnInst3988_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_returnInst3992_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_returnInst3992( FOLLOW_SEMICOLON_in_returnInst3992_bits, 1 );

static	ANTLR_BITWORD FOLLOW_WHILE_in_whileInst4025_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_WHILE_in_whileInst4025( FOLLOW_WHILE_in_whileInst4025_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_whileInst4027_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_whileInst4027( FOLLOW_LBRACKET_in_whileInst4027_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_whileInst4029_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_whileInst4029( FOLLOW_expr_in_whileInst4029_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_whileInst4031_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_whileInst4031( FOLLOW_RBRACKET_in_whileInst4031_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_whileInst4033_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_whileInst4033( FOLLOW_instruction_list_in_whileInst4033_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DO_in_doInst4069_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DO_in_doInst4069( FOLLOW_DO_in_doInst4069_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_doInst4071_bits[]	= { ANTLR_UINT64_LIT(0x0004000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_doInst4071( FOLLOW_instruction_list_in_doInst4071_bits, 1 );

static	ANTLR_BITWORD FOLLOW_WHILE_in_doInst4073_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_WHILE_in_doInst4073( FOLLOW_WHILE_in_doInst4073_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_doInst4075_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_doInst4075( FOLLOW_LBRACKET_in_doInst4075_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_doInst4077_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_doInst4077( FOLLOW_expr_in_doInst4077_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_doInst4079_bits[]	= { ANTLR_UINT64_LIT(0x0000010000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_doInst4079( FOLLOW_RBRACKET_in_doInst4079_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_doInst4081_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_doInst4081( FOLLOW_SEMICOLON_in_doInst4081_bits, 1 );

static	ANTLR_BITWORD FOLLOW_FOR_in_forInst4113_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_FOR_in_forInst4113( FOLLOW_FOR_in_forInst4113_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_forInst4115_bits[]	= { ANTLR_UINT64_LIT(0x10032F01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_forInst4115( FOLLOW_LBRACKET_in_forInst4115_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instructionScalar_in_forInst4143_bits[]	= { ANTLR_UINT64_LIT(0x0000010000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instructionScalar_in_forInst4143( FOLLOW_instructionScalar_in_forInst4143_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_forInst4149_bits[]	= { ANTLR_UINT64_LIT(0x10012F01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_forInst4149( FOLLOW_SEMICOLON_in_forInst4149_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_forInst4174_bits[]	= { ANTLR_UINT64_LIT(0x0000010000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_forInst4174( FOLLOW_expr_in_forInst4174_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_forInst4188_bits[]	= { ANTLR_UINT64_LIT(0x10032E21593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_forInst4188( FOLLOW_SEMICOLON_in_forInst4188_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instructionScalar_in_forInst4213_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instructionScalar_in_forInst4213( FOLLOW_instructionScalar_in_forInst4213_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_forInst4219_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_forInst4219( FOLLOW_RBRACKET_in_forInst4219_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_forInst4244_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_forInst4244( FOLLOW_instruction_list_in_forInst4244_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ELSE_in_elsemiddle4292_bits[]	= { ANTLR_UINT64_LIT(0x0000000002000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ELSE_in_elsemiddle4292( FOLLOW_ELSE_in_elsemiddle4292_bits, 1 );

static	ANTLR_BITWORD FOLLOW_IF_in_elsemiddle4294_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_IF_in_elsemiddle4294( FOLLOW_IF_in_elsemiddle4294_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_elsemiddle4296_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_elsemiddle4296( FOLLOW_LBRACKET_in_elsemiddle4296_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_elsemiddle4298_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_elsemiddle4298( FOLLOW_expr_in_elsemiddle4298_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_elsemiddle4300_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_elsemiddle4300( FOLLOW_RBRACKET_in_elsemiddle4300_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_elsemiddle4302_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_elsemiddle4302( FOLLOW_instruction_list_in_elsemiddle4302_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ELSE_in_endif4335_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ELSE_in_endif4335( FOLLOW_ELSE_in_endif4335_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_endif4337_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_endif4337( FOLLOW_instruction_list_in_endif4337_bits, 1 );

static	ANTLR_BITWORD FOLLOW_IF_in_ifInst4367_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_IF_in_ifInst4367( FOLLOW_IF_in_ifInst4367_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_ifInst4369_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_ifInst4369( FOLLOW_LBRACKET_in_ifInst4369_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_ifInst4371_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_ifInst4371( FOLLOW_expr_in_ifInst4371_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_ifInst4373_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_ifInst4373( FOLLOW_RBRACKET_in_ifInst4373_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_ifInst4375_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_ifInst4375( FOLLOW_instruction_list_in_ifInst4375_bits, 1 );

static	ANTLR_BITWORD FOLLOW_elsemiddle_in_ifInst4392_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_elsemiddle_in_ifInst4392( FOLLOW_elsemiddle_in_ifInst4392_bits, 1 );

static	ANTLR_BITWORD FOLLOW_endif_in_ifInst4412_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_endif_in_ifInst4412( FOLLOW_endif_in_ifInst4412_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ifInst_in_instruction4446_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ifInst_in_instruction4446( FOLLOW_ifInst_in_instruction4446_bits, 1 );

static	ANTLR_BITWORD FOLLOW_whileInst_in_instruction4467_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_whileInst_in_instruction4467( FOLLOW_whileInst_in_instruction4467_bits, 1 );

static	ANTLR_BITWORD FOLLOW_doInst_in_instruction4484_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_doInst_in_instruction4484( FOLLOW_doInst_in_instruction4484_bits, 1 );

static	ANTLR_BITWORD FOLLOW_forInst_in_instruction4504_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_forInst_in_instruction4504( FOLLOW_forInst_in_instruction4504_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instructionScalar_in_instruction4524_bits[]	= { ANTLR_UINT64_LIT(0x0000010000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instructionScalar_in_instruction4524( FOLLOW_instructionScalar_in_instruction4524_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_instruction4526_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_instruction4526( FOLLOW_SEMICOLON_in_instruction4526_bits, 1 );

static	ANTLR_BITWORD FOLLOW_breakInst_in_instruction4539_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_breakInst_in_instruction4539( FOLLOW_breakInst_in_instruction4539_bits, 1 );

static	ANTLR_BITWORD FOLLOW_continueInst_in_instruction4552_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_continueInst_in_instruction4552( FOLLOW_continueInst_in_instruction4552_bits, 1 );

static	ANTLR_BITWORD FOLLOW_returnInst_in_instruction4565_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_returnInst_in_instruction4565( FOLLOW_returnInst_in_instruction4565_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_instruction4578_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_instruction4578( FOLLOW_instruction_list_in_instruction4578_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACE_in_instruction_list4610_bits[]	= { ANTLR_UINT64_LIT(0x10072E517B71E1F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_instruction_list4610( FOLLOW_LBRACE_in_instruction_list4610_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_in_instruction_list4627_bits[]	= { ANTLR_UINT64_LIT(0x10072E517B71E1F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_in_instruction_list4627( FOLLOW_instruction_in_instruction_list4627_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACE_in_instruction_list4644_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_instruction_list4644( FOLLOW_RBRACE_in_instruction_list4644_bits, 1 );

static	ANTLR_BITWORD FOLLOW_param_in_function4674_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_param_in_function4674( FOLLOW_param_in_function4674_bits, 1 );

static	ANTLR_BITWORD FOLLOW_parameterList_in_function4676_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_parameterList_in_function4676( FOLLOW_parameterList_in_function4676_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_function4678_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_function4678( FOLLOW_instruction_list_in_function4678_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRUCT_in_structDecl4708_bits[]	= { ANTLR_UINT64_LIT(0x0000200000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRUCT_in_structDecl4708( FOLLOW_STRUCT_in_structDecl4708_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_structDecl4710_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_structDecl4710( FOLLOW_TYPE_in_structDecl4710_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACE_in_structDecl4726_bits[]	= { ANTLR_UINT64_LIT(0x00032A1010200120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_structDecl4726( FOLLOW_LBRACE_in_structDecl4726_bits, 1 );

static	ANTLR_BITWORD FOLLOW_declaration_in_structDecl4731_bits[]	= { ANTLR_UINT64_LIT(0x0000010000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_declaration_in_structDecl4731( FOLLOW_declaration_in_structDecl4731_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_structDecl4735_bits[]	= { ANTLR_UINT64_LIT(0x00032A1010200120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_structDecl4735( FOLLOW_SEMICOLON_in_structDecl4735_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACE_in_structDecl4740_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_structDecl4740( FOLLOW_RBRACE_in_structDecl4740_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CLASS_in_classDecl4793_bits[]	= { ANTLR_UINT64_LIT(0x0000200000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CLASS_in_classDecl4793( FOLLOW_CLASS_in_classDecl4793_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_classDecl4797_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_classDecl4797( FOLLOW_TYPE_in_classDecl4797_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CLASS_in_classDecl4817_bits[]	= { ANTLR_UINT64_LIT(0x0000200000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CLASS_in_classDecl4817( FOLLOW_CLASS_in_classDecl4817_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_classDecl4821_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_classDecl4821( FOLLOW_TYPE_in_classDecl4821_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COLON_in_classDecl4823_bits[]	= { ANTLR_UINT64_LIT(0x0000200000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COLON_in_classDecl4823( FOLLOW_COLON_in_classDecl4823_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_classDecl4827_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_classDecl4827( FOLLOW_TYPE_in_classDecl4827_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACE_in_classDecl4854_bits[]	= { ANTLR_UINT64_LIT(0x0003AA1410200120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_classDecl4854( FOLLOW_LBRACE_in_classDecl4854_bits, 1 );

static	ANTLR_BITWORD FOLLOW_declaration_in_classDecl4897_bits[]	= { ANTLR_UINT64_LIT(0x0000010000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_declaration_in_classDecl4897( FOLLOW_declaration_in_classDecl4897_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_classDecl4901_bits[]	= { ANTLR_UINT64_LIT(0x0003AA1410200120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_classDecl4901( FOLLOW_SEMICOLON_in_classDecl4901_bits, 1 );

static	ANTLR_BITWORD FOLLOW_function_in_classDecl4927_bits[]	= { ANTLR_UINT64_LIT(0x0003AA1410200120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl4927( FOLLOW_function_in_classDecl4927_bits, 1 );

static	ANTLR_BITWORD FOLLOW_VIRTUAL_in_classDecl4956_bits[]	= { ANTLR_UINT64_LIT(0x00032A0010200120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_VIRTUAL_in_classDecl4956( FOLLOW_VIRTUAL_in_classDecl4956_bits, 1 );

static	ANTLR_BITWORD FOLLOW_function_in_classDecl4960_bits[]	= { ANTLR_UINT64_LIT(0x0003AA1410200120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl4960( FOLLOW_function_in_classDecl4960_bits, 1 );

static	ANTLR_BITWORD FOLLOW_OVERRIDE_in_classDecl4986_bits[]	= { ANTLR_UINT64_LIT(0x00032A0010200120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_OVERRIDE_in_classDecl4986( FOLLOW_OVERRIDE_in_classDecl4986_bits, 1 );

static	ANTLR_BITWORD FOLLOW_function_in_classDecl4990_bits[]	= { ANTLR_UINT64_LIT(0x0003AA1410200120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl4990( FOLLOW_function_in_classDecl4990_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACE_in_classDecl5026_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_classDecl5026( FOLLOW_RBRACE_in_classDecl5026_bits, 1 );

static	ANTLR_BITWORD FOLLOW_INCLUDE_in_inc5056_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_INCLUDE_in_inc5056( FOLLOW_INCLUDE_in_inc5056_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRING_in_inc5058_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_in_inc5058( FOLLOW_STRING_in_inc5058_bits, 1 );

static	ANTLR_BITWORD FOLLOW_function_in_program5104_bits[]	= { ANTLR_UINT64_LIT(0x00033A0014200322) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_program5104( FOLLOW_function_in_program5104_bits, 1 );

static	ANTLR_BITWORD FOLLOW_structDecl_in_program5126_bits[]	= { ANTLR_UINT64_LIT(0x00033A0014200322) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_structDecl_in_program5126( FOLLOW_structDecl_in_program5126_bits, 1 );

static	ANTLR_BITWORD FOLLOW_classDecl_in_program5146_bits[]	= { ANTLR_UINT64_LIT(0x00033A0014200322) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_classDecl_in_program5146( FOLLOW_classDecl_in_program5146_bits, 1 );

static	ANTLR_BITWORD FOLLOW_inc_in_program5167_bits[]	= { ANTLR_UINT64_LIT(0x00033A0014200322) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_inc_in_program5167( FOLLOW_inc_in_program5167_bits, 1 );









static const ANTLR_INT32 dfa6_eot[15] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa6_eof[15] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa6_min[15] =
    {
	5, 24, 24, 24, 24, 24, 24, 24, -1, -1, -1, 39, -1, -1, 24
    };
static const ANTLR_INT32 dfa6_max[15] =
    {
	49, 31, 31, 31, 31, 31, 35, 35, -1, -1, -1, 39, -1, -1, 35
    };
static const ANTLR_INT32 dfa6_accept[15] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, 3, 4, 1, -1, 2, 5, -1
    };
static const ANTLR_INT32 dfa6_special[15] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };


static const ANTLR_INT32* dfa6_T_empty	 =   NULL;

static const ANTLR_INT32 dfa6_T0[] =
    {
	12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13
    };
static const ANTLR_INT32 dfa6_T1[] =
    {
	10, -1, -1, -1, -1, -1, -1, 11
    };
static const ANTLR_INT32 dfa6_T2[] =
    {
	14
    };
static const ANTLR_INT32 dfa6_T3[] =
    {
	12, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, 13
    };
static const ANTLR_INT32 dfa6_T4[] =
    {
	5, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1,
	-1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1,
	7, -1, 6, -1, -1, 1, 9
    };





static const ANTLR_INT32 * const dfa6_transitions[] =
{
    dfa6_T4, dfa6_T1, dfa6_T1, dfa6_T1, dfa6_T1, dfa6_T1, dfa6_T0, dfa6_T0,
    NULL, NULL, NULL, dfa6_T2, NULL, NULL, dfa6_T3
};




class WNScriptASTParserCyclicDFA6 : public CyclicDFA< WNScriptASTParserImplTraits, WNScriptASTParser >, public WNScriptASTParserTokens
{
public:
	typedef CyclicDFA< WNScriptASTParserImplTraits, WNScriptASTParser >  BaseType;
	typedef BaseType::ContextType CtxType;

private:


public:
	WNScriptASTParserCyclicDFA6( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{

	}

};

static WNScriptASTParserCyclicDFA6  cdfa6(
	    6,

	    (const ANTLR_UCHAR*)"278:1: param returns [scripting::parameter* node] : ( scalarType a= ID |bb= compoundType aa= ID | SHARED_REF b= compoundType c= ID | WEAK_REF d= compoundType e= ID |f= compoundType QUESTION g= ID );",
	    dfa6_eot,
	    dfa6_eof,
	    dfa6_min,
	    dfa6_max,
	    dfa6_accept,
	    dfa6_special,
	    dfa6_transitions

	);







static const ANTLR_INT32 dfa31_eot[16] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa31_eof[16] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa31_min[16] =
    {
	4, 24, 24, 24, 24, 24, 24, 24, 5, -1, -1, 4, 24, 24, 24, 39
    };
static const ANTLR_INT32 dfa31_max[16] =
    {
	60, 31, 31, 31, 31, 31, 35, 35, 48, -1, -1, 60, 30, 30, 35, 39
    };
static const ANTLR_INT32 dfa31_accept[16] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa31_special[16] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };


static const ANTLR_INT32* dfa31_T_empty	 =   NULL;

static const ANTLR_INT32 dfa31_T0[] =
    {
	9, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1,
	-1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, 13, -1, 12, -1, -1, 9
    };
static const ANTLR_INT32 dfa31_T1[] =
    {
	14
    };
static const ANTLR_INT32 dfa31_T2[] =
    {
	9, -1, -1, -1, -1, 10, 10, 11
    };
static const ANTLR_INT32 dfa31_T3[] =
    {
	10, 5, -1, 10, 4, -1, -1, -1, -1, -1, -1, 10, 10, -1, -1, -1, 10, 3, -1,
	-1, 10, -1, -1, 10, 2, -1, 10, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1,
	8, 10, 7, -1, 6, -1, -1, 1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	10
    };
static const ANTLR_INT32 dfa31_T4[] =
    {
	9, -1, -1, -1, -1, -1, 10, 15, -1, -1, -1, 9
    };
static const ANTLR_INT32 dfa31_T5[] =
    {
	9, -1, -1, -1, -1, -1, 10
    };
static const ANTLR_INT32 dfa31_T6[] =
    {
	9, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, 9
    };
static const ANTLR_INT32 dfa31_T7[] =
    {
	10, 10, -1, 10, 10, -1, -1, -1, -1, -1, -1, 10, 10, -1, -1, -1, 10, 10,
	-1, -1, 10, -1, -1, 10, 10, -1, 10, -1, 10, -1, -1, -1, -1, -1, -1, 14,
	-1, 10, 10, 10, -1, 10, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, 10
    };





static const ANTLR_INT32 * const dfa31_transitions[] =
{
    dfa31_T3, dfa31_T2, dfa31_T2, dfa31_T2, dfa31_T2, dfa31_T2, dfa31_T6,
    dfa31_T6, dfa31_T0, NULL, NULL, dfa31_T7, dfa31_T5, dfa31_T5, dfa31_T4,
    dfa31_T1
};




class WNScriptASTParserCyclicDFA31 : public CyclicDFA< WNScriptASTParserImplTraits, WNScriptASTParser >, public WNScriptASTParserTokens
{
public:
	typedef CyclicDFA< WNScriptASTParserImplTraits, WNScriptASTParser >  BaseType;
	typedef BaseType::ContextType CtxType;

private:


public:
	WNScriptASTParserCyclicDFA31( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{

	}

};

static WNScriptASTParserCyclicDFA31  cdfa31(
	    31,

	    (const ANTLR_UCHAR*)"547:1: instructionScalar returns [scripting::instruction* node] : ( declaration | assignment_or_expression );",
	    dfa31_eot,
	    dfa31_eof,
	    dfa31_min,
	    dfa31_max,
	    dfa31_accept,
	    dfa31_special,
	    dfa31_transitions

	);







static const ANTLR_INT32 dfa42_eot[41] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa42_eof[41] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa42_min[41] =
    {
	5, -1, 24, 24, 24, 24, 24, 24, 24, 5, 5, -1, -1, 30, 39, 30, 24, 31, 31,
	31, 31, 31, 24, 24, 31, 31, 31, 31, 31, 24, 24, -1, -1, 24, 30, 39, 30,
	39, 30, 24, 24
    };
static const ANTLR_INT32 dfa42_max[41] =
    {
	49, -1, 31, 31, 31, 31, 31, 35, 35, 48, 48, -1, -1, 67, 39, 67, 24, 31,
	31, 31, 31, 31, 24, 24, 31, 31, 31, 31, 31, 24, 24, -1, -1, 35, 67, 39,
	67, 39, 67, 31, 31
    };
static const ANTLR_INT32 dfa42_accept[41] =
    {
	-1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 4, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, -1, -1, -1, -1, -1,
	-1, -1, -1
    };
static const ANTLR_INT32 dfa42_special[41] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1
    };


static const ANTLR_INT32* dfa42_T_empty	 =   NULL;

static const ANTLR_INT32 dfa42_T0[] =
    {
	32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, 31
    };
static const ANTLR_INT32 dfa42_T1[] =
    {
	34
    };
static const ANTLR_INT32 dfa42_T2[] =
    {
	36
    };
static const ANTLR_INT32 dfa42_T3[] =
    {
	39
    };
static const ANTLR_INT32 dfa42_T4[] =
    {
	40
    };
static const ANTLR_INT32 dfa42_T5[] =
    {
	38
    };
static const ANTLR_INT32 dfa42_T6[] =
    {
	6, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1,
	-1, -1, -1, -1, 3, -1, -1, -1, -1, -1, 12, -1, 1, -1, -1, -1, -1, 9, -1,
	8, -1, 7, -1, 11, 2, 10
    };
static const ANTLR_INT32 dfa42_T7[] =
    {
	13, -1, -1, -1, -1, -1, -1, 14
    };
static const ANTLR_INT32 dfa42_T8[] =
    {
	35
    };
static const ANTLR_INT32 dfa42_T9[] =
    {
	37
    };
static const ANTLR_INT32 dfa42_T10[] =
    {
	33
    };
static const ANTLR_INT32 dfa42_T11[] =
    {
	36, -1, -1, -1, -1, -1, -1, 35
    };
static const ANTLR_INT32 dfa42_T12[] =
    {
	21, -1, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1,
	-1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, 23, -1, 22, -1, -1, 17
    };
static const ANTLR_INT32 dfa42_T13[] =
    {
	15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16
    };
static const ANTLR_INT32 dfa42_T14[] =
    {
	38, -1, -1, -1, -1, -1, -1, 37
    };
static const ANTLR_INT32 dfa42_T15[] =
    {
	28, -1, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, -1,
	-1, -1, -1, -1, -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, 30, -1, 29, -1, -1, 24
    };
static const ANTLR_INT32 dfa42_T16[] =
    {
	15, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, 16
    };





static const ANTLR_INT32 * const dfa42_transitions[] =
{
    dfa42_T6, NULL, dfa42_T7, dfa42_T7, dfa42_T7, dfa42_T7, dfa42_T7, dfa42_T13,
    dfa42_T13, dfa42_T12, dfa42_T15, NULL, NULL, dfa42_T0, dfa42_T10, dfa42_T0,
    dfa42_T1, dfa42_T8, dfa42_T8, dfa42_T8, dfa42_T8, dfa42_T8, dfa42_T2,
    dfa42_T2, dfa42_T9, dfa42_T9, dfa42_T9, dfa42_T9, dfa42_T9, dfa42_T5,
    dfa42_T5, NULL, NULL, dfa42_T16, dfa42_T0, dfa42_T3, dfa42_T0, dfa42_T4,
    dfa42_T0, dfa42_T11, dfa42_T14
};




class WNScriptASTParserCyclicDFA42 : public CyclicDFA< WNScriptASTParserImplTraits, WNScriptASTParser >, public WNScriptASTParserTokens
{
public:
	typedef CyclicDFA< WNScriptASTParserImplTraits, WNScriptASTParser >  BaseType;
	typedef BaseType::ContextType CtxType;

private:


public:
	WNScriptASTParserCyclicDFA42( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{

	}

};

static WNScriptASTParserCyclicDFA42  cdfa42(
	    42,

	    (const ANTLR_UCHAR*)"()* loopback of 674:17: ( (a= declaration SEMICOLON ) | (b= function ) | ( VIRTUAL h= function ) | ( OVERRIDE i= function ) )*",
	    dfa42_eot,
	    dfa42_eof,
	    dfa42_min,
	    dfa42_max,
	    dfa42_accept,
	    dfa42_special,
	    dfa42_transitions

	);
















scripting::type*
WNScriptASTParser::objectType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    const ImplTraits::CommonTokenType* TYPE1 = NULL;
    const ImplTraits::CommonTokenType* STRING_TYPE2 = NULL;






        node = nullptr;



    {
        {

            ANTLR_UINT32 alt1;

            alt1=2;

            switch ( this->LA(1) )
            {
            case TYPE:
            	{
            		alt1=1;
            	}
                break;
            case STRING_TYPE:
            	{
            		alt1=2;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 1 );
                ex->set_state( 0 );


                goto ruleobjectTypeEx;

            }

            switch (alt1)
            {
        	case 1:
        	    {
        	        TYPE1 =  this->matchToken(TYPE, &FOLLOW_TYPE_in_objectType1166);
        	        if  (this->hasException())
        	        {
        	            goto ruleobjectTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, (TYPE1->getText()).c_str()); SET_LOCATION(node, TYPE1);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        STRING_TYPE2 =  this->matchToken(STRING_TYPE, &FOLLOW_STRING_TYPE_in_objectType1181);
        	        if  (this->hasException())
        	        {
        	            goto ruleobjectTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::string_type); SET_LOCATION(node, STRING_TYPE2);
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleobjectTypeEx;
    ruleobjectTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::type*
WNScriptASTParser::scalarType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    const ImplTraits::CommonTokenType* VOID_TYPE3 = NULL;
    const ImplTraits::CommonTokenType* INT_TYPE4 = NULL;
    const ImplTraits::CommonTokenType* FLOAT_TYPE5 = NULL;
    const ImplTraits::CommonTokenType* CHAR_TYPE6 = NULL;
    const ImplTraits::CommonTokenType* BOOL_TYPE7 = NULL;






        node = nullptr;



    {
        {

            ANTLR_UINT32 alt2;

            alt2=5;

            switch ( this->LA(1) )
            {
            case VOID_TYPE:
            	{
            		alt2=1;
            	}
                break;
            case INT_TYPE:
            	{
            		alt2=2;
            	}
                break;
            case FLOAT_TYPE:
            	{
            		alt2=3;
            	}
                break;
            case CHAR_TYPE:
            	{
            		alt2=4;
            	}
                break;
            case BOOL_TYPE:
            	{
            		alt2=5;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 2 );
                ex->set_state( 0 );


                goto rulescalarTypeEx;

            }

            switch (alt2)
            {
        	case 1:
        	    {
        	        VOID_TYPE3 =  this->matchToken(VOID_TYPE, &FOLLOW_VOID_TYPE_in_scalarType1210);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::void_type); SET_LOCATION(node, VOID_TYPE3);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        INT_TYPE4 =  this->matchToken(INT_TYPE, &FOLLOW_INT_TYPE_in_scalarType1222);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::int_type); SET_LOCATION(node, INT_TYPE4);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        FLOAT_TYPE5 =  this->matchToken(FLOAT_TYPE, &FOLLOW_FLOAT_TYPE_in_scalarType1234);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::float_type); SET_LOCATION(node, FLOAT_TYPE5);
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        CHAR_TYPE6 =  this->matchToken(CHAR_TYPE, &FOLLOW_CHAR_TYPE_in_scalarType1246);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::char_type); SET_LOCATION(node, CHAR_TYPE6);
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        BOOL_TYPE7 =  this->matchToken(BOOL_TYPE, &FOLLOW_BOOL_TYPE_in_scalarType1258);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::bool_type); SET_LOCATION(node, BOOL_TYPE7);
        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulescalarTypeEx;
    rulescalarTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::type*
WNScriptASTParser::compoundType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    const ImplTraits::CommonTokenType* RSQBRACKET9 = NULL;
    const ImplTraits::CommonTokenType* LSQBRACKET10 = NULL;
    scripting::type* scalarType8;
    scripting::type* objectType11;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt4;

            alt4=2;

            switch ( this->LA(1) )
            {
            case BOOL_TYPE:
            case CHAR_TYPE:
            case FLOAT_TYPE:
            case INT_TYPE:
            case VOID_TYPE:
            	{
            		alt4=1;
            	}
                break;
            case STRING_TYPE:
            case TYPE:
            	{
            		alt4=2;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 4 );
                ex->set_state( 0 );


                goto rulecompoundTypeEx;

            }

            switch (alt4)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_compoundType1285);
        	        scalarType8=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecompoundTypeEx;
        	        }


        	        {
        	             node = scalarType8
        	            ; SET_LOCATION_FROM_NODE(node, scalarType8
        	            );
        	        }


        	        {
        	            int cnt3=0;

        	            for (;;)
        	            {
        	                int alt3=2;
        	        	switch ( this->LA(1) )
        	        	{
        	        	case LSQBRACKET:
        	        		{
        	        			alt3=1;
        	        		}
        	        	    break;

        	        	}

        	        	switch (alt3)
        	        	{
        	        	    case 1:
        	        	        {
        	        	            LSQBRACKET10 =  this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_compoundType1301);
        	        	            if  (this->hasException())
        	        	            {
        	        	                goto rulecompoundTypeEx;
        	        	            }


        	        	            RSQBRACKET9 =  this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_compoundType1303);
        	        	            if  (this->hasException())
        	        	            {
        	        	                goto rulecompoundTypeEx;
        	        	            }


        	        	            {

        	        	                                   SET_END_LOCATION(node, RSQBRACKET9);
        	        	                                   node = m_allocator->construct<scripting::array_type>(m_allocator, node);
        	        	                                   SET_LOCATION(node, LSQBRACKET10);
        	        	                                   SET_END_LOCATION(node, RSQBRACKET9);

        	        	            }


        	        	        }
        	        	        break;

        	        	    default:

        	        		if ( cnt3 >= 1 )
        	        		{
        	        		    goto loop3;
        	        		}


        	        		new ANTLR_Exception< WNScriptASTParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        	        		goto rulecompoundTypeEx;
        	        	}
        	        	cnt3++;
        	            }
        	            loop3: ;
        	        }

        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_objectType_in_compoundType1315);
        	        objectType11=objectType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecompoundTypeEx;
        	        }


        	        {
        	             node = objectType11
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulecompoundTypeEx;
    rulecompoundTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::type*
WNScriptASTParser::type()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    scripting::type* compoundType12;
    scripting::type* scalarType13;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt5;

            alt5=2;

            switch ( this->LA(1) )
            {
            case VOID_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LSQBRACKET:
            			{
            				alt5=1;
            			}
            		    break;
            		case EOF:
            			{
            				alt5=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 5 );
            		    ex->set_state( 1 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case INT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LSQBRACKET:
            			{
            				alt5=1;
            			}
            		    break;
            		case EOF:
            			{
            				alt5=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 5 );
            		    ex->set_state( 2 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case FLOAT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LSQBRACKET:
            			{
            				alt5=1;
            			}
            		    break;
            		case EOF:
            			{
            				alt5=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 5 );
            		    ex->set_state( 3 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case CHAR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LSQBRACKET:
            			{
            				alt5=1;
            			}
            		    break;
            		case EOF:
            			{
            				alt5=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 5 );
            		    ex->set_state( 4 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case BOOL_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LSQBRACKET:
            			{
            				alt5=1;
            			}
            		    break;
            		case EOF:
            			{
            				alt5=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 5 );
            		    ex->set_state( 5 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case STRING_TYPE:
            case TYPE:
            	{
            		alt5=1;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 5 );
                ex->set_state( 0 );


                goto ruletypeEx;

            }

            switch (alt5)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_compoundType_in_type1345);
        	        compoundType12=compoundType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruletypeEx;
        	        }


        	        {
        	             node = compoundType12
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_type1355);
        	        scalarType13=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruletypeEx;
        	        }


        	        {
        	             node = scalarType13
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruletypeEx;
    ruletypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::parameter*
WNScriptASTParser::param()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::parameter* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* aa = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    const ImplTraits::CommonTokenType* e = NULL;
    const ImplTraits::CommonTokenType* g = NULL;
    const ImplTraits::CommonTokenType* SHARED_REF15 = NULL;
    const ImplTraits::CommonTokenType* WEAK_REF16 = NULL;
    scripting::type* bb;
    scripting::type* b;
    scripting::type* d;
    scripting::type* f;
    scripting::type* scalarType14;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt6;

            alt6=5;

            alt6 = cdfa6.predict(this, this->get_rec(), this->get_istream(), cdfa6 );
            if  (this->hasException())
            {
                goto ruleparamEx;
            }

            switch (alt6)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_param1387);
        	        scalarType14=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        a =  this->matchToken(ID, &FOLLOW_ID_in_param1391);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                        node = m_allocator->construct<scripting::parameter>(m_allocator, scalarType14
        	            , (a->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            scalarType14
        	            ); SET_END_LOCATION(node, a);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_compoundType_in_param1406);
        	        bb=compoundType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        aa =  this->matchToken(ID, &FOLLOW_ID_in_param1410);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                        bb
        	            ->set_reference_type(scripting::reference_type::unique);
        	                        node = m_allocator->construct<scripting::parameter>(m_allocator, bb
        	            , (aa->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            bb
        	            ); SET_END_LOCATION(node, aa);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        SHARED_REF15 =  this->matchToken(SHARED_REF, &FOLLOW_SHARED_REF_in_param1423);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        this->followPush(FOLLOW_compoundType_in_param1427);
        	        b=compoundType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        c =  this->matchToken(ID, &FOLLOW_ID_in_param1431);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                       b
        	            ->set_reference_type(scripting::reference_type::shared);
        	                       node = m_allocator->construct<scripting::parameter>(m_allocator, b
        	            , (c->getText()).c_str()); SET_LOCATION(node, SHARED_REF15); SET_END_LOCATION(node, c);

        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        WEAK_REF16 =  this->matchToken(WEAK_REF, &FOLLOW_WEAK_REF_in_param1444);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        this->followPush(FOLLOW_compoundType_in_param1448);
        	        d=compoundType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        e =  this->matchToken(ID, &FOLLOW_ID_in_param1453);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                       d
        	            ->set_reference_type(scripting::reference_type::weak);
        	                       node = m_allocator->construct<scripting::parameter>(m_allocator, d
        	            , (e->getText()).c_str()); SET_LOCATION(node, WEAK_REF16); SET_END_LOCATION(node, e);

        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        this->followPush(FOLLOW_compoundType_in_param1468);
        	        f=compoundType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	         this->matchToken(QUESTION, &FOLLOW_QUESTION_in_param1470);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        g =  this->matchToken(ID, &FOLLOW_ID_in_param1475);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                       f
        	            ->set_reference_type(scripting::reference_type::nullable);
        	                       node = m_allocator->construct<scripting::parameter>(m_allocator, f
        	            , (g->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            f
        	            ); SET_END_LOCATION(node, g);

        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleparamEx;
    ruleparamEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::parameter_list*
WNScriptASTParser::paramList()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::parameter_list* node;


    scripting::parameter* a;
    scripting::parameter* b;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_param_in_paramList1507);
            a=param();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleparamListEx;
            }


            {
                 node = m_allocator->construct<scripting::parameter_list>(m_allocator, a
                ); SET_LOCATION_FROM_NODE(node, a
                );
            }



            for (;;)
            {
                int alt7=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt7=1;
                	}
                    break;

                }

                switch (alt7)
                {
            	case 1:
            	    {
            	         this->matchToken(COMMA, &FOLLOW_COMMA_in_paramList1520);
            	        if  (this->hasException())
            	        {
            	            goto ruleparamListEx;
            	        }


            	        this->followPush(FOLLOW_param_in_paramList1524);
            	        b=param();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleparamListEx;
            	        }


            	        {
            	             node
            	            ->add_parameter(b
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop7;
            	    break;
                }
            }
            loop7: ;


        }

    }
    goto ruleparamListEx;
    ruleparamListEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::parameter_list*
WNScriptASTParser::parameterList()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::parameter_list* node;


    const ImplTraits::CommonTokenType* LBRACKET18 = NULL;
    const ImplTraits::CommonTokenType* RBRACKET19 = NULL;
    scripting::parameter_list* paramList17;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt8;

            alt8=2;

            switch ( this->LA(1) )
            {
            case LBRACKET:
            	{
            		switch ( this->LA(2) )
            		{
            		case RBRACKET:
            			{
            				alt8=2;
            			}
            		    break;
            		case BOOL_TYPE:
            		case CHAR_TYPE:
            		case FLOAT_TYPE:
            		case INT_TYPE:
            		case SHARED_REF:
            		case STRING_TYPE:
            		case TYPE:
            		case VOID_TYPE:
            		case WEAK_REF:
            			{
            				alt8=1;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 8 );
            		    ex->set_state( 1 );


            		    goto ruleparameterListEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 8 );
                ex->set_state( 0 );


                goto ruleparameterListEx;

            }

            switch (alt8)
            {
        	case 1:
        	    {
        	        LBRACKET18 =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_parameterList1556);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        this->followPush(FOLLOW_paramList_in_parameterList1558);
        	        paramList17=paramList();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        RBRACKET19 =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_parameterList1560);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        {
        	             node = paramList17
        	            ; SET_LOCATION(node, LBRACKET18); SET_END_LOCATION(node, RBRACKET19);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	         this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_parameterList1577);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	         this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_parameterList1579);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        {
        	             node = nullptr;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleparameterListEx;
    ruleparameterListEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::assign_type
WNScriptASTParser::assign_type()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::assign_type node;







        node = scripting::assign_type::equal;



    {
        {

            ANTLR_UINT32 alt9;

            alt9=6;

            switch ( this->LA(1) )
            {
            case 67:
            	{
            		alt9=1;
            	}
                break;
            case 59:
            	{
            		alt9=2;
            	}
                break;
            case 61:
            	{
            		alt9=3;
            	}
                break;
            case 57:
            	{
            		alt9=4;
            	}
                break;
            case 64:
            	{
            		alt9=5;
            	}
                break;
            case 54:
            	{
            		alt9=6;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 9 );
                ex->set_state( 0 );


                goto ruleassign_typeEx;

            }

            switch (alt9)
            {
        	case 1:
        	    {
        	         this->matchToken(67, &FOLLOW_67_in_assign_type1615);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::equal;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	         this->matchToken(59, &FOLLOW_59_in_assign_type1629);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::add_equal;
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	         this->matchToken(61, &FOLLOW_61_in_assign_type1642);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::sub_equal;
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	         this->matchToken(57, &FOLLOW_57_in_assign_type1655);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::mult_equal;
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	         this->matchToken(64, &FOLLOW_64_in_assign_type1668);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::div_equal;
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	         this->matchToken(54, &FOLLOW_54_in_assign_type1681);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::mod_equal;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleassign_typeEx;
    ruleassign_typeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::arg_list*
WNScriptASTParser::arglist()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::arg_list* node;


    scripting::expression* a;
    scripting::expression* d;





        node = m_allocator->construct<scripting::arg_list>(m_allocator);



    {
        {
            {
                {
                    this->followPush(FOLLOW_expr_in_arglist1739);
                    a=expr();

                    this->followPop();
                    if  (this->hasException())
                    {
                        goto rulearglistEx;
                    }


                    {
                         node->add_expression(a
                        ); SET_LOCATION_FROM_NODE(node, a
                        );
                    }


                }


            }



            for (;;)
            {
                int alt11=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt11=1;
                	}
                    break;

                }

                switch (alt11)
                {
            	case 1:
            	    {
            	         this->matchToken(COMMA, &FOLLOW_COMMA_in_arglist1772);
            	        if  (this->hasException())
            	        {
            	            goto rulearglistEx;
            	        }


            	        {
            	            int alt10=2;
            	            switch ( this->LA(1) )
            	            {
            	            case BOOL:
            	            case BOOL_TYPE:
            	            case CHAR:
            	            case CHAR_TYPE:
            	            case DOUBDEC:
            	            case DOUBINC:
            	            case FLOAT:
            	            case FLOAT_TYPE:
            	            case ID:
            	            case INT:
            	            case INT_TYPE:
            	            case LBRACKET:
            	            case NULLTOK:
            	            case SHARED_REF:
            	            case STRING:
            	            case STRING_TYPE:
            	            case TYPE:
            	            case VOID_TYPE:
            	            case 60:
            	            	{
            	            		alt10=1;
            	            	}
            	                break;
            	            case COMMA:
            	            case RBRACKET:
            	            	{
            	            		alt10=2;
            	            	}
            	                break;

            	            default:
            	                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 10 );
            	                ex->set_state( 0 );


            	                goto rulearglistEx;

            	            }

            	            switch (alt10)
            	            {
            	        	case 1:
            	        	    {
            	        	        {
            	        	            this->followPush(FOLLOW_expr_in_arglist1816);
            	        	            d=expr();

            	        	            this->followPop();
            	        	            if  (this->hasException())
            	        	            {
            	        	                goto rulearglistEx;
            	        	            }


            	        	            {
            	        	                 node->add_expression(d
            	        	                , true); SET_END_LOCATION_FROM_NODE(node, d
            	        	                );
            	        	            }


            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    {
            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

            	default:
            	    goto loop11;
            	    break;
                }
            }
            loop11: ;


        }

    }
    goto rulearglistEx;
    rulearglistEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::expr()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* cond_ex20;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_cond_ex_in_expr1891);
            cond_ex20=cond_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexprEx;
            }


            {
                 node = cond_ex20
                ;
            }


        }

    }
    goto ruleexprEx;
    ruleexprEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::cond_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* or_ex21;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_or_ex_in_cond_ex1929);
            or_ex21=or_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecond_exEx;
            }


            {
                 node = or_ex21
                ;
            }


            {
                int alt12=2;
                switch ( this->LA(1) )
                {
                    case QUESTION:
                    	{
                    		alt12=1;
                    	}
                        break;
                }

                switch (alt12)
                {
            	case 1:
            	    {
            	         this->matchToken(QUESTION, &FOLLOW_QUESTION_in_cond_ex1952);
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	        this->followPush(FOLLOW_expr_in_cond_ex1956);
            	        b=expr();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	         this->matchToken(COLON, &FOLLOW_COLON_in_cond_ex1958);
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	        this->followPush(FOLLOW_cond_ex_in_cond_ex1962);
            	        c=cond_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	        {
            	             node = m_allocator->construct<scripting::cond_expression>(m_allocator, node, b
            	            , c
            	            );  SET_LOCATION_FROM_NODE(node, or_ex21
            	            ); SET_END_LOCATION_FROM_NODE(node, c
            	            );
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    goto rulecond_exEx;
    rulecond_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::or_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_and_ex_in_or_ex2009);
            a=and_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleor_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt13=2;
                switch ( this->LA(1) )
                {
                case 71:
                	{
                		alt13=1;
                	}
                    break;

                }

                switch (alt13)
                {
            	case 1:
            	    {
            	         this->matchToken(71, &FOLLOW_71_in_or_ex2026);
            	        if  (this->hasException())
            	        {
            	            goto ruleor_exEx;
            	        }


            	        this->followPush(FOLLOW_and_ex_in_or_ex2030);
            	        b=and_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleor_exEx;
            	        }


            	        {
            	             node = m_allocator->construct<scripting::short_circuit_expression>(m_allocator, scripting::short_circuit_type::or_operator, node, b
            	            ); SET_LOCATION_FROM_NODE(node, a
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop13;
            	    break;
                }
            }
            loop13: ;


        }

    }
    goto ruleor_exEx;
    ruleor_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::and_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_eq_ex_in_and_ex2073);
            a=eq_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleand_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt14=2;
                switch ( this->LA(1) )
                {
                case 55:
                	{
                		alt14=1;
                	}
                    break;

                }

                switch (alt14)
                {
            	case 1:
            	    {
            	         this->matchToken(55, &FOLLOW_55_in_and_ex2090);
            	        if  (this->hasException())
            	        {
            	            goto ruleand_exEx;
            	        }


            	        this->followPush(FOLLOW_eq_ex_in_and_ex2094);
            	        b=eq_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleand_exEx;
            	        }


            	        {
            	            node = m_allocator->construct<scripting::short_circuit_expression>(m_allocator, scripting::short_circuit_type::and_operator, node, b
            	            ); SET_LOCATION_FROM_NODE(node, a
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop14;
            	    break;
                }
            }
            loop14: ;


        }

    }
    goto ruleand_exEx;
    ruleand_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::eq_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_rel_ex_in_eq_ex2130);
            a=rel_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleeq_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt15=3;
                switch ( this->LA(1) )
                {
                case 68:
                	{
                		alt15=1;
                	}
                    break;
                case 52:
                	{
                		alt15=2;
                	}
                    break;

                }

                switch (alt15)
                {
            	case 1:
            	    {
            	        {
            	             this->matchToken(68, &FOLLOW_68_in_eq_ex2165);
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            this->followPush(FOLLOW_rel_ex_in_eq_ex2169);
            	            b=rel_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_equal, node, b
            	                );  SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	             this->matchToken(52, &FOLLOW_52_in_eq_ex2192);
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            this->followPush(FOLLOW_rel_ex_in_eq_ex2196);
            	            c=rel_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_not_equal, node, c
            	                ); SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                );
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop15;
            	    break;
                }
            }
            loop15: ;


        }

    }
    goto ruleeq_exEx;
    ruleeq_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::rel_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* d;
    scripting::expression* e;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_add_ex_in_rel_ex2254);
            a=add_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulerel_exEx;
            }


            {
                 node=a
                ;
            }



            for (;;)
            {
                int alt16=5;
                switch ( this->LA(1) )
                {
                case 65:
                	{
                		alt16=1;
                	}
                    break;
                case 69:
                	{
                		alt16=2;
                	}
                    break;
                case 66:
                	{
                		alt16=3;
                	}
                    break;
                case 70:
                	{
                		alt16=4;
                	}
                    break;

                }

                switch (alt16)
                {
            	case 1:
            	    {
            	        {
            	             this->matchToken(65, &FOLLOW_65_in_rel_ex2290);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex2294);
            	            b=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_less_than, node, b
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	             this->matchToken(69, &FOLLOW_69_in_rel_ex2318);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex2322);
            	            c=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_greater_than, node, c
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	        {
            	             this->matchToken(66, &FOLLOW_66_in_rel_ex2346);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex2350);
            	            d=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_less_than_or_equal, node, d
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, d
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 4:
            	    {
            	        {
            	             this->matchToken(70, &FOLLOW_70_in_rel_ex2374);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex2378);
            	            e=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_greater_than_or_equal, node, e
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, e
            	                );
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop16;
            	    break;
                }
            }
            loop16: ;


        }

    }
    goto rulerel_exEx;
    rulerel_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::add_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_mult_ex_in_add_ex2439);
            a=mult_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleadd_exEx;
            }


            {
                node = a
                ;
            }



            for (;;)
            {
                int alt17=3;
                switch ( this->LA(1) )
                {
                case 58:
                	{
                		alt17=1;
                	}
                    break;
                case 60:
                	{
                		alt17=2;
                	}
                    break;

                }

                switch (alt17)
                {
            	case 1:
            	    {
            	        {
            	             this->matchToken(58, &FOLLOW_58_in_add_ex2474);
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            this->followPush(FOLLOW_mult_ex_in_add_ex2478);
            	            b=mult_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_add, node, b
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	             this->matchToken(60, &FOLLOW_60_in_add_ex2500);
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            this->followPush(FOLLOW_mult_ex_in_add_ex2504);
            	            c=mult_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_sub, node, c
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                );
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop17;
            	    break;
                }
            }
            loop17: ;


        }

    }
    goto ruleadd_exEx;
    ruleadd_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::mult_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* d;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_unary_ex_in_mult_ex2563);
            a=unary_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemult_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt18=4;
                switch ( this->LA(1) )
                {
                case 56:
                	{
                		alt18=1;
                	}
                    break;
                case 63:
                	{
                		alt18=2;
                	}
                    break;
                case 53:
                	{
                		alt18=3;
                	}
                    break;

                }

                switch (alt18)
                {
            	case 1:
            	    {
            	        {
            	             this->matchToken(56, &FOLLOW_56_in_mult_ex2602);
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            this->followPush(FOLLOW_unary_ex_in_mult_ex2606);
            	            b=unary_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_mult, node, b
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	             this->matchToken(63, &FOLLOW_63_in_mult_ex2632);
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            this->followPush(FOLLOW_unary_ex_in_mult_ex2636);
            	            c=unary_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_div, node, c
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	        {
            	             this->matchToken(53, &FOLLOW_53_in_mult_ex2662);
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            this->followPush(FOLLOW_unary_ex_in_mult_ex2666);
            	            d=unary_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_mod, node, d
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, d
            	                );
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop18;
            	    break;
                }
            }
            loop18: ;


        }

    }
    goto rulemult_exEx;
    rulemult_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::unary_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* d;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt19;

            alt19=4;

            switch ( this->LA(1) )
            {
            case BOOL:
            case BOOL_TYPE:
            case CHAR:
            case CHAR_TYPE:
            case FLOAT:
            case FLOAT_TYPE:
            case ID:
            case INT:
            case INT_TYPE:
            case LBRACKET:
            case NULLTOK:
            case SHARED_REF:
            case STRING:
            case STRING_TYPE:
            case TYPE:
            case VOID_TYPE:
            	{
            		alt19=1;
            	}
                break;
            case DOUBINC:
            	{
            		alt19=2;
            	}
                break;
            case DOUBDEC:
            	{
            		alt19=3;
            	}
                break;
            case 60:
            	{
            		alt19=4;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 19 );
                ex->set_state( 0 );


                goto ruleunary_exEx;

            }

            switch (alt19)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_post_ex_in_unary_ex2718);
        	        a=post_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             node = a
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	         this->matchToken(DOUBINC, &FOLLOW_DOUBINC_in_unary_ex2731);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        this->followPush(FOLLOW_unary_ex_in_unary_ex2735);
        	        b=unary_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             scripting::node* t = node; node = m_allocator->construct<scripting::unary_expression>(m_allocator, scripting::unary_type::pre_increment, b
        	            );   SET_LOCATION_FROM_NODE(node, t); SET_END_LOCATION_FROM_NODE(node, b
        	            );
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	         this->matchToken(DOUBDEC, &FOLLOW_DOUBDEC_in_unary_ex2748);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        this->followPush(FOLLOW_unary_ex_in_unary_ex2752);
        	        c=unary_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             scripting::node* t = node; node = m_allocator->construct<scripting::unary_expression>(m_allocator, scripting::unary_type::pre_decrement, c
        	            );   SET_LOCATION_FROM_NODE(node, t); SET_END_LOCATION_FROM_NODE(node, c
        	            );
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	         this->matchToken(60, &FOLLOW_60_in_unary_ex2765);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        this->followPush(FOLLOW_unary_ex_in_unary_ex2769);
        	        d=unary_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             scripting::node* t = node; node = m_allocator->construct<scripting::unary_expression>(m_allocator, scripting::unary_type::negation, d
        	            );   SET_LOCATION_FROM_NODE(node, t); SET_END_LOCATION_FROM_NODE(node, d
        	            );
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleunary_exEx;
    ruleunary_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::post_expression*
WNScriptASTParser::post_ex_proper()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::post_expression* node;


    const ImplTraits::CommonTokenType* d = NULL;
    const ImplTraits::CommonTokenType* e = NULL;
    const ImplTraits::CommonTokenType* f = NULL;
    const ImplTraits::CommonTokenType* g = NULL;
    const ImplTraits::CommonTokenType* h = NULL;
    const ImplTraits::CommonTokenType* i = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    const ImplTraits::CommonTokenType* DOUBINC22 = NULL;
    const ImplTraits::CommonTokenType* DOUBDEC23 = NULL;
    scripting::expression* a;
    scripting::arg_list* b;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt20;

            alt20=6;

            switch ( this->LA(1) )
            {
            case LSQBRACKET:
            	{
            		alt20=1;
            	}
                break;
            case LBRACKET:
            	{
            		switch ( this->LA(2) )
            		{
            		case RBRACKET:
            			{
            				alt20=2;
            			}
            		    break;
            		case BOOL:
            		case BOOL_TYPE:
            		case CHAR:
            		case CHAR_TYPE:
            		case DOUBDEC:
            		case DOUBINC:
            		case FLOAT:
            		case FLOAT_TYPE:
            		case ID:
            		case INT:
            		case INT_TYPE:
            		case LBRACKET:
            		case NULLTOK:
            		case SHARED_REF:
            		case STRING:
            		case STRING_TYPE:
            		case TYPE:
            		case VOID_TYPE:
            		case 60:
            			{
            				alt20=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 20 );
            		    ex->set_state( 2 );


            		    goto rulepost_ex_properEx;

            		}

            	}
                break;
            case 62:
            	{
            		alt20=4;
            	}
                break;
            case DOUBINC:
            	{
            		alt20=5;
            	}
                break;
            case DOUBDEC:
            	{
            		alt20=6;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 20 );
                ex->set_state( 0 );


                goto rulepost_ex_properEx;

            }

            switch (alt20)
            {
        	case 1:
        	    {
        	        d =  this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_post_ex_proper2807);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_post_ex_proper2811);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        e =  this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_post_ex_proper2815);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::array_access_expression>(m_allocator, a
        	            ); SET_LOCATION(node, d); SET_END_LOCATION(node, e);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        f =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_post_ex_proper2830);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        g =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_post_ex_proper2834);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::function_call_expression>(m_allocator); SET_LOCATION(node, f); SET_END_LOCATION(node, g);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        h =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_post_ex_proper2862);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        this->followPush(FOLLOW_arglist_in_post_ex_proper2868);
        	        b=arglist();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        i =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_post_ex_proper2872);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::function_call_expression>(m_allocator, b
        	            ); SET_LOCATION(node, h); SET_END_LOCATION(node, i);
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	         this->matchToken(62, &FOLLOW_62_in_post_ex_proper2885);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        c =  this->matchToken(ID, &FOLLOW_ID_in_post_ex_proper2889);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::member_access_expression>(m_allocator, (c->getText()).c_str()); SET_LOCATION(node, c);
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        DOUBINC22 =  this->matchToken(DOUBINC, &FOLLOW_DOUBINC_in_post_ex_proper2916);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::post_unary_expression>(m_allocator, scripting::post_unary_type::post_increment); SET_LOCATION(node, DOUBINC22);
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	        DOUBDEC23 =  this->matchToken(DOUBDEC, &FOLLOW_DOUBDEC_in_post_ex_proper2945);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::post_unary_expression>(m_allocator, scripting::post_unary_type::post_decrement); SET_LOCATION(node, DOUBDEC23);
        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulepost_ex_properEx;
    rulepost_ex_properEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::post_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::post_expression* a;
    scripting::expression * prim_ex24;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_prim_ex_in_post_ex2998);
            prim_ex24=prim_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulepost_exEx;
            }


            {
                 node = prim_ex24
                ;
            }



            for (;;)
            {
                int alt21=2;
                switch ( this->LA(1) )
                {
                case DOUBDEC:
                case DOUBINC:
                case LBRACKET:
                case LSQBRACKET:
                case 62:
                	{
                		alt21=1;
                	}
                    break;

                }

                switch (alt21)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_post_ex_proper_in_post_ex3017);
            	        a=post_ex_proper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulepost_exEx;
            	        }


            	        {
            	            a
            	            ->add_base_expression(node); SET_END_LOCATION_FROM_NODE(a
            	            , node); node = a
            	            ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop21;
            	    break;
                }
            }
            loop21: ;


        }

    }
    goto rulepost_exEx;
    rulepost_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::assignment_or_expression()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    scripting::expression* a;
    scripting::assign_type b;
    scripting::expression* c;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_expr_in_assignment_or_expression3048);
            a=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleassignment_or_expressionEx;
            }


            {
                int alt22=2;
                switch ( this->LA(1) )
                {
                case 54:
                case 57:
                case 59:
                case 61:
                case 64:
                case 67:
                	{
                		alt22=1;
                	}
                    break;
                case RBRACKET:
                case SEMICOLON:
                	{
                		alt22=2;
                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 22 );
                    ex->set_state( 0 );


                    goto ruleassignment_or_expressionEx;

                }

                switch (alt22)
                {
            	case 1:
            	    {
            	        {
            	            this->followPush(FOLLOW_assign_type_in_assignment_or_expression3080);
            	            b=assign_type();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleassignment_or_expressionEx;
            	            }


            	            this->followPush(FOLLOW_expr_in_assignment_or_expression3084);
            	            c=expr();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleassignment_or_expressionEx;
            	            }


            	            {

            	                                  scripting::lvalue* lval = m_allocator->construct<scripting::lvalue>(m_allocator, a
            	                );
            	                                  SET_LOCATION_FROM_NODE(lval, c
            	                );

            	                                  scripting::assignment_instruction* assign = m_allocator->construct<scripting::assignment_instruction>(m_allocator, lval);
            	                                  SET_LOCATION_FROM_NODE(assign , lval);

            	                                  assign->add_value(b
            	                , c
            	                );
            	                                  SET_END_LOCATION_FROM_NODE(assign, c
            	                );
            	                                  node = assign;

            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	            {

            	                                  node = m_allocator->construct<scripting::expression_instruction>(m_allocator, a
            	                );
            	                                  SET_LOCATION_FROM_NODE(node, a
            	                );

            	            }


            	        }


            	    }
            	    break;

                }
            }

        }

    }
    goto ruleassignment_or_expressionEx;
    ruleassignment_or_expressionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::constant_expression*
WNScriptASTParser::constant()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::constant_expression* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* b = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    const ImplTraits::CommonTokenType* d = NULL;
    const ImplTraits::CommonTokenType* e = NULL;
    const ImplTraits::CommonTokenType* g = NULL;
    const ImplTraits::CommonTokenType* h = NULL;
    const ImplTraits::CommonTokenType* i = NULL;
    scripting::type* f;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt23;

            alt23=6;

            switch ( this->LA(1) )
            {
            case INT:
            	{
            		alt23=1;
            	}
                break;
            case FLOAT:
            	{
            		alt23=2;
            	}
                break;
            case CHAR:
            	{
            		alt23=3;
            	}
                break;
            case STRING:
            	{
            		alt23=4;
            	}
                break;
            case BOOL:
            	{
            		alt23=5;
            	}
                break;
            case BOOL_TYPE:
            case CHAR_TYPE:
            case FLOAT_TYPE:
            case INT_TYPE:
            case VOID_TYPE:
            	{
            		alt23=6;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 23 );
                ex->set_state( 0 );


                goto ruleconstantEx;

            }

            switch (alt23)
            {
        	case 1:
        	    {
        	        a =  this->matchToken(INT, &FOLLOW_INT_in_constant3150);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::int_type); SET_LOCATION(type_node, a); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, (a->getText()).c_str()); SET_LOCATION(node, a);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        b =  this->matchToken(FLOAT, &FOLLOW_FLOAT_in_constant3168);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::float_type); SET_LOCATION(type_node, b); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, (b->getText()).c_str()); SET_LOCATION(node, b);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        c =  this->matchToken(CHAR, &FOLLOW_CHAR_in_constant3184);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::char_type); SET_LOCATION(type_node, c); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, (c->getText()).c_str()); SET_LOCATION(node, c);
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        d =  this->matchToken(STRING, &FOLLOW_STRING_in_constant3201);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::string_type); SET_LOCATION(type_node, d); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, (d->getText()).c_str()); SET_LOCATION(node, d);
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        e =  this->matchToken(BOOL, &FOLLOW_BOOL_in_constant3216);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::bool_type); SET_LOCATION(type_node, e); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, (e->getText()).c_str()); SET_LOCATION(node, e);
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_constant3233);
        	        f=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        g =  this->matchToken(LBRACE, &FOLLOW_LBRACE_in_constant3237);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        h =  this->matchToken(STRING, &FOLLOW_STRING_in_constant3241);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        i =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_constant3245);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::constant_expression>(m_allocator, f
        	            , (h->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            f
        	            ); SET_END_LOCATION(node, i);
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleconstantEx;
    ruleconstantEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression *
WNScriptASTParser::prim_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression * node;


    const ImplTraits::CommonTokenType* ba = NULL;
    const ImplTraits::CommonTokenType* bb = NULL;
    const ImplTraits::CommonTokenType* d = NULL;
    const ImplTraits::CommonTokenType* ID25 = NULL;
    scripting::expression* a;
    scripting::constant_expression* b;
    scripting::type* c;
    scripting::cast_expression* f;
    scripting::array_allocation_expression* g;
    scripting::type* e;
    scripting::struct_allocation_expression* h;
    scripting::type* i;
    scripting::struct_allocation_expression* j;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt25;

            alt25=7;

            switch ( this->LA(1) )
            {
            case ID:
            	{
            		alt25=1;
            	}
                break;
            case LBRACKET:
            	{
            		alt25=2;
            	}
                break;
            case BOOL:
            case CHAR:
            case FLOAT:
            case INT:
            case STRING:
            	{
            		alt25=3;
            	}
                break;
            case VOID_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt25=3;
            			}
            		    break;
            		case LBRACKET:
            		case LSQBRACKET:
            			{
            				alt25=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 25 );
            		    ex->set_state( 4 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case INT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt25=3;
            			}
            		    break;
            		case LBRACKET:
            		case LSQBRACKET:
            			{
            				alt25=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 25 );
            		    ex->set_state( 5 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case FLOAT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt25=3;
            			}
            		    break;
            		case LBRACKET:
            		case LSQBRACKET:
            			{
            				alt25=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 25 );
            		    ex->set_state( 6 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case CHAR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt25=3;
            			}
            		    break;
            		case LBRACKET:
            		case LSQBRACKET:
            			{
            				alt25=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 25 );
            		    ex->set_state( 7 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case BOOL_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt25=3;
            			}
            		    break;
            		case LBRACKET:
            		case LSQBRACKET:
            			{
            				alt25=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 25 );
            		    ex->set_state( 8 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case NULLTOK:
            	{
            		alt25=5;
            	}
                break;
            case STRING_TYPE:
            case TYPE:
            	{
            		alt25=6;
            	}
                break;
            case SHARED_REF:
            	{
            		alt25=7;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 25 );
                ex->set_state( 0 );


                goto ruleprim_exEx;

            }

            switch (alt25)
            {
        	case 1:
        	    {
        	        ID25 =  this->matchToken(ID, &FOLLOW_ID_in_prim_ex3275);
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::id_expression>(m_allocator, (ID25->getText()).c_str()); SET_LOCATION(node, ID25);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        ba =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_prim_ex3290);
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_prim_ex3294);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        bb =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_prim_ex3298);
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	            node = a
        	            ; SET_LOCATION(node, ba); SET_END_LOCATION(node, bb);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        this->followPush(FOLLOW_constant_in_prim_ex3313);
        	        b=constant();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	            node = b
        	            ;
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_prim_ex3328);
        	        c=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	            int alt24=2;
        	            switch ( this->LA(1) )
        	            {
        	            case LBRACKET:
        	            	{
        	            		alt24=1;
        	            	}
        	                break;
        	            case LSQBRACKET:
        	            	{
        	            		alt24=2;
        	            	}
        	                break;

        	            default:
        	                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                ex->set_decisionNum( 24 );
        	                ex->set_state( 0 );


        	                goto ruleprim_exEx;

        	            }

        	            switch (alt24)
        	            {
        	        	case 1:
        	        	    {
        	        	        {
        	        	            this->followPush(FOLLOW_cast_in_prim_ex3348);
        	        	            f=cast();

        	        	            this->followPop();
        	        	            if  (this->hasException())
        	        	            {
        	        	                goto ruleprim_exEx;
        	        	            }


        	        	        }


        	        	        {
        	        	             f
        	        	            ->set_type(c
        	        	            ); node=f
        	        	            ; SET_START_LOCATION_FROM_NODE(node, c
        	        	            );
        	        	        }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    {
        	        	        {
        	        	            this->followPush(FOLLOW_arrayInit_in_prim_ex3371);
        	        	            g=arrayInit();

        	        	            this->followPop();
        	        	            if  (this->hasException())
        	        	            {
        	        	                goto ruleprim_exEx;
        	        	            }


        	        	        }


        	        	        {
        	        	             g
        	        	            ->set_type(c
        	        	            ); node=g
        	        	            ; SET_START_LOCATION_FROM_NODE(node, c
        	        	            );
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 5:
        	    {
        	        d =  this->matchToken(NULLTOK, &FOLLOW_NULLTOK_in_prim_ex3400);
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::null_allocation_expression>(m_allocator); SET_LOCATION(node, d);
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	        this->followPush(FOLLOW_objectType_in_prim_ex3414);
        	        e=objectType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        this->followPush(FOLLOW_structInit_in_prim_ex3418);
        	        h=structInit();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	             e
        	            ->set_reference_type(scripting::reference_type::unique); h
        	            ->set_type(e
        	            ); node=h
        	            ; SET_START_LOCATION_FROM_NODE(node, e
        	            );
        	        }


        	    }
        	    break;
        	case 7:
        	    {
        	         this->matchToken(SHARED_REF, &FOLLOW_SHARED_REF_in_prim_ex3430);
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        this->followPush(FOLLOW_objectType_in_prim_ex3434);
        	        i=objectType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        this->followPush(FOLLOW_structInit_in_prim_ex3438);
        	        j=structInit();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	             i
        	            ->set_reference_type(scripting::reference_type::shared); j
        	            ->set_type(i
        	            ); node=j
        	            ; SET_START_LOCATION_FROM_NODE(node, i
        	            );
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleprim_exEx;
    ruleprim_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::cast_expression*
WNScriptASTParser::cast()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::cast_expression* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    scripting::expression* b;





      node = nullptr;



    {
        {
            a =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_cast3467);
            if  (this->hasException())
            {
                goto rulecastEx;
            }


            this->followPush(FOLLOW_expr_in_cast3471);
            b=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecastEx;
            }


            c =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_cast3475);
            if  (this->hasException())
            {
                goto rulecastEx;
            }


            {
                 node = m_allocator->construct<scripting::cast_expression>(m_allocator, b
                ); SET_LOCATION(node, a); SET_END_LOCATION(node, c);
            }


        }

    }
    goto rulecastEx;
    rulecastEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::struct_allocation_expression*
WNScriptASTParser::structInit()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::struct_allocation_expression* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* b = NULL;






        node = nullptr;



    {
        {
            a =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_structInit3504);
            if  (this->hasException())
            {
                goto rulestructInitEx;
            }


            b =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_structInit3508);
            if  (this->hasException())
            {
                goto rulestructInitEx;
            }


            {
                 node = m_allocator->construct<scripting::struct_allocation_expression>(m_allocator); SET_LOCATION(node, a); SET_END_LOCATION(node, b);
            }


        }

    }
    goto rulestructInitEx;
    rulestructInitEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::array_allocation_expression*
WNScriptASTParser::arrayInit()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::array_allocation_expression* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    scripting::expression* e;
    scripting::expression* b;





        node = m_allocator->construct<scripting::array_allocation_expression>(m_allocator);



    {
        {
            {
                int alt29=2;
                switch ( this->LA(1) )
                {
                case LSQBRACKET:
                	{
                		switch ( this->LA(2) )
                		{
                		case RSQBRACKET:
                			{
                				alt29=2;
                			}
                		    break;
                		case BOOL:
                		case BOOL_TYPE:
                		case CHAR:
                		case CHAR_TYPE:
                		case DOUBDEC:
                		case DOUBINC:
                		case FLOAT:
                		case FLOAT_TYPE:
                		case ID:
                		case INT:
                		case INT_TYPE:
                		case LBRACKET:
                		case NULLTOK:
                		case SHARED_REF:
                		case STRING:
                		case STRING_TYPE:
                		case TYPE:
                		case VOID_TYPE:
                		case 60:
                			{
                				alt29=1;
                			}
                		    break;

                		default:
                		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 29 );
                		    ex->set_state( 1 );


                		    goto rulearrayInitEx;

                		}

                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 29 );
                    ex->set_state( 0 );


                    goto rulearrayInitEx;

                }

                switch (alt29)
                {
            	case 1:
            	    {
            	        {
            	            {
            	                int cnt26=0;

            	                for (;;)
            	                {
            	                    int alt26=2;
            	            	switch ( this->LA(1) )
            	            	{
            	            	case LSQBRACKET:
            	            		{
            	            			switch ( this->LA(2) )
            	            			{
            	            			case BOOL:
            	            			case BOOL_TYPE:
            	            			case CHAR:
            	            			case CHAR_TYPE:
            	            			case DOUBDEC:
            	            			case DOUBINC:
            	            			case FLOAT:
            	            			case FLOAT_TYPE:
            	            			case ID:
            	            			case INT:
            	            			case INT_TYPE:
            	            			case LBRACKET:
            	            			case NULLTOK:
            	            			case SHARED_REF:
            	            			case STRING:
            	            			case STRING_TYPE:
            	            			case TYPE:
            	            			case VOID_TYPE:
            	            			case 60:
            	            				{
            	            					alt26=1;
            	            				}
            	            			    break;

            	            			}

            	            		}
            	            	    break;

            	            	}

            	            	switch (alt26)
            	            	{
            	            	    case 1:
            	            	        {
            	            	             this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_arrayInit3570);
            	            	            if  (this->hasException())
            	            	            {
            	            	                goto rulearrayInitEx;
            	            	            }


            	            	            this->followPush(FOLLOW_expr_in_arrayInit3574);
            	            	            e=expr();

            	            	            this->followPop();
            	            	            if  (this->hasException())
            	            	            {
            	            	                goto rulearrayInitEx;
            	            	            }


            	            	             this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_arrayInit3576);
            	            	            if  (this->hasException())
            	            	            {
            	            	                goto rulearrayInitEx;
            	            	            }


            	            	            {
            	            	                 node->add_expression(e
            	            	                );
            	            	            }


            	            	        }
            	            	        break;

            	            	    default:

            	            		if ( cnt26 >= 1 )
            	            		{
            	            		    goto loop26;
            	            		}


            	            		new ANTLR_Exception< WNScriptASTParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            	            		goto rulearrayInitEx;
            	            	}
            	            	cnt26++;
            	                }
            	                loop26: ;
            	            }


            	            for (;;)
            	            {
            	                int alt27=2;
            	                switch ( this->LA(1) )
            	                {
            	                case LSQBRACKET:
            	                	{
            	                		alt27=1;
            	                	}
            	                    break;

            	                }

            	                switch (alt27)
            	                {
            	            	case 1:
            	            	    {
            	            	         this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_arrayInit3600);
            	            	        if  (this->hasException())
            	            	        {
            	            	            goto rulearrayInitEx;
            	            	        }


            	            	         this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_arrayInit3602);
            	            	        if  (this->hasException())
            	            	        {
            	            	            goto rulearrayInitEx;
            	            	        }


            	            	        {
            	            	             node->add_level();
            	            	        }


            	            	    }
            	            	    break;

            	            	default:
            	            	    goto loop27;
            	            	    break;
            	                }
            	            }
            	            loop27: ;


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	            int cnt28=0;

            	            for (;;)
            	            {
            	                int alt28=2;
            	        	switch ( this->LA(1) )
            	        	{
            	        	case LSQBRACKET:
            	        		{
            	        			alt28=1;
            	        		}
            	        	    break;

            	        	}

            	        	switch (alt28)
            	        	{
            	        	    case 1:
            	        	        {
            	        	             this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_arrayInit3640);
            	        	            if  (this->hasException())
            	        	            {
            	        	                goto rulearrayInitEx;
            	        	            }


            	        	             this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_arrayInit3642);
            	        	            if  (this->hasException())
            	        	            {
            	        	                goto rulearrayInitEx;
            	        	            }


            	        	            {
            	        	                 node->add_level();
            	        	            }


            	        	        }
            	        	        break;

            	        	    default:

            	        		if ( cnt28 >= 1 )
            	        		{
            	        		    goto loop28;
            	        		}


            	        		new ANTLR_Exception< WNScriptASTParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            	        		goto rulearrayInitEx;
            	        	}
            	        	cnt28++;
            	            }
            	            loop28: ;
            	        }

            	    }
            	    break;

                }
            }

            {
                int alt30=2;
                switch ( this->LA(1) )
                {
                case LBRACKET:
                	{
                		switch ( this->LA(2) )
                		{
                		case RBRACKET:
                			{
                				alt30=1;
                			}
                		    break;
                		case BOOL:
                		case BOOL_TYPE:
                		case CHAR:
                		case CHAR_TYPE:
                		case DOUBDEC:
                		case DOUBINC:
                		case FLOAT:
                		case FLOAT_TYPE:
                		case ID:
                		case INT:
                		case INT_TYPE:
                		case LBRACKET:
                		case NULLTOK:
                		case SHARED_REF:
                		case STRING:
                		case STRING_TYPE:
                		case TYPE:
                		case VOID_TYPE:
                		case 60:
                			{
                				alt30=2;
                			}
                		    break;

                		default:
                		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 30 );
                		    ex->set_state( 1 );


                		    goto rulearrayInitEx;

                		}

                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 30 );
                    ex->set_state( 0 );


                    goto rulearrayInitEx;

                }

                switch (alt30)
                {
            	case 1:
            	    {
            	        {
            	             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_arrayInit3683);
            	            if  (this->hasException())
            	            {
            	                goto rulearrayInitEx;
            	            }


            	            a =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_arrayInit3687);
            	            if  (this->hasException())
            	            {
            	                goto rulearrayInitEx;
            	            }


            	            {
            	                 SET_LOCATION(node, a);
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_arrayInit3721);
            	            if  (this->hasException())
            	            {
            	                goto rulearrayInitEx;
            	            }


            	            this->followPush(FOLLOW_expr_in_arrayInit3725);
            	            b=expr();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulearrayInitEx;
            	            }


            	            c =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_arrayInit3729);
            	            if  (this->hasException())
            	            {
            	                goto rulearrayInitEx;
            	            }


            	            {
            	                 node->set_copy_initializer(b); SET_LOCATION(node, c);
            	            }


            	        }


            	    }
            	    break;

                }
            }

        }

    }
    goto rulearrayInitEx;
    rulearrayInitEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::declaration*
WNScriptASTParser::declaration()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::declaration* node;


    scripting::parameter* a;
    scripting::expression* c;





        node =  m_allocator->construct<scripting::declaration>(m_allocator);



    {
        {
            this->followPush(FOLLOW_param_in_declaration3773);
            a=param();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledeclarationEx;
            }


            {
                 node->set_parameter(a
                ); SET_LOCATION_FROM_NODE(node, a
                );
            }


            {
                {
                     this->matchToken(67, &FOLLOW_67_in_declaration3808);
                    if  (this->hasException())
                    {
                        goto ruledeclarationEx;
                    }


                    {
                        {
                            this->followPush(FOLLOW_expr_in_declaration3815);
                            c=expr();

                            this->followPop();
                            if  (this->hasException())
                            {
                                goto ruledeclarationEx;
                            }


                        }


                        {
                             node->add_expression_initializer(c
                            ); SET_END_LOCATION_FROM_NODE(node, c
                            );
                        }


                    }


                }


            }


        }

    }
    goto ruledeclarationEx;
    ruledeclarationEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::instructionScalar()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    scripting::declaration* declaration26;
    scripting::instruction* assignment_or_expression27;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt31;

            alt31=2;

            alt31 = cdfa31.predict(this, this->get_rec(), this->get_istream(), cdfa31 );
            if  (this->hasException())
            {
                goto ruleinstructionScalarEx;
            }

            switch (alt31)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_declaration_in_instructionScalar3864);
        	        declaration26=declaration();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionScalarEx;
        	        }


        	        {
        	            node = declaration26
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_assignment_or_expression_in_instructionScalar3877);
        	        assignment_or_expression27=assignment_or_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionScalarEx;
        	        }


        	        {
        	            node = assignment_or_expression27
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleinstructionScalarEx;
    ruleinstructionScalarEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::continue_instruction*
WNScriptASTParser::continueInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::continue_instruction* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* b = NULL;






      node = nullptr;



    {
        {
            a =  this->matchToken(CONTINUE, &FOLLOW_CONTINUE_in_continueInst3907);
            if  (this->hasException())
            {
                goto rulecontinueInstEx;
            }


            b =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_continueInst3911);
            if  (this->hasException())
            {
                goto rulecontinueInstEx;
            }


            {
                 node = m_allocator->construct<scripting::continue_instruction>(m_allocator); SET_LOCATION(node, a); SET_END_LOCATION(node, b);
            }


        }

    }
    goto rulecontinueInstEx;
    rulecontinueInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::break_instruction*
WNScriptASTParser::breakInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::break_instruction* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* b = NULL;






        node = nullptr;



    {
        {
            a =  this->matchToken(BREAK, &FOLLOW_BREAK_in_breakInst3937);
            if  (this->hasException())
            {
                goto rulebreakInstEx;
            }


            b =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_breakInst3941);
            if  (this->hasException())
            {
                goto rulebreakInstEx;
            }


            {
                 node = m_allocator->construct<scripting::break_instruction>(m_allocator); SET_LOCATION(node, a); SET_END_LOCATION(node, b);
            }


        }

    }
    goto rulebreakInstEx;
    rulebreakInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::return_instruction*
WNScriptASTParser::returnInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::return_instruction* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* b = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    const ImplTraits::CommonTokenType* d = NULL;
    scripting::expression* expr28;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt32;

            alt32=2;

            switch ( this->LA(1) )
            {
            case RETURN:
            	{
            		switch ( this->LA(2) )
            		{
            		case SEMICOLON:
            			{
            				alt32=2;
            			}
            		    break;
            		case BOOL:
            		case BOOL_TYPE:
            		case CHAR:
            		case CHAR_TYPE:
            		case DOUBDEC:
            		case DOUBINC:
            		case FLOAT:
            		case FLOAT_TYPE:
            		case ID:
            		case INT:
            		case INT_TYPE:
            		case LBRACKET:
            		case NULLTOK:
            		case SHARED_REF:
            		case STRING:
            		case STRING_TYPE:
            		case TYPE:
            		case VOID_TYPE:
            		case 60:
            			{
            				alt32=1;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 32 );
            		    ex->set_state( 1 );


            		    goto rulereturnInstEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 32 );
                ex->set_state( 0 );


                goto rulereturnInstEx;

            }

            switch (alt32)
            {
        	case 1:
        	    {
        	        a =  this->matchToken(RETURN, &FOLLOW_RETURN_in_returnInst3968);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_returnInst3970);
        	        expr28=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        b =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_returnInst3974);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::return_instruction>(m_allocator, expr28
        	            ); SET_LOCATION(node, a); SET_END_LOCATION(node, b);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        c =  this->matchToken(RETURN, &FOLLOW_RETURN_in_returnInst3988);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        d =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_returnInst3992);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::return_instruction>(m_allocator); SET_LOCATION(node, c); SET_END_LOCATION(node, d);
        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulereturnInstEx;
    rulereturnInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::whileInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    const ImplTraits::CommonTokenType* WHILE31 = NULL;
    scripting::expression* expr29;
    scripting::instruction_list* instruction_list30;





        node = nullptr;



    {
        {
            WHILE31 =  this->matchToken(WHILE, &FOLLOW_WHILE_in_whileInst4025);
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_whileInst4027);
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


            this->followPush(FOLLOW_expr_in_whileInst4029);
            expr29=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_whileInst4031);
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


            this->followPush(FOLLOW_instruction_list_in_whileInst4033);
            instruction_list30=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


            {
                 node = m_allocator->construct<scripting::while_instruction>(m_allocator, expr29
                , instruction_list30
                ); SET_LOCATION(node, WHILE31); SET_END_LOCATION_FROM_NODE(node,
                instruction_list30
                );
            }


        }

    }
    goto rulewhileInstEx;
    rulewhileInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::doInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    const ImplTraits::CommonTokenType* DO34 = NULL;
    const ImplTraits::CommonTokenType* SEMICOLON35 = NULL;
    scripting::expression* expr32;
    scripting::instruction_list* instruction_list33;





        node = nullptr;



    {
        {
            DO34 =  this->matchToken(DO, &FOLLOW_DO_in_doInst4069);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            this->followPush(FOLLOW_instruction_list_in_doInst4071);
            instruction_list33=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


             this->matchToken(WHILE, &FOLLOW_WHILE_in_doInst4073);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_doInst4075);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            this->followPush(FOLLOW_expr_in_doInst4077);
            expr32=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_doInst4079);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            SEMICOLON35 =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_doInst4081);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            {
                node = m_allocator->construct<scripting::do_instruction>(m_allocator, expr32
                , instruction_list33
                ); SET_LOCATION(node, DO34); SET_END_LOCATION(node, SEMICOLON35);
            }


        }

    }
    goto ruledoInstEx;
    ruledoInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::for_instruction*
WNScriptASTParser::forInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::for_instruction* node;


    const ImplTraits::CommonTokenType* FOR36 = NULL;
    scripting::instruction* a;
    scripting::expression* b;
    scripting::instruction* c;
    scripting::instruction_list* d;





        node =  m_allocator->construct<scripting::for_instruction>(m_allocator);



    {
        {
            FOR36 =  this->matchToken(FOR, &FOLLOW_FOR_in_forInst4113);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_forInst4115);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            {
                 SET_LOCATION(node, FOR36);
            }


            {
                int alt33=2;
                switch ( this->LA(1) )
                {
                    case BOOL:
                    case BOOL_TYPE:
                    case CHAR:
                    case CHAR_TYPE:
                    case DOUBDEC:
                    case DOUBINC:
                    case FLOAT:
                    case FLOAT_TYPE:
                    case ID:
                    case INT:
                    case INT_TYPE:
                    case LBRACKET:
                    case NULLTOK:
                    case SHARED_REF:
                    case STRING:
                    case STRING_TYPE:
                    case TYPE:
                    case VOID_TYPE:
                    case WEAK_REF:
                    case 60:
                    	{
                    		alt33=1;
                    	}
                        break;
                }

                switch (alt33)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_instructionScalar_in_forInst4143);
            	        a=instructionScalar();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleforInstEx;
            	        }


            	        {
            	            node->add_initializer(a
            	            );
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_forInst4149);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            {
                int alt34=2;
                switch ( this->LA(1) )
                {
                    case BOOL:
                    case BOOL_TYPE:
                    case CHAR:
                    case CHAR_TYPE:
                    case DOUBDEC:
                    case DOUBINC:
                    case FLOAT:
                    case FLOAT_TYPE:
                    case ID:
                    case INT:
                    case INT_TYPE:
                    case LBRACKET:
                    case NULLTOK:
                    case SHARED_REF:
                    case STRING:
                    case STRING_TYPE:
                    case TYPE:
                    case VOID_TYPE:
                    case 60:
                    	{
                    		alt34=1;
                    	}
                        break;
                }

                switch (alt34)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_expr_in_forInst4174);
            	        b=expr();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleforInstEx;
            	        }


            	        {
            	            node->add_condition(b
            	            );
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_forInst4188);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            {
                int alt35=2;
                switch ( this->LA(1) )
                {
                    case BOOL:
                    case BOOL_TYPE:
                    case CHAR:
                    case CHAR_TYPE:
                    case DOUBDEC:
                    case DOUBINC:
                    case FLOAT:
                    case FLOAT_TYPE:
                    case ID:
                    case INT:
                    case INT_TYPE:
                    case LBRACKET:
                    case NULLTOK:
                    case SHARED_REF:
                    case STRING:
                    case STRING_TYPE:
                    case TYPE:
                    case VOID_TYPE:
                    case WEAK_REF:
                    case 60:
                    	{
                    		alt35=1;
                    	}
                        break;
                }

                switch (alt35)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_instructionScalar_in_forInst4213);
            	        c=instructionScalar();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleforInstEx;
            	        }


            	        {
            	            node->add_post_op(c
            	            );
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_forInst4219);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            {
                this->followPush(FOLLOW_instruction_list_in_forInst4244);
                d=instruction_list();

                this->followPop();
                if  (this->hasException())
                {
                    goto ruleforInstEx;
                }


                {
                    node->add_body(d
                    ); SET_END_LOCATION_FROM_NODE(node, d
                    );
                }


            }


        }

    }
    goto ruleforInstEx;
    ruleforInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::else_if_instruction*
WNScriptASTParser::elsemiddle()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::else_if_instruction* node;


    const ImplTraits::CommonTokenType* ELSE39 = NULL;
    scripting::expression* expr37;
    scripting::instruction_list* instruction_list38;





        node = nullptr;



    {
        {
            ELSE39 =  this->matchToken(ELSE, &FOLLOW_ELSE_in_elsemiddle4292);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


             this->matchToken(IF, &FOLLOW_IF_in_elsemiddle4294);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_elsemiddle4296);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


            this->followPush(FOLLOW_expr_in_elsemiddle4298);
            expr37=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_elsemiddle4300);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


            this->followPush(FOLLOW_instruction_list_in_elsemiddle4302);
            instruction_list38=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


            {
                 node = m_allocator->construct<scripting::else_if_instruction>(m_allocator, expr37
                , instruction_list38
                ); SET_LOCATION(node, ELSE39); SET_END_LOCATION_FROM_NODE(node,
                instruction_list38
                );
            }


        }

    }
    goto ruleelsemiddleEx;
    ruleelsemiddleEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction_list*
WNScriptASTParser::endif()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction_list* node;


    scripting::instruction_list* instruction_list40;





        node = nullptr;



    {
        {
             this->matchToken(ELSE, &FOLLOW_ELSE_in_endif4335);
            if  (this->hasException())
            {
                goto ruleendifEx;
            }


            this->followPush(FOLLOW_instruction_list_in_endif4337);
            instruction_list40=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleendifEx;
            }


            {
                node = instruction_list40
                ;
            }


        }

    }
    goto ruleendifEx;
    ruleendifEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::if_instruction*
WNScriptASTParser::ifInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::if_instruction* node;


    const ImplTraits::CommonTokenType* IF43 = NULL;
    scripting::expression* expr41;
    scripting::instruction_list* instruction_list42;
    scripting::else_if_instruction* elsemiddle44;
    scripting::instruction_list* endif45;





        node = nullptr;



    {
        {
            IF43 =  this->matchToken(IF, &FOLLOW_IF_in_ifInst4367);
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_ifInst4369);
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


            this->followPush(FOLLOW_expr_in_ifInst4371);
            expr41=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_ifInst4373);
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


            this->followPush(FOLLOW_instruction_list_in_ifInst4375);
            instruction_list42=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


            {
                node = m_allocator->construct<scripting::if_instruction>(m_allocator, expr41
                , instruction_list42
                ); SET_LOCATION(node, IF43); SET_END_LOCATION_FROM_NODE(node,
                instruction_list42
                );
            }



            for (;;)
            {
                int alt36=2;
                switch ( this->LA(1) )
                {
                case ELSE:
                	{
                		switch ( this->LA(2) )
                		{
                		case IF:
                			{
                				alt36=1;
                			}
                		    break;

                		}

                	}
                    break;

                }

                switch (alt36)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_elsemiddle_in_ifInst4392);
            	        elsemiddle44=elsemiddle();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleifInstEx;
            	        }


            	        {
            	            node->add_else_if(elsemiddle44
            	            ); SET_END_LOCATION_FROM_NODE(node, elsemiddle44
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop36;
            	    break;
                }
            }
            loop36: ;


            {
                int alt37=2;
                switch ( this->LA(1) )
                {
                    case ELSE:
                    	{
                    		alt37=1;
                    	}
                        break;
                }

                switch (alt37)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_endif_in_ifInst4412);
            	        endif45=endif();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleifInstEx;
            	        }


            	        {
            	            node->add_else(endif45
            	            ); SET_LOCATION(node, IF43); SET_END_LOCATION_FROM_NODE(node,
            	            endif45
            	            );
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    goto ruleifInstEx;
    ruleifInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::instruction()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    scripting::if_instruction* ifInst46;
    scripting::instruction* whileInst47;
    scripting::instruction* doInst48;
    scripting::for_instruction* forInst49;
    scripting::instruction* instructionScalar50;
    scripting::break_instruction* breakInst51;
    scripting::continue_instruction* continueInst52;
    scripting::return_instruction* returnInst53;
    scripting::instruction_list* instruction_list54;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt38;

            alt38=9;

            switch ( this->LA(1) )
            {
            case IF:
            	{
            		alt38=1;
            	}
                break;
            case WHILE:
            	{
            		alt38=2;
            	}
                break;
            case DO:
            	{
            		alt38=3;
            	}
                break;
            case FOR:
            	{
            		alt38=4;
            	}
                break;
            case BOOL:
            case BOOL_TYPE:
            case CHAR:
            case CHAR_TYPE:
            case DOUBDEC:
            case DOUBINC:
            case FLOAT:
            case FLOAT_TYPE:
            case ID:
            case INT:
            case INT_TYPE:
            case LBRACKET:
            case NULLTOK:
            case SHARED_REF:
            case STRING:
            case STRING_TYPE:
            case TYPE:
            case VOID_TYPE:
            case WEAK_REF:
            case 60:
            	{
            		alt38=5;
            	}
                break;
            case BREAK:
            	{
            		alt38=6;
            	}
                break;
            case CONTINUE:
            	{
            		alt38=7;
            	}
                break;
            case RETURN:
            	{
            		alt38=8;
            	}
                break;
            case LBRACE:
            	{
            		alt38=9;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 38 );
                ex->set_state( 0 );


                goto ruleinstructionEx;

            }

            switch (alt38)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_ifInst_in_instruction4446);
        	        ifInst46=ifInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	             node = ifInst46
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_whileInst_in_instruction4467);
        	        whileInst47=whileInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = whileInst47
        	            ;
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        this->followPush(FOLLOW_doInst_in_instruction4484);
        	        doInst48=doInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = doInst48
        	            ;
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        this->followPush(FOLLOW_forInst_in_instruction4504);
        	        forInst49=forInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = forInst49
        	            ;
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        this->followPush(FOLLOW_instructionScalar_in_instruction4524);
        	        instructionScalar50=instructionScalar();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	         this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_instruction4526);
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = instructionScalar50
        	            ;
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	        this->followPush(FOLLOW_breakInst_in_instruction4539);
        	        breakInst51=breakInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = breakInst51
        	            ;
        	        }


        	    }
        	    break;
        	case 7:
        	    {
        	        this->followPush(FOLLOW_continueInst_in_instruction4552);
        	        continueInst52=continueInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = continueInst52
        	            ;
        	        }


        	    }
        	    break;
        	case 8:
        	    {
        	        this->followPush(FOLLOW_returnInst_in_instruction4565);
        	        returnInst53=returnInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = returnInst53
        	            ;
        	        }


        	    }
        	    break;
        	case 9:
        	    {
        	        this->followPush(FOLLOW_instruction_list_in_instruction4578);
        	        instruction_list54=instruction_list();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	             node = instruction_list54
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleinstructionEx;
    ruleinstructionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction_list*
WNScriptASTParser::instruction_list()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction_list* node;


    const ImplTraits::CommonTokenType* lb = NULL;
    const ImplTraits::CommonTokenType* rb = NULL;
    scripting::instruction* b;





        node = m_allocator->construct<scripting::instruction_list>(m_allocator);



    {
        {
            lb =  this->matchToken(LBRACE, &FOLLOW_LBRACE_in_instruction_list4610);
            if  (this->hasException())
            {
                goto ruleinstruction_listEx;
            }



            for (;;)
            {
                int alt39=2;
                switch ( this->LA(1) )
                {
                case BOOL:
                case BOOL_TYPE:
                case BREAK:
                case CHAR:
                case CHAR_TYPE:
                case CONTINUE:
                case DO:
                case DOUBDEC:
                case DOUBINC:
                case FLOAT:
                case FLOAT_TYPE:
                case FOR:
                case ID:
                case IF:
                case INT:
                case INT_TYPE:
                case LBRACE:
                case LBRACKET:
                case NULLTOK:
                case RETURN:
                case SHARED_REF:
                case STRING:
                case STRING_TYPE:
                case TYPE:
                case VOID_TYPE:
                case WEAK_REF:
                case WHILE:
                case 60:
                	{
                		alt39=1;
                	}
                    break;

                }

                switch (alt39)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_instruction_in_instruction_list4627);
            	        b=instruction();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleinstruction_listEx;
            	        }


            	        {
            	            node->add_instruction(b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop39;
            	    break;
                }
            }
            loop39: ;


            rb =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_instruction_list4644);
            if  (this->hasException())
            {
                goto ruleinstruction_listEx;
            }


            {

                          SET_LOCATION(node, lb); SET_END_LOCATION(node, rb);

            }


        }

    }
    goto ruleinstruction_listEx;
    ruleinstruction_listEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::function*
WNScriptASTParser::function()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::function* node;


    scripting::parameter* param55;
    scripting::parameter_list* parameterList56;
    scripting::instruction_list* instruction_list57;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_param_in_function4674);
            param55=param();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefunctionEx;
            }


            this->followPush(FOLLOW_parameterList_in_function4676);
            parameterList56=parameterList();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefunctionEx;
            }


            this->followPush(FOLLOW_instruction_list_in_function4678);
            instruction_list57=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefunctionEx;
            }


            {
                 node = m_allocator->construct<scripting::function>(m_allocator, param55
                , parameterList56
                , instruction_list57
                ); SET_LOCATION_FROM_NODE(node, param55
                ); SET_END_LOCATION_FROM_NODE(node, instruction_list57
                );
            }


        }

    }
    goto rulefunctionEx;
    rulefunctionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::struct_definition*
WNScriptASTParser::structDecl()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::struct_definition* node;


    const ImplTraits::CommonTokenType* TYPE58 = NULL;
    const ImplTraits::CommonTokenType* STRUCT59 = NULL;
    const ImplTraits::CommonTokenType* RBRACE60 = NULL;
    scripting::declaration* a;





        node = nullptr;



    {
        {
            STRUCT59 =  this->matchToken(STRUCT, &FOLLOW_STRUCT_in_structDecl4708);
            if  (this->hasException())
            {
                goto rulestructDeclEx;
            }


            TYPE58 =  this->matchToken(TYPE, &FOLLOW_TYPE_in_structDecl4710);
            if  (this->hasException())
            {
                goto rulestructDeclEx;
            }


            {
                node= m_allocator->construct<scripting::struct_definition>(m_allocator, (TYPE58->getText()).c_str()); SET_LOCATION(node, STRUCT59);
            }


             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_structDecl4726);
            if  (this->hasException())
            {
                goto rulestructDeclEx;
            }



            for (;;)
            {
                int alt40=2;
                switch ( this->LA(1) )
                {
                case BOOL_TYPE:
                case CHAR_TYPE:
                case FLOAT_TYPE:
                case INT_TYPE:
                case SHARED_REF:
                case STRING_TYPE:
                case TYPE:
                case VOID_TYPE:
                case WEAK_REF:
                	{
                		alt40=1;
                	}
                    break;

                }

                switch (alt40)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_declaration_in_structDecl4731);
            	        a=declaration();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulestructDeclEx;
            	        }


            	        {
            	             node->add_struct_elem(a
            	            );
            	        }


            	         this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_structDecl4735);
            	        if  (this->hasException())
            	        {
            	            goto rulestructDeclEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop40;
            	    break;
                }
            }
            loop40: ;


            RBRACE60 =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_structDecl4740);
            if  (this->hasException())
            {
                goto rulestructDeclEx;
            }


            {
                 SET_END_LOCATION(node, RBRACE60);
            }


        }

    }
    goto rulestructDeclEx;
    rulestructDeclEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::struct_definition*
WNScriptASTParser::classDecl()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::struct_definition* node;


    const ImplTraits::CommonTokenType* f = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    const ImplTraits::CommonTokenType* g = NULL;
    const ImplTraits::CommonTokenType* d = NULL;
    const ImplTraits::CommonTokenType* e = NULL;
    const ImplTraits::CommonTokenType* RBRACE61 = NULL;
    scripting::declaration* a;
    scripting::function* b;
    scripting::function* h;
    scripting::function* i;





        node = nullptr;



    {
        {
            {
                int alt41=2;
                switch ( this->LA(1) )
                {
                case CLASS:
                	{
                		switch ( this->LA(2) )
                		{
                		case TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case COLON:
                					{
                						alt41=2;
                					}
                				    break;
                				case LBRACE:
                					{
                						alt41=1;
                					}
                				    break;

                				default:
                				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 41 );
                				    ex->set_state( 2 );


                				    goto ruleclassDeclEx;

                				}

                			}
                		    break;

                		default:
                		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 41 );
                		    ex->set_state( 1 );


                		    goto ruleclassDeclEx;

                		}

                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 41 );
                    ex->set_state( 0 );


                    goto ruleclassDeclEx;

                }

                switch (alt41)
                {
            	case 1:
            	    {
            	        {
            	            f =  this->matchToken(CLASS, &FOLLOW_CLASS_in_classDecl4793);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            c =  this->matchToken(TYPE, &FOLLOW_TYPE_in_classDecl4797);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                node= m_allocator->construct<scripting::struct_definition>(m_allocator, (c->getText()).c_str(), true); SET_LOCATION(node, f);
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	            g =  this->matchToken(CLASS, &FOLLOW_CLASS_in_classDecl4817);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            d =  this->matchToken(TYPE, &FOLLOW_TYPE_in_classDecl4821);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	             this->matchToken(COLON, &FOLLOW_COLON_in_classDecl4823);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            e =  this->matchToken(TYPE, &FOLLOW_TYPE_in_classDecl4827);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                node= m_allocator->construct<scripting::struct_definition>(m_allocator, (d->getText()).c_str(), true, (e->getText()).c_str()); SET_LOCATION(node, g);
            	            }


            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_classDecl4854);
            if  (this->hasException())
            {
                goto ruleclassDeclEx;
            }



            for (;;)
            {
                int alt42=5;
                alt42 = cdfa42.predict(this, this->get_rec(), this->get_istream(), cdfa42 );
                if  (this->hasException())
                {
                    goto ruleclassDeclEx;
                }

                switch (alt42)
                {
            	case 1:
            	    {
            	        {
            	            this->followPush(FOLLOW_declaration_in_classDecl4897);
            	            a=declaration();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_struct_elem(a
            	                );
            	            }


            	             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_classDecl4901);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	            this->followPush(FOLLOW_function_in_classDecl4927);
            	            b=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_function(b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	        {
            	             this->matchToken(VIRTUAL, &FOLLOW_VIRTUAL_in_classDecl4956);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            this->followPush(FOLLOW_function_in_classDecl4960);
            	            h=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_function(h
            	                ); h
            	                ->set_is_virtual(true);
            	            }


            	        }


            	    }
            	    break;
            	case 4:
            	    {
            	        {
            	             this->matchToken(OVERRIDE, &FOLLOW_OVERRIDE_in_classDecl4986);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            this->followPush(FOLLOW_function_in_classDecl4990);
            	            i=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_function(i
            	                ); i
            	                ->set_is_override(true);
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop42;
            	    break;
                }
            }
            loop42: ;


            RBRACE61 =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_classDecl5026);
            if  (this->hasException())
            {
                goto ruleclassDeclEx;
            }


            {
                 SET_END_LOCATION(node, RBRACE61);
            }


        }

    }
    goto ruleclassDeclEx;
    ruleclassDeclEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






const char*
WNScriptASTParser::inc()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    const char* file;


    const ImplTraits::CommonTokenType* STRING62 = NULL;






        file = nullptr;



    {
        {
             this->matchToken(INCLUDE, &FOLLOW_INCLUDE_in_inc5056);
            if  (this->hasException())
            {
                goto ruleincEx;
            }


            STRING62 =  this->matchToken(STRING, &FOLLOW_STRING_in_inc5058);
            if  (this->hasException())
            {
                goto ruleincEx;
            }


            {
                 file = (STRING62->getText()).c_str();
            }


        }

    }
    goto ruleincEx;
    ruleincEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return file;
}






scripting::script_file*
WNScriptASTParser::program()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::script_file* node;


    scripting::function* function63;
    scripting::struct_definition* structDecl64;
    scripting::struct_definition* classDecl65;
    const char* inc66;





        node = m_allocator->construct<scripting::script_file>(m_allocator);



    {
        {

            for (;;)
            {
                int alt43=5;
                switch ( this->LA(1) )
                {
                case BOOL_TYPE:
                case CHAR_TYPE:
                case FLOAT_TYPE:
                case INT_TYPE:
                case SHARED_REF:
                case STRING_TYPE:
                case TYPE:
                case VOID_TYPE:
                case WEAK_REF:
                	{
                		alt43=1;
                	}
                    break;
                case STRUCT:
                	{
                		alt43=2;
                	}
                    break;
                case CLASS:
                	{
                		alt43=3;
                	}
                    break;
                case INCLUDE:
                	{
                		alt43=4;
                	}
                    break;

                }

                switch (alt43)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_function_in_program5104);
            	        function63=function();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_function(function63
            	            );
            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        this->followPush(FOLLOW_structDecl_in_program5126);
            	        structDecl64=structDecl();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_struct(structDecl64
            	            );
            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	        this->followPush(FOLLOW_classDecl_in_program5146);
            	        classDecl65=classDecl();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_struct(classDecl65
            	            );
            	        }


            	    }
            	    break;
            	case 4:
            	    {
            	        this->followPush(FOLLOW_inc_in_program5167);
            	        inc66=inc();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_include(inc66
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop43;
            	    break;
                }
            }
            loop43: ;


        }

    }
    goto ruleprogramEx;
    ruleprogramEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}

















