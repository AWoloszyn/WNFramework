// clang-format off

/** \file
 *  This C++ source file was generated by $ANTLR version 3.5.1
 *
 *     -                for the parser : WNScriptASTParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF






    #include "WNCore/inc/base.h"
#ifdef _WN_MSVC
    #pragma warning(disable: 4100)
    #pragma warning(disable: 4459)
    #pragma warning(disable: 4703)
#endif
#ifdef _WN_CLANG
    #pragma clang diagnostic ignored "-Wunused-function"
#endif
#ifdef _WN_GCC
    #pragma GCC diagnostic ignored "-Wunused-function"
    #pragma GCC diagnostic ignored "-Wunused-variable"
    #pragma GCC diagnostic ignored "-Wunused-but-set-variable"
    #pragma GCC diagnostic ignored "-Wsign-compare"
#endif
    #include "WNMemory/inc/allocator.h"
    #include "WNScripting/src/WNScriptASTLexer.hpp"
    #include "WNScripting/inc/WNNodeTypes.h"

    using namespace wn;

    #ifndef SET_LOCATION
    #define SET_LOCATION(node, tok) { scripting::source_location loc; \
                                     loc.m_start_index = tok->get_startIndex();\
                                     loc.m_end_index = tok->get_stopIndex();\
                                     loc.m_line_start = tok->get_lineStart();\
                                     loc.m_line_number = tok->get_line();\
                                     loc.m_char_number = tok->get_charPositionInLine();\
                                     node->set_start_location(loc); \
                                   }

    #define SET_LOCATION_FROM_NODE(node, node2) { \
                                        if(node2) { \
                                        node->set_start_location(node2->get_start_location()); \
                                        } \
                                   }
    #define SET_START_LOCATION_FROM_NODE(node, node2) { \
                                        if(node2) { \
                                        scripting::source_location loc = node->get_start_location(); \
                                        scripting::source_location loc2 = node2->get_start_location(); \
                                        loc.m_start_index = loc2.m_start_index; \
                                        loc.m_line_start = loc2.m_line_start; \
                                        loc.m_line_number = loc2.m_line_number; \
                                        loc.m_char_number = loc2.m_char_number; \
                                        node->set_start_location(loc); \
                                        } \
                                    }
    #define SET_END_LOCATION(node, tok) { \
                                        node->set_end_index(tok->get_stopIndex()); \
                                      }
    #define SET_END_LOCATION_FROM_NODE(node, node2) { \
                                            if(node2) { \
                                            node->set_end_index(node2->get_start_location().m_end_index); \
                                            } \
                                            }
    #endif








#include    "WNScriptASTParser.hpp"









using namespace antlr3;



ANTLR_UINT8* WNScriptASTParserTokenNames[78+4]
     = {
        (ANTLR_UINT8*) "<invalid>",
        (ANTLR_UINT8*) "<EOR>",
        (ANTLR_UINT8*) "<DOWN>",
        (ANTLR_UINT8*) "<UP>",
        (ANTLR_UINT8*) "BOOL",
        (ANTLR_UINT8*) "BOOL_TYPE",
        (ANTLR_UINT8*) "BREAK",
        (ANTLR_UINT8*) "CHAR",
        (ANTLR_UINT8*) "CHAR_TYPE",
        (ANTLR_UINT8*) "CLASS",
        (ANTLR_UINT8*) "COLON",
        (ANTLR_UINT8*) "COMMA",
        (ANTLR_UINT8*) "COMMENT",
        (ANTLR_UINT8*) "CONTINUE",
        (ANTLR_UINT8*) "DEFAULT",
        (ANTLR_UINT8*) "DLSQBRACKET",
        (ANTLR_UINT8*) "DO",
        (ANTLR_UINT8*) "DOUBDEC",
        (ANTLR_UINT8*) "DOUBINC",
        (ANTLR_UINT8*) "DRSQBRACKET",
        (ANTLR_UINT8*) "ELSE",
        (ANTLR_UINT8*) "ESC_SEQ",
        (ANTLR_UINT8*) "EXPONENT",
        (ANTLR_UINT8*) "FLOAT",
        (ANTLR_UINT8*) "FLOAT_TYPE",
        (ANTLR_UINT8*) "FOR",
        (ANTLR_UINT8*) "HEX_DIGIT",
        (ANTLR_UINT8*) "ID",
        (ANTLR_UINT8*) "IF",
        (ANTLR_UINT8*) "INCLUDE",
        (ANTLR_UINT8*) "INT",
        (ANTLR_UINT8*) "INT_TYPE",
        (ANTLR_UINT8*) "LBRACE",
        (ANTLR_UINT8*) "LBRACKET",
        (ANTLR_UINT8*) "LENGTH",
        (ANTLR_UINT8*) "LSQBRACKET",
        (ANTLR_UINT8*) "NULLTOK",
        (ANTLR_UINT8*) "OCTAL_ESC",
        (ANTLR_UINT8*) "OVERRIDE",
        (ANTLR_UINT8*) "QUESTION",
        (ANTLR_UINT8*) "RBRACE",
        (ANTLR_UINT8*) "RBRACKET",
        (ANTLR_UINT8*) "RESOURCE",
        (ANTLR_UINT8*) "RETURN",
        (ANTLR_UINT8*) "RSQBRACKET",
        (ANTLR_UINT8*) "SEMICOLON",
        (ANTLR_UINT8*) "SHARED_REF",
        (ANTLR_UINT8*) "SLICETOK",
        (ANTLR_UINT8*) "SSOR",
        (ANTLR_UINT8*) "STRING",
        (ANTLR_UINT8*) "STRING_TYPE",
        (ANTLR_UINT8*) "STRUCT",
        (ANTLR_UINT8*) "TYPE",
        (ANTLR_UINT8*) "T_TYPE",
        (ANTLR_UINT8*) "UNICODE_ESC",
        (ANTLR_UINT8*) "VIRTUAL",
        (ANTLR_UINT8*) "VOID_TYPE",
        (ANTLR_UINT8*) "WEAK_REF",
        (ANTLR_UINT8*) "WHILE",
        (ANTLR_UINT8*) "WS",
        (ANTLR_UINT8*) "'!'",
        (ANTLR_UINT8*) "'!='",
        (ANTLR_UINT8*) "'%'",
        (ANTLR_UINT8*) "'%='",
        (ANTLR_UINT8*) "'&&'",
        (ANTLR_UINT8*) "'&'",
        (ANTLR_UINT8*) "'*'",
        (ANTLR_UINT8*) "'*='",
        (ANTLR_UINT8*) "'+'",
        (ANTLR_UINT8*) "'+='",
        (ANTLR_UINT8*) "'-'",
        (ANTLR_UINT8*) "'-='",
        (ANTLR_UINT8*) "'.'",
        (ANTLR_UINT8*) "'/'",
        (ANTLR_UINT8*) "'/='",
        (ANTLR_UINT8*) "'<'",
        (ANTLR_UINT8*) "'<='",
        (ANTLR_UINT8*) "'='",
        (ANTLR_UINT8*) "'=='",
        (ANTLR_UINT8*) "'>'",
        (ANTLR_UINT8*) "'>='",
        (ANTLR_UINT8*) "'^'"
       };




static const char fileName[] = "WNScriptAST.g";



const char* WNScriptASTParser::getGrammarFileName()
{
	return fileName;
}






WNScriptASTParser::WNScriptASTParser( StreamType* instream)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, NULL)

{
	this->init(instream);
}







WNScriptASTParser::WNScriptASTParser( StreamType* instream, RecognizerSharedStateType* state)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, state)

{
	this->init(instream );
}

void WNScriptASTParser::init(StreamType* instream)
{


	this->get_psrstate()->set_tokenNames( WNScriptASTParserTokenNames );


}

void
WNScriptASTParser::reset()
{
    this->get_rec()->reset();
}



WNScriptASTParser::~WNScriptASTParser()
 {
}








static ANTLR_UINT8**	getTokenNames()
{
        return WNScriptASTParserTokenNames;
}





static	ANTLR_BITWORD FOLLOW_TYPE_in_objectType1298_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_objectType1298( FOLLOW_TYPE_in_objectType1298_bits, 1 );

static	ANTLR_BITWORD FOLLOW_VOID_TYPE_in_scalarType1330_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_VOID_TYPE_in_scalarType1330( FOLLOW_VOID_TYPE_in_scalarType1330_bits, 1 );

static	ANTLR_BITWORD FOLLOW_INT_TYPE_in_scalarType1342_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_INT_TYPE_in_scalarType1342( FOLLOW_INT_TYPE_in_scalarType1342_bits, 1 );

static	ANTLR_BITWORD FOLLOW_FLOAT_TYPE_in_scalarType1354_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_FLOAT_TYPE_in_scalarType1354( FOLLOW_FLOAT_TYPE_in_scalarType1354_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CHAR_TYPE_in_scalarType1366_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CHAR_TYPE_in_scalarType1366( FOLLOW_CHAR_TYPE_in_scalarType1366_bits, 1 );

static	ANTLR_BITWORD FOLLOW_BOOL_TYPE_in_scalarType1378_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_BOOL_TYPE_in_scalarType1378( FOLLOW_BOOL_TYPE_in_scalarType1378_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRING_TYPE_in_scalarType1390_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_TYPE_in_scalarType1390( FOLLOW_STRING_TYPE_in_scalarType1390_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_arrayType1427_bits[]	= { ANTLR_UINT64_LIT(0x0000000800008000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_arrayType1427( FOLLOW_scalarType_in_arrayType1427_bits, 1 );

static	ANTLR_BITWORD FOLLOW_objectType_in_arrayType1443_bits[]	= { ANTLR_UINT64_LIT(0x0000000800008000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_objectType_in_arrayType1443( FOLLOW_objectType_in_arrayType1443_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SHARED_REF_in_arrayType1457_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SHARED_REF_in_arrayType1457( FOLLOW_SHARED_REF_in_arrayType1457_bits, 1 );

static	ANTLR_BITWORD FOLLOW_objectType_in_arrayType1461_bits[]	= { ANTLR_UINT64_LIT(0x0000000800008000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_objectType_in_arrayType1461( FOLLOW_objectType_in_arrayType1461_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_arrayType1495_bits[]	= { ANTLR_UINT64_LIT(0x01061010C18001B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_arrayType1495( FOLLOW_LSQBRACKET_in_arrayType1495_bits, 1 );

static	ANTLR_BITWORD FOLLOW_constant_in_arrayType1514_bits[]	= { ANTLR_UINT64_LIT(0x0000100000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_constant_in_arrayType1514( FOLLOW_constant_in_arrayType1514_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_arrayType1536_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_arrayType1536( FOLLOW_RSQBRACKET_in_arrayType1536_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DLSQBRACKET_in_arrayType1565_bits[]	= { ANTLR_UINT64_LIT(0x0000000000080000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DLSQBRACKET_in_arrayType1565( FOLLOW_DLSQBRACKET_in_arrayType1565_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DRSQBRACKET_in_arrayType1567_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DRSQBRACKET_in_arrayType1567( FOLLOW_DRSQBRACKET_in_arrayType1567_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_sliceType1617_bits[]	= { ANTLR_UINT64_LIT(0x0001800000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_sliceType1617( FOLLOW_scalarType_in_sliceType1617_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SLICETOK_in_sliceType1633_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SLICETOK_in_sliceType1633( FOLLOW_SLICETOK_in_sliceType1633_bits, 1 );

static	ANTLR_BITWORD FOLLOW_INT_in_sliceType1635_bits[]	= { ANTLR_UINT64_LIT(0x0000800000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_INT_in_sliceType1635( FOLLOW_INT_in_sliceType1635_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SLICETOK_in_sliceType1639_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SLICETOK_in_sliceType1639( FOLLOW_SLICETOK_in_sliceType1639_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SSOR_in_sliceType1658_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SSOR_in_sliceType1658( FOLLOW_SSOR_in_sliceType1658_bits, 1 );

static	ANTLR_BITWORD FOLLOW_objectType_in_compoundType1693_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_objectType_in_compoundType1693( FOLLOW_objectType_in_compoundType1693_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_nonArrayType1720_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_nonArrayType1720( FOLLOW_scalarType_in_nonArrayType1720_bits, 1 );

static	ANTLR_BITWORD FOLLOW_objectType_in_nonArrayType1730_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_objectType_in_nonArrayType1730( FOLLOW_objectType_in_nonArrayType1730_bits, 1 );

static	ANTLR_BITWORD FOLLOW_compoundType_in_type1760_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_compoundType_in_type1760( FOLLOW_compoundType_in_type1760_bits, 1 );

static	ANTLR_BITWORD FOLLOW_arrayType_in_type1770_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arrayType_in_type1770( FOLLOW_arrayType_in_type1770_bits, 1 );

static	ANTLR_BITWORD FOLLOW_sliceType_in_type1780_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_sliceType_in_type1780( FOLLOW_sliceType_in_type1780_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_type1790_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_type1790( FOLLOW_scalarType_in_type1790_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_param1822_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_param1822( FOLLOW_scalarType_in_param1822_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1826_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1826( FOLLOW_ID_in_param1826_bits, 1 );

static	ANTLR_BITWORD FOLLOW_compoundType_in_param1841_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_compoundType_in_param1841( FOLLOW_compoundType_in_param1841_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1845_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1845( FOLLOW_ID_in_param1845_bits, 1 );

static	ANTLR_BITWORD FOLLOW_arrayType_in_param1860_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arrayType_in_param1860( FOLLOW_arrayType_in_param1860_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1864_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1864( FOLLOW_ID_in_param1864_bits, 1 );

static	ANTLR_BITWORD FOLLOW_sliceType_in_param1879_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_sliceType_in_param1879( FOLLOW_sliceType_in_param1879_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1883_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1883( FOLLOW_ID_in_param1883_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SHARED_REF_in_param1896_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SHARED_REF_in_param1896( FOLLOW_SHARED_REF_in_param1896_bits, 1 );

static	ANTLR_BITWORD FOLLOW_compoundType_in_param1900_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_compoundType_in_param1900( FOLLOW_compoundType_in_param1900_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1904_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1904( FOLLOW_ID_in_param1904_bits, 1 );

static	ANTLR_BITWORD FOLLOW_WEAK_REF_in_param1917_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_WEAK_REF_in_param1917( FOLLOW_WEAK_REF_in_param1917_bits, 1 );

static	ANTLR_BITWORD FOLLOW_compoundType_in_param1921_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_compoundType_in_param1921( FOLLOW_compoundType_in_param1921_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1926_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1926( FOLLOW_ID_in_param1926_bits, 1 );

static	ANTLR_BITWORD FOLLOW_compoundType_in_param1941_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_compoundType_in_param1941( FOLLOW_compoundType_in_param1941_bits, 1 );

static	ANTLR_BITWORD FOLLOW_QUESTION_in_param1943_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_QUESTION_in_param1943( FOLLOW_QUESTION_in_param1943_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1948_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1948( FOLLOW_ID_in_param1948_bits, 1 );

static	ANTLR_BITWORD FOLLOW_param_in_paramList1980_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000802) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_param_in_paramList1980( FOLLOW_param_in_paramList1980_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COMMA_in_paramList1993_bits[]	= { ANTLR_UINT64_LIT(0x0314400081000120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COMMA_in_paramList1993( FOLLOW_COMMA_in_paramList1993_bits, 1 );

static	ANTLR_BITWORD FOLLOW_param_in_paramList1997_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000802) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_param_in_paramList1997( FOLLOW_param_in_paramList1997_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_parameterList2029_bits[]	= { ANTLR_UINT64_LIT(0x0314400081000120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_parameterList2029( FOLLOW_LBRACKET_in_parameterList2029_bits, 1 );

static	ANTLR_BITWORD FOLLOW_paramList_in_parameterList2031_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_paramList_in_parameterList2031( FOLLOW_paramList_in_parameterList2031_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_parameterList2033_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_parameterList2033( FOLLOW_RBRACKET_in_parameterList2033_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_parameterList2050_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_parameterList2050( FOLLOW_LBRACKET_in_parameterList2050_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_parameterList2052_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_parameterList2052( FOLLOW_RBRACKET_in_parameterList2052_bits, 1 );

static	ANTLR_BITWORD FOLLOW_77_in_assign_type2088_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_77_in_assign_type2088( FOLLOW_77_in_assign_type2088_bits, 1 );

static	ANTLR_BITWORD FOLLOW_69_in_assign_type2102_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_69_in_assign_type2102( FOLLOW_69_in_assign_type2102_bits, 1 );

static	ANTLR_BITWORD FOLLOW_71_in_assign_type2115_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_71_in_assign_type2115( FOLLOW_71_in_assign_type2115_bits, 1 );

static	ANTLR_BITWORD FOLLOW_67_in_assign_type2128_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_67_in_assign_type2128( FOLLOW_67_in_assign_type2128_bits, 1 );

static	ANTLR_BITWORD FOLLOW_74_in_assign_type2141_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_74_in_assign_type2141( FOLLOW_74_in_assign_type2141_bits, 1 );

static	ANTLR_BITWORD FOLLOW_63_in_assign_type2154_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_63_in_assign_type2154( FOLLOW_63_in_assign_type2154_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_arglist2212_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000802) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arglist2212( FOLLOW_expr_in_arglist2212_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COMMA_in_arglist2245_bits[]	= { ANTLR_UINT64_LIT(0x11164416C98609B2), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COMMA_in_arglist2245( FOLLOW_COMMA_in_arglist2245_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_arglist2289_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000802) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arglist2289( FOLLOW_expr_in_arglist2289_bits, 1 );

static	ANTLR_BITWORD FOLLOW_cond_ex_in_expr2364_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_cond_ex_in_expr2364( FOLLOW_cond_ex_in_expr2364_bits, 1 );

static	ANTLR_BITWORD FOLLOW_or_ex_in_cond_ex2402_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_or_ex_in_cond_ex2402( FOLLOW_or_ex_in_cond_ex2402_bits, 1 );

static	ANTLR_BITWORD FOLLOW_QUESTION_in_cond_ex2425_bits[]	= { ANTLR_UINT64_LIT(0x11164416C98601B0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_QUESTION_in_cond_ex2425( FOLLOW_QUESTION_in_cond_ex2425_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_cond_ex2429_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_cond_ex2429( FOLLOW_expr_in_cond_ex2429_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COLON_in_cond_ex2431_bits[]	= { ANTLR_UINT64_LIT(0x11164416C98601B0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COLON_in_cond_ex2431( FOLLOW_COLON_in_cond_ex2431_bits, 2 );

static	ANTLR_BITWORD FOLLOW_cond_ex_in_cond_ex2435_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_cond_ex_in_cond_ex2435( FOLLOW_cond_ex_in_cond_ex2435_bits, 1 );

static	ANTLR_BITWORD FOLLOW_and_ex_in_or_ex2482_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_and_ex_in_or_ex2482( FOLLOW_and_ex_in_or_ex2482_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SSOR_in_or_ex2499_bits[]	= { ANTLR_UINT64_LIT(0x11164416C98601B0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SSOR_in_or_ex2499( FOLLOW_SSOR_in_or_ex2499_bits, 2 );

static	ANTLR_BITWORD FOLLOW_and_ex_in_or_ex2503_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_and_ex_in_or_ex2503( FOLLOW_and_ex_in_or_ex2503_bits, 1 );

static	ANTLR_BITWORD FOLLOW_bit_or_ex_in_and_ex2546_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_bit_or_ex_in_and_ex2546( FOLLOW_bit_or_ex_in_and_ex2546_bits, 2 );

static	ANTLR_BITWORD FOLLOW_64_in_and_ex2563_bits[]	= { ANTLR_UINT64_LIT(0x11164416C98601B0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_64_in_and_ex2563( FOLLOW_64_in_and_ex2563_bits, 2 );

static	ANTLR_BITWORD FOLLOW_bit_or_ex_in_and_ex2567_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_bit_or_ex_in_and_ex2567( FOLLOW_bit_or_ex_in_and_ex2567_bits, 2 );

static	ANTLR_BITWORD FOLLOW_bit_xor_ex_in_bit_or_ex2601_bits[]	= { ANTLR_UINT64_LIT(0x0000800000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_bit_xor_ex_in_bit_or_ex2601( FOLLOW_bit_xor_ex_in_bit_or_ex2601_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SLICETOK_in_bit_or_ex2618_bits[]	= { ANTLR_UINT64_LIT(0x11164416C98601B0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SLICETOK_in_bit_or_ex2618( FOLLOW_SLICETOK_in_bit_or_ex2618_bits, 2 );

static	ANTLR_BITWORD FOLLOW_bit_xor_ex_in_bit_or_ex2622_bits[]	= { ANTLR_UINT64_LIT(0x0000800000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_bit_xor_ex_in_bit_or_ex2622( FOLLOW_bit_xor_ex_in_bit_or_ex2622_bits, 1 );

static	ANTLR_BITWORD FOLLOW_bit_and_ex_in_bit_xor_ex2657_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000020000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_bit_and_ex_in_bit_xor_ex2657( FOLLOW_bit_and_ex_in_bit_xor_ex2657_bits, 2 );

static	ANTLR_BITWORD FOLLOW_81_in_bit_xor_ex2674_bits[]	= { ANTLR_UINT64_LIT(0x11164416C98601B0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_81_in_bit_xor_ex2674( FOLLOW_81_in_bit_xor_ex2674_bits, 2 );

static	ANTLR_BITWORD FOLLOW_bit_and_ex_in_bit_xor_ex2678_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000020000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_bit_and_ex_in_bit_xor_ex2678( FOLLOW_bit_and_ex_in_bit_xor_ex2678_bits, 2 );

static	ANTLR_BITWORD FOLLOW_eq_ex_in_bit_and_ex2713_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_eq_ex_in_bit_and_ex2713( FOLLOW_eq_ex_in_bit_and_ex2713_bits, 2 );

static	ANTLR_BITWORD FOLLOW_65_in_bit_and_ex2730_bits[]	= { ANTLR_UINT64_LIT(0x11164416C98601B0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_65_in_bit_and_ex2730( FOLLOW_65_in_bit_and_ex2730_bits, 2 );

static	ANTLR_BITWORD FOLLOW_eq_ex_in_bit_and_ex2734_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_eq_ex_in_bit_and_ex2734( FOLLOW_eq_ex_in_bit_and_ex2734_bits, 2 );

static	ANTLR_BITWORD FOLLOW_rel_ex_in_eq_ex2772_bits[]	= { ANTLR_UINT64_LIT(0x2000000000000002), ANTLR_UINT64_LIT(0x0000000000004000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_rel_ex_in_eq_ex2772( FOLLOW_rel_ex_in_eq_ex2772_bits, 2 );

static	ANTLR_BITWORD FOLLOW_78_in_eq_ex2807_bits[]	= { ANTLR_UINT64_LIT(0x11164416C98601B0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_78_in_eq_ex2807( FOLLOW_78_in_eq_ex2807_bits, 2 );

static	ANTLR_BITWORD FOLLOW_rel_ex_in_eq_ex2811_bits[]	= { ANTLR_UINT64_LIT(0x2000000000000002), ANTLR_UINT64_LIT(0x0000000000004000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_rel_ex_in_eq_ex2811( FOLLOW_rel_ex_in_eq_ex2811_bits, 2 );

static	ANTLR_BITWORD FOLLOW_61_in_eq_ex2834_bits[]	= { ANTLR_UINT64_LIT(0x11164416C98601B0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_61_in_eq_ex2834( FOLLOW_61_in_eq_ex2834_bits, 2 );

static	ANTLR_BITWORD FOLLOW_rel_ex_in_eq_ex2838_bits[]	= { ANTLR_UINT64_LIT(0x2000000000000002), ANTLR_UINT64_LIT(0x0000000000004000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_rel_ex_in_eq_ex2838( FOLLOW_rel_ex_in_eq_ex2838_bits, 2 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2896_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000019800) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2896( FOLLOW_add_ex_in_rel_ex2896_bits, 2 );

static	ANTLR_BITWORD FOLLOW_75_in_rel_ex2932_bits[]	= { ANTLR_UINT64_LIT(0x11164416C98601B0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_75_in_rel_ex2932( FOLLOW_75_in_rel_ex2932_bits, 2 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2936_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000019800) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2936( FOLLOW_add_ex_in_rel_ex2936_bits, 2 );

static	ANTLR_BITWORD FOLLOW_79_in_rel_ex2960_bits[]	= { ANTLR_UINT64_LIT(0x11164416C98601B0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_79_in_rel_ex2960( FOLLOW_79_in_rel_ex2960_bits, 2 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2964_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000019800) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2964( FOLLOW_add_ex_in_rel_ex2964_bits, 2 );

static	ANTLR_BITWORD FOLLOW_76_in_rel_ex2988_bits[]	= { ANTLR_UINT64_LIT(0x11164416C98601B0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_76_in_rel_ex2988( FOLLOW_76_in_rel_ex2988_bits, 2 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2992_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000019800) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2992( FOLLOW_add_ex_in_rel_ex2992_bits, 2 );

static	ANTLR_BITWORD FOLLOW_80_in_rel_ex3016_bits[]	= { ANTLR_UINT64_LIT(0x11164416C98601B0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_80_in_rel_ex3016( FOLLOW_80_in_rel_ex3016_bits, 2 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex3020_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000019800) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex3020( FOLLOW_add_ex_in_rel_ex3020_bits, 2 );

static	ANTLR_BITWORD FOLLOW_mult_ex_in_add_ex3081_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000050) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_mult_ex_in_add_ex3081( FOLLOW_mult_ex_in_add_ex3081_bits, 2 );

static	ANTLR_BITWORD FOLLOW_68_in_add_ex3116_bits[]	= { ANTLR_UINT64_LIT(0x11164416C98601B0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_68_in_add_ex3116( FOLLOW_68_in_add_ex3116_bits, 2 );

static	ANTLR_BITWORD FOLLOW_mult_ex_in_add_ex3120_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000050) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_mult_ex_in_add_ex3120( FOLLOW_mult_ex_in_add_ex3120_bits, 2 );

static	ANTLR_BITWORD FOLLOW_70_in_add_ex3142_bits[]	= { ANTLR_UINT64_LIT(0x11164416C98601B0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_70_in_add_ex3142( FOLLOW_70_in_add_ex3142_bits, 2 );

static	ANTLR_BITWORD FOLLOW_mult_ex_in_add_ex3146_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000050) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_mult_ex_in_add_ex3146( FOLLOW_mult_ex_in_add_ex3146_bits, 2 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex3205_bits[]	= { ANTLR_UINT64_LIT(0x4000000000000002), ANTLR_UINT64_LIT(0x0000000000000204) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex3205( FOLLOW_unary_ex_in_mult_ex3205_bits, 2 );

static	ANTLR_BITWORD FOLLOW_66_in_mult_ex3244_bits[]	= { ANTLR_UINT64_LIT(0x11164416C98601B0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_66_in_mult_ex3244( FOLLOW_66_in_mult_ex3244_bits, 2 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex3248_bits[]	= { ANTLR_UINT64_LIT(0x4000000000000002), ANTLR_UINT64_LIT(0x0000000000000204) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex3248( FOLLOW_unary_ex_in_mult_ex3248_bits, 2 );

static	ANTLR_BITWORD FOLLOW_73_in_mult_ex3274_bits[]	= { ANTLR_UINT64_LIT(0x11164416C98601B0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_73_in_mult_ex3274( FOLLOW_73_in_mult_ex3274_bits, 2 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex3278_bits[]	= { ANTLR_UINT64_LIT(0x4000000000000002), ANTLR_UINT64_LIT(0x0000000000000204) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex3278( FOLLOW_unary_ex_in_mult_ex3278_bits, 2 );

static	ANTLR_BITWORD FOLLOW_62_in_mult_ex3304_bits[]	= { ANTLR_UINT64_LIT(0x11164416C98601B0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_62_in_mult_ex3304( FOLLOW_62_in_mult_ex3304_bits, 2 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex3308_bits[]	= { ANTLR_UINT64_LIT(0x4000000000000002), ANTLR_UINT64_LIT(0x0000000000000204) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex3308( FOLLOW_unary_ex_in_mult_ex3308_bits, 2 );

static	ANTLR_BITWORD FOLLOW_post_ex_in_unary_ex3360_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_post_ex_in_unary_ex3360( FOLLOW_post_ex_in_unary_ex3360_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DOUBINC_in_unary_ex3373_bits[]	= { ANTLR_UINT64_LIT(0x11164416C98601B0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBINC_in_unary_ex3373( FOLLOW_DOUBINC_in_unary_ex3373_bits, 2 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_unary_ex3377_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_unary_ex3377( FOLLOW_unary_ex_in_unary_ex3377_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DOUBDEC_in_unary_ex3390_bits[]	= { ANTLR_UINT64_LIT(0x11164416C98601B0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBDEC_in_unary_ex3390( FOLLOW_DOUBDEC_in_unary_ex3390_bits, 2 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_unary_ex3394_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_unary_ex3394( FOLLOW_unary_ex_in_unary_ex3394_bits, 1 );

static	ANTLR_BITWORD FOLLOW_70_in_unary_ex3407_bits[]	= { ANTLR_UINT64_LIT(0x11164416C98601B0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_70_in_unary_ex3407( FOLLOW_70_in_unary_ex3407_bits, 2 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_unary_ex3411_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_unary_ex3411( FOLLOW_unary_ex_in_unary_ex3411_bits, 1 );

static	ANTLR_BITWORD FOLLOW_60_in_unary_ex3425_bits[]	= { ANTLR_UINT64_LIT(0x11164416C98601B0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_60_in_unary_ex3425( FOLLOW_60_in_unary_ex3425_bits, 2 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_unary_ex3429_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_unary_ex3429( FOLLOW_unary_ex_in_unary_ex3429_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_post_ex_proper3467_bits[]	= { ANTLR_UINT64_LIT(0x11164416C98601B0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_post_ex_proper3467( FOLLOW_LSQBRACKET_in_post_ex_proper3467_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_post_ex_proper3471_bits[]	= { ANTLR_UINT64_LIT(0x0000100000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_post_ex_proper3471( FOLLOW_expr_in_post_ex_proper3471_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_post_ex_proper3475_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_post_ex_proper3475( FOLLOW_RSQBRACKET_in_post_ex_proper3475_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_post_ex_proper3490_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_post_ex_proper3490( FOLLOW_LBRACKET_in_post_ex_proper3490_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_post_ex_proper3494_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_post_ex_proper3494( FOLLOW_RBRACKET_in_post_ex_proper3494_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_post_ex_proper3522_bits[]	= { ANTLR_UINT64_LIT(0x11164416C98601B0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_post_ex_proper3522( FOLLOW_LBRACKET_in_post_ex_proper3522_bits, 2 );

static	ANTLR_BITWORD FOLLOW_arglist_in_post_ex_proper3528_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arglist_in_post_ex_proper3528( FOLLOW_arglist_in_post_ex_proper3528_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_post_ex_proper3532_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_post_ex_proper3532( FOLLOW_RBRACKET_in_post_ex_proper3532_bits, 1 );

static	ANTLR_BITWORD FOLLOW_72_in_post_ex_proper3545_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_72_in_post_ex_proper3545( FOLLOW_72_in_post_ex_proper3545_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_post_ex_proper3549_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_post_ex_proper3549( FOLLOW_ID_in_post_ex_proper3549_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DOUBINC_in_post_ex_proper3576_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBINC_in_post_ex_proper3576( FOLLOW_DOUBINC_in_post_ex_proper3576_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DOUBDEC_in_post_ex_proper3605_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBDEC_in_post_ex_proper3605( FOLLOW_DOUBDEC_in_post_ex_proper3605_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACE_in_post_ex_proper3651_bits[]	= { ANTLR_UINT64_LIT(0x11164416C98601B0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_post_ex_proper3651( FOLLOW_LBRACE_in_post_ex_proper3651_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_post_ex_proper3671_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_post_ex_proper3671( FOLLOW_expr_in_post_ex_proper3671_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COLON_in_post_ex_proper3688_bits[]	= { ANTLR_UINT64_LIT(0x11164416C98601B0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COLON_in_post_ex_proper3688( FOLLOW_COLON_in_post_ex_proper3688_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_post_ex_proper3705_bits[]	= { ANTLR_UINT64_LIT(0x0000010000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_post_ex_proper3705( FOLLOW_expr_in_post_ex_proper3705_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACE_in_post_ex_proper3725_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_post_ex_proper3725( FOLLOW_RBRACE_in_post_ex_proper3725_bits, 1 );

static	ANTLR_BITWORD FOLLOW_prim_ex_in_post_ex3772_bits[]	= { ANTLR_UINT64_LIT(0x0000000B00060002), ANTLR_UINT64_LIT(0x0000000000000100) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_prim_ex_in_post_ex3772( FOLLOW_prim_ex_in_post_ex3772_bits, 2 );

static	ANTLR_BITWORD FOLLOW_post_ex_proper_in_post_ex3791_bits[]	= { ANTLR_UINT64_LIT(0x0000000B00060002), ANTLR_UINT64_LIT(0x0000000000000100) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_post_ex_proper_in_post_ex3791( FOLLOW_post_ex_proper_in_post_ex3791_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_assignment_or_expression3822_bits[]	= { ANTLR_UINT64_LIT(0x8000000000000002), ANTLR_UINT64_LIT(0x00000000000024A8) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_assignment_or_expression3822( FOLLOW_expr_in_assignment_or_expression3822_bits, 2 );

static	ANTLR_BITWORD FOLLOW_assign_type_in_assignment_or_expression3854_bits[]	= { ANTLR_UINT64_LIT(0x11164416C98601B0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_assign_type_in_assignment_or_expression3854( FOLLOW_assign_type_in_assignment_or_expression3854_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_assignment_or_expression3858_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_assignment_or_expression3858( FOLLOW_expr_in_assignment_or_expression3858_bits, 1 );

static	ANTLR_BITWORD FOLLOW_INT_in_constant3924_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_INT_in_constant3924( FOLLOW_INT_in_constant3924_bits, 1 );

static	ANTLR_BITWORD FOLLOW_FLOAT_in_constant3942_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_FLOAT_in_constant3942( FOLLOW_FLOAT_in_constant3942_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CHAR_in_constant3958_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CHAR_in_constant3958( FOLLOW_CHAR_in_constant3958_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRING_in_constant3975_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_in_constant3975( FOLLOW_STRING_in_constant3975_bits, 1 );

static	ANTLR_BITWORD FOLLOW_BOOL_in_constant3990_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_BOOL_in_constant3990( FOLLOW_BOOL_in_constant3990_bits, 1 );

static	ANTLR_BITWORD FOLLOW_NULLTOK_in_constant4007_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_NULLTOK_in_constant4007( FOLLOW_NULLTOK_in_constant4007_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_constant4022_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_constant4022( FOLLOW_scalarType_in_constant4022_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACE_in_constant4026_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_constant4026( FOLLOW_LBRACE_in_constant4026_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRING_in_constant4030_bits[]	= { ANTLR_UINT64_LIT(0x0000010000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_in_constant4030( FOLLOW_STRING_in_constant4030_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACE_in_constant4034_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_constant4034( FOLLOW_RBRACE_in_constant4034_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LENGTH_in_builtin_unary4063_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LENGTH_in_builtin_unary4063( FOLLOW_LENGTH_in_builtin_unary4063_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_builtin_unary4065_bits[]	= { ANTLR_UINT64_LIT(0x11164416C98601B0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_builtin_unary4065( FOLLOW_LBRACKET_in_builtin_unary4065_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_builtin_unary4067_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_builtin_unary4067( FOLLOW_expr_in_builtin_unary4067_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_builtin_unary4069_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_builtin_unary4069( FOLLOW_RBRACKET_in_builtin_unary4069_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_non_array_prim_ex4098_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_non_array_prim_ex4098( FOLLOW_ID_in_non_array_prim_ex4098_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_non_array_prim_ex4112_bits[]	= { ANTLR_UINT64_LIT(0x11164416C98601B0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_non_array_prim_ex4112( FOLLOW_LBRACKET_in_non_array_prim_ex4112_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_non_array_prim_ex4116_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_non_array_prim_ex4116( FOLLOW_expr_in_non_array_prim_ex4116_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_non_array_prim_ex4120_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_non_array_prim_ex4120( FOLLOW_RBRACKET_in_non_array_prim_ex4120_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RESOURCE_in_non_array_prim_ex4132_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RESOURCE_in_non_array_prim_ex4132( FOLLOW_RESOURCE_in_non_array_prim_ex4132_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_non_array_prim_ex4136_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_non_array_prim_ex4136( FOLLOW_LBRACKET_in_non_array_prim_ex4136_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRING_in_non_array_prim_ex4140_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_in_non_array_prim_ex4140( FOLLOW_STRING_in_non_array_prim_ex4140_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_non_array_prim_ex4144_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_non_array_prim_ex4144( FOLLOW_RBRACKET_in_non_array_prim_ex4144_bits, 1 );

static	ANTLR_BITWORD FOLLOW_constant_in_non_array_prim_ex4158_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_constant_in_non_array_prim_ex4158( FOLLOW_constant_in_non_array_prim_ex4158_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_non_array_prim_ex4173_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_non_array_prim_ex4173( FOLLOW_scalarType_in_non_array_prim_ex4173_bits, 1 );

static	ANTLR_BITWORD FOLLOW_cast_in_non_array_prim_ex4179_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_cast_in_non_array_prim_ex4179( FOLLOW_cast_in_non_array_prim_ex4179_bits, 1 );

static	ANTLR_BITWORD FOLLOW_objectType_in_non_array_prim_ex4194_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_objectType_in_non_array_prim_ex4194( FOLLOW_objectType_in_non_array_prim_ex4194_bits, 1 );

static	ANTLR_BITWORD FOLLOW_structInit_in_non_array_prim_ex4198_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_structInit_in_non_array_prim_ex4198( FOLLOW_structInit_in_non_array_prim_ex4198_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SHARED_REF_in_non_array_prim_ex4210_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SHARED_REF_in_non_array_prim_ex4210( FOLLOW_SHARED_REF_in_non_array_prim_ex4210_bits, 1 );

static	ANTLR_BITWORD FOLLOW_objectType_in_non_array_prim_ex4214_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_objectType_in_non_array_prim_ex4214( FOLLOW_objectType_in_non_array_prim_ex4214_bits, 1 );

static	ANTLR_BITWORD FOLLOW_structInit_in_non_array_prim_ex4218_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_structInit_in_non_array_prim_ex4218( FOLLOW_structInit_in_non_array_prim_ex4218_bits, 1 );

static	ANTLR_BITWORD FOLLOW_builtin_unary_in_non_array_prim_ex4232_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_builtin_unary_in_non_array_prim_ex4232( FOLLOW_builtin_unary_in_non_array_prim_ex4232_bits, 1 );

static	ANTLR_BITWORD FOLLOW_non_array_prim_ex_in_prim_ex4261_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_non_array_prim_ex_in_prim_ex4261( FOLLOW_non_array_prim_ex_in_prim_ex4261_bits, 1 );

static	ANTLR_BITWORD FOLLOW_nonArrayType_in_prim_ex4275_bits[]	= { ANTLR_UINT64_LIT(0x0000000800008000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_nonArrayType_in_prim_ex4275( FOLLOW_nonArrayType_in_prim_ex4275_bits, 1 );

static	ANTLR_BITWORD FOLLOW_arrayInit_in_prim_ex4279_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arrayInit_in_prim_ex4279( FOLLOW_arrayInit_in_prim_ex4279_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SHARED_REF_in_prim_ex4291_bits[]	= { ANTLR_UINT64_LIT(0x0114000081000120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SHARED_REF_in_prim_ex4291( FOLLOW_SHARED_REF_in_prim_ex4291_bits, 1 );

static	ANTLR_BITWORD FOLLOW_nonArrayType_in_prim_ex4295_bits[]	= { ANTLR_UINT64_LIT(0x0000000800008000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_nonArrayType_in_prim_ex4295( FOLLOW_nonArrayType_in_prim_ex4295_bits, 1 );

static	ANTLR_BITWORD FOLLOW_arrayInit_in_prim_ex4299_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arrayInit_in_prim_ex4299( FOLLOW_arrayInit_in_prim_ex4299_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_cast4328_bits[]	= { ANTLR_UINT64_LIT(0x11164416C98601B0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_cast4328( FOLLOW_LBRACKET_in_cast4328_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_cast4332_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_cast4332( FOLLOW_expr_in_cast4332_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_cast4336_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_cast4336( FOLLOW_RBRACKET_in_cast4336_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_structInit4366_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_structInit4366( FOLLOW_LBRACKET_in_structInit4366_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_structInit4370_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_structInit4370( FOLLOW_RBRACKET_in_structInit4370_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_structInit4384_bits[]	= { ANTLR_UINT64_LIT(0x11164416C98601B0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_structInit4384( FOLLOW_LBRACKET_in_structInit4384_bits, 2 );

static	ANTLR_BITWORD FOLLOW_arglist_in_structInit4388_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arglist_in_structInit4388( FOLLOW_arglist_in_structInit4388_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_structInit4392_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_structInit4392( FOLLOW_RBRACKET_in_structInit4392_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_arrayInit4444_bits[]	= { ANTLR_UINT64_LIT(0x11164416C98601B0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_arrayInit4444( FOLLOW_LSQBRACKET_in_arrayInit4444_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_arrayInit4448_bits[]	= { ANTLR_UINT64_LIT(0x0000100000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arrayInit4448( FOLLOW_expr_in_arrayInit4448_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_arrayInit4450_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_arrayInit4450( FOLLOW_RSQBRACKET_in_arrayInit4450_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DLSQBRACKET_in_arrayInit4477_bits[]	= { ANTLR_UINT64_LIT(0x11164416C98601B0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DLSQBRACKET_in_arrayInit4477( FOLLOW_DLSQBRACKET_in_arrayInit4477_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_arrayInit4481_bits[]	= { ANTLR_UINT64_LIT(0x0000000000080000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arrayInit4481( FOLLOW_expr_in_arrayInit4481_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DRSQBRACKET_in_arrayInit4483_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DRSQBRACKET_in_arrayInit4483( FOLLOW_DRSQBRACKET_in_arrayInit4483_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_arrayInit4502_bits[]	= { ANTLR_UINT64_LIT(0x11164416C98601B0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_arrayInit4502( FOLLOW_LBRACKET_in_arrayInit4502_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_arrayInit4506_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arrayInit4506( FOLLOW_expr_in_arrayInit4506_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_arrayInit4510_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_arrayInit4510( FOLLOW_RBRACKET_in_arrayInit4510_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_arrayInit4552_bits[]	= { ANTLR_UINT64_LIT(0x0000100000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_arrayInit4552( FOLLOW_LSQBRACKET_in_arrayInit4552_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_arrayInit4554_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_arrayInit4554( FOLLOW_RSQBRACKET_in_arrayInit4554_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DLSQBRACKET_in_arrayInit4560_bits[]	= { ANTLR_UINT64_LIT(0x0000000000080000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DLSQBRACKET_in_arrayInit4560( FOLLOW_DLSQBRACKET_in_arrayInit4560_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DRSQBRACKET_in_arrayInit4562_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DRSQBRACKET_in_arrayInit4562( FOLLOW_DRSQBRACKET_in_arrayInit4562_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_arrayInit4581_bits[]	= { ANTLR_UINT64_LIT(0x11164416C98601B0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_arrayInit4581( FOLLOW_LBRACKET_in_arrayInit4581_bits, 2 );

static	ANTLR_BITWORD FOLLOW_arglist_in_arrayInit4585_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arglist_in_arrayInit4585( FOLLOW_arglist_in_arrayInit4585_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_arrayInit4589_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_arrayInit4589( FOLLOW_RBRACKET_in_arrayInit4589_bits, 1 );

static	ANTLR_BITWORD FOLLOW_param_in_declaration4632_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000002000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_param_in_declaration4632( FOLLOW_param_in_declaration4632_bits, 2 );

static	ANTLR_BITWORD FOLLOW_77_in_declaration4667_bits[]	= { ANTLR_UINT64_LIT(0x11164416C98601B0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_77_in_declaration4667( FOLLOW_77_in_declaration4667_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_declaration4674_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_declaration4674( FOLLOW_expr_in_declaration4674_bits, 1 );

static	ANTLR_BITWORD FOLLOW_72_in_inherited_declaration4724_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_72_in_inherited_declaration4724( FOLLOW_72_in_inherited_declaration4724_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_inherited_declaration4728_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000002000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_inherited_declaration4728( FOLLOW_ID_in_inherited_declaration4728_bits, 2 );

static	ANTLR_BITWORD FOLLOW_77_in_inherited_declaration4741_bits[]	= { ANTLR_UINT64_LIT(0x11164416C98641B0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_77_in_inherited_declaration4741( FOLLOW_77_in_inherited_declaration4741_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_inherited_declaration4777_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_inherited_declaration4777( FOLLOW_expr_in_inherited_declaration4777_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DEFAULT_in_inherited_declaration4803_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DEFAULT_in_inherited_declaration4803( FOLLOW_DEFAULT_in_inherited_declaration4803_bits, 1 );

static	ANTLR_BITWORD FOLLOW_declaration_in_instructionScalar4859_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_declaration_in_instructionScalar4859( FOLLOW_declaration_in_instructionScalar4859_bits, 1 );

static	ANTLR_BITWORD FOLLOW_assignment_or_expression_in_instructionScalar4872_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_assignment_or_expression_in_instructionScalar4872( FOLLOW_assignment_or_expression_in_instructionScalar4872_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CONTINUE_in_continueInst4902_bits[]	= { ANTLR_UINT64_LIT(0x0000200000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CONTINUE_in_continueInst4902( FOLLOW_CONTINUE_in_continueInst4902_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_continueInst4906_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_continueInst4906( FOLLOW_SEMICOLON_in_continueInst4906_bits, 1 );

static	ANTLR_BITWORD FOLLOW_BREAK_in_breakInst4932_bits[]	= { ANTLR_UINT64_LIT(0x0000200000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_BREAK_in_breakInst4932( FOLLOW_BREAK_in_breakInst4932_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_breakInst4936_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_breakInst4936( FOLLOW_SEMICOLON_in_breakInst4936_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RETURN_in_returnInst4963_bits[]	= { ANTLR_UINT64_LIT(0x11164416C98601B0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RETURN_in_returnInst4963( FOLLOW_RETURN_in_returnInst4963_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_returnInst4965_bits[]	= { ANTLR_UINT64_LIT(0x0000200000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_returnInst4965( FOLLOW_expr_in_returnInst4965_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_returnInst4969_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_returnInst4969( FOLLOW_SEMICOLON_in_returnInst4969_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RETURN_in_returnInst4983_bits[]	= { ANTLR_UINT64_LIT(0x0000200000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RETURN_in_returnInst4983( FOLLOW_RETURN_in_returnInst4983_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_returnInst4987_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_returnInst4987( FOLLOW_SEMICOLON_in_returnInst4987_bits, 1 );

static	ANTLR_BITWORD FOLLOW_WHILE_in_whileInst5020_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_WHILE_in_whileInst5020( FOLLOW_WHILE_in_whileInst5020_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_whileInst5022_bits[]	= { ANTLR_UINT64_LIT(0x11164416C98601B0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_whileInst5022( FOLLOW_LBRACKET_in_whileInst5022_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_whileInst5024_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_whileInst5024( FOLLOW_expr_in_whileInst5024_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_whileInst5026_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_whileInst5026( FOLLOW_RBRACKET_in_whileInst5026_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_whileInst5028_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_whileInst5028( FOLLOW_instruction_list_in_whileInst5028_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DO_in_doInst5064_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DO_in_doInst5064( FOLLOW_DO_in_doInst5064_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_doInst5066_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_doInst5066( FOLLOW_instruction_list_in_doInst5066_bits, 1 );

static	ANTLR_BITWORD FOLLOW_WHILE_in_doInst5068_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_WHILE_in_doInst5068( FOLLOW_WHILE_in_doInst5068_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_doInst5070_bits[]	= { ANTLR_UINT64_LIT(0x11164416C98601B0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_doInst5070( FOLLOW_LBRACKET_in_doInst5070_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_doInst5072_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_doInst5072( FOLLOW_expr_in_doInst5072_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_doInst5074_bits[]	= { ANTLR_UINT64_LIT(0x0000200000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_doInst5074( FOLLOW_RBRACKET_in_doInst5074_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_doInst5076_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_doInst5076( FOLLOW_SEMICOLON_in_doInst5076_bits, 1 );

static	ANTLR_BITWORD FOLLOW_FOR_in_forInst5108_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_FOR_in_forInst5108( FOLLOW_FOR_in_forInst5108_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_forInst5110_bits[]	= { ANTLR_UINT64_LIT(0x13166416C98601B0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_forInst5110( FOLLOW_LBRACKET_in_forInst5110_bits, 2 );

static	ANTLR_BITWORD FOLLOW_instructionScalar_in_forInst5138_bits[]	= { ANTLR_UINT64_LIT(0x0000200000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instructionScalar_in_forInst5138( FOLLOW_instructionScalar_in_forInst5138_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_forInst5144_bits[]	= { ANTLR_UINT64_LIT(0x11166416C98601B0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_forInst5144( FOLLOW_SEMICOLON_in_forInst5144_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_forInst5169_bits[]	= { ANTLR_UINT64_LIT(0x0000200000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_forInst5169( FOLLOW_expr_in_forInst5169_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_forInst5183_bits[]	= { ANTLR_UINT64_LIT(0x13164616C98601B0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_forInst5183( FOLLOW_SEMICOLON_in_forInst5183_bits, 2 );

static	ANTLR_BITWORD FOLLOW_instructionScalar_in_forInst5208_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instructionScalar_in_forInst5208( FOLLOW_instructionScalar_in_forInst5208_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_forInst5214_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_forInst5214( FOLLOW_RBRACKET_in_forInst5214_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_forInst5239_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_forInst5239( FOLLOW_instruction_list_in_forInst5239_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ELSE_in_elsemiddle5287_bits[]	= { ANTLR_UINT64_LIT(0x0000000010000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ELSE_in_elsemiddle5287( FOLLOW_ELSE_in_elsemiddle5287_bits, 1 );

static	ANTLR_BITWORD FOLLOW_IF_in_elsemiddle5289_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_IF_in_elsemiddle5289( FOLLOW_IF_in_elsemiddle5289_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_elsemiddle5291_bits[]	= { ANTLR_UINT64_LIT(0x11164416C98601B0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_elsemiddle5291( FOLLOW_LBRACKET_in_elsemiddle5291_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_elsemiddle5293_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_elsemiddle5293( FOLLOW_expr_in_elsemiddle5293_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_elsemiddle5295_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_elsemiddle5295( FOLLOW_RBRACKET_in_elsemiddle5295_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_elsemiddle5297_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_elsemiddle5297( FOLLOW_instruction_list_in_elsemiddle5297_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ELSE_in_endif5330_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ELSE_in_endif5330( FOLLOW_ELSE_in_endif5330_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_endif5332_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_endif5332( FOLLOW_instruction_list_in_endif5332_bits, 1 );

static	ANTLR_BITWORD FOLLOW_IF_in_ifInst5362_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_IF_in_ifInst5362( FOLLOW_IF_in_ifInst5362_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_ifInst5364_bits[]	= { ANTLR_UINT64_LIT(0x11164416C98601B0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_ifInst5364( FOLLOW_LBRACKET_in_ifInst5364_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_ifInst5366_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_ifInst5366( FOLLOW_expr_in_ifInst5366_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_ifInst5368_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_ifInst5368( FOLLOW_RBRACKET_in_ifInst5368_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_ifInst5370_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_ifInst5370( FOLLOW_instruction_list_in_ifInst5370_bits, 1 );

static	ANTLR_BITWORD FOLLOW_elsemiddle_in_ifInst5387_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_elsemiddle_in_ifInst5387( FOLLOW_elsemiddle_in_ifInst5387_bits, 1 );

static	ANTLR_BITWORD FOLLOW_endif_in_ifInst5407_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_endif_in_ifInst5407( FOLLOW_endif_in_ifInst5407_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ifInst_in_instruction5441_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ifInst_in_instruction5441( FOLLOW_ifInst_in_instruction5441_bits, 1 );

static	ANTLR_BITWORD FOLLOW_whileInst_in_instruction5462_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_whileInst_in_instruction5462( FOLLOW_whileInst_in_instruction5462_bits, 1 );

static	ANTLR_BITWORD FOLLOW_doInst_in_instruction5479_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_doInst_in_instruction5479( FOLLOW_doInst_in_instruction5479_bits, 1 );

static	ANTLR_BITWORD FOLLOW_forInst_in_instruction5499_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_forInst_in_instruction5499( FOLLOW_forInst_in_instruction5499_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instructionScalar_in_instruction5519_bits[]	= { ANTLR_UINT64_LIT(0x0000200000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instructionScalar_in_instruction5519( FOLLOW_instructionScalar_in_instruction5519_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_instruction5521_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_instruction5521( FOLLOW_SEMICOLON_in_instruction5521_bits, 1 );

static	ANTLR_BITWORD FOLLOW_breakInst_in_instruction5534_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_breakInst_in_instruction5534( FOLLOW_breakInst_in_instruction5534_bits, 1 );

static	ANTLR_BITWORD FOLLOW_continueInst_in_instruction5547_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_continueInst_in_instruction5547( FOLLOW_continueInst_in_instruction5547_bits, 1 );

static	ANTLR_BITWORD FOLLOW_returnInst_in_instruction5560_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_returnInst_in_instruction5560( FOLLOW_returnInst_in_instruction5560_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_instruction5573_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_instruction5573( FOLLOW_instruction_list_in_instruction5573_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACE_in_instruction_list5605_bits[]	= { ANTLR_UINT64_LIT(0x17164D17DB8721F0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_instruction_list5605( FOLLOW_LBRACE_in_instruction_list5605_bits, 2 );

static	ANTLR_BITWORD FOLLOW_instruction_in_instruction_list5622_bits[]	= { ANTLR_UINT64_LIT(0x17164D17DB8721F0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_in_instruction_list5622( FOLLOW_instruction_in_instruction_list5622_bits, 2 );

static	ANTLR_BITWORD FOLLOW_RBRACE_in_instruction_list5639_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_instruction_list5639( FOLLOW_RBRACE_in_instruction_list5639_bits, 1 );

static	ANTLR_BITWORD FOLLOW_param_in_function5669_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_param_in_function5669( FOLLOW_param_in_function5669_bits, 1 );

static	ANTLR_BITWORD FOLLOW_parameterList_in_function5671_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_parameterList_in_function5671( FOLLOW_parameterList_in_function5671_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_function5673_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_function5673( FOLLOW_instruction_list_in_function5673_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRUCT_in_structDecl5725_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRUCT_in_structDecl5725( FOLLOW_STRUCT_in_structDecl5725_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_structDecl5729_bits[]	= { ANTLR_UINT64_LIT(0x0000000300000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_structDecl5729( FOLLOW_TYPE_in_structDecl5729_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRUCT_in_structDecl5749_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRUCT_in_structDecl5749( FOLLOW_STRUCT_in_structDecl5749_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_structDecl5753_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_structDecl5753( FOLLOW_TYPE_in_structDecl5753_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COLON_in_structDecl5755_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COLON_in_structDecl5755( FOLLOW_COLON_in_structDecl5755_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_structDecl5759_bits[]	= { ANTLR_UINT64_LIT(0x0000000300000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_structDecl5759( FOLLOW_TYPE_in_structDecl5759_bits, 1 );

static	ANTLR_BITWORD FOLLOW_parameterList_in_structDecl5787_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_parameterList_in_structDecl5787( FOLLOW_parameterList_in_structDecl5787_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACE_in_structDecl5805_bits[]	= { ANTLR_UINT64_LIT(0x0314410081000120), ANTLR_UINT64_LIT(0x0000000000000100) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_structDecl5805( FOLLOW_LBRACE_in_structDecl5805_bits, 2 );

static	ANTLR_BITWORD FOLLOW_declaration_in_structDecl5848_bits[]	= { ANTLR_UINT64_LIT(0x0000200000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_declaration_in_structDecl5848( FOLLOW_declaration_in_structDecl5848_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_structDecl5852_bits[]	= { ANTLR_UINT64_LIT(0x0314410081000120), ANTLR_UINT64_LIT(0x0000000000000100) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_structDecl5852( FOLLOW_SEMICOLON_in_structDecl5852_bits, 2 );

static	ANTLR_BITWORD FOLLOW_inherited_declaration_in_structDecl5878_bits[]	= { ANTLR_UINT64_LIT(0x0000200000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_inherited_declaration_in_structDecl5878( FOLLOW_inherited_declaration_in_structDecl5878_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_structDecl5882_bits[]	= { ANTLR_UINT64_LIT(0x0314410081000120), ANTLR_UINT64_LIT(0x0000000000000100) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_structDecl5882( FOLLOW_SEMICOLON_in_structDecl5882_bits, 2 );

static	ANTLR_BITWORD FOLLOW_function_in_structDecl5908_bits[]	= { ANTLR_UINT64_LIT(0x0314410081000120), ANTLR_UINT64_LIT(0x0000000000000100) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_structDecl5908( FOLLOW_function_in_structDecl5908_bits, 2 );

static	ANTLR_BITWORD FOLLOW_RBRACE_in_structDecl5947_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_structDecl5947( FOLLOW_RBRACE_in_structDecl5947_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CLASS_in_classDecl6001_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CLASS_in_classDecl6001( FOLLOW_CLASS_in_classDecl6001_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_classDecl6005_bits[]	= { ANTLR_UINT64_LIT(0x0000000300000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_classDecl6005( FOLLOW_TYPE_in_classDecl6005_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CLASS_in_classDecl6025_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CLASS_in_classDecl6025( FOLLOW_CLASS_in_classDecl6025_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_classDecl6029_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_classDecl6029( FOLLOW_TYPE_in_classDecl6029_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COLON_in_classDecl6031_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COLON_in_classDecl6031( FOLLOW_COLON_in_classDecl6031_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_classDecl6035_bits[]	= { ANTLR_UINT64_LIT(0x0000000300000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_classDecl6035( FOLLOW_TYPE_in_classDecl6035_bits, 1 );

static	ANTLR_BITWORD FOLLOW_parameterList_in_classDecl6063_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_parameterList_in_classDecl6063( FOLLOW_parameterList_in_classDecl6063_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACE_in_classDecl6081_bits[]	= { ANTLR_UINT64_LIT(0x0394414081000120), ANTLR_UINT64_LIT(0x0000000000000100) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_classDecl6081( FOLLOW_LBRACE_in_classDecl6081_bits, 2 );

static	ANTLR_BITWORD FOLLOW_declaration_in_classDecl6124_bits[]	= { ANTLR_UINT64_LIT(0x0000200000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_declaration_in_classDecl6124( FOLLOW_declaration_in_classDecl6124_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_classDecl6128_bits[]	= { ANTLR_UINT64_LIT(0x0394414081000120), ANTLR_UINT64_LIT(0x0000000000000100) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_classDecl6128( FOLLOW_SEMICOLON_in_classDecl6128_bits, 2 );

static	ANTLR_BITWORD FOLLOW_inherited_declaration_in_classDecl6154_bits[]	= { ANTLR_UINT64_LIT(0x0000200000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_inherited_declaration_in_classDecl6154( FOLLOW_inherited_declaration_in_classDecl6154_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_classDecl6158_bits[]	= { ANTLR_UINT64_LIT(0x0394414081000120), ANTLR_UINT64_LIT(0x0000000000000100) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_classDecl6158( FOLLOW_SEMICOLON_in_classDecl6158_bits, 2 );

static	ANTLR_BITWORD FOLLOW_function_in_classDecl6184_bits[]	= { ANTLR_UINT64_LIT(0x0394414081000120), ANTLR_UINT64_LIT(0x0000000000000100) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl6184( FOLLOW_function_in_classDecl6184_bits, 2 );

static	ANTLR_BITWORD FOLLOW_VIRTUAL_in_classDecl6213_bits[]	= { ANTLR_UINT64_LIT(0x0314400081000120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_VIRTUAL_in_classDecl6213( FOLLOW_VIRTUAL_in_classDecl6213_bits, 1 );

static	ANTLR_BITWORD FOLLOW_function_in_classDecl6217_bits[]	= { ANTLR_UINT64_LIT(0x0394414081000120), ANTLR_UINT64_LIT(0x0000000000000100) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl6217( FOLLOW_function_in_classDecl6217_bits, 2 );

static	ANTLR_BITWORD FOLLOW_OVERRIDE_in_classDecl6243_bits[]	= { ANTLR_UINT64_LIT(0x0314400081000120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_OVERRIDE_in_classDecl6243( FOLLOW_OVERRIDE_in_classDecl6243_bits, 1 );

static	ANTLR_BITWORD FOLLOW_function_in_classDecl6247_bits[]	= { ANTLR_UINT64_LIT(0x0394414081000120), ANTLR_UINT64_LIT(0x0000000000000100) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl6247( FOLLOW_function_in_classDecl6247_bits, 2 );

static	ANTLR_BITWORD FOLLOW_RBRACE_in_classDecl6283_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_classDecl6283( FOLLOW_RBRACE_in_classDecl6283_bits, 1 );

static	ANTLR_BITWORD FOLLOW_INCLUDE_in_inc6313_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_INCLUDE_in_inc6313( FOLLOW_INCLUDE_in_inc6313_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRING_in_inc6315_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_in_inc6315( FOLLOW_STRING_in_inc6315_bits, 1 );

static	ANTLR_BITWORD FOLLOW_inc_in_program6344_bits[]	= { ANTLR_UINT64_LIT(0x031C4000A1000322) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_inc_in_program6344( FOLLOW_inc_in_program6344_bits, 1 );

static	ANTLR_BITWORD FOLLOW_function_in_program6383_bits[]	= { ANTLR_UINT64_LIT(0x031C400081000322) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_program6383( FOLLOW_function_in_program6383_bits, 1 );

static	ANTLR_BITWORD FOLLOW_structDecl_in_program6405_bits[]	= { ANTLR_UINT64_LIT(0x031C400081000322) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_structDecl_in_program6405( FOLLOW_structDecl_in_program6405_bits, 1 );

static	ANTLR_BITWORD FOLLOW_classDecl_in_program6425_bits[]	= { ANTLR_UINT64_LIT(0x031C400081000322) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_classDecl_in_program6425( FOLLOW_classDecl_in_program6425_bits, 1 );









scripting::type*
WNScriptASTParser::objectType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    ImplTraits::CommonTokenType const* TYPE1 = NULL;






        node = nullptr;



    {
        {
            TYPE1 =  this->matchToken(TYPE, &FOLLOW_TYPE_in_objectType1298);
            if  (this->hasException())
            {
                goto ruleobjectTypeEx;
            }


            {
                 node = m_allocator->construct<scripting::type>(m_allocator, (TYPE1->getText()).c_str()); SET_LOCATION(node, TYPE1);
            }


        }

    }
    goto ruleobjectTypeEx;
    ruleobjectTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::type*
WNScriptASTParser::scalarType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    ImplTraits::CommonTokenType const* VOID_TYPE2 = NULL;
    ImplTraits::CommonTokenType const* INT_TYPE3 = NULL;
    ImplTraits::CommonTokenType const* FLOAT_TYPE4 = NULL;
    ImplTraits::CommonTokenType const* CHAR_TYPE5 = NULL;
    ImplTraits::CommonTokenType const* BOOL_TYPE6 = NULL;
    ImplTraits::CommonTokenType const* STRING_TYPE7 = NULL;






        node = nullptr;



    {
        {

            ANTLR_UINT32 alt1;

            alt1=6;

            switch ( this->LA(1) )
            {
            case VOID_TYPE:
            	{
            		alt1=1;
            	}
                break;
            case INT_TYPE:
            	{
            		alt1=2;
            	}
                break;
            case FLOAT_TYPE:
            	{
            		alt1=3;
            	}
                break;
            case CHAR_TYPE:
            	{
            		alt1=4;
            	}
                break;
            case BOOL_TYPE:
            	{
            		alt1=5;
            	}
                break;
            case STRING_TYPE:
            	{
            		alt1=6;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 1 );
                ex->set_state( 0 );


                goto rulescalarTypeEx;

            }

            switch (alt1)
            {
        	case 1:
        	    {
        	        VOID_TYPE2 =  this->matchToken(VOID_TYPE, &FOLLOW_VOID_TYPE_in_scalarType1330);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::void_type); SET_LOCATION(node, VOID_TYPE2);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        INT_TYPE3 =  this->matchToken(INT_TYPE, &FOLLOW_INT_TYPE_in_scalarType1342);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::int_type); SET_LOCATION(node, INT_TYPE3);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        FLOAT_TYPE4 =  this->matchToken(FLOAT_TYPE, &FOLLOW_FLOAT_TYPE_in_scalarType1354);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::float_type); SET_LOCATION(node, FLOAT_TYPE4);
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        CHAR_TYPE5 =  this->matchToken(CHAR_TYPE, &FOLLOW_CHAR_TYPE_in_scalarType1366);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::char_type); SET_LOCATION(node, CHAR_TYPE5);
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        BOOL_TYPE6 =  this->matchToken(BOOL_TYPE, &FOLLOW_BOOL_TYPE_in_scalarType1378);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::bool_type); SET_LOCATION(node, BOOL_TYPE6);
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	        STRING_TYPE7 =  this->matchToken(STRING_TYPE, &FOLLOW_STRING_TYPE_in_scalarType1390);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::string_type); SET_LOCATION(node, STRING_TYPE7);
        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulescalarTypeEx;
    rulescalarTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::type*
WNScriptASTParser::arrayType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    ImplTraits::CommonTokenType const* LSQBRACKET9 = NULL;
    ImplTraits::CommonTokenType const* RSQBRACKET11 = NULL;
    ImplTraits::CommonTokenType const* DLSQBRACKET12 = NULL;
    ImplTraits::CommonTokenType const* DRSQBRACKET13 = NULL;
    scripting::type* a;
    scripting::type* b;
    scripting::type* scalarType8;
    scripting::constant_expression* constant10;





        node = nullptr;
        scripting::reference_type rt = scripting::reference_type::raw;



    {
        {
            {
                int alt2=3;
                switch ( this->LA(1) )
                {
                case BOOL_TYPE:
                case CHAR_TYPE:
                case FLOAT_TYPE:
                case INT_TYPE:
                case STRING_TYPE:
                case VOID_TYPE:
                	{
                		alt2=1;
                	}
                    break;
                case TYPE:
                	{
                		alt2=2;
                	}
                    break;
                case SHARED_REF:
                	{
                		alt2=3;
                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 2 );
                    ex->set_state( 0 );


                    goto rulearrayTypeEx;

                }

                switch (alt2)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_scalarType_in_arrayType1427);
            	        scalarType8=scalarType();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulearrayTypeEx;
            	        }


            	        {
            	             node = scalarType8
            	            ; SET_LOCATION_FROM_NODE(node, scalarType8
            	            );
            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        this->followPush(FOLLOW_objectType_in_arrayType1443);
            	        a=objectType();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulearrayTypeEx;
            	        }


            	        {
            	             node = a
            	            ; SET_LOCATION_FROM_NODE(node, a
            	            );
            	                        rt = scripting::reference_type::raw;
            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	         this->matchToken(SHARED_REF, &FOLLOW_SHARED_REF_in_arrayType1457);
            	        if  (this->hasException())
            	        {
            	            goto rulearrayTypeEx;
            	        }


            	        this->followPush(FOLLOW_objectType_in_arrayType1461);
            	        b=objectType();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulearrayTypeEx;
            	        }


            	        {
            	             node = b
            	            ; SET_LOCATION_FROM_NODE(node, b
            	            );
            	                        rt = scripting::reference_type::shared;
            	        }


            	    }
            	    break;

                }
            }

            {
                int alt4=2;
                switch ( this->LA(1) )
                {
                case LSQBRACKET:
                	{
                		alt4=1;
                	}
                    break;
                case DLSQBRACKET:
                	{
                		alt4=2;
                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 4 );
                    ex->set_state( 0 );


                    goto rulearrayTypeEx;

                }

                switch (alt4)
                {
            	case 1:
            	    {
            	        {
            	            {
            	                LSQBRACKET9 =  this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_arrayType1495);
            	                if  (this->hasException())
            	                {
            	                    goto rulearrayTypeEx;
            	                }


            	                {
            	                     node->set_reference_type(rt); node = m_allocator->construct<scripting::array_type>(m_allocator, node); SET_LOCATION(node, LSQBRACKET9);
            	                }


            	            }


            	            {
            	                int alt3=2;
            	                switch ( this->LA(1) )
            	                {
            	                    case BOOL:
            	                    case BOOL_TYPE:
            	                    case CHAR:
            	                    case CHAR_TYPE:
            	                    case FLOAT:
            	                    case FLOAT_TYPE:
            	                    case INT:
            	                    case INT_TYPE:
            	                    case NULLTOK:
            	                    case STRING:
            	                    case STRING_TYPE:
            	                    case VOID_TYPE:
            	                    	{
            	                    		alt3=1;
            	                    	}
            	                        break;
            	                }

            	                switch (alt3)
            	                {
            	            	case 1:
            	            	    {
            	            	        this->followPush(FOLLOW_constant_in_arrayType1514);
            	            	        constant10=constant();

            	            	        this->followPop();
            	            	        if  (this->hasException())
            	            	        {
            	            	            goto rulearrayTypeEx;
            	            	        }


            	            	        {
            	            	             scripting::cast_to<scripting::array_type>(node)->set_constant(constant10
            	            	            );
            	            	        }


            	            	    }
            	            	    break;

            	                }
            	            }

            	            {
            	                RSQBRACKET11 =  this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_arrayType1536);
            	                if  (this->hasException())
            	                {
            	                    goto rulearrayTypeEx;
            	                }


            	                {
            	                     SET_END_LOCATION(node, RSQBRACKET11);
            	                }


            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	            DLSQBRACKET12 =  this->matchToken(DLSQBRACKET, &FOLLOW_DLSQBRACKET_in_arrayType1565);
            	            if  (this->hasException())
            	            {
            	                goto rulearrayTypeEx;
            	            }


            	            DRSQBRACKET13 =  this->matchToken(DRSQBRACKET, &FOLLOW_DRSQBRACKET_in_arrayType1567);
            	            if  (this->hasException())
            	            {
            	                goto rulearrayTypeEx;
            	            }


            	            {
            	                 node->set_reference_type(rt); node = m_allocator->construct<scripting::runtime_array_type>(m_allocator, node); SET_LOCATION(node, DLSQBRACKET12); SET_END_LOCATION(node, DRSQBRACKET13);
            	            }


            	        }


            	    }
            	    break;

                }
            }

        }

    }
    goto rulearrayTypeEx;
    rulearrayTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::type*
WNScriptASTParser::sliceType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    ImplTraits::CommonTokenType const* b = NULL;
    ImplTraits::CommonTokenType const* c = NULL;
    ImplTraits::CommonTokenType const* d = NULL;
    ImplTraits::CommonTokenType const* INT14 = NULL;
    scripting::type* a;





        node = nullptr;



    {
        {
            {
                this->followPush(FOLLOW_scalarType_in_sliceType1617);
                a=scalarType();

                this->followPop();
                if  (this->hasException())
                {
                    goto rulesliceTypeEx;
                }


                {

                                node = a
                    ; SET_LOCATION_FROM_NODE(node, a
                    );
                                node = m_allocator->construct<scripting::slice_type>(m_allocator, node);
                                SET_LOCATION_FROM_NODE(node, a
                    );

                }


                {
                    int alt5=2;
                    switch ( this->LA(1) )
                    {
                    case SLICETOK:
                    	{
                    		alt5=1;
                    	}
                        break;
                    case SSOR:
                    	{
                    		alt5=2;
                    	}
                        break;

                    default:
                        ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                        ex->set_decisionNum( 5 );
                        ex->set_state( 0 );


                        goto rulesliceTypeEx;

                    }

                    switch (alt5)
                    {
                	case 1:
                	    {
                	        {
                	            b =  this->matchToken(SLICETOK, &FOLLOW_SLICETOK_in_sliceType1633);
                	            if  (this->hasException())
                	            {
                	                goto rulesliceTypeEx;
                	            }


                	            INT14 =  this->matchToken(INT, &FOLLOW_INT_in_sliceType1635);
                	            if  (this->hasException())
                	            {
                	                goto rulesliceTypeEx;
                	            }


                	            c =  this->matchToken(SLICETOK, &FOLLOW_SLICETOK_in_sliceType1639);
                	            if  (this->hasException())
                	            {
                	                goto rulesliceTypeEx;
                	            }


                	            {

                	                            scripting::cast_to<scripting::slice_type>(node)->set_dimensions((INT14->getText()).c_str());
                	                            SET_END_LOCATION(node, c);

                	            }


                	        }


                	    }
                	    break;
                	case 2:
                	    {
                	        {
                	            d =  this->matchToken(SSOR, &FOLLOW_SSOR_in_sliceType1658);
                	            if  (this->hasException())
                	            {
                	                goto rulesliceTypeEx;
                	            }


                	            {

                	                            SET_END_LOCATION(node, d);

                	            }


                	        }


                	    }
                	    break;

                    }
                }

            }


        }

    }
    goto rulesliceTypeEx;
    rulesliceTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::type*
WNScriptASTParser::compoundType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    scripting::type* objectType15;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_objectType_in_compoundType1693);
            objectType15=objectType();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecompoundTypeEx;
            }


            {
                 node = objectType15
                ;
            }


        }

    }
    goto rulecompoundTypeEx;
    rulecompoundTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::type*
WNScriptASTParser::nonArrayType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    scripting::type* scalarType16;
    scripting::type* objectType17;





      node = nullptr;



    {
        {

            ANTLR_UINT32 alt6;

            alt6=2;

            switch ( this->LA(1) )
            {
            case BOOL_TYPE:
            case CHAR_TYPE:
            case FLOAT_TYPE:
            case INT_TYPE:
            case STRING_TYPE:
            case VOID_TYPE:
            	{
            		alt6=1;
            	}
                break;
            case TYPE:
            	{
            		alt6=2;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 6 );
                ex->set_state( 0 );


                goto rulenonArrayTypeEx;

            }

            switch (alt6)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_nonArrayType1720);
        	        scalarType16=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenonArrayTypeEx;
        	        }


        	        {
        	             node = scalarType16
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_objectType_in_nonArrayType1730);
        	        objectType17=objectType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenonArrayTypeEx;
        	        }


        	        {
        	             node = objectType17
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulenonArrayTypeEx;
    rulenonArrayTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::type*
WNScriptASTParser::type()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    scripting::type* compoundType18;
    scripting::type* arrayType19;
    scripting::type* sliceType20;
    scripting::type* scalarType21;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt7;

            alt7=4;

            switch ( this->LA(1) )
            {
            case TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case EOF:
            			{
            				alt7=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt7=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 1 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case VOID_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt7=2;
            			}
            		    break;
            		case SLICETOK:
            		case SSOR:
            			{
            				alt7=3;
            			}
            		    break;
            		case EOF:
            			{
            				alt7=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 2 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case INT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt7=2;
            			}
            		    break;
            		case SLICETOK:
            		case SSOR:
            			{
            				alt7=3;
            			}
            		    break;
            		case EOF:
            			{
            				alt7=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 3 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case FLOAT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt7=2;
            			}
            		    break;
            		case SLICETOK:
            		case SSOR:
            			{
            				alt7=3;
            			}
            		    break;
            		case EOF:
            			{
            				alt7=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 4 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case CHAR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt7=2;
            			}
            		    break;
            		case SLICETOK:
            		case SSOR:
            			{
            				alt7=3;
            			}
            		    break;
            		case EOF:
            			{
            				alt7=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 5 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case BOOL_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt7=2;
            			}
            		    break;
            		case SLICETOK:
            		case SSOR:
            			{
            				alt7=3;
            			}
            		    break;
            		case EOF:
            			{
            				alt7=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 6 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case STRING_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt7=2;
            			}
            		    break;
            		case SLICETOK:
            		case SSOR:
            			{
            				alt7=3;
            			}
            		    break;
            		case EOF:
            			{
            				alt7=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 7 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case SHARED_REF:
            	{
            		alt7=2;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 7 );
                ex->set_state( 0 );


                goto ruletypeEx;

            }

            switch (alt7)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_compoundType_in_type1760);
        	        compoundType18=compoundType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruletypeEx;
        	        }


        	        {
        	             node = compoundType18
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_arrayType_in_type1770);
        	        arrayType19=arrayType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruletypeEx;
        	        }


        	        {
        	             node = arrayType19
        	            ;
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        this->followPush(FOLLOW_sliceType_in_type1780);
        	        sliceType20=sliceType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruletypeEx;
        	        }


        	        {
        	             node = sliceType20
        	            ;
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_type1790);
        	        scalarType21=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruletypeEx;
        	        }


        	        {
        	             node = scalarType21
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruletypeEx;
    ruletypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::parameter*
WNScriptASTParser::param()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::parameter* node;


    ImplTraits::CommonTokenType const* a = NULL;
    ImplTraits::CommonTokenType const* aa = NULL;
    ImplTraits::CommonTokenType const* dd = NULL;
    ImplTraits::CommonTokenType const* ff = NULL;
    ImplTraits::CommonTokenType const* c = NULL;
    ImplTraits::CommonTokenType const* e = NULL;
    ImplTraits::CommonTokenType const* g = NULL;
    ImplTraits::CommonTokenType const* SHARED_REF23 = NULL;
    ImplTraits::CommonTokenType const* WEAK_REF24 = NULL;
    scripting::type* bb;
    scripting::type* cc;
    scripting::type* ee;
    scripting::type* b;
    scripting::type* d;
    scripting::type* f;
    scripting::type* scalarType22;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt8;

            alt8=7;

            switch ( this->LA(1) )
            {
            case VOID_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt8=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt8=3;
            			}
            		    break;
            		case SLICETOK:
            		case SSOR:
            			{
            				alt8=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 8 );
            		    ex->set_state( 1 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case INT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt8=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt8=3;
            			}
            		    break;
            		case SLICETOK:
            		case SSOR:
            			{
            				alt8=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 8 );
            		    ex->set_state( 2 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case FLOAT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt8=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt8=3;
            			}
            		    break;
            		case SLICETOK:
            		case SSOR:
            			{
            				alt8=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 8 );
            		    ex->set_state( 3 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case CHAR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt8=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt8=3;
            			}
            		    break;
            		case SLICETOK:
            		case SSOR:
            			{
            				alt8=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 8 );
            		    ex->set_state( 4 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case BOOL_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt8=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt8=3;
            			}
            		    break;
            		case SLICETOK:
            		case SSOR:
            			{
            				alt8=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 8 );
            		    ex->set_state( 5 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case STRING_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt8=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt8=3;
            			}
            		    break;
            		case SLICETOK:
            		case SSOR:
            			{
            				alt8=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 8 );
            		    ex->set_state( 6 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt8=2;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt8=3;
            			}
            		    break;
            		case QUESTION:
            			{
            				alt8=7;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 8 );
            		    ex->set_state( 7 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case SHARED_REF:
            	{
            		switch ( this->LA(2) )
            		{
            		case TYPE:
            			{
            				switch ( this->LA(3) )
            				{
            				case DLSQBRACKET:
            				case LSQBRACKET:
            					{
            						alt8=3;
            					}
            				    break;
            				case ID:
            					{
            						alt8=5;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 8 );
            				    ex->set_state( 15 );


            				    goto ruleparamEx;

            				}

            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 8 );
            		    ex->set_state( 8 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case WEAK_REF:
            	{
            		alt8=6;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 8 );
                ex->set_state( 0 );


                goto ruleparamEx;

            }

            switch (alt8)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_param1822);
        	        scalarType22=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        a =  this->matchToken(ID, &FOLLOW_ID_in_param1826);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                        node = m_allocator->construct<scripting::parameter>(m_allocator, scalarType22
        	            , (a->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            scalarType22
        	            ); SET_END_LOCATION(node, a);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_compoundType_in_param1841);
        	        bb=compoundType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        aa =  this->matchToken(ID, &FOLLOW_ID_in_param1845);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                        bb
        	            ->set_reference_type(scripting::reference_type::unique);
        	                        node = m_allocator->construct<scripting::parameter>(m_allocator, bb
        	            , (aa->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            bb
        	            ); SET_END_LOCATION(node, aa);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        this->followPush(FOLLOW_arrayType_in_param1860);
        	        cc=arrayType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        dd =  this->matchToken(ID, &FOLLOW_ID_in_param1864);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                        cc
        	            ->set_reference_type(scripting::reference_type::unique);
        	                        node = m_allocator->construct<scripting::parameter>(m_allocator, cc
        	            , (dd->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            cc
        	            ); SET_END_LOCATION(node, dd);
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        this->followPush(FOLLOW_sliceType_in_param1879);
        	        ee=sliceType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        ff =  this->matchToken(ID, &FOLLOW_ID_in_param1883);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                        ee
        	            ->set_reference_type(scripting::reference_type::raw);
        	                        node = m_allocator->construct<scripting::parameter>(m_allocator, ee
        	            , (ff->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            ee
        	            ); SET_END_LOCATION(node, ff);
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        SHARED_REF23 =  this->matchToken(SHARED_REF, &FOLLOW_SHARED_REF_in_param1896);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        this->followPush(FOLLOW_compoundType_in_param1900);
        	        b=compoundType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        c =  this->matchToken(ID, &FOLLOW_ID_in_param1904);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                       b
        	            ->set_reference_type(scripting::reference_type::shared);
        	                       node = m_allocator->construct<scripting::parameter>(m_allocator, b
        	            , (c->getText()).c_str()); SET_LOCATION(node, SHARED_REF23); SET_END_LOCATION(node, c);

        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	        WEAK_REF24 =  this->matchToken(WEAK_REF, &FOLLOW_WEAK_REF_in_param1917);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        this->followPush(FOLLOW_compoundType_in_param1921);
        	        d=compoundType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        e =  this->matchToken(ID, &FOLLOW_ID_in_param1926);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                       d
        	            ->set_reference_type(scripting::reference_type::weak);
        	                       node = m_allocator->construct<scripting::parameter>(m_allocator, d
        	            , (e->getText()).c_str()); SET_LOCATION(node, WEAK_REF24); SET_END_LOCATION(node, e);

        	        }


        	    }
        	    break;
        	case 7:
        	    {
        	        this->followPush(FOLLOW_compoundType_in_param1941);
        	        f=compoundType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	         this->matchToken(QUESTION, &FOLLOW_QUESTION_in_param1943);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        g =  this->matchToken(ID, &FOLLOW_ID_in_param1948);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                       f
        	            ->set_reference_type(scripting::reference_type::nullable);
        	                       node = m_allocator->construct<scripting::parameter>(m_allocator, f
        	            , (g->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            f
        	            ); SET_END_LOCATION(node, g);

        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleparamEx;
    ruleparamEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::parameter_list*
WNScriptASTParser::paramList()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::parameter_list* node;


    scripting::parameter* a;
    scripting::parameter* b;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_param_in_paramList1980);
            a=param();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleparamListEx;
            }


            {
                 node = m_allocator->construct<scripting::parameter_list>(m_allocator, a
                ); SET_LOCATION_FROM_NODE(node, a
                );
            }



            for (;;)
            {
                int alt9=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt9=1;
                	}
                    break;

                }

                switch (alt9)
                {
            	case 1:
            	    {
            	         this->matchToken(COMMA, &FOLLOW_COMMA_in_paramList1993);
            	        if  (this->hasException())
            	        {
            	            goto ruleparamListEx;
            	        }


            	        this->followPush(FOLLOW_param_in_paramList1997);
            	        b=param();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleparamListEx;
            	        }


            	        {
            	             node
            	            ->add_parameter(b
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop9;
            	    break;
                }
            }
            loop9: ;


        }

    }
    goto ruleparamListEx;
    ruleparamListEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::parameter_list*
WNScriptASTParser::parameterList()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::parameter_list* node;


    ImplTraits::CommonTokenType const* LBRACKET26 = NULL;
    ImplTraits::CommonTokenType const* RBRACKET27 = NULL;
    scripting::parameter_list* paramList25;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt10;

            alt10=2;

            switch ( this->LA(1) )
            {
            case LBRACKET:
            	{
            		switch ( this->LA(2) )
            		{
            		case RBRACKET:
            			{
            				alt10=2;
            			}
            		    break;
            		case BOOL_TYPE:
            		case CHAR_TYPE:
            		case FLOAT_TYPE:
            		case INT_TYPE:
            		case SHARED_REF:
            		case STRING_TYPE:
            		case TYPE:
            		case VOID_TYPE:
            		case WEAK_REF:
            			{
            				alt10=1;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 10 );
            		    ex->set_state( 1 );


            		    goto ruleparameterListEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 10 );
                ex->set_state( 0 );


                goto ruleparameterListEx;

            }

            switch (alt10)
            {
        	case 1:
        	    {
        	        LBRACKET26 =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_parameterList2029);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        this->followPush(FOLLOW_paramList_in_parameterList2031);
        	        paramList25=paramList();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        RBRACKET27 =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_parameterList2033);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        {
        	             node = paramList25
        	            ; SET_LOCATION(node, LBRACKET26); SET_END_LOCATION(node, RBRACKET27);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	         this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_parameterList2050);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	         this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_parameterList2052);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        {
        	             node = nullptr;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleparameterListEx;
    ruleparameterListEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::assign_type
WNScriptASTParser::assign_type()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::assign_type node;







        node = scripting::assign_type::equal;



    {
        {

            ANTLR_UINT32 alt11;

            alt11=6;

            switch ( this->LA(1) )
            {
            case 77:
            	{
            		alt11=1;
            	}
                break;
            case 69:
            	{
            		alt11=2;
            	}
                break;
            case 71:
            	{
            		alt11=3;
            	}
                break;
            case 67:
            	{
            		alt11=4;
            	}
                break;
            case 74:
            	{
            		alt11=5;
            	}
                break;
            case 63:
            	{
            		alt11=6;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 11 );
                ex->set_state( 0 );


                goto ruleassign_typeEx;

            }

            switch (alt11)
            {
        	case 1:
        	    {
        	         this->matchToken(77, &FOLLOW_77_in_assign_type2088);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::equal;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	         this->matchToken(69, &FOLLOW_69_in_assign_type2102);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::add_equal;
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	         this->matchToken(71, &FOLLOW_71_in_assign_type2115);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::sub_equal;
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	         this->matchToken(67, &FOLLOW_67_in_assign_type2128);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::mult_equal;
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	         this->matchToken(74, &FOLLOW_74_in_assign_type2141);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::div_equal;
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	         this->matchToken(63, &FOLLOW_63_in_assign_type2154);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::mod_equal;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleassign_typeEx;
    ruleassign_typeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::arg_list*
WNScriptASTParser::arglist()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::arg_list* node;


    scripting::expression* a;
    scripting::expression* d;





        node = m_allocator->construct<scripting::arg_list>(m_allocator);



    {
        {
            {
                {
                    this->followPush(FOLLOW_expr_in_arglist2212);
                    a=expr();

                    this->followPop();
                    if  (this->hasException())
                    {
                        goto rulearglistEx;
                    }


                    {
                         node->add_expression(a
                        ); SET_LOCATION_FROM_NODE(node, a
                        );
                    }


                }


            }



            for (;;)
            {
                int alt13=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt13=1;
                	}
                    break;

                }

                switch (alt13)
                {
            	case 1:
            	    {
            	         this->matchToken(COMMA, &FOLLOW_COMMA_in_arglist2245);
            	        if  (this->hasException())
            	        {
            	            goto rulearglistEx;
            	        }


            	        {
            	            int alt12=2;
            	            switch ( this->LA(1) )
            	            {
            	            case BOOL:
            	            case BOOL_TYPE:
            	            case CHAR:
            	            case CHAR_TYPE:
            	            case DOUBDEC:
            	            case DOUBINC:
            	            case FLOAT:
            	            case FLOAT_TYPE:
            	            case ID:
            	            case INT:
            	            case INT_TYPE:
            	            case LBRACKET:
            	            case LENGTH:
            	            case NULLTOK:
            	            case RESOURCE:
            	            case SHARED_REF:
            	            case STRING:
            	            case STRING_TYPE:
            	            case TYPE:
            	            case VOID_TYPE:
            	            case 60:
            	            case 70:
            	            	{
            	            		alt12=1;
            	            	}
            	                break;
            	            case COMMA:
            	            case RBRACKET:
            	            	{
            	            		alt12=2;
            	            	}
            	                break;

            	            default:
            	                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 12 );
            	                ex->set_state( 0 );


            	                goto rulearglistEx;

            	            }

            	            switch (alt12)
            	            {
            	        	case 1:
            	        	    {
            	        	        {
            	        	            this->followPush(FOLLOW_expr_in_arglist2289);
            	        	            d=expr();

            	        	            this->followPop();
            	        	            if  (this->hasException())
            	        	            {
            	        	                goto rulearglistEx;
            	        	            }


            	        	            {
            	        	                 node->add_expression(d
            	        	                , true); SET_END_LOCATION_FROM_NODE(node, d
            	        	                );
            	        	            }


            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    {
            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

            	default:
            	    goto loop13;
            	    break;
                }
            }
            loop13: ;


        }

    }
    goto rulearglistEx;
    rulearglistEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::expr()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* cond_ex28;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_cond_ex_in_expr2364);
            cond_ex28=cond_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexprEx;
            }


            {
                 node = cond_ex28
                ;
            }


        }

    }
    goto ruleexprEx;
    ruleexprEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::cond_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* or_ex29;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_or_ex_in_cond_ex2402);
            or_ex29=or_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecond_exEx;
            }


            {
                 node = or_ex29
                ;
            }


            {
                int alt14=2;
                switch ( this->LA(1) )
                {
                    case QUESTION:
                    	{
                    		alt14=1;
                    	}
                        break;
                }

                switch (alt14)
                {
            	case 1:
            	    {
            	         this->matchToken(QUESTION, &FOLLOW_QUESTION_in_cond_ex2425);
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	        this->followPush(FOLLOW_expr_in_cond_ex2429);
            	        b=expr();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	         this->matchToken(COLON, &FOLLOW_COLON_in_cond_ex2431);
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	        this->followPush(FOLLOW_cond_ex_in_cond_ex2435);
            	        c=cond_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	        {
            	             node = m_allocator->construct<scripting::cond_expression>(m_allocator, node, b
            	            , c
            	            );  SET_LOCATION_FROM_NODE(node, or_ex29
            	            ); SET_END_LOCATION_FROM_NODE(node, c
            	            );
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    goto rulecond_exEx;
    rulecond_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::or_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_and_ex_in_or_ex2482);
            a=and_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleor_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt15=2;
                switch ( this->LA(1) )
                {
                case SSOR:
                	{
                		alt15=1;
                	}
                    break;

                }

                switch (alt15)
                {
            	case 1:
            	    {
            	         this->matchToken(SSOR, &FOLLOW_SSOR_in_or_ex2499);
            	        if  (this->hasException())
            	        {
            	            goto ruleor_exEx;
            	        }


            	        this->followPush(FOLLOW_and_ex_in_or_ex2503);
            	        b=and_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleor_exEx;
            	        }


            	        {
            	             node = m_allocator->construct<scripting::short_circuit_expression>(m_allocator, scripting::short_circuit_type::or_operator, node, b
            	            ); SET_LOCATION_FROM_NODE(node, a
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop15;
            	    break;
                }
            }
            loop15: ;


        }

    }
    goto ruleor_exEx;
    ruleor_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::and_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_bit_or_ex_in_and_ex2546);
            a=bit_or_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleand_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt16=2;
                switch ( this->LA(1) )
                {
                case 64:
                	{
                		alt16=1;
                	}
                    break;

                }

                switch (alt16)
                {
            	case 1:
            	    {
            	         this->matchToken(64, &FOLLOW_64_in_and_ex2563);
            	        if  (this->hasException())
            	        {
            	            goto ruleand_exEx;
            	        }


            	        this->followPush(FOLLOW_bit_or_ex_in_and_ex2567);
            	        b=bit_or_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleand_exEx;
            	        }


            	        {
            	            node = m_allocator->construct<scripting::short_circuit_expression>(m_allocator, scripting::short_circuit_type::and_operator, node, b
            	            ); SET_LOCATION_FROM_NODE(node, a
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop16;
            	    break;
                }
            }
            loop16: ;


        }

    }
    goto ruleand_exEx;
    ruleand_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::bit_or_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_bit_xor_ex_in_bit_or_ex2601);
            a=bit_xor_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebit_or_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt17=2;
                switch ( this->LA(1) )
                {
                case SLICETOK:
                	{
                		alt17=1;
                	}
                    break;

                }

                switch (alt17)
                {
            	case 1:
            	    {
            	         this->matchToken(SLICETOK, &FOLLOW_SLICETOK_in_bit_or_ex2618);
            	        if  (this->hasException())
            	        {
            	            goto rulebit_or_exEx;
            	        }


            	        this->followPush(FOLLOW_bit_xor_ex_in_bit_or_ex2622);
            	        b=bit_xor_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulebit_or_exEx;
            	        }


            	        {
            	            node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_or, node, b
            	            );  SET_LOCATION_FROM_NODE(node, a
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop17;
            	    break;
                }
            }
            loop17: ;


        }

    }
    goto rulebit_or_exEx;
    rulebit_or_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::bit_xor_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_bit_and_ex_in_bit_xor_ex2657);
            a=bit_and_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebit_xor_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt18=2;
                switch ( this->LA(1) )
                {
                case 81:
                	{
                		alt18=1;
                	}
                    break;

                }

                switch (alt18)
                {
            	case 1:
            	    {
            	         this->matchToken(81, &FOLLOW_81_in_bit_xor_ex2674);
            	        if  (this->hasException())
            	        {
            	            goto rulebit_xor_exEx;
            	        }


            	        this->followPush(FOLLOW_bit_and_ex_in_bit_xor_ex2678);
            	        b=bit_and_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulebit_xor_exEx;
            	        }


            	        {
            	            node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_xor, node, b
            	            );  SET_LOCATION_FROM_NODE(node, a
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop18;
            	    break;
                }
            }
            loop18: ;


        }

    }
    goto rulebit_xor_exEx;
    rulebit_xor_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::bit_and_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_eq_ex_in_bit_and_ex2713);
            a=eq_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebit_and_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt19=2;
                switch ( this->LA(1) )
                {
                case 65:
                	{
                		alt19=1;
                	}
                    break;

                }

                switch (alt19)
                {
            	case 1:
            	    {
            	         this->matchToken(65, &FOLLOW_65_in_bit_and_ex2730);
            	        if  (this->hasException())
            	        {
            	            goto rulebit_and_exEx;
            	        }


            	        this->followPush(FOLLOW_eq_ex_in_bit_and_ex2734);
            	        b=eq_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulebit_and_exEx;
            	        }


            	        {
            	            node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_and, node, b
            	            );  SET_LOCATION_FROM_NODE(node, a
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop19;
            	    break;
                }
            }
            loop19: ;


        }

    }
    goto rulebit_and_exEx;
    rulebit_and_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::eq_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_rel_ex_in_eq_ex2772);
            a=rel_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleeq_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt20=3;
                switch ( this->LA(1) )
                {
                case 78:
                	{
                		alt20=1;
                	}
                    break;
                case 61:
                	{
                		alt20=2;
                	}
                    break;

                }

                switch (alt20)
                {
            	case 1:
            	    {
            	        {
            	             this->matchToken(78, &FOLLOW_78_in_eq_ex2807);
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            this->followPush(FOLLOW_rel_ex_in_eq_ex2811);
            	            b=rel_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_equal, node, b
            	                );  SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	             this->matchToken(61, &FOLLOW_61_in_eq_ex2834);
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            this->followPush(FOLLOW_rel_ex_in_eq_ex2838);
            	            c=rel_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_not_equal, node, c
            	                ); SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                );
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop20;
            	    break;
                }
            }
            loop20: ;


        }

    }
    goto ruleeq_exEx;
    ruleeq_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::rel_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* d;
    scripting::expression* e;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_add_ex_in_rel_ex2896);
            a=add_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulerel_exEx;
            }


            {
                 node=a
                ;
            }



            for (;;)
            {
                int alt21=5;
                switch ( this->LA(1) )
                {
                case 75:
                	{
                		alt21=1;
                	}
                    break;
                case 79:
                	{
                		alt21=2;
                	}
                    break;
                case 76:
                	{
                		alt21=3;
                	}
                    break;
                case 80:
                	{
                		alt21=4;
                	}
                    break;

                }

                switch (alt21)
                {
            	case 1:
            	    {
            	        {
            	             this->matchToken(75, &FOLLOW_75_in_rel_ex2932);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex2936);
            	            b=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_less_than, node, b
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	             this->matchToken(79, &FOLLOW_79_in_rel_ex2960);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex2964);
            	            c=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_greater_than, node, c
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	        {
            	             this->matchToken(76, &FOLLOW_76_in_rel_ex2988);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex2992);
            	            d=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_less_than_or_equal, node, d
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, d
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 4:
            	    {
            	        {
            	             this->matchToken(80, &FOLLOW_80_in_rel_ex3016);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex3020);
            	            e=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_greater_than_or_equal, node, e
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, e
            	                );
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop21;
            	    break;
                }
            }
            loop21: ;


        }

    }
    goto rulerel_exEx;
    rulerel_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::add_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_mult_ex_in_add_ex3081);
            a=mult_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleadd_exEx;
            }


            {
                node = a
                ;
            }



            for (;;)
            {
                int alt22=3;
                switch ( this->LA(1) )
                {
                case 68:
                	{
                		alt22=1;
                	}
                    break;
                case 70:
                	{
                		alt22=2;
                	}
                    break;

                }

                switch (alt22)
                {
            	case 1:
            	    {
            	        {
            	             this->matchToken(68, &FOLLOW_68_in_add_ex3116);
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            this->followPush(FOLLOW_mult_ex_in_add_ex3120);
            	            b=mult_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_add, node, b
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	             this->matchToken(70, &FOLLOW_70_in_add_ex3142);
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            this->followPush(FOLLOW_mult_ex_in_add_ex3146);
            	            c=mult_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_sub, node, c
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                );
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop22;
            	    break;
                }
            }
            loop22: ;


        }

    }
    goto ruleadd_exEx;
    ruleadd_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::mult_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* d;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_unary_ex_in_mult_ex3205);
            a=unary_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemult_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt23=4;
                switch ( this->LA(1) )
                {
                case 66:
                	{
                		alt23=1;
                	}
                    break;
                case 73:
                	{
                		alt23=2;
                	}
                    break;
                case 62:
                	{
                		alt23=3;
                	}
                    break;

                }

                switch (alt23)
                {
            	case 1:
            	    {
            	        {
            	             this->matchToken(66, &FOLLOW_66_in_mult_ex3244);
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            this->followPush(FOLLOW_unary_ex_in_mult_ex3248);
            	            b=unary_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_mult, node, b
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	             this->matchToken(73, &FOLLOW_73_in_mult_ex3274);
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            this->followPush(FOLLOW_unary_ex_in_mult_ex3278);
            	            c=unary_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_div, node, c
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	        {
            	             this->matchToken(62, &FOLLOW_62_in_mult_ex3304);
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            this->followPush(FOLLOW_unary_ex_in_mult_ex3308);
            	            d=unary_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_mod, node, d
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, d
            	                );
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop23;
            	    break;
                }
            }
            loop23: ;


        }

    }
    goto rulemult_exEx;
    rulemult_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::unary_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* d;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt24;

            alt24=5;

            switch ( this->LA(1) )
            {
            case BOOL:
            case BOOL_TYPE:
            case CHAR:
            case CHAR_TYPE:
            case FLOAT:
            case FLOAT_TYPE:
            case ID:
            case INT:
            case INT_TYPE:
            case LBRACKET:
            case LENGTH:
            case NULLTOK:
            case RESOURCE:
            case SHARED_REF:
            case STRING:
            case STRING_TYPE:
            case TYPE:
            case VOID_TYPE:
            	{
            		alt24=1;
            	}
                break;
            case DOUBINC:
            	{
            		alt24=2;
            	}
                break;
            case DOUBDEC:
            	{
            		alt24=3;
            	}
                break;
            case 70:
            	{
            		alt24=4;
            	}
                break;
            case 60:
            	{
            		alt24=5;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 24 );
                ex->set_state( 0 );


                goto ruleunary_exEx;

            }

            switch (alt24)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_post_ex_in_unary_ex3360);
        	        a=post_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             node = a
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	         this->matchToken(DOUBINC, &FOLLOW_DOUBINC_in_unary_ex3373);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        this->followPush(FOLLOW_unary_ex_in_unary_ex3377);
        	        b=unary_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             scripting::node* t = node; node = m_allocator->construct<scripting::unary_expression>(m_allocator, scripting::unary_type::pre_increment, b
        	            );   SET_LOCATION_FROM_NODE(node, t); SET_END_LOCATION_FROM_NODE(node, b
        	            );
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	         this->matchToken(DOUBDEC, &FOLLOW_DOUBDEC_in_unary_ex3390);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        this->followPush(FOLLOW_unary_ex_in_unary_ex3394);
        	        c=unary_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             scripting::node* t = node; node = m_allocator->construct<scripting::unary_expression>(m_allocator, scripting::unary_type::pre_decrement, c
        	            );   SET_LOCATION_FROM_NODE(node, t); SET_END_LOCATION_FROM_NODE(node, c
        	            );
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	         this->matchToken(70, &FOLLOW_70_in_unary_ex3407);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        this->followPush(FOLLOW_unary_ex_in_unary_ex3411);
        	        d=unary_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             scripting::node* t = node; node = m_allocator->construct<scripting::unary_expression>(m_allocator, scripting::unary_type::negation, d
        	            );   SET_LOCATION_FROM_NODE(node, t); SET_END_LOCATION_FROM_NODE(node, d
        	            );
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	         this->matchToken(60, &FOLLOW_60_in_unary_ex3425);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        this->followPush(FOLLOW_unary_ex_in_unary_ex3429);
        	        d=unary_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             scripting::node* t = node; node = m_allocator->construct<scripting::unary_expression>(m_allocator, scripting::unary_type::inversion, d
        	            );   SET_LOCATION_FROM_NODE(node, t); SET_END_LOCATION_FROM_NODE(node, d
        	            );
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleunary_exEx;
    ruleunary_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::post_expression*
WNScriptASTParser::post_ex_proper()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::post_expression* node;


    ImplTraits::CommonTokenType const* d = NULL;
    ImplTraits::CommonTokenType const* e = NULL;
    ImplTraits::CommonTokenType const* f = NULL;
    ImplTraits::CommonTokenType const* g = NULL;
    ImplTraits::CommonTokenType const* h = NULL;
    ImplTraits::CommonTokenType const* i = NULL;
    ImplTraits::CommonTokenType const* c = NULL;
    ImplTraits::CommonTokenType const* aa = NULL;
    ImplTraits::CommonTokenType const* dd = NULL;
    ImplTraits::CommonTokenType const* DOUBINC30 = NULL;
    ImplTraits::CommonTokenType const* DOUBDEC31 = NULL;
    scripting::expression* a;
    scripting::arg_list* b;
    scripting::expression* bb;
    scripting::expression* cc;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt25;

            alt25=7;

            switch ( this->LA(1) )
            {
            case LSQBRACKET:
            	{
            		alt25=1;
            	}
                break;
            case LBRACKET:
            	{
            		switch ( this->LA(2) )
            		{
            		case RBRACKET:
            			{
            				alt25=2;
            			}
            		    break;
            		case BOOL:
            		case BOOL_TYPE:
            		case CHAR:
            		case CHAR_TYPE:
            		case DOUBDEC:
            		case DOUBINC:
            		case FLOAT:
            		case FLOAT_TYPE:
            		case ID:
            		case INT:
            		case INT_TYPE:
            		case LBRACKET:
            		case LENGTH:
            		case NULLTOK:
            		case RESOURCE:
            		case SHARED_REF:
            		case STRING:
            		case STRING_TYPE:
            		case TYPE:
            		case VOID_TYPE:
            		case 60:
            		case 70:
            			{
            				alt25=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 25 );
            		    ex->set_state( 2 );


            		    goto rulepost_ex_properEx;

            		}

            	}
                break;
            case 72:
            	{
            		alt25=4;
            	}
                break;
            case DOUBINC:
            	{
            		alt25=5;
            	}
                break;
            case DOUBDEC:
            	{
            		alt25=6;
            	}
                break;
            case LBRACE:
            	{
            		alt25=7;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 25 );
                ex->set_state( 0 );


                goto rulepost_ex_properEx;

            }

            switch (alt25)
            {
        	case 1:
        	    {
        	        d =  this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_post_ex_proper3467);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_post_ex_proper3471);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        e =  this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_post_ex_proper3475);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::array_access_expression>(m_allocator, a
        	            ); SET_LOCATION(node, d); SET_END_LOCATION(node, e);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        f =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_post_ex_proper3490);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        g =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_post_ex_proper3494);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::function_call_expression>(m_allocator); SET_LOCATION(node, f); SET_END_LOCATION(node, g);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        h =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_post_ex_proper3522);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        this->followPush(FOLLOW_arglist_in_post_ex_proper3528);
        	        b=arglist();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        i =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_post_ex_proper3532);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::function_call_expression>(m_allocator, b
        	            ); SET_LOCATION(node, h); SET_END_LOCATION(node, i);
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	         this->matchToken(72, &FOLLOW_72_in_post_ex_proper3545);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        c =  this->matchToken(ID, &FOLLOW_ID_in_post_ex_proper3549);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::member_access_expression>(m_allocator, (c->getText()).c_str()); SET_LOCATION(node, c);
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        DOUBINC30 =  this->matchToken(DOUBINC, &FOLLOW_DOUBINC_in_post_ex_proper3576);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::post_unary_expression>(m_allocator, scripting::post_unary_type::post_increment); SET_LOCATION(node, DOUBINC30);
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	        DOUBDEC31 =  this->matchToken(DOUBDEC, &FOLLOW_DOUBDEC_in_post_ex_proper3605);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::post_unary_expression>(m_allocator, scripting::post_unary_type::post_decrement); SET_LOCATION(node, DOUBDEC31);
        	        }


        	    }
        	    break;
        	case 7:
        	    {
        	        {
        	            {
        	                aa =  this->matchToken(LBRACE, &FOLLOW_LBRACE_in_post_ex_proper3651);
        	                if  (this->hasException())
        	                {
        	                    goto rulepost_ex_properEx;
        	                }


        	                {
        	                    node = m_allocator->construct<scripting::slice_expression>(m_allocator, nullptr, nullptr); SET_LOCATION(node, aa);
        	                }


        	            }


        	            {
        	                this->followPush(FOLLOW_expr_in_post_ex_proper3671);
        	                bb=expr();

        	                this->followPop();
        	                if  (this->hasException())
        	                {
        	                    goto rulepost_ex_properEx;
        	                }


        	                {
        	                     scripting::cast_to<scripting::slice_expression>(node)->set_index0(bb
        	                    );
        	                }


        	            }


        	             this->matchToken(COLON, &FOLLOW_COLON_in_post_ex_proper3688);
        	            if  (this->hasException())
        	            {
        	                goto rulepost_ex_properEx;
        	            }


        	            {
        	                this->followPush(FOLLOW_expr_in_post_ex_proper3705);
        	                cc=expr();

        	                this->followPop();
        	                if  (this->hasException())
        	                {
        	                    goto rulepost_ex_properEx;
        	                }


        	                {
        	                     scripting::cast_to<scripting::slice_expression>(node)->set_index1(cc
        	                    );
        	                }


        	            }


        	            {
        	                dd =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_post_ex_proper3725);
        	                if  (this->hasException())
        	                {
        	                    goto rulepost_ex_properEx;
        	                }


        	                {
        	                    SET_END_LOCATION(node, dd);
        	                }


        	            }


        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulepost_ex_properEx;
    rulepost_ex_properEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::post_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::post_expression* a;
    scripting::expression * prim_ex32;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_prim_ex_in_post_ex3772);
            prim_ex32=prim_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulepost_exEx;
            }


            {
                 node = prim_ex32
                ;
            }



            for (;;)
            {
                int alt26=2;
                switch ( this->LA(1) )
                {
                case DOUBDEC:
                case DOUBINC:
                case LBRACE:
                case LBRACKET:
                case LSQBRACKET:
                case 72:
                	{
                		alt26=1;
                	}
                    break;

                }

                switch (alt26)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_post_ex_proper_in_post_ex3791);
            	        a=post_ex_proper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulepost_exEx;
            	        }


            	        {
            	            a
            	            ->add_base_expression(node); SET_END_LOCATION_FROM_NODE(a
            	            , node); node = a
            	            ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop26;
            	    break;
                }
            }
            loop26: ;


        }

    }
    goto rulepost_exEx;
    rulepost_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::assignment_or_expression()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    scripting::expression* a;
    scripting::assign_type b;
    scripting::expression* c;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_expr_in_assignment_or_expression3822);
            a=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleassignment_or_expressionEx;
            }


            {
                int alt27=2;
                switch ( this->LA(1) )
                {
                case 63:
                case 67:
                case 69:
                case 71:
                case 74:
                case 77:
                	{
                		alt27=1;
                	}
                    break;
                case RBRACKET:
                case SEMICOLON:
                	{
                		alt27=2;
                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 27 );
                    ex->set_state( 0 );


                    goto ruleassignment_or_expressionEx;

                }

                switch (alt27)
                {
            	case 1:
            	    {
            	        {
            	            this->followPush(FOLLOW_assign_type_in_assignment_or_expression3854);
            	            b=assign_type();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleassignment_or_expressionEx;
            	            }


            	            this->followPush(FOLLOW_expr_in_assignment_or_expression3858);
            	            c=expr();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleassignment_or_expressionEx;
            	            }


            	            {

            	                                  scripting::lvalue* lval = m_allocator->construct<scripting::lvalue>(m_allocator, a
            	                );
            	                                  SET_LOCATION_FROM_NODE(lval, c
            	                );

            	                                  scripting::assignment_instruction* assign = m_allocator->construct<scripting::assignment_instruction>(m_allocator, lval);
            	                                  SET_LOCATION_FROM_NODE(assign , lval);

            	                                  assign->add_value(b
            	                , c
            	                );
            	                                  SET_END_LOCATION_FROM_NODE(assign, c
            	                );
            	                                  node = assign;

            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	            {

            	                                  node = m_allocator->construct<scripting::expression_instruction>(m_allocator, a
            	                );
            	                                  SET_LOCATION_FROM_NODE(node, a
            	                );

            	            }


            	        }


            	    }
            	    break;

                }
            }

        }

    }
    goto ruleassignment_or_expressionEx;
    ruleassignment_or_expressionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::constant_expression*
WNScriptASTParser::constant()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::constant_expression* node;


    ImplTraits::CommonTokenType const* a = NULL;
    ImplTraits::CommonTokenType const* b = NULL;
    ImplTraits::CommonTokenType const* c = NULL;
    ImplTraits::CommonTokenType const* d = NULL;
    ImplTraits::CommonTokenType const* e = NULL;
    ImplTraits::CommonTokenType const* g = NULL;
    ImplTraits::CommonTokenType const* h = NULL;
    ImplTraits::CommonTokenType const* i = NULL;
    scripting::type* f;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt28;

            alt28=7;

            switch ( this->LA(1) )
            {
            case INT:
            	{
            		alt28=1;
            	}
                break;
            case FLOAT:
            	{
            		alt28=2;
            	}
                break;
            case CHAR:
            	{
            		alt28=3;
            	}
                break;
            case STRING:
            	{
            		alt28=4;
            	}
                break;
            case BOOL:
            	{
            		alt28=5;
            	}
                break;
            case NULLTOK:
            	{
            		alt28=6;
            	}
                break;
            case BOOL_TYPE:
            case CHAR_TYPE:
            case FLOAT_TYPE:
            case INT_TYPE:
            case STRING_TYPE:
            case VOID_TYPE:
            	{
            		alt28=7;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 28 );
                ex->set_state( 0 );


                goto ruleconstantEx;

            }

            switch (alt28)
            {
        	case 1:
        	    {
        	        a =  this->matchToken(INT, &FOLLOW_INT_in_constant3924);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::int_type); SET_LOCATION(type_node, a); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, (a->getText()).c_str()); SET_LOCATION(node, a);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        b =  this->matchToken(FLOAT, &FOLLOW_FLOAT_in_constant3942);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::float_type); SET_LOCATION(type_node, b); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, (b->getText()).c_str()); SET_LOCATION(node, b);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        c =  this->matchToken(CHAR, &FOLLOW_CHAR_in_constant3958);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::char_type); SET_LOCATION(type_node, c); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, (c->getText()).c_str()); SET_LOCATION(node, c);
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        d =  this->matchToken(STRING, &FOLLOW_STRING_in_constant3975);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::string_type); SET_LOCATION(type_node, d); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, (d->getText()).c_str()); SET_LOCATION(node, d);
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        e =  this->matchToken(BOOL, &FOLLOW_BOOL_in_constant3990);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::bool_type); SET_LOCATION(type_node, e); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, (e->getText()).c_str()); SET_LOCATION(node, e);
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	        g =  this->matchToken(NULLTOK, &FOLLOW_NULLTOK_in_constant4007);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::nullptr_type); SET_LOCATION(type_node, g); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, "null"); SET_LOCATION(node, g);
        	        }


        	    }
        	    break;
        	case 7:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_constant4022);
        	        f=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        g =  this->matchToken(LBRACE, &FOLLOW_LBRACE_in_constant4026);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        h =  this->matchToken(STRING, &FOLLOW_STRING_in_constant4030);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        i =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_constant4034);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::constant_expression>(m_allocator, f
        	            , (h->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            f
        	            ); SET_END_LOCATION(node, i);
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleconstantEx;
    ruleconstantEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::builtin_unary_expression*
WNScriptASTParser::builtin_unary()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::builtin_unary_expression* node;


    ImplTraits::CommonTokenType const* LENGTH34 = NULL;
    ImplTraits::CommonTokenType const* RBRACKET35 = NULL;
    scripting::expression* expr33;





        node = nullptr;



    {
        {
            LENGTH34 =  this->matchToken(LENGTH, &FOLLOW_LENGTH_in_builtin_unary4063);
            if  (this->hasException())
            {
                goto rulebuiltin_unaryEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_builtin_unary4065);
            if  (this->hasException())
            {
                goto rulebuiltin_unaryEx;
            }


            this->followPush(FOLLOW_expr_in_builtin_unary4067);
            expr33=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebuiltin_unaryEx;
            }


            RBRACKET35 =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_builtin_unary4069);
            if  (this->hasException())
            {
                goto rulebuiltin_unaryEx;
            }


            {
                 node = m_allocator->construct<scripting::builtin_unary_expression>(m_allocator, scripting::builtin_unary_type::length, expr33
                ); SET_LOCATION(node, LENGTH34); SET_END_LOCATION(node, RBRACKET35);
            }


        }

    }
    goto rulebuiltin_unaryEx;
    rulebuiltin_unaryEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::non_array_prim_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    ImplTraits::CommonTokenType const* ba = NULL;
    ImplTraits::CommonTokenType const* bb = NULL;
    ImplTraits::CommonTokenType const* rlb = NULL;
    ImplTraits::CommonTokenType const* rls = NULL;
    ImplTraits::CommonTokenType const* rrb = NULL;
    ImplTraits::CommonTokenType const* ID36 = NULL;
    ImplTraits::CommonTokenType const* RESOURCE37 = NULL;
    scripting::expression* a;
    scripting::constant_expression* b;
    scripting::type* c;
    scripting::cast_expression* f;
    scripting::type* e;
    scripting::struct_allocation_expression* h;
    scripting::type* i;
    scripting::struct_allocation_expression* j;
    scripting::builtin_unary_expression* u;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt29;

            alt29=8;

            switch ( this->LA(1) )
            {
            case ID:
            	{
            		alt29=1;
            	}
                break;
            case LBRACKET:
            	{
            		alt29=2;
            	}
                break;
            case RESOURCE:
            	{
            		alt29=3;
            	}
                break;
            case BOOL:
            case CHAR:
            case FLOAT:
            case INT:
            case NULLTOK:
            case STRING:
            	{
            		alt29=4;
            	}
                break;
            case VOID_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt29=4;
            			}
            		    break;
            		case LBRACKET:
            			{
            				alt29=5;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 29 );
            		    ex->set_state( 5 );


            		    goto rulenon_array_prim_exEx;

            		}

            	}
                break;
            case INT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt29=4;
            			}
            		    break;
            		case LBRACKET:
            			{
            				alt29=5;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 29 );
            		    ex->set_state( 6 );


            		    goto rulenon_array_prim_exEx;

            		}

            	}
                break;
            case FLOAT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt29=4;
            			}
            		    break;
            		case LBRACKET:
            			{
            				alt29=5;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 29 );
            		    ex->set_state( 7 );


            		    goto rulenon_array_prim_exEx;

            		}

            	}
                break;
            case CHAR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt29=4;
            			}
            		    break;
            		case LBRACKET:
            			{
            				alt29=5;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 29 );
            		    ex->set_state( 8 );


            		    goto rulenon_array_prim_exEx;

            		}

            	}
                break;
            case BOOL_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt29=4;
            			}
            		    break;
            		case LBRACKET:
            			{
            				alt29=5;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 29 );
            		    ex->set_state( 9 );


            		    goto rulenon_array_prim_exEx;

            		}

            	}
                break;
            case STRING_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt29=4;
            			}
            		    break;
            		case LBRACKET:
            			{
            				alt29=5;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 29 );
            		    ex->set_state( 10 );


            		    goto rulenon_array_prim_exEx;

            		}

            	}
                break;
            case TYPE:
            	{
            		alt29=6;
            	}
                break;
            case SHARED_REF:
            	{
            		alt29=7;
            	}
                break;
            case LENGTH:
            	{
            		alt29=8;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 29 );
                ex->set_state( 0 );


                goto rulenon_array_prim_exEx;

            }

            switch (alt29)
            {
        	case 1:
        	    {
        	        ID36 =  this->matchToken(ID, &FOLLOW_ID_in_non_array_prim_ex4098);
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::id_expression>(m_allocator, (ID36->getText()).c_str()); SET_LOCATION(node, ID36);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        ba =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_non_array_prim_ex4112);
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_non_array_prim_ex4116);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        bb =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_non_array_prim_ex4120);
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        {
        	            node = a
        	            ; SET_LOCATION(node, ba); SET_END_LOCATION(node, bb);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        RESOURCE37 =  this->matchToken(RESOURCE, &FOLLOW_RESOURCE_in_non_array_prim_ex4132);
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        rlb =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_non_array_prim_ex4136);
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        rls =  this->matchToken(STRING, &FOLLOW_STRING_in_non_array_prim_ex4140);
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        rrb =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_non_array_prim_ex4144);
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        {
        	             auto n = m_allocator->construct<scripting::resource_expression>(m_allocator, (RESOURCE37->getText()).c_str()+1, (rls->getText()).c_str()); m_file->add_resource((RESOURCE37->getText()).c_str()+1,(rls->getText()).c_str()); node = n; SET_LOCATION(node, RESOURCE37); SET_END_LOCATION(node, rrb);
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        this->followPush(FOLLOW_constant_in_non_array_prim_ex4158);
        	        b=constant();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        {
        	            node = b
        	            ;
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_non_array_prim_ex4173);
        	        c=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        {
        	            this->followPush(FOLLOW_cast_in_non_array_prim_ex4179);
        	            f=cast();

        	            this->followPop();
        	            if  (this->hasException())
        	            {
        	                goto rulenon_array_prim_exEx;
        	            }


        	        }


        	        {
        	             f
        	            ->set_type(c
        	            ); node=f
        	            ; SET_START_LOCATION_FROM_NODE(node, c
        	            );
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	        this->followPush(FOLLOW_objectType_in_non_array_prim_ex4194);
        	        e=objectType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        this->followPush(FOLLOW_structInit_in_non_array_prim_ex4198);
        	        h=structInit();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        {
        	             h
        	            ->set_type(e
        	            ); node=h
        	            ; SET_START_LOCATION_FROM_NODE(node, e
        	            );
        	        }


        	    }
        	    break;
        	case 7:
        	    {
        	         this->matchToken(SHARED_REF, &FOLLOW_SHARED_REF_in_non_array_prim_ex4210);
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        this->followPush(FOLLOW_objectType_in_non_array_prim_ex4214);
        	        i=objectType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        this->followPush(FOLLOW_structInit_in_non_array_prim_ex4218);
        	        j=structInit();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        {
        	             i
        	            ->set_reference_type(scripting::reference_type::shared); j
        	            ->set_type(i
        	            ); node=j
        	            ; SET_START_LOCATION_FROM_NODE(node, i
        	            );
        	        }


        	    }
        	    break;
        	case 8:
        	    {
        	        this->followPush(FOLLOW_builtin_unary_in_non_array_prim_ex4232);
        	        u=builtin_unary();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        {
        	            node = u
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulenon_array_prim_exEx;
    rulenon_array_prim_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression *
WNScriptASTParser::prim_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression * node;


    scripting::type* k;
    scripting::array_allocation_expression* l;
    scripting::type* m;
    scripting::array_allocation_expression* n;
    scripting::expression* non_array_prim_ex38;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt30;

            alt30=3;

            switch ( this->LA(1) )
            {
            case BOOL:
            case CHAR:
            case FLOAT:
            case ID:
            case INT:
            case LBRACKET:
            case LENGTH:
            case NULLTOK:
            case RESOURCE:
            case STRING:
            	{
            		alt30=1;
            	}
                break;
            case VOID_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt30=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt30=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 30 );
            		    ex->set_state( 2 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case INT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt30=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt30=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 30 );
            		    ex->set_state( 3 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case FLOAT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt30=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt30=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 30 );
            		    ex->set_state( 4 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case CHAR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt30=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt30=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 30 );
            		    ex->set_state( 5 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case BOOL_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt30=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt30=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 30 );
            		    ex->set_state( 6 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case STRING_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt30=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt30=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 30 );
            		    ex->set_state( 7 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACKET:
            			{
            				alt30=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt30=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 30 );
            		    ex->set_state( 8 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case SHARED_REF:
            	{
            		switch ( this->LA(2) )
            		{
            		case TYPE:
            			{
            				switch ( this->LA(3) )
            				{
            				case LBRACKET:
            					{
            						alt30=1;
            					}
            				    break;
            				case DLSQBRACKET:
            				case LSQBRACKET:
            					{
            						alt30=3;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 30 );
            				    ex->set_state( 11 );


            				    goto ruleprim_exEx;

            				}

            			}
            		    break;
            		case BOOL_TYPE:
            		case CHAR_TYPE:
            		case FLOAT_TYPE:
            		case INT_TYPE:
            		case STRING_TYPE:
            		case VOID_TYPE:
            			{
            				alt30=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 30 );
            		    ex->set_state( 9 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 30 );
                ex->set_state( 0 );


                goto ruleprim_exEx;

            }

            switch (alt30)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_non_array_prim_ex_in_prim_ex4261);
        	        non_array_prim_ex38=non_array_prim_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	             node = non_array_prim_ex38
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_nonArrayType_in_prim_ex4275);
        	        k=nonArrayType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        this->followPush(FOLLOW_arrayInit_in_prim_ex4279);
        	        l=arrayInit();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	             l
        	            ->set_type(k
        	            ); node=l
        	            ; SET_START_LOCATION_FROM_NODE(node, k
        	            );
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	         this->matchToken(SHARED_REF, &FOLLOW_SHARED_REF_in_prim_ex4291);
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        this->followPush(FOLLOW_nonArrayType_in_prim_ex4295);
        	        m=nonArrayType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        this->followPush(FOLLOW_arrayInit_in_prim_ex4299);
        	        n=arrayInit();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	             m
        	            ->set_reference_type(scripting::reference_type::shared); n
        	            ->set_type(m
        	            ); node=n
        	            ; SET_START_LOCATION_FROM_NODE(node, m
        	            );
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleprim_exEx;
    ruleprim_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::cast_expression*
WNScriptASTParser::cast()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::cast_expression* node;


    ImplTraits::CommonTokenType const* a = NULL;
    ImplTraits::CommonTokenType const* c = NULL;
    scripting::expression* b;





      node = nullptr;



    {
        {
            a =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_cast4328);
            if  (this->hasException())
            {
                goto rulecastEx;
            }


            this->followPush(FOLLOW_expr_in_cast4332);
            b=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecastEx;
            }


            c =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_cast4336);
            if  (this->hasException())
            {
                goto rulecastEx;
            }


            {
                 node = m_allocator->construct<scripting::cast_expression>(m_allocator, b
                ); SET_LOCATION(node, a); SET_END_LOCATION(node, c);
            }


        }

    }
    goto rulecastEx;
    rulecastEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::struct_allocation_expression*
WNScriptASTParser::structInit()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::struct_allocation_expression* node;


    ImplTraits::CommonTokenType const* a = NULL;
    ImplTraits::CommonTokenType const* b = NULL;
    ImplTraits::CommonTokenType const* c = NULL;
    ImplTraits::CommonTokenType const* e = NULL;
    scripting::arg_list* d;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt31;

            alt31=2;

            switch ( this->LA(1) )
            {
            case LBRACKET:
            	{
            		switch ( this->LA(2) )
            		{
            		case RBRACKET:
            			{
            				alt31=1;
            			}
            		    break;
            		case BOOL:
            		case BOOL_TYPE:
            		case CHAR:
            		case CHAR_TYPE:
            		case DOUBDEC:
            		case DOUBINC:
            		case FLOAT:
            		case FLOAT_TYPE:
            		case ID:
            		case INT:
            		case INT_TYPE:
            		case LBRACKET:
            		case LENGTH:
            		case NULLTOK:
            		case RESOURCE:
            		case SHARED_REF:
            		case STRING:
            		case STRING_TYPE:
            		case TYPE:
            		case VOID_TYPE:
            		case 60:
            		case 70:
            			{
            				alt31=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 31 );
            		    ex->set_state( 1 );


            		    goto rulestructInitEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 31 );
                ex->set_state( 0 );


                goto rulestructInitEx;

            }

            switch (alt31)
            {
        	case 1:
        	    {
        	        {
        	            a =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_structInit4366);
        	            if  (this->hasException())
        	            {
        	                goto rulestructInitEx;
        	            }


        	            b =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_structInit4370);
        	            if  (this->hasException())
        	            {
        	                goto rulestructInitEx;
        	            }


        	            {
        	                 node = m_allocator->construct<scripting::struct_allocation_expression>(m_allocator); SET_LOCATION(node, a); SET_END_LOCATION(node, b);
        	            }


        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        {
        	            c =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_structInit4384);
        	            if  (this->hasException())
        	            {
        	                goto rulestructInitEx;
        	            }


        	            this->followPush(FOLLOW_arglist_in_structInit4388);
        	            d=arglist();

        	            this->followPop();
        	            if  (this->hasException())
        	            {
        	                goto rulestructInitEx;
        	            }


        	            e =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_structInit4392);
        	            if  (this->hasException())
        	            {
        	                goto rulestructInitEx;
        	            }


        	            {
        	                 node = m_allocator->construct<scripting::struct_allocation_expression>(m_allocator); node->set_args(d
        	                ); SET_LOCATION(node, c); SET_END_LOCATION(node, e);
        	            }


        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulestructInitEx;
    rulestructInitEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::array_allocation_expression*
WNScriptASTParser::arrayInit()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::array_allocation_expression* node;


    ImplTraits::CommonTokenType const* c = NULL;
    ImplTraits::CommonTokenType const* h = NULL;
    scripting::expression* e;
    scripting::expression* f;
    scripting::expression* b;
    scripting::arg_list* g;





        node = m_allocator->construct<scripting::array_allocation_expression>(m_allocator);



    {
        {

            ANTLR_UINT32 alt34;

            alt34=2;

            switch ( this->LA(1) )
            {
            case LSQBRACKET:
            	{
            		switch ( this->LA(2) )
            		{
            		case RSQBRACKET:
            			{
            				alt34=2;
            			}
            		    break;
            		case BOOL:
            		case BOOL_TYPE:
            		case CHAR:
            		case CHAR_TYPE:
            		case DOUBDEC:
            		case DOUBINC:
            		case FLOAT:
            		case FLOAT_TYPE:
            		case ID:
            		case INT:
            		case INT_TYPE:
            		case LBRACKET:
            		case LENGTH:
            		case NULLTOK:
            		case RESOURCE:
            		case SHARED_REF:
            		case STRING:
            		case STRING_TYPE:
            		case TYPE:
            		case VOID_TYPE:
            		case 60:
            		case 70:
            			{
            				alt34=1;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 34 );
            		    ex->set_state( 1 );


            		    goto rulearrayInitEx;

            		}

            	}
                break;
            case DLSQBRACKET:
            	{
            		switch ( this->LA(2) )
            		{
            		case DRSQBRACKET:
            			{
            				alt34=2;
            			}
            		    break;
            		case BOOL:
            		case BOOL_TYPE:
            		case CHAR:
            		case CHAR_TYPE:
            		case DOUBDEC:
            		case DOUBINC:
            		case FLOAT:
            		case FLOAT_TYPE:
            		case ID:
            		case INT:
            		case INT_TYPE:
            		case LBRACKET:
            		case LENGTH:
            		case NULLTOK:
            		case RESOURCE:
            		case SHARED_REF:
            		case STRING:
            		case STRING_TYPE:
            		case TYPE:
            		case VOID_TYPE:
            		case 60:
            		case 70:
            			{
            				alt34=1;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 34 );
            		    ex->set_state( 2 );


            		    goto rulearrayInitEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 34 );
                ex->set_state( 0 );


                goto rulearrayInitEx;

            }

            switch (alt34)
            {
        	case 1:
        	    {
        	        {
        	            {
        	                int alt32=2;
        	                switch ( this->LA(1) )
        	                {
        	                case LSQBRACKET:
        	                	{
        	                		alt32=1;
        	                	}
        	                    break;
        	                case DLSQBRACKET:
        	                	{
        	                		alt32=2;
        	                	}
        	                    break;

        	                default:
        	                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                    ex->set_decisionNum( 32 );
        	                    ex->set_state( 0 );


        	                    goto rulearrayInitEx;

        	                }

        	                switch (alt32)
        	                {
        	            	case 1:
        	            	    {
        	            	        {
        	            	             this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_arrayInit4444);
        	            	            if  (this->hasException())
        	            	            {
        	            	                goto rulearrayInitEx;
        	            	            }


        	            	            this->followPush(FOLLOW_expr_in_arrayInit4448);
        	            	            e=expr();

        	            	            this->followPop();
        	            	            if  (this->hasException())
        	            	            {
        	            	                goto rulearrayInitEx;
        	            	            }


        	            	             this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_arrayInit4450);
        	            	            if  (this->hasException())
        	            	            {
        	            	                goto rulearrayInitEx;
        	            	            }


        	            	            {
        	            	                 node->add_expression(e
        	            	                );
        	            	            }


        	            	        }


        	            	    }
        	            	    break;
        	            	case 2:
        	            	    {
        	            	        {
        	            	             this->matchToken(DLSQBRACKET, &FOLLOW_DLSQBRACKET_in_arrayInit4477);
        	            	            if  (this->hasException())
        	            	            {
        	            	                goto rulearrayInitEx;
        	            	            }


        	            	            this->followPush(FOLLOW_expr_in_arrayInit4481);
        	            	            f=expr();

        	            	            this->followPop();
        	            	            if  (this->hasException())
        	            	            {
        	            	                goto rulearrayInitEx;
        	            	            }


        	            	             this->matchToken(DRSQBRACKET, &FOLLOW_DRSQBRACKET_in_arrayInit4483);
        	            	            if  (this->hasException())
        	            	            {
        	            	                goto rulearrayInitEx;
        	            	            }


        	            	            {
        	            	                 node->add_expression(f
        	            	                ); node->set_runtime(true);
        	            	            }


        	            	        }


        	            	    }
        	            	    break;

        	                }
        	            }

        	            {
        	                 this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_arrayInit4502);
        	                if  (this->hasException())
        	                {
        	                    goto rulearrayInitEx;
        	                }


        	                this->followPush(FOLLOW_expr_in_arrayInit4506);
        	                b=expr();

        	                this->followPop();
        	                if  (this->hasException())
        	                {
        	                    goto rulearrayInitEx;
        	                }


        	                c =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_arrayInit4510);
        	                if  (this->hasException())
        	                {
        	                    goto rulearrayInitEx;
        	                }


        	                {
        	                     node->set_copy_initializer(b); SET_LOCATION(node, c);
        	                }


        	            }


        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        {
        	            {
        	                int alt33=2;
        	                switch ( this->LA(1) )
        	                {
        	                case LSQBRACKET:
        	                	{
        	                		alt33=1;
        	                	}
        	                    break;
        	                case DLSQBRACKET:
        	                	{
        	                		alt33=2;
        	                	}
        	                    break;

        	                default:
        	                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                    ex->set_decisionNum( 33 );
        	                    ex->set_state( 0 );


        	                    goto rulearrayInitEx;

        	                }

        	                switch (alt33)
        	                {
        	            	case 1:
        	            	    {
        	            	        {
        	            	             this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_arrayInit4552);
        	            	            if  (this->hasException())
        	            	            {
        	            	                goto rulearrayInitEx;
        	            	            }


        	            	             this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_arrayInit4554);
        	            	            if  (this->hasException())
        	            	            {
        	            	                goto rulearrayInitEx;
        	            	            }


        	            	        }


        	            	    }
        	            	    break;
        	            	case 2:
        	            	    {
        	            	        {
        	            	             this->matchToken(DLSQBRACKET, &FOLLOW_DLSQBRACKET_in_arrayInit4560);
        	            	            if  (this->hasException())
        	            	            {
        	            	                goto rulearrayInitEx;
        	            	            }


        	            	             this->matchToken(DRSQBRACKET, &FOLLOW_DRSQBRACKET_in_arrayInit4562);
        	            	            if  (this->hasException())
        	            	            {
        	            	                goto rulearrayInitEx;
        	            	            }


        	            	            {
        	            	                 node->set_runtime(true);
        	            	            }


        	            	        }


        	            	    }
        	            	    break;

        	                }
        	            }

        	            {
        	                 this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_arrayInit4581);
        	                if  (this->hasException())
        	                {
        	                    goto rulearrayInitEx;
        	                }


        	                this->followPush(FOLLOW_arglist_in_arrayInit4585);
        	                g=arglist();

        	                this->followPop();
        	                if  (this->hasException())
        	                {
        	                    goto rulearrayInitEx;
        	                }


        	                h =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_arrayInit4589);
        	                if  (this->hasException())
        	                {
        	                    goto rulearrayInitEx;
        	                }


        	            }


        	            {
        	                 node->set_inline_initializers(g); SET_LOCATION(node, h);
        	            }


        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulearrayInitEx;
    rulearrayInitEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::declaration*
WNScriptASTParser::declaration()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::declaration* node;


    scripting::parameter* a;
    scripting::expression* c;





        node =  m_allocator->construct<scripting::declaration>(m_allocator);



    {
        {
            this->followPush(FOLLOW_param_in_declaration4632);
            a=param();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledeclarationEx;
            }


            {
                 node->set_parameter(a
                ); SET_LOCATION_FROM_NODE(node, a
                );
            }


            {
                {
                     this->matchToken(77, &FOLLOW_77_in_declaration4667);
                    if  (this->hasException())
                    {
                        goto ruledeclarationEx;
                    }


                    {
                        {
                            this->followPush(FOLLOW_expr_in_declaration4674);
                            c=expr();

                            this->followPop();
                            if  (this->hasException())
                            {
                                goto ruledeclarationEx;
                            }


                        }


                        {
                             node->add_expression_initializer(c
                            ); SET_END_LOCATION_FROM_NODE(node, c
                            );
                        }


                    }


                }


            }


        }

    }
    goto ruledeclarationEx;
    ruledeclarationEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::declaration*
WNScriptASTParser::inherited_declaration()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::declaration* node;


    ImplTraits::CommonTokenType const* a = NULL;
    ImplTraits::CommonTokenType const* d = NULL;
    scripting::expression* c;





        node =  m_allocator->construct<scripting::declaration>(m_allocator);



    {
        {
             this->matchToken(72, &FOLLOW_72_in_inherited_declaration4724);
            if  (this->hasException())
            {
                goto ruleinherited_declarationEx;
            }


            a =  this->matchToken(ID, &FOLLOW_ID_in_inherited_declaration4728);
            if  (this->hasException())
            {
                goto ruleinherited_declarationEx;
            }


            {
                 node->set_inherited_parameter((a->getText()).c_str());  SET_LOCATION(node, a);
            }


            {
                 this->matchToken(77, &FOLLOW_77_in_inherited_declaration4741);
                if  (this->hasException())
                {
                    goto ruleinherited_declarationEx;
                }


                {
                    int alt35=2;
                    switch ( this->LA(1) )
                    {
                    case BOOL:
                    case BOOL_TYPE:
                    case CHAR:
                    case CHAR_TYPE:
                    case DOUBDEC:
                    case DOUBINC:
                    case FLOAT:
                    case FLOAT_TYPE:
                    case ID:
                    case INT:
                    case INT_TYPE:
                    case LBRACKET:
                    case LENGTH:
                    case NULLTOK:
                    case RESOURCE:
                    case SHARED_REF:
                    case STRING:
                    case STRING_TYPE:
                    case TYPE:
                    case VOID_TYPE:
                    case 60:
                    case 70:
                    	{
                    		alt35=1;
                    	}
                        break;
                    case DEFAULT:
                    	{
                    		alt35=2;
                    	}
                        break;

                    default:
                        ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                        ex->set_decisionNum( 35 );
                        ex->set_state( 0 );


                        goto ruleinherited_declarationEx;

                    }

                    switch (alt35)
                    {
                	case 1:
                	    {
                	        {
                	            this->followPush(FOLLOW_expr_in_inherited_declaration4777);
                	            c=expr();

                	            this->followPop();
                	            if  (this->hasException())
                	            {
                	                goto ruleinherited_declarationEx;
                	            }


                	            {
                	                 node->add_expression_initializer(c
                	                ); SET_END_LOCATION_FROM_NODE(node, c
                	                );
                	            }


                	        }


                	    }
                	    break;
                	case 2:
                	    {
                	        {
                	            d =  this->matchToken(DEFAULT, &FOLLOW_DEFAULT_in_inherited_declaration4803);
                	            if  (this->hasException())
                	            {
                	                goto ruleinherited_declarationEx;
                	            }


                	            {
                	                 node->set_default_initialization(); SET_END_LOCATION(node, d);
                	            }


                	        }


                	    }
                	    break;

                    }
                }

            }


        }

    }
    goto ruleinherited_declarationEx;
    ruleinherited_declarationEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::instructionScalar()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    scripting::declaration* declaration39;
    scripting::instruction* assignment_or_expression40;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt36;

            alt36=2;

            switch ( this->LA(1) )
            {
            case VOID_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            		case SLICETOK:
            		case SSOR:
            			{
            				alt36=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case RSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACKET:
            							{
            								alt36=2;
            							}
            						    break;
            						case ID:
            							{
            								alt36=1;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 14 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt36=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 30 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 61:
            						case 62:
            						case 64:
            						case 65:
            						case 66:
            						case 68:
            						case 70:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 78:
            						case 79:
            						case 80:
            						case 81:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 15 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt36=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 30 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 61:
            						case 62:
            						case 64:
            						case 65:
            						case 66:
            						case 68:
            						case 70:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 78:
            						case 79:
            						case 80:
            						case 81:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 16 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt36=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 30 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 61:
            						case 62:
            						case 64:
            						case 65:
            						case 66:
            						case 68:
            						case 70:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 78:
            						case 79:
            						case 80:
            						case 81:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 17 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt36=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 30 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 61:
            						case 62:
            						case 64:
            						case 65:
            						case 66:
            						case 68:
            						case 70:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 78:
            						case 79:
            						case 80:
            						case 81:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 18 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt36=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 30 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 61:
            						case 62:
            						case 64:
            						case 65:
            						case 66:
            						case 68:
            						case 70:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 78:
            						case 79:
            						case 80:
            						case 81:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 19 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case NULLTOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt36=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 30 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 61:
            						case 62:
            						case 64:
            						case 65:
            						case 66:
            						case 68:
            						case 70:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 78:
            						case 79:
            						case 80:
            						case 81:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 20 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case VOID_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt36=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 30 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 61:
            												case 62:
            												case 64:
            												case 65:
            												case 66:
            												case 68:
            												case 70:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 78:
            												case 79:
            												case 80:
            												case 81:
            													{
            														alt36=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 49 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 46 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 31 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 21 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt36=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 30 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 61:
            												case 62:
            												case 64:
            												case 65:
            												case 66:
            												case 68:
            												case 70:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 78:
            												case 79:
            												case 80:
            												case 81:
            													{
            														alt36=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 49 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 46 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 31 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 22 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt36=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 30 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 61:
            												case 62:
            												case 64:
            												case 65:
            												case 66:
            												case 68:
            												case 70:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 78:
            												case 79:
            												case 80:
            												case 81:
            													{
            														alt36=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 49 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 46 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 31 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 23 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt36=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 30 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 61:
            												case 62:
            												case 64:
            												case 65:
            												case 66:
            												case 68:
            												case 70:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 78:
            												case 79:
            												case 80:
            												case 81:
            													{
            														alt36=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 49 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 46 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 31 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 24 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt36=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 30 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 61:
            												case 62:
            												case 64:
            												case 65:
            												case 66:
            												case 68:
            												case 70:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 78:
            												case 79:
            												case 80:
            												case 81:
            													{
            														alt36=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 49 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 46 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 31 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 25 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt36=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 30 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 61:
            												case 62:
            												case 64:
            												case 65:
            												case 66:
            												case 68:
            												case 70:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 78:
            												case 79:
            												case 80:
            												case 81:
            													{
            														alt36=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 49 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 46 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 31 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 26 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case DOUBDEC:
            				case DOUBINC:
            				case ID:
            				case LBRACKET:
            				case LENGTH:
            				case RESOURCE:
            				case SHARED_REF:
            				case TYPE:
            				case 60:
            				case 70:
            					{
            						alt36=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 36 );
            				    ex->set_state( 11 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case DRSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								alt36=1;
            							}
            						    break;
            						case LBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 27 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case RESOURCE:
            				case SHARED_REF:
            				case STRING:
            				case STRING_TYPE:
            				case TYPE:
            				case VOID_TYPE:
            				case 60:
            				case 70:
            					{
            						alt36=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 36 );
            				    ex->set_state( 12 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt36=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 36 );
            		    ex->set_state( 1 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case INT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            		case SLICETOK:
            		case SSOR:
            			{
            				alt36=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case RSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACKET:
            							{
            								alt36=2;
            							}
            						    break;
            						case ID:
            							{
            								alt36=1;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 14 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt36=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 30 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 61:
            						case 62:
            						case 64:
            						case 65:
            						case 66:
            						case 68:
            						case 70:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 78:
            						case 79:
            						case 80:
            						case 81:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 15 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt36=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 30 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 61:
            						case 62:
            						case 64:
            						case 65:
            						case 66:
            						case 68:
            						case 70:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 78:
            						case 79:
            						case 80:
            						case 81:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 16 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt36=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 30 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 61:
            						case 62:
            						case 64:
            						case 65:
            						case 66:
            						case 68:
            						case 70:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 78:
            						case 79:
            						case 80:
            						case 81:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 17 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt36=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 30 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 61:
            						case 62:
            						case 64:
            						case 65:
            						case 66:
            						case 68:
            						case 70:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 78:
            						case 79:
            						case 80:
            						case 81:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 18 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt36=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 30 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 61:
            						case 62:
            						case 64:
            						case 65:
            						case 66:
            						case 68:
            						case 70:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 78:
            						case 79:
            						case 80:
            						case 81:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 19 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case NULLTOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt36=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 30 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 61:
            						case 62:
            						case 64:
            						case 65:
            						case 66:
            						case 68:
            						case 70:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 78:
            						case 79:
            						case 80:
            						case 81:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 20 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case VOID_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt36=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 30 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 61:
            												case 62:
            												case 64:
            												case 65:
            												case 66:
            												case 68:
            												case 70:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 78:
            												case 79:
            												case 80:
            												case 81:
            													{
            														alt36=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 49 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 46 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 31 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 21 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt36=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 30 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 61:
            												case 62:
            												case 64:
            												case 65:
            												case 66:
            												case 68:
            												case 70:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 78:
            												case 79:
            												case 80:
            												case 81:
            													{
            														alt36=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 49 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 46 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 31 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 22 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt36=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 30 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 61:
            												case 62:
            												case 64:
            												case 65:
            												case 66:
            												case 68:
            												case 70:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 78:
            												case 79:
            												case 80:
            												case 81:
            													{
            														alt36=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 49 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 46 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 31 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 23 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt36=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 30 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 61:
            												case 62:
            												case 64:
            												case 65:
            												case 66:
            												case 68:
            												case 70:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 78:
            												case 79:
            												case 80:
            												case 81:
            													{
            														alt36=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 49 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 46 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 31 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 24 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt36=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 30 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 61:
            												case 62:
            												case 64:
            												case 65:
            												case 66:
            												case 68:
            												case 70:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 78:
            												case 79:
            												case 80:
            												case 81:
            													{
            														alt36=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 49 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 46 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 31 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 25 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt36=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 30 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 61:
            												case 62:
            												case 64:
            												case 65:
            												case 66:
            												case 68:
            												case 70:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 78:
            												case 79:
            												case 80:
            												case 81:
            													{
            														alt36=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 49 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 46 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 31 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 26 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case DOUBDEC:
            				case DOUBINC:
            				case ID:
            				case LBRACKET:
            				case LENGTH:
            				case RESOURCE:
            				case SHARED_REF:
            				case TYPE:
            				case 60:
            				case 70:
            					{
            						alt36=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 36 );
            				    ex->set_state( 11 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case DRSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								alt36=1;
            							}
            						    break;
            						case LBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 27 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case RESOURCE:
            				case SHARED_REF:
            				case STRING:
            				case STRING_TYPE:
            				case TYPE:
            				case VOID_TYPE:
            				case 60:
            				case 70:
            					{
            						alt36=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 36 );
            				    ex->set_state( 12 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt36=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 36 );
            		    ex->set_state( 2 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case FLOAT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            		case SLICETOK:
            		case SSOR:
            			{
            				alt36=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case RSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACKET:
            							{
            								alt36=2;
            							}
            						    break;
            						case ID:
            							{
            								alt36=1;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 14 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt36=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 30 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 61:
            						case 62:
            						case 64:
            						case 65:
            						case 66:
            						case 68:
            						case 70:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 78:
            						case 79:
            						case 80:
            						case 81:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 15 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt36=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 30 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 61:
            						case 62:
            						case 64:
            						case 65:
            						case 66:
            						case 68:
            						case 70:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 78:
            						case 79:
            						case 80:
            						case 81:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 16 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt36=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 30 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 61:
            						case 62:
            						case 64:
            						case 65:
            						case 66:
            						case 68:
            						case 70:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 78:
            						case 79:
            						case 80:
            						case 81:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 17 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt36=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 30 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 61:
            						case 62:
            						case 64:
            						case 65:
            						case 66:
            						case 68:
            						case 70:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 78:
            						case 79:
            						case 80:
            						case 81:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 18 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt36=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 30 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 61:
            						case 62:
            						case 64:
            						case 65:
            						case 66:
            						case 68:
            						case 70:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 78:
            						case 79:
            						case 80:
            						case 81:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 19 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case NULLTOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt36=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 30 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 61:
            						case 62:
            						case 64:
            						case 65:
            						case 66:
            						case 68:
            						case 70:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 78:
            						case 79:
            						case 80:
            						case 81:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 20 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case VOID_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt36=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 30 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 61:
            												case 62:
            												case 64:
            												case 65:
            												case 66:
            												case 68:
            												case 70:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 78:
            												case 79:
            												case 80:
            												case 81:
            													{
            														alt36=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 49 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 46 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 31 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 21 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt36=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 30 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 61:
            												case 62:
            												case 64:
            												case 65:
            												case 66:
            												case 68:
            												case 70:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 78:
            												case 79:
            												case 80:
            												case 81:
            													{
            														alt36=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 49 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 46 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 31 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 22 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt36=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 30 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 61:
            												case 62:
            												case 64:
            												case 65:
            												case 66:
            												case 68:
            												case 70:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 78:
            												case 79:
            												case 80:
            												case 81:
            													{
            														alt36=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 49 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 46 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 31 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 23 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt36=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 30 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 61:
            												case 62:
            												case 64:
            												case 65:
            												case 66:
            												case 68:
            												case 70:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 78:
            												case 79:
            												case 80:
            												case 81:
            													{
            														alt36=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 49 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 46 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 31 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 24 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt36=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 30 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 61:
            												case 62:
            												case 64:
            												case 65:
            												case 66:
            												case 68:
            												case 70:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 78:
            												case 79:
            												case 80:
            												case 81:
            													{
            														alt36=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 49 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 46 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 31 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 25 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt36=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 30 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 61:
            												case 62:
            												case 64:
            												case 65:
            												case 66:
            												case 68:
            												case 70:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 78:
            												case 79:
            												case 80:
            												case 81:
            													{
            														alt36=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 49 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 46 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 31 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 26 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case DOUBDEC:
            				case DOUBINC:
            				case ID:
            				case LBRACKET:
            				case LENGTH:
            				case RESOURCE:
            				case SHARED_REF:
            				case TYPE:
            				case 60:
            				case 70:
            					{
            						alt36=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 36 );
            				    ex->set_state( 11 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case DRSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								alt36=1;
            							}
            						    break;
            						case LBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 27 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case RESOURCE:
            				case SHARED_REF:
            				case STRING:
            				case STRING_TYPE:
            				case TYPE:
            				case VOID_TYPE:
            				case 60:
            				case 70:
            					{
            						alt36=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 36 );
            				    ex->set_state( 12 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt36=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 36 );
            		    ex->set_state( 3 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case CHAR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            		case SLICETOK:
            		case SSOR:
            			{
            				alt36=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case RSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACKET:
            							{
            								alt36=2;
            							}
            						    break;
            						case ID:
            							{
            								alt36=1;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 14 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt36=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 30 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 61:
            						case 62:
            						case 64:
            						case 65:
            						case 66:
            						case 68:
            						case 70:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 78:
            						case 79:
            						case 80:
            						case 81:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 15 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt36=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 30 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 61:
            						case 62:
            						case 64:
            						case 65:
            						case 66:
            						case 68:
            						case 70:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 78:
            						case 79:
            						case 80:
            						case 81:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 16 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt36=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 30 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 61:
            						case 62:
            						case 64:
            						case 65:
            						case 66:
            						case 68:
            						case 70:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 78:
            						case 79:
            						case 80:
            						case 81:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 17 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt36=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 30 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 61:
            						case 62:
            						case 64:
            						case 65:
            						case 66:
            						case 68:
            						case 70:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 78:
            						case 79:
            						case 80:
            						case 81:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 18 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt36=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 30 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 61:
            						case 62:
            						case 64:
            						case 65:
            						case 66:
            						case 68:
            						case 70:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 78:
            						case 79:
            						case 80:
            						case 81:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 19 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case NULLTOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt36=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 30 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 61:
            						case 62:
            						case 64:
            						case 65:
            						case 66:
            						case 68:
            						case 70:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 78:
            						case 79:
            						case 80:
            						case 81:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 20 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case VOID_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt36=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 30 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 61:
            												case 62:
            												case 64:
            												case 65:
            												case 66:
            												case 68:
            												case 70:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 78:
            												case 79:
            												case 80:
            												case 81:
            													{
            														alt36=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 49 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 46 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 31 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 21 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt36=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 30 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 61:
            												case 62:
            												case 64:
            												case 65:
            												case 66:
            												case 68:
            												case 70:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 78:
            												case 79:
            												case 80:
            												case 81:
            													{
            														alt36=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 49 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 46 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 31 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 22 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt36=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 30 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 61:
            												case 62:
            												case 64:
            												case 65:
            												case 66:
            												case 68:
            												case 70:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 78:
            												case 79:
            												case 80:
            												case 81:
            													{
            														alt36=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 49 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 46 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 31 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 23 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt36=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 30 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 61:
            												case 62:
            												case 64:
            												case 65:
            												case 66:
            												case 68:
            												case 70:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 78:
            												case 79:
            												case 80:
            												case 81:
            													{
            														alt36=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 49 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 46 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 31 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 24 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt36=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 30 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 61:
            												case 62:
            												case 64:
            												case 65:
            												case 66:
            												case 68:
            												case 70:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 78:
            												case 79:
            												case 80:
            												case 81:
            													{
            														alt36=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 49 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 46 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 31 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 25 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt36=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 30 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 61:
            												case 62:
            												case 64:
            												case 65:
            												case 66:
            												case 68:
            												case 70:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 78:
            												case 79:
            												case 80:
            												case 81:
            													{
            														alt36=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 49 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 46 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 31 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 26 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case DOUBDEC:
            				case DOUBINC:
            				case ID:
            				case LBRACKET:
            				case LENGTH:
            				case RESOURCE:
            				case SHARED_REF:
            				case TYPE:
            				case 60:
            				case 70:
            					{
            						alt36=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 36 );
            				    ex->set_state( 11 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case DRSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								alt36=1;
            							}
            						    break;
            						case LBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 27 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case RESOURCE:
            				case SHARED_REF:
            				case STRING:
            				case STRING_TYPE:
            				case TYPE:
            				case VOID_TYPE:
            				case 60:
            				case 70:
            					{
            						alt36=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 36 );
            				    ex->set_state( 12 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt36=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 36 );
            		    ex->set_state( 4 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case BOOL_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            		case SLICETOK:
            		case SSOR:
            			{
            				alt36=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case RSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACKET:
            							{
            								alt36=2;
            							}
            						    break;
            						case ID:
            							{
            								alt36=1;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 14 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt36=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 30 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 61:
            						case 62:
            						case 64:
            						case 65:
            						case 66:
            						case 68:
            						case 70:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 78:
            						case 79:
            						case 80:
            						case 81:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 15 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt36=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 30 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 61:
            						case 62:
            						case 64:
            						case 65:
            						case 66:
            						case 68:
            						case 70:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 78:
            						case 79:
            						case 80:
            						case 81:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 16 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt36=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 30 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 61:
            						case 62:
            						case 64:
            						case 65:
            						case 66:
            						case 68:
            						case 70:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 78:
            						case 79:
            						case 80:
            						case 81:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 17 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt36=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 30 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 61:
            						case 62:
            						case 64:
            						case 65:
            						case 66:
            						case 68:
            						case 70:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 78:
            						case 79:
            						case 80:
            						case 81:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 18 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt36=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 30 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 61:
            						case 62:
            						case 64:
            						case 65:
            						case 66:
            						case 68:
            						case 70:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 78:
            						case 79:
            						case 80:
            						case 81:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 19 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case NULLTOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt36=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 30 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 61:
            						case 62:
            						case 64:
            						case 65:
            						case 66:
            						case 68:
            						case 70:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 78:
            						case 79:
            						case 80:
            						case 81:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 20 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case VOID_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt36=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 30 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 61:
            												case 62:
            												case 64:
            												case 65:
            												case 66:
            												case 68:
            												case 70:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 78:
            												case 79:
            												case 80:
            												case 81:
            													{
            														alt36=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 49 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 46 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 31 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 21 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt36=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 30 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 61:
            												case 62:
            												case 64:
            												case 65:
            												case 66:
            												case 68:
            												case 70:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 78:
            												case 79:
            												case 80:
            												case 81:
            													{
            														alt36=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 49 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 46 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 31 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 22 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt36=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 30 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 61:
            												case 62:
            												case 64:
            												case 65:
            												case 66:
            												case 68:
            												case 70:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 78:
            												case 79:
            												case 80:
            												case 81:
            													{
            														alt36=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 49 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 46 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 31 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 23 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt36=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 30 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 61:
            												case 62:
            												case 64:
            												case 65:
            												case 66:
            												case 68:
            												case 70:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 78:
            												case 79:
            												case 80:
            												case 81:
            													{
            														alt36=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 49 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 46 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 31 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 24 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt36=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 30 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 61:
            												case 62:
            												case 64:
            												case 65:
            												case 66:
            												case 68:
            												case 70:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 78:
            												case 79:
            												case 80:
            												case 81:
            													{
            														alt36=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 49 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 46 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 31 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 25 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt36=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 30 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 61:
            												case 62:
            												case 64:
            												case 65:
            												case 66:
            												case 68:
            												case 70:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 78:
            												case 79:
            												case 80:
            												case 81:
            													{
            														alt36=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 49 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 46 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 31 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 26 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case DOUBDEC:
            				case DOUBINC:
            				case ID:
            				case LBRACKET:
            				case LENGTH:
            				case RESOURCE:
            				case SHARED_REF:
            				case TYPE:
            				case 60:
            				case 70:
            					{
            						alt36=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 36 );
            				    ex->set_state( 11 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case DRSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								alt36=1;
            							}
            						    break;
            						case LBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 27 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case RESOURCE:
            				case SHARED_REF:
            				case STRING:
            				case STRING_TYPE:
            				case TYPE:
            				case VOID_TYPE:
            				case 60:
            				case 70:
            					{
            						alt36=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 36 );
            				    ex->set_state( 12 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt36=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 36 );
            		    ex->set_state( 5 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case STRING_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            		case SLICETOK:
            		case SSOR:
            			{
            				alt36=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case RSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACKET:
            							{
            								alt36=2;
            							}
            						    break;
            						case ID:
            							{
            								alt36=1;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 14 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt36=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 30 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 61:
            						case 62:
            						case 64:
            						case 65:
            						case 66:
            						case 68:
            						case 70:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 78:
            						case 79:
            						case 80:
            						case 81:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 15 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt36=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 30 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 61:
            						case 62:
            						case 64:
            						case 65:
            						case 66:
            						case 68:
            						case 70:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 78:
            						case 79:
            						case 80:
            						case 81:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 16 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt36=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 30 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 61:
            						case 62:
            						case 64:
            						case 65:
            						case 66:
            						case 68:
            						case 70:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 78:
            						case 79:
            						case 80:
            						case 81:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 17 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt36=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 30 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 61:
            						case 62:
            						case 64:
            						case 65:
            						case 66:
            						case 68:
            						case 70:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 78:
            						case 79:
            						case 80:
            						case 81:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 18 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt36=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 30 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 61:
            						case 62:
            						case 64:
            						case 65:
            						case 66:
            						case 68:
            						case 70:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 78:
            						case 79:
            						case 80:
            						case 81:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 19 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case NULLTOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt36=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 30 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 61:
            						case 62:
            						case 64:
            						case 65:
            						case 66:
            						case 68:
            						case 70:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 78:
            						case 79:
            						case 80:
            						case 81:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 20 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case VOID_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt36=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 30 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 61:
            												case 62:
            												case 64:
            												case 65:
            												case 66:
            												case 68:
            												case 70:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 78:
            												case 79:
            												case 80:
            												case 81:
            													{
            														alt36=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 49 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 46 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 31 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 21 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt36=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 30 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 61:
            												case 62:
            												case 64:
            												case 65:
            												case 66:
            												case 68:
            												case 70:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 78:
            												case 79:
            												case 80:
            												case 81:
            													{
            														alt36=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 49 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 46 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 31 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 22 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt36=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 30 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 61:
            												case 62:
            												case 64:
            												case 65:
            												case 66:
            												case 68:
            												case 70:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 78:
            												case 79:
            												case 80:
            												case 81:
            													{
            														alt36=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 49 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 46 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 31 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 23 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt36=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 30 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 61:
            												case 62:
            												case 64:
            												case 65:
            												case 66:
            												case 68:
            												case 70:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 78:
            												case 79:
            												case 80:
            												case 81:
            													{
            														alt36=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 49 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 46 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 31 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 24 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt36=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 30 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 61:
            												case 62:
            												case 64:
            												case 65:
            												case 66:
            												case 68:
            												case 70:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 78:
            												case 79:
            												case 80:
            												case 81:
            													{
            														alt36=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 49 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 46 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 31 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 25 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt36=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 30 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 61:
            												case 62:
            												case 64:
            												case 65:
            												case 66:
            												case 68:
            												case 70:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 78:
            												case 79:
            												case 80:
            												case 81:
            													{
            														alt36=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 49 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 46 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 31 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 26 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case DOUBDEC:
            				case DOUBINC:
            				case ID:
            				case LBRACKET:
            				case LENGTH:
            				case RESOURCE:
            				case SHARED_REF:
            				case TYPE:
            				case 60:
            				case 70:
            					{
            						alt36=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 36 );
            				    ex->set_state( 11 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case DRSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								alt36=1;
            							}
            						    break;
            						case LBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 27 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case RESOURCE:
            				case SHARED_REF:
            				case STRING:
            				case STRING_TYPE:
            				case TYPE:
            				case VOID_TYPE:
            				case 60:
            				case 70:
            					{
            						alt36=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 36 );
            				    ex->set_state( 12 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt36=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 36 );
            		    ex->set_state( 6 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            		case QUESTION:
            			{
            				alt36=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case RSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACKET:
            							{
            								alt36=2;
            							}
            						    break;
            						case ID:
            							{
            								alt36=1;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 14 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt36=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 30 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 61:
            						case 62:
            						case 64:
            						case 65:
            						case 66:
            						case 68:
            						case 70:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 78:
            						case 79:
            						case 80:
            						case 81:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 15 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt36=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 30 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 61:
            						case 62:
            						case 64:
            						case 65:
            						case 66:
            						case 68:
            						case 70:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 78:
            						case 79:
            						case 80:
            						case 81:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 16 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt36=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 30 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 61:
            						case 62:
            						case 64:
            						case 65:
            						case 66:
            						case 68:
            						case 70:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 78:
            						case 79:
            						case 80:
            						case 81:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 17 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt36=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 30 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 61:
            						case 62:
            						case 64:
            						case 65:
            						case 66:
            						case 68:
            						case 70:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 78:
            						case 79:
            						case 80:
            						case 81:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 18 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt36=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 30 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 61:
            						case 62:
            						case 64:
            						case 65:
            						case 66:
            						case 68:
            						case 70:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 78:
            						case 79:
            						case 80:
            						case 81:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 19 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case NULLTOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt36=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 30 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 61:
            						case 62:
            						case 64:
            						case 65:
            						case 66:
            						case 68:
            						case 70:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 78:
            						case 79:
            						case 80:
            						case 81:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 20 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case VOID_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt36=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 30 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 61:
            												case 62:
            												case 64:
            												case 65:
            												case 66:
            												case 68:
            												case 70:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 78:
            												case 79:
            												case 80:
            												case 81:
            													{
            														alt36=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 49 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 46 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 31 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 21 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt36=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 30 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 61:
            												case 62:
            												case 64:
            												case 65:
            												case 66:
            												case 68:
            												case 70:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 78:
            												case 79:
            												case 80:
            												case 81:
            													{
            														alt36=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 49 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 46 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 31 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 22 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt36=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 30 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 61:
            												case 62:
            												case 64:
            												case 65:
            												case 66:
            												case 68:
            												case 70:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 78:
            												case 79:
            												case 80:
            												case 81:
            													{
            														alt36=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 49 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 46 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 31 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 23 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt36=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 30 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 61:
            												case 62:
            												case 64:
            												case 65:
            												case 66:
            												case 68:
            												case 70:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 78:
            												case 79:
            												case 80:
            												case 81:
            													{
            														alt36=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 49 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 46 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 31 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 24 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt36=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 30 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 61:
            												case 62:
            												case 64:
            												case 65:
            												case 66:
            												case 68:
            												case 70:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 78:
            												case 79:
            												case 80:
            												case 81:
            													{
            														alt36=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 49 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 46 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 31 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 25 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt36=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 30 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 61:
            												case 62:
            												case 64:
            												case 65:
            												case 66:
            												case 68:
            												case 70:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 78:
            												case 79:
            												case 80:
            												case 81:
            													{
            														alt36=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 49 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 46 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 31 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 26 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case DOUBDEC:
            				case DOUBINC:
            				case ID:
            				case LBRACKET:
            				case LENGTH:
            				case RESOURCE:
            				case SHARED_REF:
            				case TYPE:
            				case 60:
            				case 70:
            					{
            						alt36=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 36 );
            				    ex->set_state( 11 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case DRSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								alt36=1;
            							}
            						    break;
            						case LBRACKET:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 27 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case RESOURCE:
            				case SHARED_REF:
            				case STRING:
            				case STRING_TYPE:
            				case TYPE:
            				case VOID_TYPE:
            				case 60:
            				case 70:
            					{
            						alt36=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 36 );
            				    ex->set_state( 12 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACKET:
            			{
            				alt36=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 36 );
            		    ex->set_state( 7 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case SHARED_REF:
            	{
            		switch ( this->LA(2) )
            		{
            		case TYPE:
            			{
            				switch ( this->LA(3) )
            				{
            				case LSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case LBRACKET:
            									{
            										alt36=2;
            									}
            								    break;
            								case ID:
            									{
            										alt36=1;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case INT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RSQBRACKET:
            									{
            										switch ( this->LA(6) )
            										{
            										case ID:
            											{
            												alt36=1;
            											}
            										    break;
            										case LBRACKET:
            											{
            												alt36=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 47 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DOUBDEC:
            								case DOUBINC:
            								case LBRACE:
            								case LBRACKET:
            								case LSQBRACKET:
            								case QUESTION:
            								case SLICETOK:
            								case SSOR:
            								case 61:
            								case 62:
            								case 64:
            								case 65:
            								case 66:
            								case 68:
            								case 70:
            								case 72:
            								case 73:
            								case 75:
            								case 76:
            								case 78:
            								case 79:
            								case 80:
            								case 81:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case FLOAT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RSQBRACKET:
            									{
            										switch ( this->LA(6) )
            										{
            										case ID:
            											{
            												alt36=1;
            											}
            										    break;
            										case LBRACKET:
            											{
            												alt36=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 47 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DOUBDEC:
            								case DOUBINC:
            								case LBRACE:
            								case LBRACKET:
            								case LSQBRACKET:
            								case QUESTION:
            								case SLICETOK:
            								case SSOR:
            								case 61:
            								case 62:
            								case 64:
            								case 65:
            								case 66:
            								case 68:
            								case 70:
            								case 72:
            								case 73:
            								case 75:
            								case 76:
            								case 78:
            								case 79:
            								case 80:
            								case 81:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 34 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case CHAR:
            							{
            								switch ( this->LA(5) )
            								{
            								case RSQBRACKET:
            									{
            										switch ( this->LA(6) )
            										{
            										case ID:
            											{
            												alt36=1;
            											}
            										    break;
            										case LBRACKET:
            											{
            												alt36=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 47 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DOUBDEC:
            								case DOUBINC:
            								case LBRACE:
            								case LBRACKET:
            								case LSQBRACKET:
            								case QUESTION:
            								case SLICETOK:
            								case SSOR:
            								case 61:
            								case 62:
            								case 64:
            								case 65:
            								case 66:
            								case 68:
            								case 70:
            								case 72:
            								case 73:
            								case 75:
            								case 76:
            								case 78:
            								case 79:
            								case 80:
            								case 81:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 35 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case STRING:
            							{
            								switch ( this->LA(5) )
            								{
            								case RSQBRACKET:
            									{
            										switch ( this->LA(6) )
            										{
            										case ID:
            											{
            												alt36=1;
            											}
            										    break;
            										case LBRACKET:
            											{
            												alt36=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 47 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DOUBDEC:
            								case DOUBINC:
            								case LBRACE:
            								case LBRACKET:
            								case LSQBRACKET:
            								case QUESTION:
            								case SLICETOK:
            								case SSOR:
            								case 61:
            								case 62:
            								case 64:
            								case 65:
            								case 66:
            								case 68:
            								case 70:
            								case 72:
            								case 73:
            								case 75:
            								case 76:
            								case 78:
            								case 79:
            								case 80:
            								case 81:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case BOOL:
            							{
            								switch ( this->LA(5) )
            								{
            								case RSQBRACKET:
            									{
            										switch ( this->LA(6) )
            										{
            										case ID:
            											{
            												alt36=1;
            											}
            										    break;
            										case LBRACKET:
            											{
            												alt36=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 47 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DOUBDEC:
            								case DOUBINC:
            								case LBRACE:
            								case LBRACKET:
            								case LSQBRACKET:
            								case QUESTION:
            								case SLICETOK:
            								case SSOR:
            								case 61:
            								case 62:
            								case 64:
            								case 65:
            								case 66:
            								case 68:
            								case 70:
            								case 72:
            								case 73:
            								case 75:
            								case 76:
            								case 78:
            								case 79:
            								case 80:
            								case 81:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case NULLTOK:
            							{
            								switch ( this->LA(5) )
            								{
            								case RSQBRACKET:
            									{
            										switch ( this->LA(6) )
            										{
            										case ID:
            											{
            												alt36=1;
            											}
            										    break;
            										case LBRACKET:
            											{
            												alt36=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 47 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DOUBDEC:
            								case DOUBINC:
            								case LBRACE:
            								case LBRACKET:
            								case LSQBRACKET:
            								case QUESTION:
            								case SLICETOK:
            								case SSOR:
            								case 61:
            								case 62:
            								case 64:
            								case 65:
            								case 66:
            								case 68:
            								case 70:
            								case 72:
            								case 73:
            								case 75:
            								case 76:
            								case 78:
            								case 79:
            								case 80:
            								case 81:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 38 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case VOID_TYPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case LBRACE:
            									{
            										switch ( this->LA(6) )
            										{
            										case STRING:
            											{
            												switch ( this->LA(7) )
            												{
            												case RBRACE:
            													{
            														switch ( this->LA(8) )
            														{
            														case RSQBRACKET:
            															{
            																switch ( this->LA(9) )
            																{
            																case ID:
            																	{
            																		alt36=1;
            																	}
            																    break;
            																case LBRACKET:
            																	{
            																		alt36=2;
            																	}
            																    break;

            																default:
            																    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            																    ex->set_decisionNum( 36 );
            																    ex->set_state( 47 );


            																    goto ruleinstructionScalarEx;

            																}

            															}
            														    break;
            														case DOUBDEC:
            														case DOUBINC:
            														case LBRACE:
            														case LBRACKET:
            														case LSQBRACKET:
            														case QUESTION:
            														case SLICETOK:
            														case SSOR:
            														case 61:
            														case 62:
            														case 64:
            														case 65:
            														case 66:
            														case 68:
            														case 70:
            														case 72:
            														case 73:
            														case 75:
            														case 76:
            														case 78:
            														case 79:
            														case 80:
            														case 81:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 51 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 50 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 48 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DLSQBRACKET:
            								case LBRACKET:
            								case LSQBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 39 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case INT_TYPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case LBRACE:
            									{
            										switch ( this->LA(6) )
            										{
            										case STRING:
            											{
            												switch ( this->LA(7) )
            												{
            												case RBRACE:
            													{
            														switch ( this->LA(8) )
            														{
            														case RSQBRACKET:
            															{
            																switch ( this->LA(9) )
            																{
            																case ID:
            																	{
            																		alt36=1;
            																	}
            																    break;
            																case LBRACKET:
            																	{
            																		alt36=2;
            																	}
            																    break;

            																default:
            																    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            																    ex->set_decisionNum( 36 );
            																    ex->set_state( 47 );


            																    goto ruleinstructionScalarEx;

            																}

            															}
            														    break;
            														case DOUBDEC:
            														case DOUBINC:
            														case LBRACE:
            														case LBRACKET:
            														case LSQBRACKET:
            														case QUESTION:
            														case SLICETOK:
            														case SSOR:
            														case 61:
            														case 62:
            														case 64:
            														case 65:
            														case 66:
            														case 68:
            														case 70:
            														case 72:
            														case 73:
            														case 75:
            														case 76:
            														case 78:
            														case 79:
            														case 80:
            														case 81:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 51 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 50 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 48 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DLSQBRACKET:
            								case LBRACKET:
            								case LSQBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 40 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case FLOAT_TYPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case LBRACE:
            									{
            										switch ( this->LA(6) )
            										{
            										case STRING:
            											{
            												switch ( this->LA(7) )
            												{
            												case RBRACE:
            													{
            														switch ( this->LA(8) )
            														{
            														case RSQBRACKET:
            															{
            																switch ( this->LA(9) )
            																{
            																case ID:
            																	{
            																		alt36=1;
            																	}
            																    break;
            																case LBRACKET:
            																	{
            																		alt36=2;
            																	}
            																    break;

            																default:
            																    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            																    ex->set_decisionNum( 36 );
            																    ex->set_state( 47 );


            																    goto ruleinstructionScalarEx;

            																}

            															}
            														    break;
            														case DOUBDEC:
            														case DOUBINC:
            														case LBRACE:
            														case LBRACKET:
            														case LSQBRACKET:
            														case QUESTION:
            														case SLICETOK:
            														case SSOR:
            														case 61:
            														case 62:
            														case 64:
            														case 65:
            														case 66:
            														case 68:
            														case 70:
            														case 72:
            														case 73:
            														case 75:
            														case 76:
            														case 78:
            														case 79:
            														case 80:
            														case 81:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 51 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 50 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 48 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DLSQBRACKET:
            								case LBRACKET:
            								case LSQBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 41 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case CHAR_TYPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case LBRACE:
            									{
            										switch ( this->LA(6) )
            										{
            										case STRING:
            											{
            												switch ( this->LA(7) )
            												{
            												case RBRACE:
            													{
            														switch ( this->LA(8) )
            														{
            														case RSQBRACKET:
            															{
            																switch ( this->LA(9) )
            																{
            																case ID:
            																	{
            																		alt36=1;
            																	}
            																    break;
            																case LBRACKET:
            																	{
            																		alt36=2;
            																	}
            																    break;

            																default:
            																    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            																    ex->set_decisionNum( 36 );
            																    ex->set_state( 47 );


            																    goto ruleinstructionScalarEx;

            																}

            															}
            														    break;
            														case DOUBDEC:
            														case DOUBINC:
            														case LBRACE:
            														case LBRACKET:
            														case LSQBRACKET:
            														case QUESTION:
            														case SLICETOK:
            														case SSOR:
            														case 61:
            														case 62:
            														case 64:
            														case 65:
            														case 66:
            														case 68:
            														case 70:
            														case 72:
            														case 73:
            														case 75:
            														case 76:
            														case 78:
            														case 79:
            														case 80:
            														case 81:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 51 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 50 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 48 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DLSQBRACKET:
            								case LBRACKET:
            								case LSQBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 42 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case BOOL_TYPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case LBRACE:
            									{
            										switch ( this->LA(6) )
            										{
            										case STRING:
            											{
            												switch ( this->LA(7) )
            												{
            												case RBRACE:
            													{
            														switch ( this->LA(8) )
            														{
            														case RSQBRACKET:
            															{
            																switch ( this->LA(9) )
            																{
            																case ID:
            																	{
            																		alt36=1;
            																	}
            																    break;
            																case LBRACKET:
            																	{
            																		alt36=2;
            																	}
            																    break;

            																default:
            																    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            																    ex->set_decisionNum( 36 );
            																    ex->set_state( 47 );


            																    goto ruleinstructionScalarEx;

            																}

            															}
            														    break;
            														case DOUBDEC:
            														case DOUBINC:
            														case LBRACE:
            														case LBRACKET:
            														case LSQBRACKET:
            														case QUESTION:
            														case SLICETOK:
            														case SSOR:
            														case 61:
            														case 62:
            														case 64:
            														case 65:
            														case 66:
            														case 68:
            														case 70:
            														case 72:
            														case 73:
            														case 75:
            														case 76:
            														case 78:
            														case 79:
            														case 80:
            														case 81:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 51 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 50 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 48 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DLSQBRACKET:
            								case LBRACKET:
            								case LSQBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 43 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case STRING_TYPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case LBRACE:
            									{
            										switch ( this->LA(6) )
            										{
            										case STRING:
            											{
            												switch ( this->LA(7) )
            												{
            												case RBRACE:
            													{
            														switch ( this->LA(8) )
            														{
            														case RSQBRACKET:
            															{
            																switch ( this->LA(9) )
            																{
            																case ID:
            																	{
            																		alt36=1;
            																	}
            																    break;
            																case LBRACKET:
            																	{
            																		alt36=2;
            																	}
            																    break;

            																default:
            																    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            																    ex->set_decisionNum( 36 );
            																    ex->set_state( 47 );


            																    goto ruleinstructionScalarEx;

            																}

            															}
            														    break;
            														case DOUBDEC:
            														case DOUBINC:
            														case LBRACE:
            														case LBRACKET:
            														case LSQBRACKET:
            														case QUESTION:
            														case SLICETOK:
            														case SSOR:
            														case 61:
            														case 62:
            														case 64:
            														case 65:
            														case 66:
            														case 68:
            														case 70:
            														case 72:
            														case 73:
            														case 75:
            														case 76:
            														case 78:
            														case 79:
            														case 80:
            														case 81:
            															{
            																alt36=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 36 );
            														    ex->set_state( 51 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 36 );
            												    ex->set_state( 50 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 36 );
            										    ex->set_state( 48 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DLSQBRACKET:
            								case LBRACKET:
            								case LSQBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 44 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case ID:
            						case LBRACKET:
            						case LENGTH:
            						case RESOURCE:
            						case SHARED_REF:
            						case TYPE:
            						case 60:
            						case 70:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 28 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case DLSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case DRSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt36=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt36=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 36 );
            								    ex->set_state( 45 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case BOOL:
            						case BOOL_TYPE:
            						case CHAR:
            						case CHAR_TYPE:
            						case DOUBDEC:
            						case DOUBINC:
            						case FLOAT:
            						case FLOAT_TYPE:
            						case ID:
            						case INT:
            						case INT_TYPE:
            						case LBRACKET:
            						case LENGTH:
            						case NULLTOK:
            						case RESOURCE:
            						case SHARED_REF:
            						case STRING:
            						case STRING_TYPE:
            						case TYPE:
            						case VOID_TYPE:
            						case 60:
            						case 70:
            							{
            								alt36=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 36 );
            						    ex->set_state( 29 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case ID:
            					{
            						alt36=1;
            					}
            				    break;
            				case LBRACKET:
            					{
            						alt36=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 36 );
            				    ex->set_state( 13 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case BOOL_TYPE:
            		case CHAR_TYPE:
            		case FLOAT_TYPE:
            		case INT_TYPE:
            		case STRING_TYPE:
            		case VOID_TYPE:
            			{
            				alt36=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 36 );
            		    ex->set_state( 8 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case WEAK_REF:
            	{
            		alt36=1;
            	}
                break;
            case BOOL:
            case CHAR:
            case DOUBDEC:
            case DOUBINC:
            case FLOAT:
            case ID:
            case INT:
            case LBRACKET:
            case LENGTH:
            case NULLTOK:
            case RESOURCE:
            case STRING:
            case 60:
            case 70:
            	{
            		alt36=2;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 36 );
                ex->set_state( 0 );


                goto ruleinstructionScalarEx;

            }

            switch (alt36)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_declaration_in_instructionScalar4859);
        	        declaration39=declaration();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionScalarEx;
        	        }


        	        {
        	            node = declaration39
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_assignment_or_expression_in_instructionScalar4872);
        	        assignment_or_expression40=assignment_or_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionScalarEx;
        	        }


        	        {
        	            node = assignment_or_expression40
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleinstructionScalarEx;
    ruleinstructionScalarEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::continue_instruction*
WNScriptASTParser::continueInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::continue_instruction* node;


    ImplTraits::CommonTokenType const* a = NULL;
    ImplTraits::CommonTokenType const* b = NULL;






      node = nullptr;



    {
        {
            a =  this->matchToken(CONTINUE, &FOLLOW_CONTINUE_in_continueInst4902);
            if  (this->hasException())
            {
                goto rulecontinueInstEx;
            }


            b =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_continueInst4906);
            if  (this->hasException())
            {
                goto rulecontinueInstEx;
            }


            {
                 node = m_allocator->construct<scripting::continue_instruction>(m_allocator); SET_LOCATION(node, a); SET_END_LOCATION(node, b);
            }


        }

    }
    goto rulecontinueInstEx;
    rulecontinueInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::break_instruction*
WNScriptASTParser::breakInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::break_instruction* node;


    ImplTraits::CommonTokenType const* a = NULL;
    ImplTraits::CommonTokenType const* b = NULL;






        node = nullptr;



    {
        {
            a =  this->matchToken(BREAK, &FOLLOW_BREAK_in_breakInst4932);
            if  (this->hasException())
            {
                goto rulebreakInstEx;
            }


            b =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_breakInst4936);
            if  (this->hasException())
            {
                goto rulebreakInstEx;
            }


            {
                 node = m_allocator->construct<scripting::break_instruction>(m_allocator); SET_LOCATION(node, a); SET_END_LOCATION(node, b);
            }


        }

    }
    goto rulebreakInstEx;
    rulebreakInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::return_instruction*
WNScriptASTParser::returnInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::return_instruction* node;


    ImplTraits::CommonTokenType const* a = NULL;
    ImplTraits::CommonTokenType const* b = NULL;
    ImplTraits::CommonTokenType const* c = NULL;
    ImplTraits::CommonTokenType const* d = NULL;
    scripting::expression* expr41;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt37;

            alt37=2;

            switch ( this->LA(1) )
            {
            case RETURN:
            	{
            		switch ( this->LA(2) )
            		{
            		case SEMICOLON:
            			{
            				alt37=2;
            			}
            		    break;
            		case BOOL:
            		case BOOL_TYPE:
            		case CHAR:
            		case CHAR_TYPE:
            		case DOUBDEC:
            		case DOUBINC:
            		case FLOAT:
            		case FLOAT_TYPE:
            		case ID:
            		case INT:
            		case INT_TYPE:
            		case LBRACKET:
            		case LENGTH:
            		case NULLTOK:
            		case RESOURCE:
            		case SHARED_REF:
            		case STRING:
            		case STRING_TYPE:
            		case TYPE:
            		case VOID_TYPE:
            		case 60:
            		case 70:
            			{
            				alt37=1;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 37 );
            		    ex->set_state( 1 );


            		    goto rulereturnInstEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 37 );
                ex->set_state( 0 );


                goto rulereturnInstEx;

            }

            switch (alt37)
            {
        	case 1:
        	    {
        	        a =  this->matchToken(RETURN, &FOLLOW_RETURN_in_returnInst4963);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_returnInst4965);
        	        expr41=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        b =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_returnInst4969);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::return_instruction>(m_allocator, expr41
        	            ); SET_LOCATION(node, a); SET_END_LOCATION(node, b);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        c =  this->matchToken(RETURN, &FOLLOW_RETURN_in_returnInst4983);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        d =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_returnInst4987);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::return_instruction>(m_allocator); SET_LOCATION(node, c); SET_END_LOCATION(node, d);
        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulereturnInstEx;
    rulereturnInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::whileInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    ImplTraits::CommonTokenType const* WHILE44 = NULL;
    scripting::expression* expr42;
    scripting::instruction_list* instruction_list43;





        node = nullptr;



    {
        {
            WHILE44 =  this->matchToken(WHILE, &FOLLOW_WHILE_in_whileInst5020);
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_whileInst5022);
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


            this->followPush(FOLLOW_expr_in_whileInst5024);
            expr42=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_whileInst5026);
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


            this->followPush(FOLLOW_instruction_list_in_whileInst5028);
            instruction_list43=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


            {
                 node = m_allocator->construct<scripting::while_instruction>(m_allocator, expr42
                , instruction_list43
                ); SET_LOCATION(node, WHILE44); SET_END_LOCATION_FROM_NODE(node,
                instruction_list43
                );
            }


        }

    }
    goto rulewhileInstEx;
    rulewhileInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::doInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    ImplTraits::CommonTokenType const* DO47 = NULL;
    ImplTraits::CommonTokenType const* SEMICOLON48 = NULL;
    scripting::expression* expr45;
    scripting::instruction_list* instruction_list46;





        node = nullptr;



    {
        {
            DO47 =  this->matchToken(DO, &FOLLOW_DO_in_doInst5064);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            this->followPush(FOLLOW_instruction_list_in_doInst5066);
            instruction_list46=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


             this->matchToken(WHILE, &FOLLOW_WHILE_in_doInst5068);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_doInst5070);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            this->followPush(FOLLOW_expr_in_doInst5072);
            expr45=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_doInst5074);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            SEMICOLON48 =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_doInst5076);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            {
                node = m_allocator->construct<scripting::do_instruction>(m_allocator, expr45
                , instruction_list46
                ); SET_LOCATION(node, DO47); SET_END_LOCATION(node, SEMICOLON48);
            }


        }

    }
    goto ruledoInstEx;
    ruledoInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::for_instruction*
WNScriptASTParser::forInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::for_instruction* node;


    ImplTraits::CommonTokenType const* FOR49 = NULL;
    scripting::instruction* a;
    scripting::expression* b;
    scripting::instruction* c;
    scripting::instruction_list* d;





        node =  m_allocator->construct<scripting::for_instruction>(m_allocator);



    {
        {
            FOR49 =  this->matchToken(FOR, &FOLLOW_FOR_in_forInst5108);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_forInst5110);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            {
                 SET_LOCATION(node, FOR49);
            }


            {
                int alt38=2;
                switch ( this->LA(1) )
                {
                    case BOOL:
                    case BOOL_TYPE:
                    case CHAR:
                    case CHAR_TYPE:
                    case DOUBDEC:
                    case DOUBINC:
                    case FLOAT:
                    case FLOAT_TYPE:
                    case ID:
                    case INT:
                    case INT_TYPE:
                    case LBRACKET:
                    case LENGTH:
                    case NULLTOK:
                    case RESOURCE:
                    case SHARED_REF:
                    case STRING:
                    case STRING_TYPE:
                    case TYPE:
                    case VOID_TYPE:
                    case WEAK_REF:
                    case 60:
                    case 70:
                    	{
                    		alt38=1;
                    	}
                        break;
                }

                switch (alt38)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_instructionScalar_in_forInst5138);
            	        a=instructionScalar();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleforInstEx;
            	        }


            	        {
            	            node->add_initializer(a
            	            );
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_forInst5144);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            {
                int alt39=2;
                switch ( this->LA(1) )
                {
                    case BOOL:
                    case BOOL_TYPE:
                    case CHAR:
                    case CHAR_TYPE:
                    case DOUBDEC:
                    case DOUBINC:
                    case FLOAT:
                    case FLOAT_TYPE:
                    case ID:
                    case INT:
                    case INT_TYPE:
                    case LBRACKET:
                    case LENGTH:
                    case NULLTOK:
                    case RESOURCE:
                    case SHARED_REF:
                    case STRING:
                    case STRING_TYPE:
                    case TYPE:
                    case VOID_TYPE:
                    case 60:
                    case 70:
                    	{
                    		alt39=1;
                    	}
                        break;
                }

                switch (alt39)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_expr_in_forInst5169);
            	        b=expr();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleforInstEx;
            	        }


            	        {
            	            node->add_condition(b
            	            );
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_forInst5183);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            {
                int alt40=2;
                switch ( this->LA(1) )
                {
                    case BOOL:
                    case BOOL_TYPE:
                    case CHAR:
                    case CHAR_TYPE:
                    case DOUBDEC:
                    case DOUBINC:
                    case FLOAT:
                    case FLOAT_TYPE:
                    case ID:
                    case INT:
                    case INT_TYPE:
                    case LBRACKET:
                    case LENGTH:
                    case NULLTOK:
                    case RESOURCE:
                    case SHARED_REF:
                    case STRING:
                    case STRING_TYPE:
                    case TYPE:
                    case VOID_TYPE:
                    case WEAK_REF:
                    case 60:
                    case 70:
                    	{
                    		alt40=1;
                    	}
                        break;
                }

                switch (alt40)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_instructionScalar_in_forInst5208);
            	        c=instructionScalar();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleforInstEx;
            	        }


            	        {
            	            node->add_post_op(c
            	            );
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_forInst5214);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            {
                this->followPush(FOLLOW_instruction_list_in_forInst5239);
                d=instruction_list();

                this->followPop();
                if  (this->hasException())
                {
                    goto ruleforInstEx;
                }


                {
                    node->add_body(d
                    ); SET_END_LOCATION_FROM_NODE(node, d
                    );
                }


            }


        }

    }
    goto ruleforInstEx;
    ruleforInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::else_if_instruction*
WNScriptASTParser::elsemiddle()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::else_if_instruction* node;


    ImplTraits::CommonTokenType const* ELSE52 = NULL;
    scripting::expression* expr50;
    scripting::instruction_list* instruction_list51;





        node = nullptr;



    {
        {
            ELSE52 =  this->matchToken(ELSE, &FOLLOW_ELSE_in_elsemiddle5287);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


             this->matchToken(IF, &FOLLOW_IF_in_elsemiddle5289);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_elsemiddle5291);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


            this->followPush(FOLLOW_expr_in_elsemiddle5293);
            expr50=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_elsemiddle5295);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


            this->followPush(FOLLOW_instruction_list_in_elsemiddle5297);
            instruction_list51=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


            {
                 node = m_allocator->construct<scripting::else_if_instruction>(m_allocator, expr50
                , instruction_list51
                ); SET_LOCATION(node, ELSE52); SET_END_LOCATION_FROM_NODE(node,
                instruction_list51
                );
            }


        }

    }
    goto ruleelsemiddleEx;
    ruleelsemiddleEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction_list*
WNScriptASTParser::endif()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction_list* node;


    scripting::instruction_list* instruction_list53;





        node = nullptr;



    {
        {
             this->matchToken(ELSE, &FOLLOW_ELSE_in_endif5330);
            if  (this->hasException())
            {
                goto ruleendifEx;
            }


            this->followPush(FOLLOW_instruction_list_in_endif5332);
            instruction_list53=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleendifEx;
            }


            {
                node = instruction_list53
                ;
            }


        }

    }
    goto ruleendifEx;
    ruleendifEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::if_instruction*
WNScriptASTParser::ifInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::if_instruction* node;


    ImplTraits::CommonTokenType const* IF56 = NULL;
    scripting::expression* expr54;
    scripting::instruction_list* instruction_list55;
    scripting::else_if_instruction* elsemiddle57;
    scripting::instruction_list* endif58;





        node = nullptr;



    {
        {
            IF56 =  this->matchToken(IF, &FOLLOW_IF_in_ifInst5362);
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_ifInst5364);
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


            this->followPush(FOLLOW_expr_in_ifInst5366);
            expr54=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_ifInst5368);
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


            this->followPush(FOLLOW_instruction_list_in_ifInst5370);
            instruction_list55=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


            {
                node = m_allocator->construct<scripting::if_instruction>(m_allocator, expr54
                , instruction_list55
                ); SET_LOCATION(node, IF56); SET_END_LOCATION_FROM_NODE(node,
                instruction_list55
                );
            }



            for (;;)
            {
                int alt41=2;
                switch ( this->LA(1) )
                {
                case ELSE:
                	{
                		switch ( this->LA(2) )
                		{
                		case IF:
                			{
                				alt41=1;
                			}
                		    break;

                		}

                	}
                    break;

                }

                switch (alt41)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_elsemiddle_in_ifInst5387);
            	        elsemiddle57=elsemiddle();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleifInstEx;
            	        }


            	        {
            	            node->add_else_if(elsemiddle57
            	            ); SET_END_LOCATION_FROM_NODE(node, elsemiddle57
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop41;
            	    break;
                }
            }
            loop41: ;


            {
                int alt42=2;
                switch ( this->LA(1) )
                {
                    case ELSE:
                    	{
                    		alt42=1;
                    	}
                        break;
                }

                switch (alt42)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_endif_in_ifInst5407);
            	        endif58=endif();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleifInstEx;
            	        }


            	        {
            	            node->add_else(endif58
            	            ); SET_LOCATION(node, IF56); SET_END_LOCATION_FROM_NODE(node,
            	            endif58
            	            );
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    goto ruleifInstEx;
    ruleifInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::instruction()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    scripting::if_instruction* ifInst59;
    scripting::instruction* whileInst60;
    scripting::instruction* doInst61;
    scripting::for_instruction* forInst62;
    scripting::instruction* instructionScalar63;
    scripting::break_instruction* breakInst64;
    scripting::continue_instruction* continueInst65;
    scripting::return_instruction* returnInst66;
    scripting::instruction_list* instruction_list67;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt43;

            alt43=9;

            switch ( this->LA(1) )
            {
            case IF:
            	{
            		alt43=1;
            	}
                break;
            case WHILE:
            	{
            		alt43=2;
            	}
                break;
            case DO:
            	{
            		alt43=3;
            	}
                break;
            case FOR:
            	{
            		alt43=4;
            	}
                break;
            case BOOL:
            case BOOL_TYPE:
            case CHAR:
            case CHAR_TYPE:
            case DOUBDEC:
            case DOUBINC:
            case FLOAT:
            case FLOAT_TYPE:
            case ID:
            case INT:
            case INT_TYPE:
            case LBRACKET:
            case LENGTH:
            case NULLTOK:
            case RESOURCE:
            case SHARED_REF:
            case STRING:
            case STRING_TYPE:
            case TYPE:
            case VOID_TYPE:
            case WEAK_REF:
            case 60:
            case 70:
            	{
            		alt43=5;
            	}
                break;
            case BREAK:
            	{
            		alt43=6;
            	}
                break;
            case CONTINUE:
            	{
            		alt43=7;
            	}
                break;
            case RETURN:
            	{
            		alt43=8;
            	}
                break;
            case LBRACE:
            	{
            		alt43=9;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 43 );
                ex->set_state( 0 );


                goto ruleinstructionEx;

            }

            switch (alt43)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_ifInst_in_instruction5441);
        	        ifInst59=ifInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	             node = ifInst59
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_whileInst_in_instruction5462);
        	        whileInst60=whileInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = whileInst60
        	            ;
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        this->followPush(FOLLOW_doInst_in_instruction5479);
        	        doInst61=doInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = doInst61
        	            ;
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        this->followPush(FOLLOW_forInst_in_instruction5499);
        	        forInst62=forInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = forInst62
        	            ;
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        this->followPush(FOLLOW_instructionScalar_in_instruction5519);
        	        instructionScalar63=instructionScalar();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	         this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_instruction5521);
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = instructionScalar63
        	            ;
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	        this->followPush(FOLLOW_breakInst_in_instruction5534);
        	        breakInst64=breakInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = breakInst64
        	            ;
        	        }


        	    }
        	    break;
        	case 7:
        	    {
        	        this->followPush(FOLLOW_continueInst_in_instruction5547);
        	        continueInst65=continueInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = continueInst65
        	            ;
        	        }


        	    }
        	    break;
        	case 8:
        	    {
        	        this->followPush(FOLLOW_returnInst_in_instruction5560);
        	        returnInst66=returnInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = returnInst66
        	            ;
        	        }


        	    }
        	    break;
        	case 9:
        	    {
        	        this->followPush(FOLLOW_instruction_list_in_instruction5573);
        	        instruction_list67=instruction_list();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	             node = instruction_list67
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleinstructionEx;
    ruleinstructionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction_list*
WNScriptASTParser::instruction_list()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction_list* node;


    ImplTraits::CommonTokenType const* lb = NULL;
    ImplTraits::CommonTokenType const* rb = NULL;
    scripting::instruction* b;





        node = m_allocator->construct<scripting::instruction_list>(m_allocator);



    {
        {
            lb =  this->matchToken(LBRACE, &FOLLOW_LBRACE_in_instruction_list5605);
            if  (this->hasException())
            {
                goto ruleinstruction_listEx;
            }



            for (;;)
            {
                int alt44=2;
                switch ( this->LA(1) )
                {
                case BOOL:
                case BOOL_TYPE:
                case BREAK:
                case CHAR:
                case CHAR_TYPE:
                case CONTINUE:
                case DO:
                case DOUBDEC:
                case DOUBINC:
                case FLOAT:
                case FLOAT_TYPE:
                case FOR:
                case ID:
                case IF:
                case INT:
                case INT_TYPE:
                case LBRACE:
                case LBRACKET:
                case LENGTH:
                case NULLTOK:
                case RESOURCE:
                case RETURN:
                case SHARED_REF:
                case STRING:
                case STRING_TYPE:
                case TYPE:
                case VOID_TYPE:
                case WEAK_REF:
                case WHILE:
                case 60:
                case 70:
                	{
                		alt44=1;
                	}
                    break;

                }

                switch (alt44)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_instruction_in_instruction_list5622);
            	        b=instruction();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleinstruction_listEx;
            	        }


            	        {
            	            node->add_instruction(b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop44;
            	    break;
                }
            }
            loop44: ;


            rb =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_instruction_list5639);
            if  (this->hasException())
            {
                goto ruleinstruction_listEx;
            }


            {

                          SET_LOCATION(node, lb); SET_END_LOCATION(node, rb);

            }


        }

    }
    goto ruleinstruction_listEx;
    ruleinstruction_listEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::function*
WNScriptASTParser::function()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::function* node;


    scripting::parameter* param68;
    scripting::parameter_list* parameterList69;
    scripting::instruction_list* instruction_list70;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_param_in_function5669);
            param68=param();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefunctionEx;
            }


            this->followPush(FOLLOW_parameterList_in_function5671);
            parameterList69=parameterList();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefunctionEx;
            }


            this->followPush(FOLLOW_instruction_list_in_function5673);
            instruction_list70=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefunctionEx;
            }


            {
                 node = m_allocator->construct<scripting::function>(m_allocator, param68
                , parameterList69
                , instruction_list70
                ); SET_LOCATION_FROM_NODE(node, param68
                ); SET_END_LOCATION_FROM_NODE(node, instruction_list70
                );
            }


        }

    }
    goto rulefunctionEx;
    rulefunctionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::struct_definition*
WNScriptASTParser::structDecl()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::struct_definition* node;


    ImplTraits::CommonTokenType const* f = NULL;
    ImplTraits::CommonTokenType const* c = NULL;
    ImplTraits::CommonTokenType const* g = NULL;
    ImplTraits::CommonTokenType const* d = NULL;
    ImplTraits::CommonTokenType const* e = NULL;
    ImplTraits::CommonTokenType const* RBRACE72 = NULL;
    scripting::declaration* a;
    scripting::declaration* j;
    scripting::function* b;
    scripting::parameter_list* parameterList71;





        node = nullptr;



    {
        {
            {
                int alt45=2;
                switch ( this->LA(1) )
                {
                case STRUCT:
                	{
                		switch ( this->LA(2) )
                		{
                		case TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case COLON:
                					{
                						alt45=2;
                					}
                				    break;
                				case LBRACE:
                				case LBRACKET:
                					{
                						alt45=1;
                					}
                				    break;

                				default:
                				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 45 );
                				    ex->set_state( 2 );


                				    goto rulestructDeclEx;

                				}

                			}
                		    break;

                		default:
                		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 45 );
                		    ex->set_state( 1 );


                		    goto rulestructDeclEx;

                		}

                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 45 );
                    ex->set_state( 0 );


                    goto rulestructDeclEx;

                }

                switch (alt45)
                {
            	case 1:
            	    {
            	        {
            	            f =  this->matchToken(STRUCT, &FOLLOW_STRUCT_in_structDecl5725);
            	            if  (this->hasException())
            	            {
            	                goto rulestructDeclEx;
            	            }


            	            c =  this->matchToken(TYPE, &FOLLOW_TYPE_in_structDecl5729);
            	            if  (this->hasException())
            	            {
            	                goto rulestructDeclEx;
            	            }


            	            {
            	                node= m_allocator->construct<scripting::struct_definition>(m_allocator, (c->getText()).c_str(), false); SET_LOCATION(node, f);
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	            g =  this->matchToken(STRUCT, &FOLLOW_STRUCT_in_structDecl5749);
            	            if  (this->hasException())
            	            {
            	                goto rulestructDeclEx;
            	            }


            	            d =  this->matchToken(TYPE, &FOLLOW_TYPE_in_structDecl5753);
            	            if  (this->hasException())
            	            {
            	                goto rulestructDeclEx;
            	            }


            	             this->matchToken(COLON, &FOLLOW_COLON_in_structDecl5755);
            	            if  (this->hasException())
            	            {
            	                goto rulestructDeclEx;
            	            }


            	            e =  this->matchToken(TYPE, &FOLLOW_TYPE_in_structDecl5759);
            	            if  (this->hasException())
            	            {
            	                goto rulestructDeclEx;
            	            }


            	            {
            	                node= m_allocator->construct<scripting::struct_definition>(m_allocator, (d->getText()).c_str(), false, (e->getText()).c_str()); SET_LOCATION(node, g);
            	            }


            	        }


            	    }
            	    break;

                }
            }

            {
                int alt46=2;
                switch ( this->LA(1) )
                {
                    case LBRACKET:
                    	{
                    		alt46=1;
                    	}
                        break;
                }

                switch (alt46)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_parameterList_in_structDecl5787);
            	        parameterList71=parameterList();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulestructDeclEx;
            	        }


            	        {
            	             node->set_constructor_parameters(parameterList71
            	            );
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_structDecl5805);
            if  (this->hasException())
            {
                goto rulestructDeclEx;
            }



            for (;;)
            {
                int alt47=4;
                switch ( this->LA(1) )
                {
                case VOID_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 77:
                					{
                						alt47=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt47=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt47=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt47=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt47=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt47=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt47=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt47=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt47=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt47=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt47=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt47=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt47=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt47=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 77:
                									{
                										alt47=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt47=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 77:
                									{
                										alt47=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt47=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SLICETOK:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case SLICETOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SSOR:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 77:
                							{
                								alt47=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt47=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case INT_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 77:
                					{
                						alt47=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt47=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt47=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt47=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt47=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt47=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt47=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt47=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt47=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt47=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt47=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt47=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt47=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt47=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 77:
                									{
                										alt47=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt47=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 77:
                									{
                										alt47=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt47=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SLICETOK:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case SLICETOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SSOR:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 77:
                							{
                								alt47=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt47=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case FLOAT_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 77:
                					{
                						alt47=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt47=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt47=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt47=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt47=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt47=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt47=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt47=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt47=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt47=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt47=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt47=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt47=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt47=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 77:
                									{
                										alt47=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt47=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 77:
                									{
                										alt47=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt47=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SLICETOK:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case SLICETOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SSOR:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 77:
                							{
                								alt47=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt47=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case CHAR_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 77:
                					{
                						alt47=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt47=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt47=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt47=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt47=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt47=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt47=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt47=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt47=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt47=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt47=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt47=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt47=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt47=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 77:
                									{
                										alt47=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt47=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 77:
                									{
                										alt47=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt47=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SLICETOK:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case SLICETOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SSOR:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 77:
                							{
                								alt47=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt47=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case BOOL_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 77:
                					{
                						alt47=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt47=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt47=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt47=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt47=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt47=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt47=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt47=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt47=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt47=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt47=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt47=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt47=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt47=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 77:
                									{
                										alt47=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt47=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 77:
                									{
                										alt47=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt47=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SLICETOK:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case SLICETOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SSOR:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 77:
                							{
                								alt47=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt47=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case STRING_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 77:
                					{
                						alt47=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt47=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt47=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt47=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt47=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt47=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt47=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt47=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt47=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt47=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt47=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt47=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt47=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt47=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 77:
                									{
                										alt47=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt47=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 77:
                									{
                										alt47=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt47=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SLICETOK:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case SLICETOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SSOR:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 77:
                							{
                								alt47=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt47=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 77:
                					{
                						alt47=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt47=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt47=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt47=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt47=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt47=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt47=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt47=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt47=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt47=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt47=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt47=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt47=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt47=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 77:
                									{
                										alt47=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt47=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 77:
                									{
                										alt47=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt47=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case QUESTION:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 77:
                							{
                								alt47=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt47=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case SHARED_REF:
                	{
                		switch ( this->LA(2) )
                		{
                		case TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case LSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case INT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 77:
                													{
                														alt47=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt47=3;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 77:
                													{
                														alt47=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt47=3;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 77:
                													{
                														alt47=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt47=3;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 77:
                													{
                														alt47=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt47=3;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 77:
                													{
                														alt47=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt47=3;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case NULLTOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 77:
                													{
                														alt47=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt47=3;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case VOID_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 77:
                																			{
                																				alt47=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt47=3;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case INT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 77:
                																			{
                																				alt47=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt47=3;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 77:
                																			{
                																				alt47=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt47=3;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 77:
                																			{
                																				alt47=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt47=3;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 77:
                																			{
                																				alt47=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt47=3;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 77:
                																			{
                																				alt47=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt47=3;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case DLSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case DRSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt47=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt47=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 77:
                							{
                								alt47=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt47=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case WEAK_REF:
                	{
                		switch ( this->LA(2) )
                		{
                		case TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 77:
                							{
                								alt47=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt47=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case 72:
                	{
                		alt47=2;
                	}
                    break;

                }

                switch (alt47)
                {
            	case 1:
            	    {
            	        {
            	            this->followPush(FOLLOW_declaration_in_structDecl5848);
            	            a=declaration();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulestructDeclEx;
            	            }


            	            {
            	                 node->add_struct_elem(a
            	                );
            	            }


            	             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_structDecl5852);
            	            if  (this->hasException())
            	            {
            	                goto rulestructDeclEx;
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	            this->followPush(FOLLOW_inherited_declaration_in_structDecl5878);
            	            j=inherited_declaration();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulestructDeclEx;
            	            }


            	            {
            	                 node->add_struct_elem(j
            	                );
            	            }


            	             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_structDecl5882);
            	            if  (this->hasException())
            	            {
            	                goto rulestructDeclEx;
            	            }


            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	        {
            	            this->followPush(FOLLOW_function_in_structDecl5908);
            	            b=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulestructDeclEx;
            	            }


            	            {
            	                 node->add_function(b
            	                );
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop47;
            	    break;
                }
            }
            loop47: ;


            RBRACE72 =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_structDecl5947);
            if  (this->hasException())
            {
                goto rulestructDeclEx;
            }


            {
                 SET_END_LOCATION(node, RBRACE72);
            }


        }

    }
    goto rulestructDeclEx;
    rulestructDeclEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::struct_definition*
WNScriptASTParser::classDecl()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::struct_definition* node;


    ImplTraits::CommonTokenType const* f = NULL;
    ImplTraits::CommonTokenType const* c = NULL;
    ImplTraits::CommonTokenType const* g = NULL;
    ImplTraits::CommonTokenType const* d = NULL;
    ImplTraits::CommonTokenType const* e = NULL;
    ImplTraits::CommonTokenType const* RBRACE74 = NULL;
    scripting::declaration* a;
    scripting::declaration* j;
    scripting::function* b;
    scripting::function* h;
    scripting::function* i;
    scripting::parameter_list* parameterList73;





        node = nullptr;



    {
        {
            {
                int alt48=2;
                switch ( this->LA(1) )
                {
                case CLASS:
                	{
                		switch ( this->LA(2) )
                		{
                		case TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case COLON:
                					{
                						alt48=2;
                					}
                				    break;
                				case LBRACE:
                				case LBRACKET:
                					{
                						alt48=1;
                					}
                				    break;

                				default:
                				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 48 );
                				    ex->set_state( 2 );


                				    goto ruleclassDeclEx;

                				}

                			}
                		    break;

                		default:
                		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 48 );
                		    ex->set_state( 1 );


                		    goto ruleclassDeclEx;

                		}

                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 48 );
                    ex->set_state( 0 );


                    goto ruleclassDeclEx;

                }

                switch (alt48)
                {
            	case 1:
            	    {
            	        {
            	            f =  this->matchToken(CLASS, &FOLLOW_CLASS_in_classDecl6001);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            c =  this->matchToken(TYPE, &FOLLOW_TYPE_in_classDecl6005);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                node= m_allocator->construct<scripting::struct_definition>(m_allocator, (c->getText()).c_str(), true); SET_LOCATION(node, f);
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	            g =  this->matchToken(CLASS, &FOLLOW_CLASS_in_classDecl6025);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            d =  this->matchToken(TYPE, &FOLLOW_TYPE_in_classDecl6029);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	             this->matchToken(COLON, &FOLLOW_COLON_in_classDecl6031);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            e =  this->matchToken(TYPE, &FOLLOW_TYPE_in_classDecl6035);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                node= m_allocator->construct<scripting::struct_definition>(m_allocator, (d->getText()).c_str(), true, (e->getText()).c_str()); SET_LOCATION(node, g);
            	            }


            	        }


            	    }
            	    break;

                }
            }

            {
                int alt49=2;
                switch ( this->LA(1) )
                {
                    case LBRACKET:
                    	{
                    		alt49=1;
                    	}
                        break;
                }

                switch (alt49)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_parameterList_in_classDecl6063);
            	        parameterList73=parameterList();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleclassDeclEx;
            	        }


            	        {
            	             node->set_constructor_parameters(parameterList73
            	            );
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_classDecl6081);
            if  (this->hasException())
            {
                goto ruleclassDeclEx;
            }



            for (;;)
            {
                int alt50=6;
                switch ( this->LA(1) )
                {
                case VOID_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 77:
                					{
                						alt50=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt50=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt50=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt50=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt50=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt50=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt50=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt50=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt50=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt50=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt50=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt50=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt50=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt50=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 77:
                									{
                										alt50=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt50=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 77:
                									{
                										alt50=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt50=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SLICETOK:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case SLICETOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SSOR:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 77:
                							{
                								alt50=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt50=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case INT_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 77:
                					{
                						alt50=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt50=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt50=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt50=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt50=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt50=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt50=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt50=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt50=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt50=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt50=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt50=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt50=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt50=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 77:
                									{
                										alt50=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt50=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 77:
                									{
                										alt50=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt50=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SLICETOK:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case SLICETOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SSOR:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 77:
                							{
                								alt50=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt50=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case FLOAT_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 77:
                					{
                						alt50=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt50=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt50=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt50=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt50=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt50=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt50=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt50=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt50=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt50=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt50=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt50=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt50=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt50=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 77:
                									{
                										alt50=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt50=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 77:
                									{
                										alt50=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt50=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SLICETOK:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case SLICETOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SSOR:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 77:
                							{
                								alt50=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt50=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case CHAR_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 77:
                					{
                						alt50=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt50=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt50=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt50=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt50=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt50=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt50=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt50=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt50=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt50=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt50=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt50=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt50=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt50=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 77:
                									{
                										alt50=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt50=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 77:
                									{
                										alt50=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt50=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SLICETOK:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case SLICETOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SSOR:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 77:
                							{
                								alt50=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt50=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case BOOL_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 77:
                					{
                						alt50=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt50=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt50=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt50=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt50=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt50=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt50=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt50=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt50=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt50=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt50=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt50=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt50=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt50=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 77:
                									{
                										alt50=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt50=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 77:
                									{
                										alt50=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt50=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SLICETOK:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case SLICETOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SSOR:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 77:
                							{
                								alt50=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt50=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case STRING_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 77:
                					{
                						alt50=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt50=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt50=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt50=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt50=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt50=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt50=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt50=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt50=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt50=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt50=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt50=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt50=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt50=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 77:
                									{
                										alt50=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt50=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 77:
                									{
                										alt50=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt50=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SLICETOK:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case SLICETOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SSOR:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 77:
                							{
                								alt50=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt50=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 77:
                					{
                						alt50=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt50=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt50=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt50=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt50=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt50=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt50=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt50=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt50=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt50=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt50=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt50=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 77:
                																	{
                																		alt50=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt50=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 77:
                									{
                										alt50=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt50=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 77:
                									{
                										alt50=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt50=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case QUESTION:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 77:
                							{
                								alt50=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt50=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case SHARED_REF:
                	{
                		switch ( this->LA(2) )
                		{
                		case TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case LSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case INT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 77:
                													{
                														alt50=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt50=3;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 77:
                													{
                														alt50=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt50=3;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 77:
                													{
                														alt50=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt50=3;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 77:
                													{
                														alt50=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt50=3;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 77:
                													{
                														alt50=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt50=3;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case NULLTOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 77:
                													{
                														alt50=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt50=3;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case VOID_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 77:
                																			{
                																				alt50=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt50=3;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case INT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 77:
                																			{
                																				alt50=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt50=3;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 77:
                																			{
                																				alt50=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt50=3;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 77:
                																			{
                																				alt50=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt50=3;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 77:
                																			{
                																				alt50=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt50=3;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 77:
                																			{
                																				alt50=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt50=3;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case DLSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case DRSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 77:
                											{
                												alt50=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt50=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 77:
                							{
                								alt50=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt50=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case WEAK_REF:
                	{
                		switch ( this->LA(2) )
                		{
                		case TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 77:
                							{
                								alt50=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt50=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case 72:
                	{
                		alt50=2;
                	}
                    break;
                case VIRTUAL:
                	{
                		alt50=4;
                	}
                    break;
                case OVERRIDE:
                	{
                		alt50=5;
                	}
                    break;

                }

                switch (alt50)
                {
            	case 1:
            	    {
            	        {
            	            this->followPush(FOLLOW_declaration_in_classDecl6124);
            	            a=declaration();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_struct_elem(a
            	                );
            	            }


            	             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_classDecl6128);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	            this->followPush(FOLLOW_inherited_declaration_in_classDecl6154);
            	            j=inherited_declaration();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_struct_elem(j
            	                );
            	            }


            	             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_classDecl6158);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	        {
            	            this->followPush(FOLLOW_function_in_classDecl6184);
            	            b=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_function(b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 4:
            	    {
            	        {
            	             this->matchToken(VIRTUAL, &FOLLOW_VIRTUAL_in_classDecl6213);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            this->followPush(FOLLOW_function_in_classDecl6217);
            	            h=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_function(h
            	                ); h
            	                ->set_is_virtual(true);
            	            }


            	        }


            	    }
            	    break;
            	case 5:
            	    {
            	        {
            	             this->matchToken(OVERRIDE, &FOLLOW_OVERRIDE_in_classDecl6243);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            this->followPush(FOLLOW_function_in_classDecl6247);
            	            i=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_function(i
            	                ); i
            	                ->set_is_override(true);
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop50;
            	    break;
                }
            }
            loop50: ;


            RBRACE74 =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_classDecl6283);
            if  (this->hasException())
            {
                goto ruleclassDeclEx;
            }


            {
                 SET_END_LOCATION(node, RBRACE74);
            }


        }

    }
    goto ruleclassDeclEx;
    ruleclassDeclEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






containers::string
WNScriptASTParser::inc()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    containers::string file;


    ImplTraits::CommonTokenType const* STRING75 = NULL;









    {
        {
             this->matchToken(INCLUDE, &FOLLOW_INCLUDE_in_inc6313);
            if  (this->hasException())
            {
                goto ruleincEx;
            }


            STRING75 =  this->matchToken(STRING, &FOLLOW_STRING_in_inc6315);
            if  (this->hasException())
            {
                goto ruleincEx;
            }


            {
                 file = containers::string(m_allocator, (STRING75->getText()).c_str());
            }


        }

    }
    goto ruleincEx;
    ruleincEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return file;
}






scripting::script_file*
WNScriptASTParser::program()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::script_file* node;


    containers::string inc76;
    scripting::function* function77;
    scripting::struct_definition* structDecl78;
    scripting::struct_definition* classDecl79;





        node = m_allocator->construct<scripting::script_file>(m_allocator);
        m_file = node;



    {
        {

            for (;;)
            {
                int alt51=2;
                switch ( this->LA(1) )
                {
                case INCLUDE:
                	{
                		alt51=1;
                	}
                    break;

                }

                switch (alt51)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_inc_in_program6344);
            	        inc76=inc();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_include(core::move(inc76
            	            ));
            	        }


            	    }
            	    break;

            	default:
            	    goto loop51;
            	    break;
                }
            }
            loop51: ;



            for (;;)
            {
                int alt52=4;
                switch ( this->LA(1) )
                {
                case BOOL_TYPE:
                case CHAR_TYPE:
                case FLOAT_TYPE:
                case INT_TYPE:
                case SHARED_REF:
                case STRING_TYPE:
                case TYPE:
                case VOID_TYPE:
                case WEAK_REF:
                	{
                		alt52=1;
                	}
                    break;
                case STRUCT:
                	{
                		alt52=2;
                	}
                    break;
                case CLASS:
                	{
                		alt52=3;
                	}
                    break;

                }

                switch (alt52)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_function_in_program6383);
            	        function77=function();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_function(function77
            	            );
            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        this->followPush(FOLLOW_structDecl_in_program6405);
            	        structDecl78=structDecl();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_struct(structDecl78
            	            );
            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	        this->followPush(FOLLOW_classDecl_in_program6425);
            	        classDecl79=classDecl();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_struct(classDecl79
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop52;
            	    break;
                }
            }
            loop52: ;


        }

    }
    goto ruleprogramEx;
    ruleprogramEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
