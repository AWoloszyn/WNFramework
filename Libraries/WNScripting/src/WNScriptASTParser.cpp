/** \file
 *  This C++ source file was generated by $ANTLR version 3.5.3-SNAPSHOT
 *
 *     -                for the parser : WNScriptASTParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF

// clang-format off





    #include "WNCore/inc/base.h"
#ifdef _WN_MSVC
    #pragma warning(disable: 4100)
    #pragma warning(disable: 4459)
    #pragma warning(disable: 4703)
#endif
#ifdef _WN_CLANG
    #pragma clang diagnostic ignored "-Wunused-function"
#endif
#ifdef _WN_GCC
    #pragma GCC diagnostic ignored "-Wunused-function"
    #pragma GCC diagnostic ignored "-Wunused-variable"
    #pragma GCC diagnostic ignored "-Wunused-but-set-variable"
    #pragma GCC diagnostic ignored "-Wsign-compare"
#endif
    #include "WNMemory/inc/allocator.h"
    #include "WNScripting/src/WNScriptASTLexer.hpp"
    #include "WNScripting/inc/WNNodeTypes.h"

    using namespace wn;

    #ifndef SET_LOCATION
    #define SET_LOCATION(node, tok) { scripting::source_location loc; \
                                     loc.m_start_index = tok->get_startIndex();\
                                     loc.m_end_index = tok->get_stopIndex();\
                                     loc.m_line_start = tok->get_lineStart();\
                                     loc.m_line_number = tok->get_line();\
                                     loc.m_char_number = tok->get_charPositionInLine();\
                                     node->set_start_location(loc); \
                                   }

    #define SET_LOCATION_FROM_NODE(node, node2) { \
                                        if(node2) { \
                                        node->set_start_location(node2->get_start_location()); \
                                        } \
                                   }
    #define SET_START_LOCATION_FROM_NODE(node, node2) { \
                                        if(node2) { \
                                        scripting::source_location loc = node->get_start_location(); \
                                        scripting::source_location loc2 = node2->get_start_location(); \
                                        loc.m_start_index = loc2.m_start_index; \
                                        loc.m_line_start = loc2.m_line_start; \
                                        loc.m_line_number = loc2.m_line_number; \
                                        loc.m_char_number = loc2.m_char_number; \
                                        node->set_start_location(loc); \
                                        } \
                                    }
    #define SET_END_LOCATION(node, tok) { \
                                        node->set_end_index(tok->get_stopIndex()); \
                                      }
    #define SET_END_LOCATION_FROM_NODE(node, node2) { \
                                            if(node2) { \
                                            node->set_end_index(node2->get_start_location().m_end_index); \
                                            } \
                                            }
    #endif








#include    "WNScriptASTParser.hpp"









using namespace antlr3;



ANTLR_UINT8* WNScriptASTParserTokenNames[76+4]
     = {
        (ANTLR_UINT8*) "<invalid>",
        (ANTLR_UINT8*) "<EOR>",
        (ANTLR_UINT8*) "<DOWN>",
        (ANTLR_UINT8*) "<UP>",
        (ANTLR_UINT8*) "BOOL",
        (ANTLR_UINT8*) "BOOL_TYPE",
        (ANTLR_UINT8*) "BREAK",
        (ANTLR_UINT8*) "CHAR",
        (ANTLR_UINT8*) "CHAR_TYPE",
        (ANTLR_UINT8*) "CLASS",
        (ANTLR_UINT8*) "COLON",
        (ANTLR_UINT8*) "COMMA",
        (ANTLR_UINT8*) "COMMENT",
        (ANTLR_UINT8*) "CONTINUE",
        (ANTLR_UINT8*) "DEFAULT",
        (ANTLR_UINT8*) "DLSQBRACKET",
        (ANTLR_UINT8*) "DO",
        (ANTLR_UINT8*) "DOUBDEC",
        (ANTLR_UINT8*) "DOUBINC",
        (ANTLR_UINT8*) "DRSQBRACKET",
        (ANTLR_UINT8*) "ELSE",
        (ANTLR_UINT8*) "ESC_SEQ",
        (ANTLR_UINT8*) "EXPONENT",
        (ANTLR_UINT8*) "FLOAT",
        (ANTLR_UINT8*) "FLOAT_TYPE",
        (ANTLR_UINT8*) "FOR",
        (ANTLR_UINT8*) "HEX_DIGIT",
        (ANTLR_UINT8*) "ID",
        (ANTLR_UINT8*) "IF",
        (ANTLR_UINT8*) "INCLUDE",
        (ANTLR_UINT8*) "INT",
        (ANTLR_UINT8*) "INT_TYPE",
        (ANTLR_UINT8*) "LBRACE",
        (ANTLR_UINT8*) "LBRACKET",
        (ANTLR_UINT8*) "LENGTH",
        (ANTLR_UINT8*) "LSQBRACKET",
        (ANTLR_UINT8*) "NULLTOK",
        (ANTLR_UINT8*) "OCTAL_ESC",
        (ANTLR_UINT8*) "OVERRIDE",
        (ANTLR_UINT8*) "QUESTION",
        (ANTLR_UINT8*) "RBRACE",
        (ANTLR_UINT8*) "RBRACKET",
        (ANTLR_UINT8*) "RETURN",
        (ANTLR_UINT8*) "RSQBRACKET",
        (ANTLR_UINT8*) "SEMICOLON",
        (ANTLR_UINT8*) "SHARED_REF",
        (ANTLR_UINT8*) "STRING",
        (ANTLR_UINT8*) "STRING_TYPE",
        (ANTLR_UINT8*) "STRUCT",
        (ANTLR_UINT8*) "TYPE",
        (ANTLR_UINT8*) "UNICODE_ESC",
        (ANTLR_UINT8*) "VIRTUAL",
        (ANTLR_UINT8*) "VOID_TYPE",
        (ANTLR_UINT8*) "WEAK_REF",
        (ANTLR_UINT8*) "WHILE",
        (ANTLR_UINT8*) "WS",
        (ANTLR_UINT8*) "'!'",
        (ANTLR_UINT8*) "'!='",
        (ANTLR_UINT8*) "'%'",
        (ANTLR_UINT8*) "'%='",
        (ANTLR_UINT8*) "'&&'",
        (ANTLR_UINT8*) "'&'",
        (ANTLR_UINT8*) "'*'",
        (ANTLR_UINT8*) "'*='",
        (ANTLR_UINT8*) "'+'",
        (ANTLR_UINT8*) "'+='",
        (ANTLR_UINT8*) "'-'",
        (ANTLR_UINT8*) "'-='",
        (ANTLR_UINT8*) "'.'",
        (ANTLR_UINT8*) "'/'",
        (ANTLR_UINT8*) "'/='",
        (ANTLR_UINT8*) "'<'",
        (ANTLR_UINT8*) "'<='",
        (ANTLR_UINT8*) "'='",
        (ANTLR_UINT8*) "'=='",
        (ANTLR_UINT8*) "'>'",
        (ANTLR_UINT8*) "'>='",
        (ANTLR_UINT8*) "'^'",
        (ANTLR_UINT8*) "'|'",
        (ANTLR_UINT8*) "'||'"
       };




static const char fileName[] = "WNScriptAST.g";



const char* WNScriptASTParser::getGrammarFileName()
{
	return fileName;
}






WNScriptASTParser::WNScriptASTParser( StreamType* instream)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, NULL)

{
	this->init(instream);
}







WNScriptASTParser::WNScriptASTParser( StreamType* instream, RecognizerSharedStateType* state)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, state)

{
	this->init(instream );
}

void WNScriptASTParser::init(StreamType* instream)
{


	this->get_psrstate()->set_tokenNames( WNScriptASTParserTokenNames );


}

void
WNScriptASTParser::reset()
{
    this->get_rec()->reset();
}



WNScriptASTParser::~WNScriptASTParser()
 {
}








static ANTLR_UINT8**	getTokenNames()
{
        return WNScriptASTParserTokenNames;
}





static	ANTLR_BITWORD FOLLOW_TYPE_in_objectType1208_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_objectType1208( FOLLOW_TYPE_in_objectType1208_bits, 1 );

static	ANTLR_BITWORD FOLLOW_VOID_TYPE_in_scalarType1240_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_VOID_TYPE_in_scalarType1240( FOLLOW_VOID_TYPE_in_scalarType1240_bits, 1 );

static	ANTLR_BITWORD FOLLOW_INT_TYPE_in_scalarType1252_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_INT_TYPE_in_scalarType1252( FOLLOW_INT_TYPE_in_scalarType1252_bits, 1 );

static	ANTLR_BITWORD FOLLOW_FLOAT_TYPE_in_scalarType1264_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_FLOAT_TYPE_in_scalarType1264( FOLLOW_FLOAT_TYPE_in_scalarType1264_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CHAR_TYPE_in_scalarType1276_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CHAR_TYPE_in_scalarType1276( FOLLOW_CHAR_TYPE_in_scalarType1276_bits, 1 );

static	ANTLR_BITWORD FOLLOW_BOOL_TYPE_in_scalarType1288_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_BOOL_TYPE_in_scalarType1288( FOLLOW_BOOL_TYPE_in_scalarType1288_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRING_TYPE_in_scalarType1300_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_TYPE_in_scalarType1300( FOLLOW_STRING_TYPE_in_scalarType1300_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_arrayType1337_bits[]	= { ANTLR_UINT64_LIT(0x0000000800008000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_arrayType1337( FOLLOW_scalarType_in_arrayType1337_bits, 1 );

static	ANTLR_BITWORD FOLLOW_objectType_in_arrayType1353_bits[]	= { ANTLR_UINT64_LIT(0x0000000800008000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_objectType_in_arrayType1353( FOLLOW_objectType_in_arrayType1353_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SHARED_REF_in_arrayType1367_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SHARED_REF_in_arrayType1367( FOLLOW_SHARED_REF_in_arrayType1367_bits, 1 );

static	ANTLR_BITWORD FOLLOW_objectType_in_arrayType1371_bits[]	= { ANTLR_UINT64_LIT(0x0000000800008000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_objectType_in_arrayType1371( FOLLOW_objectType_in_arrayType1371_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_arrayType1405_bits[]	= { ANTLR_UINT64_LIT(0x0010C810C18001B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_arrayType1405( FOLLOW_LSQBRACKET_in_arrayType1405_bits, 1 );

static	ANTLR_BITWORD FOLLOW_constant_in_arrayType1424_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_constant_in_arrayType1424( FOLLOW_constant_in_arrayType1424_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_arrayType1446_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_arrayType1446( FOLLOW_RSQBRACKET_in_arrayType1446_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DLSQBRACKET_in_arrayType1475_bits[]	= { ANTLR_UINT64_LIT(0x0000000000080000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DLSQBRACKET_in_arrayType1475( FOLLOW_DLSQBRACKET_in_arrayType1475_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DRSQBRACKET_in_arrayType1477_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DRSQBRACKET_in_arrayType1477( FOLLOW_DRSQBRACKET_in_arrayType1477_bits, 1 );

static	ANTLR_BITWORD FOLLOW_objectType_in_compoundType1515_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_objectType_in_compoundType1515( FOLLOW_objectType_in_compoundType1515_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_nonArrayType1542_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_nonArrayType1542( FOLLOW_scalarType_in_nonArrayType1542_bits, 1 );

static	ANTLR_BITWORD FOLLOW_objectType_in_nonArrayType1552_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_objectType_in_nonArrayType1552( FOLLOW_objectType_in_nonArrayType1552_bits, 1 );

static	ANTLR_BITWORD FOLLOW_compoundType_in_type1582_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_compoundType_in_type1582( FOLLOW_compoundType_in_type1582_bits, 1 );

static	ANTLR_BITWORD FOLLOW_arrayType_in_type1592_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arrayType_in_type1592( FOLLOW_arrayType_in_type1592_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_type1602_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_type1602( FOLLOW_scalarType_in_type1602_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_param1634_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_param1634( FOLLOW_scalarType_in_param1634_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1638_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1638( FOLLOW_ID_in_param1638_bits, 1 );

static	ANTLR_BITWORD FOLLOW_compoundType_in_param1653_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_compoundType_in_param1653( FOLLOW_compoundType_in_param1653_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1657_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1657( FOLLOW_ID_in_param1657_bits, 1 );

static	ANTLR_BITWORD FOLLOW_arrayType_in_param1672_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arrayType_in_param1672( FOLLOW_arrayType_in_param1672_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1676_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1676( FOLLOW_ID_in_param1676_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SHARED_REF_in_param1689_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SHARED_REF_in_param1689( FOLLOW_SHARED_REF_in_param1689_bits, 1 );

static	ANTLR_BITWORD FOLLOW_compoundType_in_param1693_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_compoundType_in_param1693( FOLLOW_compoundType_in_param1693_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1697_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1697( FOLLOW_ID_in_param1697_bits, 1 );

static	ANTLR_BITWORD FOLLOW_WEAK_REF_in_param1710_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_WEAK_REF_in_param1710( FOLLOW_WEAK_REF_in_param1710_bits, 1 );

static	ANTLR_BITWORD FOLLOW_compoundType_in_param1714_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_compoundType_in_param1714( FOLLOW_compoundType_in_param1714_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1719_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1719( FOLLOW_ID_in_param1719_bits, 1 );

static	ANTLR_BITWORD FOLLOW_compoundType_in_param1734_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_compoundType_in_param1734( FOLLOW_compoundType_in_param1734_bits, 1 );

static	ANTLR_BITWORD FOLLOW_QUESTION_in_param1736_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_QUESTION_in_param1736( FOLLOW_QUESTION_in_param1736_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1741_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1741( FOLLOW_ID_in_param1741_bits, 1 );

static	ANTLR_BITWORD FOLLOW_param_in_paramList1773_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000802) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_param_in_paramList1773( FOLLOW_param_in_paramList1773_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COMMA_in_paramList1786_bits[]	= { ANTLR_UINT64_LIT(0x0032A00081000120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COMMA_in_paramList1786( FOLLOW_COMMA_in_paramList1786_bits, 1 );

static	ANTLR_BITWORD FOLLOW_param_in_paramList1790_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000802) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_param_in_paramList1790( FOLLOW_param_in_paramList1790_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_parameterList1822_bits[]	= { ANTLR_UINT64_LIT(0x0032A00081000120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_parameterList1822( FOLLOW_LBRACKET_in_parameterList1822_bits, 1 );

static	ANTLR_BITWORD FOLLOW_paramList_in_parameterList1824_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_paramList_in_parameterList1824( FOLLOW_paramList_in_parameterList1824_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_parameterList1826_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_parameterList1826( FOLLOW_RBRACKET_in_parameterList1826_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_parameterList1843_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_parameterList1843( FOLLOW_LBRACKET_in_parameterList1843_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_parameterList1845_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_parameterList1845( FOLLOW_RBRACKET_in_parameterList1845_bits, 1 );

static	ANTLR_BITWORD FOLLOW_73_in_assign_type1881_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_73_in_assign_type1881( FOLLOW_73_in_assign_type1881_bits, 1 );

static	ANTLR_BITWORD FOLLOW_65_in_assign_type1895_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_65_in_assign_type1895( FOLLOW_65_in_assign_type1895_bits, 1 );

static	ANTLR_BITWORD FOLLOW_67_in_assign_type1908_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_67_in_assign_type1908( FOLLOW_67_in_assign_type1908_bits, 1 );

static	ANTLR_BITWORD FOLLOW_63_in_assign_type1921_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_63_in_assign_type1921( FOLLOW_63_in_assign_type1921_bits, 1 );

static	ANTLR_BITWORD FOLLOW_70_in_assign_type1934_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_70_in_assign_type1934( FOLLOW_70_in_assign_type1934_bits, 1 );

static	ANTLR_BITWORD FOLLOW_59_in_assign_type1947_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_59_in_assign_type1947( FOLLOW_59_in_assign_type1947_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_arglist2005_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000802) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arglist2005( FOLLOW_expr_in_arglist2005_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COMMA_in_arglist2038_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98609B2), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COMMA_in_arglist2038( FOLLOW_COMMA_in_arglist2038_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_arglist2082_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000802) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arglist2082( FOLLOW_expr_in_arglist2082_bits, 1 );

static	ANTLR_BITWORD FOLLOW_cond_ex_in_expr2157_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_cond_ex_in_expr2157( FOLLOW_cond_ex_in_expr2157_bits, 1 );

static	ANTLR_BITWORD FOLLOW_or_ex_in_cond_ex2195_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_or_ex_in_cond_ex2195( FOLLOW_or_ex_in_cond_ex2195_bits, 1 );

static	ANTLR_BITWORD FOLLOW_QUESTION_in_cond_ex2218_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_QUESTION_in_cond_ex2218( FOLLOW_QUESTION_in_cond_ex2218_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_cond_ex2222_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_cond_ex2222( FOLLOW_expr_in_cond_ex2222_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COLON_in_cond_ex2224_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COLON_in_cond_ex2224( FOLLOW_COLON_in_cond_ex2224_bits, 2 );

static	ANTLR_BITWORD FOLLOW_cond_ex_in_cond_ex2228_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_cond_ex_in_cond_ex2228( FOLLOW_cond_ex_in_cond_ex2228_bits, 1 );

static	ANTLR_BITWORD FOLLOW_and_ex_in_or_ex2275_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000008000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_and_ex_in_or_ex2275( FOLLOW_and_ex_in_or_ex2275_bits, 2 );

static	ANTLR_BITWORD FOLLOW_79_in_or_ex2292_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_79_in_or_ex2292( FOLLOW_79_in_or_ex2292_bits, 2 );

static	ANTLR_BITWORD FOLLOW_and_ex_in_or_ex2296_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000008000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_and_ex_in_or_ex2296( FOLLOW_and_ex_in_or_ex2296_bits, 2 );

static	ANTLR_BITWORD FOLLOW_bit_or_ex_in_and_ex2339_bits[]	= { ANTLR_UINT64_LIT(0x1000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_bit_or_ex_in_and_ex2339( FOLLOW_bit_or_ex_in_and_ex2339_bits, 1 );

static	ANTLR_BITWORD FOLLOW_60_in_and_ex2356_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_60_in_and_ex2356( FOLLOW_60_in_and_ex2356_bits, 2 );

static	ANTLR_BITWORD FOLLOW_bit_or_ex_in_and_ex2360_bits[]	= { ANTLR_UINT64_LIT(0x1000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_bit_or_ex_in_and_ex2360( FOLLOW_bit_or_ex_in_and_ex2360_bits, 1 );

static	ANTLR_BITWORD FOLLOW_bit_xor_ex_in_bit_or_ex2394_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000004000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_bit_xor_ex_in_bit_or_ex2394( FOLLOW_bit_xor_ex_in_bit_or_ex2394_bits, 2 );

static	ANTLR_BITWORD FOLLOW_78_in_bit_or_ex2411_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_78_in_bit_or_ex2411( FOLLOW_78_in_bit_or_ex2411_bits, 2 );

static	ANTLR_BITWORD FOLLOW_bit_xor_ex_in_bit_or_ex2415_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000004000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_bit_xor_ex_in_bit_or_ex2415( FOLLOW_bit_xor_ex_in_bit_or_ex2415_bits, 2 );

static	ANTLR_BITWORD FOLLOW_bit_and_ex_in_bit_xor_ex2450_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_bit_and_ex_in_bit_xor_ex2450( FOLLOW_bit_and_ex_in_bit_xor_ex2450_bits, 2 );

static	ANTLR_BITWORD FOLLOW_77_in_bit_xor_ex2467_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_77_in_bit_xor_ex2467( FOLLOW_77_in_bit_xor_ex2467_bits, 2 );

static	ANTLR_BITWORD FOLLOW_bit_and_ex_in_bit_xor_ex2471_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_bit_and_ex_in_bit_xor_ex2471( FOLLOW_bit_and_ex_in_bit_xor_ex2471_bits, 2 );

static	ANTLR_BITWORD FOLLOW_eq_ex_in_bit_and_ex2506_bits[]	= { ANTLR_UINT64_LIT(0x2000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_eq_ex_in_bit_and_ex2506( FOLLOW_eq_ex_in_bit_and_ex2506_bits, 1 );

static	ANTLR_BITWORD FOLLOW_61_in_bit_and_ex2523_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_61_in_bit_and_ex2523( FOLLOW_61_in_bit_and_ex2523_bits, 2 );

static	ANTLR_BITWORD FOLLOW_eq_ex_in_bit_and_ex2527_bits[]	= { ANTLR_UINT64_LIT(0x2000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_eq_ex_in_bit_and_ex2527( FOLLOW_eq_ex_in_bit_and_ex2527_bits, 1 );

static	ANTLR_BITWORD FOLLOW_rel_ex_in_eq_ex2565_bits[]	= { ANTLR_UINT64_LIT(0x0200000000000002), ANTLR_UINT64_LIT(0x0000000000000400) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_rel_ex_in_eq_ex2565( FOLLOW_rel_ex_in_eq_ex2565_bits, 2 );

static	ANTLR_BITWORD FOLLOW_74_in_eq_ex2600_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_74_in_eq_ex2600( FOLLOW_74_in_eq_ex2600_bits, 2 );

static	ANTLR_BITWORD FOLLOW_rel_ex_in_eq_ex2604_bits[]	= { ANTLR_UINT64_LIT(0x0200000000000002), ANTLR_UINT64_LIT(0x0000000000000400) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_rel_ex_in_eq_ex2604( FOLLOW_rel_ex_in_eq_ex2604_bits, 2 );

static	ANTLR_BITWORD FOLLOW_57_in_eq_ex2627_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_57_in_eq_ex2627( FOLLOW_57_in_eq_ex2627_bits, 2 );

static	ANTLR_BITWORD FOLLOW_rel_ex_in_eq_ex2631_bits[]	= { ANTLR_UINT64_LIT(0x0200000000000002), ANTLR_UINT64_LIT(0x0000000000000400) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_rel_ex_in_eq_ex2631( FOLLOW_rel_ex_in_eq_ex2631_bits, 2 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2689_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000001980) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2689( FOLLOW_add_ex_in_rel_ex2689_bits, 2 );

static	ANTLR_BITWORD FOLLOW_71_in_rel_ex2725_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_71_in_rel_ex2725( FOLLOW_71_in_rel_ex2725_bits, 2 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2729_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000001980) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2729( FOLLOW_add_ex_in_rel_ex2729_bits, 2 );

static	ANTLR_BITWORD FOLLOW_75_in_rel_ex2753_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_75_in_rel_ex2753( FOLLOW_75_in_rel_ex2753_bits, 2 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2757_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000001980) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2757( FOLLOW_add_ex_in_rel_ex2757_bits, 2 );

static	ANTLR_BITWORD FOLLOW_72_in_rel_ex2781_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_72_in_rel_ex2781( FOLLOW_72_in_rel_ex2781_bits, 2 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2785_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000001980) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2785( FOLLOW_add_ex_in_rel_ex2785_bits, 2 );

static	ANTLR_BITWORD FOLLOW_76_in_rel_ex2809_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_76_in_rel_ex2809( FOLLOW_76_in_rel_ex2809_bits, 2 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2813_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000001980) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2813( FOLLOW_add_ex_in_rel_ex2813_bits, 2 );

static	ANTLR_BITWORD FOLLOW_mult_ex_in_add_ex2874_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000005) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_mult_ex_in_add_ex2874( FOLLOW_mult_ex_in_add_ex2874_bits, 2 );

static	ANTLR_BITWORD FOLLOW_64_in_add_ex2909_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_64_in_add_ex2909( FOLLOW_64_in_add_ex2909_bits, 2 );

static	ANTLR_BITWORD FOLLOW_mult_ex_in_add_ex2913_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000005) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_mult_ex_in_add_ex2913( FOLLOW_mult_ex_in_add_ex2913_bits, 2 );

static	ANTLR_BITWORD FOLLOW_66_in_add_ex2935_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_66_in_add_ex2935( FOLLOW_66_in_add_ex2935_bits, 2 );

static	ANTLR_BITWORD FOLLOW_mult_ex_in_add_ex2939_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000005) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_mult_ex_in_add_ex2939( FOLLOW_mult_ex_in_add_ex2939_bits, 2 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex2998_bits[]	= { ANTLR_UINT64_LIT(0x4400000000000002), ANTLR_UINT64_LIT(0x0000000000000020) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex2998( FOLLOW_unary_ex_in_mult_ex2998_bits, 2 );

static	ANTLR_BITWORD FOLLOW_62_in_mult_ex3037_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_62_in_mult_ex3037( FOLLOW_62_in_mult_ex3037_bits, 2 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex3041_bits[]	= { ANTLR_UINT64_LIT(0x4400000000000002), ANTLR_UINT64_LIT(0x0000000000000020) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex3041( FOLLOW_unary_ex_in_mult_ex3041_bits, 2 );

static	ANTLR_BITWORD FOLLOW_69_in_mult_ex3067_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_69_in_mult_ex3067( FOLLOW_69_in_mult_ex3067_bits, 2 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex3071_bits[]	= { ANTLR_UINT64_LIT(0x4400000000000002), ANTLR_UINT64_LIT(0x0000000000000020) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex3071( FOLLOW_unary_ex_in_mult_ex3071_bits, 2 );

static	ANTLR_BITWORD FOLLOW_58_in_mult_ex3097_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_58_in_mult_ex3097( FOLLOW_58_in_mult_ex3097_bits, 2 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex3101_bits[]	= { ANTLR_UINT64_LIT(0x4400000000000002), ANTLR_UINT64_LIT(0x0000000000000020) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex3101( FOLLOW_unary_ex_in_mult_ex3101_bits, 2 );

static	ANTLR_BITWORD FOLLOW_post_ex_in_unary_ex3153_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_post_ex_in_unary_ex3153( FOLLOW_post_ex_in_unary_ex3153_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DOUBINC_in_unary_ex3166_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBINC_in_unary_ex3166( FOLLOW_DOUBINC_in_unary_ex3166_bits, 2 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_unary_ex3170_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_unary_ex3170( FOLLOW_unary_ex_in_unary_ex3170_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DOUBDEC_in_unary_ex3183_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBDEC_in_unary_ex3183( FOLLOW_DOUBDEC_in_unary_ex3183_bits, 2 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_unary_ex3187_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_unary_ex3187( FOLLOW_unary_ex_in_unary_ex3187_bits, 1 );

static	ANTLR_BITWORD FOLLOW_66_in_unary_ex3200_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_66_in_unary_ex3200( FOLLOW_66_in_unary_ex3200_bits, 2 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_unary_ex3204_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_unary_ex3204( FOLLOW_unary_ex_in_unary_ex3204_bits, 1 );

static	ANTLR_BITWORD FOLLOW_56_in_unary_ex3218_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_56_in_unary_ex3218( FOLLOW_56_in_unary_ex3218_bits, 2 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_unary_ex3222_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_unary_ex3222( FOLLOW_unary_ex_in_unary_ex3222_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_post_ex_proper3260_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_post_ex_proper3260( FOLLOW_LSQBRACKET_in_post_ex_proper3260_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_post_ex_proper3264_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_post_ex_proper3264( FOLLOW_expr_in_post_ex_proper3264_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_post_ex_proper3268_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_post_ex_proper3268( FOLLOW_RSQBRACKET_in_post_ex_proper3268_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_post_ex_proper3283_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_post_ex_proper3283( FOLLOW_LBRACKET_in_post_ex_proper3283_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_post_ex_proper3287_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_post_ex_proper3287( FOLLOW_RBRACKET_in_post_ex_proper3287_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_post_ex_proper3315_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_post_ex_proper3315( FOLLOW_LBRACKET_in_post_ex_proper3315_bits, 2 );

static	ANTLR_BITWORD FOLLOW_arglist_in_post_ex_proper3321_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arglist_in_post_ex_proper3321( FOLLOW_arglist_in_post_ex_proper3321_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_post_ex_proper3325_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_post_ex_proper3325( FOLLOW_RBRACKET_in_post_ex_proper3325_bits, 1 );

static	ANTLR_BITWORD FOLLOW_68_in_post_ex_proper3338_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_68_in_post_ex_proper3338( FOLLOW_68_in_post_ex_proper3338_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_post_ex_proper3342_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_post_ex_proper3342( FOLLOW_ID_in_post_ex_proper3342_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DOUBINC_in_post_ex_proper3369_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBINC_in_post_ex_proper3369( FOLLOW_DOUBINC_in_post_ex_proper3369_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DOUBDEC_in_post_ex_proper3398_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBDEC_in_post_ex_proper3398( FOLLOW_DOUBDEC_in_post_ex_proper3398_bits, 1 );

static	ANTLR_BITWORD FOLLOW_prim_ex_in_post_ex3451_bits[]	= { ANTLR_UINT64_LIT(0x0000000A00060002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_prim_ex_in_post_ex3451( FOLLOW_prim_ex_in_post_ex3451_bits, 2 );

static	ANTLR_BITWORD FOLLOW_post_ex_proper_in_post_ex3470_bits[]	= { ANTLR_UINT64_LIT(0x0000000A00060002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_post_ex_proper_in_post_ex3470( FOLLOW_post_ex_proper_in_post_ex3470_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_assignment_or_expression3501_bits[]	= { ANTLR_UINT64_LIT(0x8800000000000002), ANTLR_UINT64_LIT(0x000000000000024A) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_assignment_or_expression3501( FOLLOW_expr_in_assignment_or_expression3501_bits, 2 );

static	ANTLR_BITWORD FOLLOW_assign_type_in_assignment_or_expression3533_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_assign_type_in_assignment_or_expression3533( FOLLOW_assign_type_in_assignment_or_expression3533_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_assignment_or_expression3537_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_assignment_or_expression3537( FOLLOW_expr_in_assignment_or_expression3537_bits, 1 );

static	ANTLR_BITWORD FOLLOW_INT_in_constant3603_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_INT_in_constant3603( FOLLOW_INT_in_constant3603_bits, 1 );

static	ANTLR_BITWORD FOLLOW_FLOAT_in_constant3621_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_FLOAT_in_constant3621( FOLLOW_FLOAT_in_constant3621_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CHAR_in_constant3637_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CHAR_in_constant3637( FOLLOW_CHAR_in_constant3637_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRING_in_constant3654_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_in_constant3654( FOLLOW_STRING_in_constant3654_bits, 1 );

static	ANTLR_BITWORD FOLLOW_BOOL_in_constant3669_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_BOOL_in_constant3669( FOLLOW_BOOL_in_constant3669_bits, 1 );

static	ANTLR_BITWORD FOLLOW_NULLTOK_in_constant3686_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_NULLTOK_in_constant3686( FOLLOW_NULLTOK_in_constant3686_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_constant3701_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_constant3701( FOLLOW_scalarType_in_constant3701_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACE_in_constant3705_bits[]	= { ANTLR_UINT64_LIT(0x0000400000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_constant3705( FOLLOW_LBRACE_in_constant3705_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRING_in_constant3709_bits[]	= { ANTLR_UINT64_LIT(0x0000010000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_in_constant3709( FOLLOW_STRING_in_constant3709_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACE_in_constant3713_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_constant3713( FOLLOW_RBRACE_in_constant3713_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LENGTH_in_builtin_unary3742_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LENGTH_in_builtin_unary3742( FOLLOW_LENGTH_in_builtin_unary3742_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_builtin_unary3744_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_builtin_unary3744( FOLLOW_LBRACKET_in_builtin_unary3744_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_builtin_unary3746_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_builtin_unary3746( FOLLOW_expr_in_builtin_unary3746_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_builtin_unary3748_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_builtin_unary3748( FOLLOW_RBRACKET_in_builtin_unary3748_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_non_array_prim_ex3777_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_non_array_prim_ex3777( FOLLOW_ID_in_non_array_prim_ex3777_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_non_array_prim_ex3791_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_non_array_prim_ex3791( FOLLOW_LBRACKET_in_non_array_prim_ex3791_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_non_array_prim_ex3795_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_non_array_prim_ex3795( FOLLOW_expr_in_non_array_prim_ex3795_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_non_array_prim_ex3799_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_non_array_prim_ex3799( FOLLOW_RBRACKET_in_non_array_prim_ex3799_bits, 1 );

static	ANTLR_BITWORD FOLLOW_constant_in_non_array_prim_ex3813_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_constant_in_non_array_prim_ex3813( FOLLOW_constant_in_non_array_prim_ex3813_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_non_array_prim_ex3828_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_non_array_prim_ex3828( FOLLOW_scalarType_in_non_array_prim_ex3828_bits, 1 );

static	ANTLR_BITWORD FOLLOW_cast_in_non_array_prim_ex3834_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_cast_in_non_array_prim_ex3834( FOLLOW_cast_in_non_array_prim_ex3834_bits, 1 );

static	ANTLR_BITWORD FOLLOW_objectType_in_non_array_prim_ex3849_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_objectType_in_non_array_prim_ex3849( FOLLOW_objectType_in_non_array_prim_ex3849_bits, 1 );

static	ANTLR_BITWORD FOLLOW_structInit_in_non_array_prim_ex3853_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_structInit_in_non_array_prim_ex3853( FOLLOW_structInit_in_non_array_prim_ex3853_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SHARED_REF_in_non_array_prim_ex3865_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SHARED_REF_in_non_array_prim_ex3865( FOLLOW_SHARED_REF_in_non_array_prim_ex3865_bits, 1 );

static	ANTLR_BITWORD FOLLOW_objectType_in_non_array_prim_ex3869_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_objectType_in_non_array_prim_ex3869( FOLLOW_objectType_in_non_array_prim_ex3869_bits, 1 );

static	ANTLR_BITWORD FOLLOW_structInit_in_non_array_prim_ex3873_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_structInit_in_non_array_prim_ex3873( FOLLOW_structInit_in_non_array_prim_ex3873_bits, 1 );

static	ANTLR_BITWORD FOLLOW_builtin_unary_in_non_array_prim_ex3887_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_builtin_unary_in_non_array_prim_ex3887( FOLLOW_builtin_unary_in_non_array_prim_ex3887_bits, 1 );

static	ANTLR_BITWORD FOLLOW_non_array_prim_ex_in_prim_ex3916_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_non_array_prim_ex_in_prim_ex3916( FOLLOW_non_array_prim_ex_in_prim_ex3916_bits, 1 );

static	ANTLR_BITWORD FOLLOW_nonArrayType_in_prim_ex3930_bits[]	= { ANTLR_UINT64_LIT(0x0000000800008000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_nonArrayType_in_prim_ex3930( FOLLOW_nonArrayType_in_prim_ex3930_bits, 1 );

static	ANTLR_BITWORD FOLLOW_arrayInit_in_prim_ex3934_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arrayInit_in_prim_ex3934( FOLLOW_arrayInit_in_prim_ex3934_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SHARED_REF_in_prim_ex3946_bits[]	= { ANTLR_UINT64_LIT(0x0012800081000120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SHARED_REF_in_prim_ex3946( FOLLOW_SHARED_REF_in_prim_ex3946_bits, 1 );

static	ANTLR_BITWORD FOLLOW_nonArrayType_in_prim_ex3950_bits[]	= { ANTLR_UINT64_LIT(0x0000000800008000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_nonArrayType_in_prim_ex3950( FOLLOW_nonArrayType_in_prim_ex3950_bits, 1 );

static	ANTLR_BITWORD FOLLOW_arrayInit_in_prim_ex3954_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arrayInit_in_prim_ex3954( FOLLOW_arrayInit_in_prim_ex3954_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_cast3983_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_cast3983( FOLLOW_LBRACKET_in_cast3983_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_cast3987_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_cast3987( FOLLOW_expr_in_cast3987_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_cast3991_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_cast3991( FOLLOW_RBRACKET_in_cast3991_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_structInit4020_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_structInit4020( FOLLOW_LBRACKET_in_structInit4020_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_structInit4024_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_structInit4024( FOLLOW_RBRACKET_in_structInit4024_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_arrayInit4061_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_arrayInit4061( FOLLOW_LSQBRACKET_in_arrayInit4061_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_arrayInit4065_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arrayInit4065( FOLLOW_expr_in_arrayInit4065_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_arrayInit4067_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_arrayInit4067( FOLLOW_RSQBRACKET_in_arrayInit4067_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DLSQBRACKET_in_arrayInit4084_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DLSQBRACKET_in_arrayInit4084( FOLLOW_DLSQBRACKET_in_arrayInit4084_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_arrayInit4088_bits[]	= { ANTLR_UINT64_LIT(0x0000000000080000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arrayInit4088( FOLLOW_expr_in_arrayInit4088_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DRSQBRACKET_in_arrayInit4090_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DRSQBRACKET_in_arrayInit4090( FOLLOW_DRSQBRACKET_in_arrayInit4090_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_arrayInit4105_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_arrayInit4105( FOLLOW_LBRACKET_in_arrayInit4105_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_arrayInit4109_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arrayInit4109( FOLLOW_expr_in_arrayInit4109_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_arrayInit4113_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_arrayInit4113( FOLLOW_RBRACKET_in_arrayInit4113_bits, 1 );

static	ANTLR_BITWORD FOLLOW_param_in_declaration4147_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_param_in_declaration4147( FOLLOW_param_in_declaration4147_bits, 2 );

static	ANTLR_BITWORD FOLLOW_73_in_declaration4182_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_73_in_declaration4182( FOLLOW_73_in_declaration4182_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_declaration4189_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_declaration4189( FOLLOW_expr_in_declaration4189_bits, 1 );

static	ANTLR_BITWORD FOLLOW_68_in_inherited_declaration4239_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_68_in_inherited_declaration4239( FOLLOW_68_in_inherited_declaration4239_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_inherited_declaration4243_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_inherited_declaration4243( FOLLOW_ID_in_inherited_declaration4243_bits, 2 );

static	ANTLR_BITWORD FOLLOW_73_in_inherited_declaration4256_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98641B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_73_in_inherited_declaration4256( FOLLOW_73_in_inherited_declaration4256_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_inherited_declaration4292_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_inherited_declaration4292( FOLLOW_expr_in_inherited_declaration4292_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DEFAULT_in_inherited_declaration4318_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DEFAULT_in_inherited_declaration4318( FOLLOW_DEFAULT_in_inherited_declaration4318_bits, 1 );

static	ANTLR_BITWORD FOLLOW_declaration_in_instructionScalar4374_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_declaration_in_instructionScalar4374( FOLLOW_declaration_in_instructionScalar4374_bits, 1 );

static	ANTLR_BITWORD FOLLOW_assignment_or_expression_in_instructionScalar4387_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_assignment_or_expression_in_instructionScalar4387( FOLLOW_assignment_or_expression_in_instructionScalar4387_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CONTINUE_in_continueInst4417_bits[]	= { ANTLR_UINT64_LIT(0x0000100000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CONTINUE_in_continueInst4417( FOLLOW_CONTINUE_in_continueInst4417_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_continueInst4421_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_continueInst4421( FOLLOW_SEMICOLON_in_continueInst4421_bits, 1 );

static	ANTLR_BITWORD FOLLOW_BREAK_in_breakInst4447_bits[]	= { ANTLR_UINT64_LIT(0x0000100000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_BREAK_in_breakInst4447( FOLLOW_BREAK_in_breakInst4447_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_breakInst4451_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_breakInst4451( FOLLOW_SEMICOLON_in_breakInst4451_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RETURN_in_returnInst4478_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RETURN_in_returnInst4478( FOLLOW_RETURN_in_returnInst4478_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_returnInst4480_bits[]	= { ANTLR_UINT64_LIT(0x0000100000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_returnInst4480( FOLLOW_expr_in_returnInst4480_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_returnInst4484_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_returnInst4484( FOLLOW_SEMICOLON_in_returnInst4484_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RETURN_in_returnInst4498_bits[]	= { ANTLR_UINT64_LIT(0x0000100000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RETURN_in_returnInst4498( FOLLOW_RETURN_in_returnInst4498_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_returnInst4502_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_returnInst4502( FOLLOW_SEMICOLON_in_returnInst4502_bits, 1 );

static	ANTLR_BITWORD FOLLOW_WHILE_in_whileInst4535_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_WHILE_in_whileInst4535( FOLLOW_WHILE_in_whileInst4535_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_whileInst4537_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_whileInst4537( FOLLOW_LBRACKET_in_whileInst4537_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_whileInst4539_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_whileInst4539( FOLLOW_expr_in_whileInst4539_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_whileInst4541_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_whileInst4541( FOLLOW_RBRACKET_in_whileInst4541_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_whileInst4543_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_whileInst4543( FOLLOW_instruction_list_in_whileInst4543_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DO_in_doInst4579_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DO_in_doInst4579( FOLLOW_DO_in_doInst4579_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_doInst4581_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_doInst4581( FOLLOW_instruction_list_in_doInst4581_bits, 1 );

static	ANTLR_BITWORD FOLLOW_WHILE_in_doInst4583_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_WHILE_in_doInst4583( FOLLOW_WHILE_in_doInst4583_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_doInst4585_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_doInst4585( FOLLOW_LBRACKET_in_doInst4585_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_doInst4587_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_doInst4587( FOLLOW_expr_in_doInst4587_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_doInst4589_bits[]	= { ANTLR_UINT64_LIT(0x0000100000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_doInst4589( FOLLOW_RBRACKET_in_doInst4589_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_doInst4591_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_doInst4591( FOLLOW_SEMICOLON_in_doInst4591_bits, 1 );

static	ANTLR_BITWORD FOLLOW_FOR_in_forInst4623_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_FOR_in_forInst4623( FOLLOW_FOR_in_forInst4623_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_forInst4625_bits[]	= { ANTLR_UINT64_LIT(0x0132F016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_forInst4625( FOLLOW_LBRACKET_in_forInst4625_bits, 2 );

static	ANTLR_BITWORD FOLLOW_instructionScalar_in_forInst4653_bits[]	= { ANTLR_UINT64_LIT(0x0000100000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instructionScalar_in_forInst4653( FOLLOW_instructionScalar_in_forInst4653_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_forInst4659_bits[]	= { ANTLR_UINT64_LIT(0x0112F016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_forInst4659( FOLLOW_SEMICOLON_in_forInst4659_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_forInst4684_bits[]	= { ANTLR_UINT64_LIT(0x0000100000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_forInst4684( FOLLOW_expr_in_forInst4684_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_forInst4698_bits[]	= { ANTLR_UINT64_LIT(0x0132E216C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_forInst4698( FOLLOW_SEMICOLON_in_forInst4698_bits, 2 );

static	ANTLR_BITWORD FOLLOW_instructionScalar_in_forInst4723_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instructionScalar_in_forInst4723( FOLLOW_instructionScalar_in_forInst4723_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_forInst4729_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_forInst4729( FOLLOW_RBRACKET_in_forInst4729_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_forInst4754_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_forInst4754( FOLLOW_instruction_list_in_forInst4754_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ELSE_in_elsemiddle4802_bits[]	= { ANTLR_UINT64_LIT(0x0000000010000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ELSE_in_elsemiddle4802( FOLLOW_ELSE_in_elsemiddle4802_bits, 1 );

static	ANTLR_BITWORD FOLLOW_IF_in_elsemiddle4804_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_IF_in_elsemiddle4804( FOLLOW_IF_in_elsemiddle4804_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_elsemiddle4806_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_elsemiddle4806( FOLLOW_LBRACKET_in_elsemiddle4806_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_elsemiddle4808_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_elsemiddle4808( FOLLOW_expr_in_elsemiddle4808_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_elsemiddle4810_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_elsemiddle4810( FOLLOW_RBRACKET_in_elsemiddle4810_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_elsemiddle4812_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_elsemiddle4812( FOLLOW_instruction_list_in_elsemiddle4812_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ELSE_in_endif4845_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ELSE_in_endif4845( FOLLOW_ELSE_in_endif4845_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_endif4847_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_endif4847( FOLLOW_instruction_list_in_endif4847_bits, 1 );

static	ANTLR_BITWORD FOLLOW_IF_in_ifInst4877_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_IF_in_ifInst4877( FOLLOW_IF_in_ifInst4877_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_ifInst4879_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_ifInst4879( FOLLOW_LBRACKET_in_ifInst4879_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_ifInst4881_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_ifInst4881( FOLLOW_expr_in_ifInst4881_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_ifInst4883_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_ifInst4883( FOLLOW_RBRACKET_in_ifInst4883_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_ifInst4885_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_ifInst4885( FOLLOW_instruction_list_in_ifInst4885_bits, 1 );

static	ANTLR_BITWORD FOLLOW_elsemiddle_in_ifInst4902_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_elsemiddle_in_ifInst4902( FOLLOW_elsemiddle_in_ifInst4902_bits, 1 );

static	ANTLR_BITWORD FOLLOW_endif_in_ifInst4922_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_endif_in_ifInst4922( FOLLOW_endif_in_ifInst4922_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ifInst_in_instruction4956_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ifInst_in_instruction4956( FOLLOW_ifInst_in_instruction4956_bits, 1 );

static	ANTLR_BITWORD FOLLOW_whileInst_in_instruction4977_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_whileInst_in_instruction4977( FOLLOW_whileInst_in_instruction4977_bits, 1 );

static	ANTLR_BITWORD FOLLOW_doInst_in_instruction4994_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_doInst_in_instruction4994( FOLLOW_doInst_in_instruction4994_bits, 1 );

static	ANTLR_BITWORD FOLLOW_forInst_in_instruction5014_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_forInst_in_instruction5014( FOLLOW_forInst_in_instruction5014_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instructionScalar_in_instruction5034_bits[]	= { ANTLR_UINT64_LIT(0x0000100000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instructionScalar_in_instruction5034( FOLLOW_instructionScalar_in_instruction5034_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_instruction5036_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_instruction5036( FOLLOW_SEMICOLON_in_instruction5036_bits, 1 );

static	ANTLR_BITWORD FOLLOW_breakInst_in_instruction5049_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_breakInst_in_instruction5049( FOLLOW_breakInst_in_instruction5049_bits, 1 );

static	ANTLR_BITWORD FOLLOW_continueInst_in_instruction5062_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_continueInst_in_instruction5062( FOLLOW_continueInst_in_instruction5062_bits, 1 );

static	ANTLR_BITWORD FOLLOW_returnInst_in_instruction5075_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_returnInst_in_instruction5075( FOLLOW_returnInst_in_instruction5075_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_instruction5088_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_instruction5088( FOLLOW_instruction_list_in_instruction5088_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACE_in_instruction_list5120_bits[]	= { ANTLR_UINT64_LIT(0x0172E517DB8721F0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_instruction_list5120( FOLLOW_LBRACE_in_instruction_list5120_bits, 2 );

static	ANTLR_BITWORD FOLLOW_instruction_in_instruction_list5137_bits[]	= { ANTLR_UINT64_LIT(0x0172E517DB8721F0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_in_instruction_list5137( FOLLOW_instruction_in_instruction_list5137_bits, 2 );

static	ANTLR_BITWORD FOLLOW_RBRACE_in_instruction_list5154_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_instruction_list5154( FOLLOW_RBRACE_in_instruction_list5154_bits, 1 );

static	ANTLR_BITWORD FOLLOW_param_in_function5184_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_param_in_function5184( FOLLOW_param_in_function5184_bits, 1 );

static	ANTLR_BITWORD FOLLOW_parameterList_in_function5186_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_parameterList_in_function5186( FOLLOW_parameterList_in_function5186_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_function5188_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_function5188( FOLLOW_instruction_list_in_function5188_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRUCT_in_structDecl5218_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRUCT_in_structDecl5218( FOLLOW_STRUCT_in_structDecl5218_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_structDecl5220_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_structDecl5220( FOLLOW_TYPE_in_structDecl5220_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACE_in_structDecl5236_bits[]	= { ANTLR_UINT64_LIT(0x0032A10081000120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_structDecl5236( FOLLOW_LBRACE_in_structDecl5236_bits, 1 );

static	ANTLR_BITWORD FOLLOW_declaration_in_structDecl5241_bits[]	= { ANTLR_UINT64_LIT(0x0000100000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_declaration_in_structDecl5241( FOLLOW_declaration_in_structDecl5241_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_structDecl5245_bits[]	= { ANTLR_UINT64_LIT(0x0032A10081000120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_structDecl5245( FOLLOW_SEMICOLON_in_structDecl5245_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACE_in_structDecl5250_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_structDecl5250( FOLLOW_RBRACE_in_structDecl5250_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CLASS_in_classDecl5303_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CLASS_in_classDecl5303( FOLLOW_CLASS_in_classDecl5303_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_classDecl5307_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_classDecl5307( FOLLOW_TYPE_in_classDecl5307_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CLASS_in_classDecl5327_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CLASS_in_classDecl5327( FOLLOW_CLASS_in_classDecl5327_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_classDecl5331_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_classDecl5331( FOLLOW_TYPE_in_classDecl5331_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COLON_in_classDecl5333_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COLON_in_classDecl5333( FOLLOW_COLON_in_classDecl5333_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_classDecl5337_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_classDecl5337( FOLLOW_TYPE_in_classDecl5337_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACE_in_classDecl5364_bits[]	= { ANTLR_UINT64_LIT(0x003AA14081000120), ANTLR_UINT64_LIT(0x0000000000000010) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_classDecl5364( FOLLOW_LBRACE_in_classDecl5364_bits, 2 );

static	ANTLR_BITWORD FOLLOW_declaration_in_classDecl5407_bits[]	= { ANTLR_UINT64_LIT(0x0000100000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_declaration_in_classDecl5407( FOLLOW_declaration_in_classDecl5407_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_classDecl5411_bits[]	= { ANTLR_UINT64_LIT(0x003AA14081000120), ANTLR_UINT64_LIT(0x0000000000000010) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_classDecl5411( FOLLOW_SEMICOLON_in_classDecl5411_bits, 2 );

static	ANTLR_BITWORD FOLLOW_inherited_declaration_in_classDecl5437_bits[]	= { ANTLR_UINT64_LIT(0x0000100000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_inherited_declaration_in_classDecl5437( FOLLOW_inherited_declaration_in_classDecl5437_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_classDecl5441_bits[]	= { ANTLR_UINT64_LIT(0x003AA14081000120), ANTLR_UINT64_LIT(0x0000000000000010) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_classDecl5441( FOLLOW_SEMICOLON_in_classDecl5441_bits, 2 );

static	ANTLR_BITWORD FOLLOW_function_in_classDecl5467_bits[]	= { ANTLR_UINT64_LIT(0x003AA14081000120), ANTLR_UINT64_LIT(0x0000000000000010) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl5467( FOLLOW_function_in_classDecl5467_bits, 2 );

static	ANTLR_BITWORD FOLLOW_VIRTUAL_in_classDecl5496_bits[]	= { ANTLR_UINT64_LIT(0x0032A00081000120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_VIRTUAL_in_classDecl5496( FOLLOW_VIRTUAL_in_classDecl5496_bits, 1 );

static	ANTLR_BITWORD FOLLOW_function_in_classDecl5500_bits[]	= { ANTLR_UINT64_LIT(0x003AA14081000120), ANTLR_UINT64_LIT(0x0000000000000010) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl5500( FOLLOW_function_in_classDecl5500_bits, 2 );

static	ANTLR_BITWORD FOLLOW_OVERRIDE_in_classDecl5526_bits[]	= { ANTLR_UINT64_LIT(0x0032A00081000120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_OVERRIDE_in_classDecl5526( FOLLOW_OVERRIDE_in_classDecl5526_bits, 1 );

static	ANTLR_BITWORD FOLLOW_function_in_classDecl5530_bits[]	= { ANTLR_UINT64_LIT(0x003AA14081000120), ANTLR_UINT64_LIT(0x0000000000000010) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl5530( FOLLOW_function_in_classDecl5530_bits, 2 );

static	ANTLR_BITWORD FOLLOW_RBRACE_in_classDecl5566_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_classDecl5566( FOLLOW_RBRACE_in_classDecl5566_bits, 1 );

static	ANTLR_BITWORD FOLLOW_INCLUDE_in_inc5596_bits[]	= { ANTLR_UINT64_LIT(0x0000400000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_INCLUDE_in_inc5596( FOLLOW_INCLUDE_in_inc5596_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRING_in_inc5598_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_in_inc5598( FOLLOW_STRING_in_inc5598_bits, 1 );

static	ANTLR_BITWORD FOLLOW_inc_in_program5627_bits[]	= { ANTLR_UINT64_LIT(0x0033A000A1000322) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_inc_in_program5627( FOLLOW_inc_in_program5627_bits, 1 );

static	ANTLR_BITWORD FOLLOW_function_in_program5666_bits[]	= { ANTLR_UINT64_LIT(0x0033A00081000322) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_program5666( FOLLOW_function_in_program5666_bits, 1 );

static	ANTLR_BITWORD FOLLOW_structDecl_in_program5688_bits[]	= { ANTLR_UINT64_LIT(0x0033A00081000322) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_structDecl_in_program5688( FOLLOW_structDecl_in_program5688_bits, 1 );

static	ANTLR_BITWORD FOLLOW_classDecl_in_program5708_bits[]	= { ANTLR_UINT64_LIT(0x0033A00081000322) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_classDecl_in_program5708( FOLLOW_classDecl_in_program5708_bits, 1 );









scripting::type*
WNScriptASTParser::objectType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    const ImplTraits::CommonTokenType* TYPE1 = NULL;






        node = nullptr;



    {
        {
            TYPE1 =  this->matchToken(TYPE, &FOLLOW_TYPE_in_objectType1208);
            if  (this->hasException())
            {
                goto ruleobjectTypeEx;
            }


            {
                 node = m_allocator->construct<scripting::type>(m_allocator, (TYPE1->getText()).c_str()); SET_LOCATION(node, TYPE1);
            }


        }

    }
    goto ruleobjectTypeEx;
    ruleobjectTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::type*
WNScriptASTParser::scalarType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    const ImplTraits::CommonTokenType* VOID_TYPE2 = NULL;
    const ImplTraits::CommonTokenType* INT_TYPE3 = NULL;
    const ImplTraits::CommonTokenType* FLOAT_TYPE4 = NULL;
    const ImplTraits::CommonTokenType* CHAR_TYPE5 = NULL;
    const ImplTraits::CommonTokenType* BOOL_TYPE6 = NULL;
    const ImplTraits::CommonTokenType* STRING_TYPE7 = NULL;






        node = nullptr;



    {
        {

            ANTLR_UINT32 alt1;

            alt1=6;

            switch ( this->LA(1) )
            {
            case VOID_TYPE:
            	{
            		alt1=1;
            	}
                break;
            case INT_TYPE:
            	{
            		alt1=2;
            	}
                break;
            case FLOAT_TYPE:
            	{
            		alt1=3;
            	}
                break;
            case CHAR_TYPE:
            	{
            		alt1=4;
            	}
                break;
            case BOOL_TYPE:
            	{
            		alt1=5;
            	}
                break;
            case STRING_TYPE:
            	{
            		alt1=6;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 1 );
                ex->set_state( 0 );


                goto rulescalarTypeEx;

            }

            switch (alt1)
            {
        	case 1:
        	    {
        	        VOID_TYPE2 =  this->matchToken(VOID_TYPE, &FOLLOW_VOID_TYPE_in_scalarType1240);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::void_type); SET_LOCATION(node, VOID_TYPE2);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        INT_TYPE3 =  this->matchToken(INT_TYPE, &FOLLOW_INT_TYPE_in_scalarType1252);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::int_type); SET_LOCATION(node, INT_TYPE3);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        FLOAT_TYPE4 =  this->matchToken(FLOAT_TYPE, &FOLLOW_FLOAT_TYPE_in_scalarType1264);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::float_type); SET_LOCATION(node, FLOAT_TYPE4);
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        CHAR_TYPE5 =  this->matchToken(CHAR_TYPE, &FOLLOW_CHAR_TYPE_in_scalarType1276);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::char_type); SET_LOCATION(node, CHAR_TYPE5);
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        BOOL_TYPE6 =  this->matchToken(BOOL_TYPE, &FOLLOW_BOOL_TYPE_in_scalarType1288);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::bool_type); SET_LOCATION(node, BOOL_TYPE6);
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	        STRING_TYPE7 =  this->matchToken(STRING_TYPE, &FOLLOW_STRING_TYPE_in_scalarType1300);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::string_type); SET_LOCATION(node, STRING_TYPE7);
        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulescalarTypeEx;
    rulescalarTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::type*
WNScriptASTParser::arrayType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    const ImplTraits::CommonTokenType* LSQBRACKET9 = NULL;
    const ImplTraits::CommonTokenType* RSQBRACKET11 = NULL;
    const ImplTraits::CommonTokenType* DLSQBRACKET12 = NULL;
    const ImplTraits::CommonTokenType* DRSQBRACKET13 = NULL;
    scripting::type* a;
    scripting::type* b;
    scripting::type* scalarType8;
    scripting::constant_expression* constant10;





        node = nullptr;
        scripting::reference_type rt = scripting::reference_type::raw;



    {
        {
            {
                int alt2=3;
                switch ( this->LA(1) )
                {
                case BOOL_TYPE:
                case CHAR_TYPE:
                case FLOAT_TYPE:
                case INT_TYPE:
                case STRING_TYPE:
                case VOID_TYPE:
                	{
                		alt2=1;
                	}
                    break;
                case TYPE:
                	{
                		alt2=2;
                	}
                    break;
                case SHARED_REF:
                	{
                		alt2=3;
                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 2 );
                    ex->set_state( 0 );


                    goto rulearrayTypeEx;

                }

                switch (alt2)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_scalarType_in_arrayType1337);
            	        scalarType8=scalarType();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulearrayTypeEx;
            	        }


            	        {
            	             node = scalarType8
            	            ; SET_LOCATION_FROM_NODE(node, scalarType8
            	            );
            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        this->followPush(FOLLOW_objectType_in_arrayType1353);
            	        a=objectType();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulearrayTypeEx;
            	        }


            	        {
            	             node = a
            	            ; SET_LOCATION_FROM_NODE(node, a
            	            );
            	                        rt = scripting::reference_type::raw;
            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	         this->matchToken(SHARED_REF, &FOLLOW_SHARED_REF_in_arrayType1367);
            	        if  (this->hasException())
            	        {
            	            goto rulearrayTypeEx;
            	        }


            	        this->followPush(FOLLOW_objectType_in_arrayType1371);
            	        b=objectType();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulearrayTypeEx;
            	        }


            	        {
            	             node = b
            	            ; SET_LOCATION_FROM_NODE(node, b
            	            );
            	                        rt = scripting::reference_type::shared;
            	        }


            	    }
            	    break;

                }
            }

            {
                int alt4=2;
                switch ( this->LA(1) )
                {
                case LSQBRACKET:
                	{
                		alt4=1;
                	}
                    break;
                case DLSQBRACKET:
                	{
                		alt4=2;
                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 4 );
                    ex->set_state( 0 );


                    goto rulearrayTypeEx;

                }

                switch (alt4)
                {
            	case 1:
            	    {
            	        {
            	            {
            	                LSQBRACKET9 =  this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_arrayType1405);
            	                if  (this->hasException())
            	                {
            	                    goto rulearrayTypeEx;
            	                }


            	                {
            	                     node->set_reference_type(rt); node = m_allocator->construct<scripting::array_type>(m_allocator, node); SET_LOCATION(node, LSQBRACKET9);
            	                }


            	            }


            	            {
            	                int alt3=2;
            	                switch ( this->LA(1) )
            	                {
            	                    case BOOL:
            	                    case BOOL_TYPE:
            	                    case CHAR:
            	                    case CHAR_TYPE:
            	                    case FLOAT:
            	                    case FLOAT_TYPE:
            	                    case INT:
            	                    case INT_TYPE:
            	                    case NULLTOK:
            	                    case STRING:
            	                    case STRING_TYPE:
            	                    case VOID_TYPE:
            	                    	{
            	                    		alt3=1;
            	                    	}
            	                        break;
            	                }

            	                switch (alt3)
            	                {
            	            	case 1:
            	            	    {
            	            	        this->followPush(FOLLOW_constant_in_arrayType1424);
            	            	        constant10=constant();

            	            	        this->followPop();
            	            	        if  (this->hasException())
            	            	        {
            	            	            goto rulearrayTypeEx;
            	            	        }


            	            	        {
            	            	             scripting::cast_to<scripting::array_type>(node)->set_constant(constant10
            	            	            );
            	            	        }


            	            	    }
            	            	    break;

            	                }
            	            }

            	            {
            	                RSQBRACKET11 =  this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_arrayType1446);
            	                if  (this->hasException())
            	                {
            	                    goto rulearrayTypeEx;
            	                }


            	                {
            	                     SET_END_LOCATION(node, RSQBRACKET11);
            	                }


            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	            DLSQBRACKET12 =  this->matchToken(DLSQBRACKET, &FOLLOW_DLSQBRACKET_in_arrayType1475);
            	            if  (this->hasException())
            	            {
            	                goto rulearrayTypeEx;
            	            }


            	            DRSQBRACKET13 =  this->matchToken(DRSQBRACKET, &FOLLOW_DRSQBRACKET_in_arrayType1477);
            	            if  (this->hasException())
            	            {
            	                goto rulearrayTypeEx;
            	            }


            	            {
            	                 node->set_reference_type(rt); node = m_allocator->construct<scripting::runtime_array_type>(m_allocator, node); SET_LOCATION(node, DLSQBRACKET12); SET_END_LOCATION(node, DRSQBRACKET13);
            	            }


            	        }


            	    }
            	    break;

                }
            }

        }

    }
    goto rulearrayTypeEx;
    rulearrayTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::type*
WNScriptASTParser::compoundType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    scripting::type* objectType14;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_objectType_in_compoundType1515);
            objectType14=objectType();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecompoundTypeEx;
            }


            {
                 node = objectType14
                ;
            }


        }

    }
    goto rulecompoundTypeEx;
    rulecompoundTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::type*
WNScriptASTParser::nonArrayType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    scripting::type* scalarType15;
    scripting::type* objectType16;





      node = nullptr;



    {
        {

            ANTLR_UINT32 alt5;

            alt5=2;

            switch ( this->LA(1) )
            {
            case BOOL_TYPE:
            case CHAR_TYPE:
            case FLOAT_TYPE:
            case INT_TYPE:
            case STRING_TYPE:
            case VOID_TYPE:
            	{
            		alt5=1;
            	}
                break;
            case TYPE:
            	{
            		alt5=2;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 5 );
                ex->set_state( 0 );


                goto rulenonArrayTypeEx;

            }

            switch (alt5)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_nonArrayType1542);
        	        scalarType15=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenonArrayTypeEx;
        	        }


        	        {
        	             node = scalarType15
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_objectType_in_nonArrayType1552);
        	        objectType16=objectType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenonArrayTypeEx;
        	        }


        	        {
        	             node = objectType16
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulenonArrayTypeEx;
    rulenonArrayTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::type*
WNScriptASTParser::type()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    scripting::type* compoundType17;
    scripting::type* arrayType18;
    scripting::type* scalarType19;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt6;

            alt6=3;

            switch ( this->LA(1) )
            {
            case TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case EOF:
            			{
            				alt6=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt6=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 6 );
            		    ex->set_state( 1 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case VOID_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt6=2;
            			}
            		    break;
            		case EOF:
            			{
            				alt6=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 6 );
            		    ex->set_state( 2 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case INT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt6=2;
            			}
            		    break;
            		case EOF:
            			{
            				alt6=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 6 );
            		    ex->set_state( 3 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case FLOAT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt6=2;
            			}
            		    break;
            		case EOF:
            			{
            				alt6=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 6 );
            		    ex->set_state( 4 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case CHAR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt6=2;
            			}
            		    break;
            		case EOF:
            			{
            				alt6=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 6 );
            		    ex->set_state( 5 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case BOOL_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt6=2;
            			}
            		    break;
            		case EOF:
            			{
            				alt6=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 6 );
            		    ex->set_state( 6 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case STRING_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt6=2;
            			}
            		    break;
            		case EOF:
            			{
            				alt6=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 6 );
            		    ex->set_state( 7 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case SHARED_REF:
            	{
            		alt6=2;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 6 );
                ex->set_state( 0 );


                goto ruletypeEx;

            }

            switch (alt6)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_compoundType_in_type1582);
        	        compoundType17=compoundType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruletypeEx;
        	        }


        	        {
        	             node = compoundType17
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_arrayType_in_type1592);
        	        arrayType18=arrayType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruletypeEx;
        	        }


        	        {
        	             node = arrayType18
        	            ;
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_type1602);
        	        scalarType19=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruletypeEx;
        	        }


        	        {
        	             node = scalarType19
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruletypeEx;
    ruletypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::parameter*
WNScriptASTParser::param()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::parameter* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* aa = NULL;
    const ImplTraits::CommonTokenType* dd = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    const ImplTraits::CommonTokenType* e = NULL;
    const ImplTraits::CommonTokenType* g = NULL;
    const ImplTraits::CommonTokenType* SHARED_REF21 = NULL;
    const ImplTraits::CommonTokenType* WEAK_REF22 = NULL;
    scripting::type* bb;
    scripting::type* cc;
    scripting::type* b;
    scripting::type* d;
    scripting::type* f;
    scripting::type* scalarType20;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt7;

            alt7=6;

            switch ( this->LA(1) )
            {
            case VOID_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt7=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt7=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 1 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case INT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt7=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt7=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 2 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case FLOAT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt7=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt7=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 3 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case CHAR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt7=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt7=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 4 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case BOOL_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt7=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt7=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 5 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case STRING_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt7=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt7=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 6 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt7=2;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt7=3;
            			}
            		    break;
            		case QUESTION:
            			{
            				alt7=6;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 7 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case SHARED_REF:
            	{
            		switch ( this->LA(2) )
            		{
            		case TYPE:
            			{
            				switch ( this->LA(3) )
            				{
            				case DLSQBRACKET:
            				case LSQBRACKET:
            					{
            						alt7=3;
            					}
            				    break;
            				case ID:
            					{
            						alt7=4;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 7 );
            				    ex->set_state( 14 );


            				    goto ruleparamEx;

            				}

            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 8 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case WEAK_REF:
            	{
            		alt7=5;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 7 );
                ex->set_state( 0 );


                goto ruleparamEx;

            }

            switch (alt7)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_param1634);
        	        scalarType20=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        a =  this->matchToken(ID, &FOLLOW_ID_in_param1638);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                        node = m_allocator->construct<scripting::parameter>(m_allocator, scalarType20
        	            , (a->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            scalarType20
        	            ); SET_END_LOCATION(node, a);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_compoundType_in_param1653);
        	        bb=compoundType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        aa =  this->matchToken(ID, &FOLLOW_ID_in_param1657);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                        bb
        	            ->set_reference_type(scripting::reference_type::unique);
        	                        node = m_allocator->construct<scripting::parameter>(m_allocator, bb
        	            , (aa->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            bb
        	            ); SET_END_LOCATION(node, aa);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        this->followPush(FOLLOW_arrayType_in_param1672);
        	        cc=arrayType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        dd =  this->matchToken(ID, &FOLLOW_ID_in_param1676);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                        cc
        	            ->set_reference_type(scripting::reference_type::unique);
        	                        node = m_allocator->construct<scripting::parameter>(m_allocator, cc
        	            , (dd->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            cc
        	            ); SET_END_LOCATION(node, dd);
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        SHARED_REF21 =  this->matchToken(SHARED_REF, &FOLLOW_SHARED_REF_in_param1689);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        this->followPush(FOLLOW_compoundType_in_param1693);
        	        b=compoundType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        c =  this->matchToken(ID, &FOLLOW_ID_in_param1697);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                       b
        	            ->set_reference_type(scripting::reference_type::shared);
        	                       node = m_allocator->construct<scripting::parameter>(m_allocator, b
        	            , (c->getText()).c_str()); SET_LOCATION(node, SHARED_REF21); SET_END_LOCATION(node, c);

        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        WEAK_REF22 =  this->matchToken(WEAK_REF, &FOLLOW_WEAK_REF_in_param1710);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        this->followPush(FOLLOW_compoundType_in_param1714);
        	        d=compoundType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        e =  this->matchToken(ID, &FOLLOW_ID_in_param1719);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                       d
        	            ->set_reference_type(scripting::reference_type::weak);
        	                       node = m_allocator->construct<scripting::parameter>(m_allocator, d
        	            , (e->getText()).c_str()); SET_LOCATION(node, WEAK_REF22); SET_END_LOCATION(node, e);

        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	        this->followPush(FOLLOW_compoundType_in_param1734);
        	        f=compoundType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	         this->matchToken(QUESTION, &FOLLOW_QUESTION_in_param1736);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        g =  this->matchToken(ID, &FOLLOW_ID_in_param1741);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                       f
        	            ->set_reference_type(scripting::reference_type::nullable);
        	                       node = m_allocator->construct<scripting::parameter>(m_allocator, f
        	            , (g->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            f
        	            ); SET_END_LOCATION(node, g);

        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleparamEx;
    ruleparamEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::parameter_list*
WNScriptASTParser::paramList()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::parameter_list* node;


    scripting::parameter* a;
    scripting::parameter* b;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_param_in_paramList1773);
            a=param();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleparamListEx;
            }


            {
                 node = m_allocator->construct<scripting::parameter_list>(m_allocator, a
                ); SET_LOCATION_FROM_NODE(node, a
                );
            }



            for (;;)
            {
                int alt8=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt8=1;
                	}
                    break;

                }

                switch (alt8)
                {
            	case 1:
            	    {
            	         this->matchToken(COMMA, &FOLLOW_COMMA_in_paramList1786);
            	        if  (this->hasException())
            	        {
            	            goto ruleparamListEx;
            	        }


            	        this->followPush(FOLLOW_param_in_paramList1790);
            	        b=param();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleparamListEx;
            	        }


            	        {
            	             node
            	            ->add_parameter(b
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop8;
            	    break;
                }
            }
            loop8: ;


        }

    }
    goto ruleparamListEx;
    ruleparamListEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::parameter_list*
WNScriptASTParser::parameterList()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::parameter_list* node;


    const ImplTraits::CommonTokenType* LBRACKET24 = NULL;
    const ImplTraits::CommonTokenType* RBRACKET25 = NULL;
    scripting::parameter_list* paramList23;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt9;

            alt9=2;

            switch ( this->LA(1) )
            {
            case LBRACKET:
            	{
            		switch ( this->LA(2) )
            		{
            		case RBRACKET:
            			{
            				alt9=2;
            			}
            		    break;
            		case BOOL_TYPE:
            		case CHAR_TYPE:
            		case FLOAT_TYPE:
            		case INT_TYPE:
            		case SHARED_REF:
            		case STRING_TYPE:
            		case TYPE:
            		case VOID_TYPE:
            		case WEAK_REF:
            			{
            				alt9=1;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 9 );
            		    ex->set_state( 1 );


            		    goto ruleparameterListEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 9 );
                ex->set_state( 0 );


                goto ruleparameterListEx;

            }

            switch (alt9)
            {
        	case 1:
        	    {
        	        LBRACKET24 =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_parameterList1822);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        this->followPush(FOLLOW_paramList_in_parameterList1824);
        	        paramList23=paramList();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        RBRACKET25 =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_parameterList1826);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        {
        	             node = paramList23
        	            ; SET_LOCATION(node, LBRACKET24); SET_END_LOCATION(node, RBRACKET25);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	         this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_parameterList1843);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	         this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_parameterList1845);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        {
        	             node = nullptr;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleparameterListEx;
    ruleparameterListEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::assign_type
WNScriptASTParser::assign_type()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::assign_type node;







        node = scripting::assign_type::equal;



    {
        {

            ANTLR_UINT32 alt10;

            alt10=6;

            switch ( this->LA(1) )
            {
            case 73:
            	{
            		alt10=1;
            	}
                break;
            case 65:
            	{
            		alt10=2;
            	}
                break;
            case 67:
            	{
            		alt10=3;
            	}
                break;
            case 63:
            	{
            		alt10=4;
            	}
                break;
            case 70:
            	{
            		alt10=5;
            	}
                break;
            case 59:
            	{
            		alt10=6;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 10 );
                ex->set_state( 0 );


                goto ruleassign_typeEx;

            }

            switch (alt10)
            {
        	case 1:
        	    {
        	         this->matchToken(73, &FOLLOW_73_in_assign_type1881);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::equal;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	         this->matchToken(65, &FOLLOW_65_in_assign_type1895);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::add_equal;
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	         this->matchToken(67, &FOLLOW_67_in_assign_type1908);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::sub_equal;
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	         this->matchToken(63, &FOLLOW_63_in_assign_type1921);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::mult_equal;
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	         this->matchToken(70, &FOLLOW_70_in_assign_type1934);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::div_equal;
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	         this->matchToken(59, &FOLLOW_59_in_assign_type1947);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::mod_equal;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleassign_typeEx;
    ruleassign_typeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::arg_list*
WNScriptASTParser::arglist()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::arg_list* node;


    scripting::expression* a;
    scripting::expression* d;





        node = m_allocator->construct<scripting::arg_list>(m_allocator);



    {
        {
            {
                {
                    this->followPush(FOLLOW_expr_in_arglist2005);
                    a=expr();

                    this->followPop();
                    if  (this->hasException())
                    {
                        goto rulearglistEx;
                    }


                    {
                         node->add_expression(a
                        ); SET_LOCATION_FROM_NODE(node, a
                        );
                    }


                }


            }



            for (;;)
            {
                int alt12=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt12=1;
                	}
                    break;

                }

                switch (alt12)
                {
            	case 1:
            	    {
            	         this->matchToken(COMMA, &FOLLOW_COMMA_in_arglist2038);
            	        if  (this->hasException())
            	        {
            	            goto rulearglistEx;
            	        }


            	        {
            	            int alt11=2;
            	            switch ( this->LA(1) )
            	            {
            	            case BOOL:
            	            case BOOL_TYPE:
            	            case CHAR:
            	            case CHAR_TYPE:
            	            case DOUBDEC:
            	            case DOUBINC:
            	            case FLOAT:
            	            case FLOAT_TYPE:
            	            case ID:
            	            case INT:
            	            case INT_TYPE:
            	            case LBRACKET:
            	            case LENGTH:
            	            case NULLTOK:
            	            case SHARED_REF:
            	            case STRING:
            	            case STRING_TYPE:
            	            case TYPE:
            	            case VOID_TYPE:
            	            case 56:
            	            case 66:
            	            	{
            	            		alt11=1;
            	            	}
            	                break;
            	            case COMMA:
            	            case RBRACKET:
            	            	{
            	            		alt11=2;
            	            	}
            	                break;

            	            default:
            	                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 11 );
            	                ex->set_state( 0 );


            	                goto rulearglistEx;

            	            }

            	            switch (alt11)
            	            {
            	        	case 1:
            	        	    {
            	        	        {
            	        	            this->followPush(FOLLOW_expr_in_arglist2082);
            	        	            d=expr();

            	        	            this->followPop();
            	        	            if  (this->hasException())
            	        	            {
            	        	                goto rulearglistEx;
            	        	            }


            	        	            {
            	        	                 node->add_expression(d
            	        	                , true); SET_END_LOCATION_FROM_NODE(node, d
            	        	                );
            	        	            }


            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    {
            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

            	default:
            	    goto loop12;
            	    break;
                }
            }
            loop12: ;


        }

    }
    goto rulearglistEx;
    rulearglistEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::expr()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* cond_ex26;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_cond_ex_in_expr2157);
            cond_ex26=cond_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexprEx;
            }


            {
                 node = cond_ex26
                ;
            }


        }

    }
    goto ruleexprEx;
    ruleexprEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::cond_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* or_ex27;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_or_ex_in_cond_ex2195);
            or_ex27=or_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecond_exEx;
            }


            {
                 node = or_ex27
                ;
            }


            {
                int alt13=2;
                switch ( this->LA(1) )
                {
                    case QUESTION:
                    	{
                    		alt13=1;
                    	}
                        break;
                }

                switch (alt13)
                {
            	case 1:
            	    {
            	         this->matchToken(QUESTION, &FOLLOW_QUESTION_in_cond_ex2218);
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	        this->followPush(FOLLOW_expr_in_cond_ex2222);
            	        b=expr();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	         this->matchToken(COLON, &FOLLOW_COLON_in_cond_ex2224);
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	        this->followPush(FOLLOW_cond_ex_in_cond_ex2228);
            	        c=cond_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	        {
            	             node = m_allocator->construct<scripting::cond_expression>(m_allocator, node, b
            	            , c
            	            );  SET_LOCATION_FROM_NODE(node, or_ex27
            	            ); SET_END_LOCATION_FROM_NODE(node, c
            	            );
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    goto rulecond_exEx;
    rulecond_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::or_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_and_ex_in_or_ex2275);
            a=and_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleor_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt14=2;
                switch ( this->LA(1) )
                {
                case 79:
                	{
                		alt14=1;
                	}
                    break;

                }

                switch (alt14)
                {
            	case 1:
            	    {
            	         this->matchToken(79, &FOLLOW_79_in_or_ex2292);
            	        if  (this->hasException())
            	        {
            	            goto ruleor_exEx;
            	        }


            	        this->followPush(FOLLOW_and_ex_in_or_ex2296);
            	        b=and_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleor_exEx;
            	        }


            	        {
            	             node = m_allocator->construct<scripting::short_circuit_expression>(m_allocator, scripting::short_circuit_type::or_operator, node, b
            	            ); SET_LOCATION_FROM_NODE(node, a
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop14;
            	    break;
                }
            }
            loop14: ;


        }

    }
    goto ruleor_exEx;
    ruleor_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::and_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_bit_or_ex_in_and_ex2339);
            a=bit_or_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleand_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt15=2;
                switch ( this->LA(1) )
                {
                case 60:
                	{
                		alt15=1;
                	}
                    break;

                }

                switch (alt15)
                {
            	case 1:
            	    {
            	         this->matchToken(60, &FOLLOW_60_in_and_ex2356);
            	        if  (this->hasException())
            	        {
            	            goto ruleand_exEx;
            	        }


            	        this->followPush(FOLLOW_bit_or_ex_in_and_ex2360);
            	        b=bit_or_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleand_exEx;
            	        }


            	        {
            	            node = m_allocator->construct<scripting::short_circuit_expression>(m_allocator, scripting::short_circuit_type::and_operator, node, b
            	            ); SET_LOCATION_FROM_NODE(node, a
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop15;
            	    break;
                }
            }
            loop15: ;


        }

    }
    goto ruleand_exEx;
    ruleand_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::bit_or_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_bit_xor_ex_in_bit_or_ex2394);
            a=bit_xor_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebit_or_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt16=2;
                switch ( this->LA(1) )
                {
                case 78:
                	{
                		alt16=1;
                	}
                    break;

                }

                switch (alt16)
                {
            	case 1:
            	    {
            	         this->matchToken(78, &FOLLOW_78_in_bit_or_ex2411);
            	        if  (this->hasException())
            	        {
            	            goto rulebit_or_exEx;
            	        }


            	        this->followPush(FOLLOW_bit_xor_ex_in_bit_or_ex2415);
            	        b=bit_xor_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulebit_or_exEx;
            	        }


            	        {
            	            node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_or, node, b
            	            );  SET_LOCATION_FROM_NODE(node, a
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop16;
            	    break;
                }
            }
            loop16: ;


        }

    }
    goto rulebit_or_exEx;
    rulebit_or_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::bit_xor_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_bit_and_ex_in_bit_xor_ex2450);
            a=bit_and_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebit_xor_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt17=2;
                switch ( this->LA(1) )
                {
                case 77:
                	{
                		alt17=1;
                	}
                    break;

                }

                switch (alt17)
                {
            	case 1:
            	    {
            	         this->matchToken(77, &FOLLOW_77_in_bit_xor_ex2467);
            	        if  (this->hasException())
            	        {
            	            goto rulebit_xor_exEx;
            	        }


            	        this->followPush(FOLLOW_bit_and_ex_in_bit_xor_ex2471);
            	        b=bit_and_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulebit_xor_exEx;
            	        }


            	        {
            	            node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_xor, node, b
            	            );  SET_LOCATION_FROM_NODE(node, a
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop17;
            	    break;
                }
            }
            loop17: ;


        }

    }
    goto rulebit_xor_exEx;
    rulebit_xor_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::bit_and_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_eq_ex_in_bit_and_ex2506);
            a=eq_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebit_and_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt18=2;
                switch ( this->LA(1) )
                {
                case 61:
                	{
                		alt18=1;
                	}
                    break;

                }

                switch (alt18)
                {
            	case 1:
            	    {
            	         this->matchToken(61, &FOLLOW_61_in_bit_and_ex2523);
            	        if  (this->hasException())
            	        {
            	            goto rulebit_and_exEx;
            	        }


            	        this->followPush(FOLLOW_eq_ex_in_bit_and_ex2527);
            	        b=eq_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulebit_and_exEx;
            	        }


            	        {
            	            node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_and, node, b
            	            );  SET_LOCATION_FROM_NODE(node, a
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop18;
            	    break;
                }
            }
            loop18: ;


        }

    }
    goto rulebit_and_exEx;
    rulebit_and_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::eq_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_rel_ex_in_eq_ex2565);
            a=rel_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleeq_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt19=3;
                switch ( this->LA(1) )
                {
                case 74:
                	{
                		alt19=1;
                	}
                    break;
                case 57:
                	{
                		alt19=2;
                	}
                    break;

                }

                switch (alt19)
                {
            	case 1:
            	    {
            	        {
            	             this->matchToken(74, &FOLLOW_74_in_eq_ex2600);
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            this->followPush(FOLLOW_rel_ex_in_eq_ex2604);
            	            b=rel_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_equal, node, b
            	                );  SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	             this->matchToken(57, &FOLLOW_57_in_eq_ex2627);
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            this->followPush(FOLLOW_rel_ex_in_eq_ex2631);
            	            c=rel_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_not_equal, node, c
            	                ); SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                );
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop19;
            	    break;
                }
            }
            loop19: ;


        }

    }
    goto ruleeq_exEx;
    ruleeq_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::rel_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* d;
    scripting::expression* e;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_add_ex_in_rel_ex2689);
            a=add_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulerel_exEx;
            }


            {
                 node=a
                ;
            }



            for (;;)
            {
                int alt20=5;
                switch ( this->LA(1) )
                {
                case 71:
                	{
                		alt20=1;
                	}
                    break;
                case 75:
                	{
                		alt20=2;
                	}
                    break;
                case 72:
                	{
                		alt20=3;
                	}
                    break;
                case 76:
                	{
                		alt20=4;
                	}
                    break;

                }

                switch (alt20)
                {
            	case 1:
            	    {
            	        {
            	             this->matchToken(71, &FOLLOW_71_in_rel_ex2725);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex2729);
            	            b=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_less_than, node, b
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	             this->matchToken(75, &FOLLOW_75_in_rel_ex2753);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex2757);
            	            c=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_greater_than, node, c
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	        {
            	             this->matchToken(72, &FOLLOW_72_in_rel_ex2781);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex2785);
            	            d=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_less_than_or_equal, node, d
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, d
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 4:
            	    {
            	        {
            	             this->matchToken(76, &FOLLOW_76_in_rel_ex2809);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex2813);
            	            e=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_greater_than_or_equal, node, e
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, e
            	                );
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop20;
            	    break;
                }
            }
            loop20: ;


        }

    }
    goto rulerel_exEx;
    rulerel_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::add_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_mult_ex_in_add_ex2874);
            a=mult_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleadd_exEx;
            }


            {
                node = a
                ;
            }



            for (;;)
            {
                int alt21=3;
                switch ( this->LA(1) )
                {
                case 64:
                	{
                		alt21=1;
                	}
                    break;
                case 66:
                	{
                		alt21=2;
                	}
                    break;

                }

                switch (alt21)
                {
            	case 1:
            	    {
            	        {
            	             this->matchToken(64, &FOLLOW_64_in_add_ex2909);
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            this->followPush(FOLLOW_mult_ex_in_add_ex2913);
            	            b=mult_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_add, node, b
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	             this->matchToken(66, &FOLLOW_66_in_add_ex2935);
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            this->followPush(FOLLOW_mult_ex_in_add_ex2939);
            	            c=mult_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_sub, node, c
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                );
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop21;
            	    break;
                }
            }
            loop21: ;


        }

    }
    goto ruleadd_exEx;
    ruleadd_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::mult_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* d;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_unary_ex_in_mult_ex2998);
            a=unary_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemult_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt22=4;
                switch ( this->LA(1) )
                {
                case 62:
                	{
                		alt22=1;
                	}
                    break;
                case 69:
                	{
                		alt22=2;
                	}
                    break;
                case 58:
                	{
                		alt22=3;
                	}
                    break;

                }

                switch (alt22)
                {
            	case 1:
            	    {
            	        {
            	             this->matchToken(62, &FOLLOW_62_in_mult_ex3037);
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            this->followPush(FOLLOW_unary_ex_in_mult_ex3041);
            	            b=unary_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_mult, node, b
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	             this->matchToken(69, &FOLLOW_69_in_mult_ex3067);
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            this->followPush(FOLLOW_unary_ex_in_mult_ex3071);
            	            c=unary_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_div, node, c
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	        {
            	             this->matchToken(58, &FOLLOW_58_in_mult_ex3097);
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            this->followPush(FOLLOW_unary_ex_in_mult_ex3101);
            	            d=unary_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_mod, node, d
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, d
            	                );
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop22;
            	    break;
                }
            }
            loop22: ;


        }

    }
    goto rulemult_exEx;
    rulemult_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::unary_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* d;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt23;

            alt23=5;

            switch ( this->LA(1) )
            {
            case BOOL:
            case BOOL_TYPE:
            case CHAR:
            case CHAR_TYPE:
            case FLOAT:
            case FLOAT_TYPE:
            case ID:
            case INT:
            case INT_TYPE:
            case LBRACKET:
            case LENGTH:
            case NULLTOK:
            case SHARED_REF:
            case STRING:
            case STRING_TYPE:
            case TYPE:
            case VOID_TYPE:
            	{
            		alt23=1;
            	}
                break;
            case DOUBINC:
            	{
            		alt23=2;
            	}
                break;
            case DOUBDEC:
            	{
            		alt23=3;
            	}
                break;
            case 66:
            	{
            		alt23=4;
            	}
                break;
            case 56:
            	{
            		alt23=5;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 23 );
                ex->set_state( 0 );


                goto ruleunary_exEx;

            }

            switch (alt23)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_post_ex_in_unary_ex3153);
        	        a=post_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             node = a
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	         this->matchToken(DOUBINC, &FOLLOW_DOUBINC_in_unary_ex3166);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        this->followPush(FOLLOW_unary_ex_in_unary_ex3170);
        	        b=unary_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             scripting::node* t = node; node = m_allocator->construct<scripting::unary_expression>(m_allocator, scripting::unary_type::pre_increment, b
        	            );   SET_LOCATION_FROM_NODE(node, t); SET_END_LOCATION_FROM_NODE(node, b
        	            );
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	         this->matchToken(DOUBDEC, &FOLLOW_DOUBDEC_in_unary_ex3183);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        this->followPush(FOLLOW_unary_ex_in_unary_ex3187);
        	        c=unary_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             scripting::node* t = node; node = m_allocator->construct<scripting::unary_expression>(m_allocator, scripting::unary_type::pre_decrement, c
        	            );   SET_LOCATION_FROM_NODE(node, t); SET_END_LOCATION_FROM_NODE(node, c
        	            );
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	         this->matchToken(66, &FOLLOW_66_in_unary_ex3200);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        this->followPush(FOLLOW_unary_ex_in_unary_ex3204);
        	        d=unary_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             scripting::node* t = node; node = m_allocator->construct<scripting::unary_expression>(m_allocator, scripting::unary_type::negation, d
        	            );   SET_LOCATION_FROM_NODE(node, t); SET_END_LOCATION_FROM_NODE(node, d
        	            );
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	         this->matchToken(56, &FOLLOW_56_in_unary_ex3218);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        this->followPush(FOLLOW_unary_ex_in_unary_ex3222);
        	        d=unary_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             scripting::node* t = node; node = m_allocator->construct<scripting::unary_expression>(m_allocator, scripting::unary_type::inversion, d
        	            );   SET_LOCATION_FROM_NODE(node, t); SET_END_LOCATION_FROM_NODE(node, d
        	            );
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleunary_exEx;
    ruleunary_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::post_expression*
WNScriptASTParser::post_ex_proper()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::post_expression* node;


    const ImplTraits::CommonTokenType* d = NULL;
    const ImplTraits::CommonTokenType* e = NULL;
    const ImplTraits::CommonTokenType* f = NULL;
    const ImplTraits::CommonTokenType* g = NULL;
    const ImplTraits::CommonTokenType* h = NULL;
    const ImplTraits::CommonTokenType* i = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    const ImplTraits::CommonTokenType* DOUBINC28 = NULL;
    const ImplTraits::CommonTokenType* DOUBDEC29 = NULL;
    scripting::expression* a;
    scripting::arg_list* b;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt24;

            alt24=6;

            switch ( this->LA(1) )
            {
            case LSQBRACKET:
            	{
            		alt24=1;
            	}
                break;
            case LBRACKET:
            	{
            		switch ( this->LA(2) )
            		{
            		case RBRACKET:
            			{
            				alt24=2;
            			}
            		    break;
            		case BOOL:
            		case BOOL_TYPE:
            		case CHAR:
            		case CHAR_TYPE:
            		case DOUBDEC:
            		case DOUBINC:
            		case FLOAT:
            		case FLOAT_TYPE:
            		case ID:
            		case INT:
            		case INT_TYPE:
            		case LBRACKET:
            		case LENGTH:
            		case NULLTOK:
            		case SHARED_REF:
            		case STRING:
            		case STRING_TYPE:
            		case TYPE:
            		case VOID_TYPE:
            		case 56:
            		case 66:
            			{
            				alt24=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 24 );
            		    ex->set_state( 2 );


            		    goto rulepost_ex_properEx;

            		}

            	}
                break;
            case 68:
            	{
            		alt24=4;
            	}
                break;
            case DOUBINC:
            	{
            		alt24=5;
            	}
                break;
            case DOUBDEC:
            	{
            		alt24=6;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 24 );
                ex->set_state( 0 );


                goto rulepost_ex_properEx;

            }

            switch (alt24)
            {
        	case 1:
        	    {
        	        d =  this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_post_ex_proper3260);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_post_ex_proper3264);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        e =  this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_post_ex_proper3268);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::array_access_expression>(m_allocator, a
        	            ); SET_LOCATION(node, d); SET_END_LOCATION(node, e);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        f =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_post_ex_proper3283);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        g =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_post_ex_proper3287);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::function_call_expression>(m_allocator); SET_LOCATION(node, f); SET_END_LOCATION(node, g);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        h =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_post_ex_proper3315);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        this->followPush(FOLLOW_arglist_in_post_ex_proper3321);
        	        b=arglist();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        i =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_post_ex_proper3325);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::function_call_expression>(m_allocator, b
        	            ); SET_LOCATION(node, h); SET_END_LOCATION(node, i);
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	         this->matchToken(68, &FOLLOW_68_in_post_ex_proper3338);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        c =  this->matchToken(ID, &FOLLOW_ID_in_post_ex_proper3342);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::member_access_expression>(m_allocator, (c->getText()).c_str()); SET_LOCATION(node, c);
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        DOUBINC28 =  this->matchToken(DOUBINC, &FOLLOW_DOUBINC_in_post_ex_proper3369);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::post_unary_expression>(m_allocator, scripting::post_unary_type::post_increment); SET_LOCATION(node, DOUBINC28);
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	        DOUBDEC29 =  this->matchToken(DOUBDEC, &FOLLOW_DOUBDEC_in_post_ex_proper3398);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::post_unary_expression>(m_allocator, scripting::post_unary_type::post_decrement); SET_LOCATION(node, DOUBDEC29);
        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulepost_ex_properEx;
    rulepost_ex_properEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::post_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::post_expression* a;
    scripting::expression * prim_ex30;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_prim_ex_in_post_ex3451);
            prim_ex30=prim_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulepost_exEx;
            }


            {
                 node = prim_ex30
                ;
            }



            for (;;)
            {
                int alt25=2;
                switch ( this->LA(1) )
                {
                case DOUBDEC:
                case DOUBINC:
                case LBRACKET:
                case LSQBRACKET:
                case 68:
                	{
                		alt25=1;
                	}
                    break;

                }

                switch (alt25)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_post_ex_proper_in_post_ex3470);
            	        a=post_ex_proper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulepost_exEx;
            	        }


            	        {
            	            a
            	            ->add_base_expression(node); SET_END_LOCATION_FROM_NODE(a
            	            , node); node = a
            	            ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop25;
            	    break;
                }
            }
            loop25: ;


        }

    }
    goto rulepost_exEx;
    rulepost_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::assignment_or_expression()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    scripting::expression* a;
    scripting::assign_type b;
    scripting::expression* c;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_expr_in_assignment_or_expression3501);
            a=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleassignment_or_expressionEx;
            }


            {
                int alt26=2;
                switch ( this->LA(1) )
                {
                case 59:
                case 63:
                case 65:
                case 67:
                case 70:
                case 73:
                	{
                		alt26=1;
                	}
                    break;
                case RBRACKET:
                case SEMICOLON:
                	{
                		alt26=2;
                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 26 );
                    ex->set_state( 0 );


                    goto ruleassignment_or_expressionEx;

                }

                switch (alt26)
                {
            	case 1:
            	    {
            	        {
            	            this->followPush(FOLLOW_assign_type_in_assignment_or_expression3533);
            	            b=assign_type();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleassignment_or_expressionEx;
            	            }


            	            this->followPush(FOLLOW_expr_in_assignment_or_expression3537);
            	            c=expr();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleassignment_or_expressionEx;
            	            }


            	            {

            	                                  scripting::lvalue* lval = m_allocator->construct<scripting::lvalue>(m_allocator, a
            	                );
            	                                  SET_LOCATION_FROM_NODE(lval, c
            	                );

            	                                  scripting::assignment_instruction* assign = m_allocator->construct<scripting::assignment_instruction>(m_allocator, lval);
            	                                  SET_LOCATION_FROM_NODE(assign , lval);

            	                                  assign->add_value(b
            	                , c
            	                );
            	                                  SET_END_LOCATION_FROM_NODE(assign, c
            	                );
            	                                  node = assign;

            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	            {

            	                                  node = m_allocator->construct<scripting::expression_instruction>(m_allocator, a
            	                );
            	                                  SET_LOCATION_FROM_NODE(node, a
            	                );

            	            }


            	        }


            	    }
            	    break;

                }
            }

        }

    }
    goto ruleassignment_or_expressionEx;
    ruleassignment_or_expressionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::constant_expression*
WNScriptASTParser::constant()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::constant_expression* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* b = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    const ImplTraits::CommonTokenType* d = NULL;
    const ImplTraits::CommonTokenType* e = NULL;
    const ImplTraits::CommonTokenType* g = NULL;
    const ImplTraits::CommonTokenType* h = NULL;
    const ImplTraits::CommonTokenType* i = NULL;
    scripting::type* f;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt27;

            alt27=7;

            switch ( this->LA(1) )
            {
            case INT:
            	{
            		alt27=1;
            	}
                break;
            case FLOAT:
            	{
            		alt27=2;
            	}
                break;
            case CHAR:
            	{
            		alt27=3;
            	}
                break;
            case STRING:
            	{
            		alt27=4;
            	}
                break;
            case BOOL:
            	{
            		alt27=5;
            	}
                break;
            case NULLTOK:
            	{
            		alt27=6;
            	}
                break;
            case BOOL_TYPE:
            case CHAR_TYPE:
            case FLOAT_TYPE:
            case INT_TYPE:
            case STRING_TYPE:
            case VOID_TYPE:
            	{
            		alt27=7;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 27 );
                ex->set_state( 0 );


                goto ruleconstantEx;

            }

            switch (alt27)
            {
        	case 1:
        	    {
        	        a =  this->matchToken(INT, &FOLLOW_INT_in_constant3603);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::int_type); SET_LOCATION(type_node, a); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, (a->getText()).c_str()); SET_LOCATION(node, a);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        b =  this->matchToken(FLOAT, &FOLLOW_FLOAT_in_constant3621);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::float_type); SET_LOCATION(type_node, b); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, (b->getText()).c_str()); SET_LOCATION(node, b);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        c =  this->matchToken(CHAR, &FOLLOW_CHAR_in_constant3637);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::char_type); SET_LOCATION(type_node, c); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, (c->getText()).c_str()); SET_LOCATION(node, c);
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        d =  this->matchToken(STRING, &FOLLOW_STRING_in_constant3654);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::string_type); SET_LOCATION(type_node, d); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, (d->getText()).c_str()); SET_LOCATION(node, d);
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        e =  this->matchToken(BOOL, &FOLLOW_BOOL_in_constant3669);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::bool_type); SET_LOCATION(type_node, e); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, (e->getText()).c_str()); SET_LOCATION(node, e);
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	        g =  this->matchToken(NULLTOK, &FOLLOW_NULLTOK_in_constant3686);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::nullptr_type); SET_LOCATION(type_node, g); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, "null"); SET_LOCATION(node, g);
        	        }


        	    }
        	    break;
        	case 7:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_constant3701);
        	        f=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        g =  this->matchToken(LBRACE, &FOLLOW_LBRACE_in_constant3705);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        h =  this->matchToken(STRING, &FOLLOW_STRING_in_constant3709);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        i =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_constant3713);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::constant_expression>(m_allocator, f
        	            , (h->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            f
        	            ); SET_END_LOCATION(node, i);
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleconstantEx;
    ruleconstantEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::builtin_unary_expression*
WNScriptASTParser::builtin_unary()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::builtin_unary_expression* node;


    const ImplTraits::CommonTokenType* LENGTH32 = NULL;
    const ImplTraits::CommonTokenType* RBRACKET33 = NULL;
    scripting::expression* expr31;





        node = nullptr;



    {
        {
            LENGTH32 =  this->matchToken(LENGTH, &FOLLOW_LENGTH_in_builtin_unary3742);
            if  (this->hasException())
            {
                goto rulebuiltin_unaryEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_builtin_unary3744);
            if  (this->hasException())
            {
                goto rulebuiltin_unaryEx;
            }


            this->followPush(FOLLOW_expr_in_builtin_unary3746);
            expr31=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebuiltin_unaryEx;
            }


            RBRACKET33 =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_builtin_unary3748);
            if  (this->hasException())
            {
                goto rulebuiltin_unaryEx;
            }


            {
                 node = m_allocator->construct<scripting::builtin_unary_expression>(m_allocator, scripting::builtin_unary_type::length, expr31
                ); SET_LOCATION(node, LENGTH32); SET_END_LOCATION(node, RBRACKET33);
            }


        }

    }
    goto rulebuiltin_unaryEx;
    rulebuiltin_unaryEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::non_array_prim_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    const ImplTraits::CommonTokenType* ba = NULL;
    const ImplTraits::CommonTokenType* bb = NULL;
    const ImplTraits::CommonTokenType* ID34 = NULL;
    scripting::expression* a;
    scripting::constant_expression* b;
    scripting::type* c;
    scripting::cast_expression* f;
    scripting::type* e;
    scripting::struct_allocation_expression* h;
    scripting::type* i;
    scripting::struct_allocation_expression* j;
    scripting::builtin_unary_expression* u;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt28;

            alt28=7;

            switch ( this->LA(1) )
            {
            case ID:
            	{
            		alt28=1;
            	}
                break;
            case LBRACKET:
            	{
            		alt28=2;
            	}
                break;
            case BOOL:
            case CHAR:
            case FLOAT:
            case INT:
            case NULLTOK:
            case STRING:
            	{
            		alt28=3;
            	}
                break;
            case VOID_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt28=3;
            			}
            		    break;
            		case LBRACKET:
            			{
            				alt28=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 28 );
            		    ex->set_state( 4 );


            		    goto rulenon_array_prim_exEx;

            		}

            	}
                break;
            case INT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt28=3;
            			}
            		    break;
            		case LBRACKET:
            			{
            				alt28=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 28 );
            		    ex->set_state( 5 );


            		    goto rulenon_array_prim_exEx;

            		}

            	}
                break;
            case FLOAT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt28=3;
            			}
            		    break;
            		case LBRACKET:
            			{
            				alt28=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 28 );
            		    ex->set_state( 6 );


            		    goto rulenon_array_prim_exEx;

            		}

            	}
                break;
            case CHAR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt28=3;
            			}
            		    break;
            		case LBRACKET:
            			{
            				alt28=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 28 );
            		    ex->set_state( 7 );


            		    goto rulenon_array_prim_exEx;

            		}

            	}
                break;
            case BOOL_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt28=3;
            			}
            		    break;
            		case LBRACKET:
            			{
            				alt28=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 28 );
            		    ex->set_state( 8 );


            		    goto rulenon_array_prim_exEx;

            		}

            	}
                break;
            case STRING_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt28=3;
            			}
            		    break;
            		case LBRACKET:
            			{
            				alt28=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 28 );
            		    ex->set_state( 9 );


            		    goto rulenon_array_prim_exEx;

            		}

            	}
                break;
            case TYPE:
            	{
            		alt28=5;
            	}
                break;
            case SHARED_REF:
            	{
            		alt28=6;
            	}
                break;
            case LENGTH:
            	{
            		alt28=7;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 28 );
                ex->set_state( 0 );


                goto rulenon_array_prim_exEx;

            }

            switch (alt28)
            {
        	case 1:
        	    {
        	        ID34 =  this->matchToken(ID, &FOLLOW_ID_in_non_array_prim_ex3777);
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::id_expression>(m_allocator, (ID34->getText()).c_str()); SET_LOCATION(node, ID34);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        ba =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_non_array_prim_ex3791);
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_non_array_prim_ex3795);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        bb =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_non_array_prim_ex3799);
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        {
        	            node = a
        	            ; SET_LOCATION(node, ba); SET_END_LOCATION(node, bb);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        this->followPush(FOLLOW_constant_in_non_array_prim_ex3813);
        	        b=constant();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        {
        	            node = b
        	            ;
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_non_array_prim_ex3828);
        	        c=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        {
        	            this->followPush(FOLLOW_cast_in_non_array_prim_ex3834);
        	            f=cast();

        	            this->followPop();
        	            if  (this->hasException())
        	            {
        	                goto rulenon_array_prim_exEx;
        	            }


        	        }


        	        {
        	             f
        	            ->set_type(c
        	            ); node=f
        	            ; SET_START_LOCATION_FROM_NODE(node, c
        	            );
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        this->followPush(FOLLOW_objectType_in_non_array_prim_ex3849);
        	        e=objectType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        this->followPush(FOLLOW_structInit_in_non_array_prim_ex3853);
        	        h=structInit();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        {
        	             h
        	            ->set_type(e
        	            ); node=h
        	            ; SET_START_LOCATION_FROM_NODE(node, e
        	            );
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	         this->matchToken(SHARED_REF, &FOLLOW_SHARED_REF_in_non_array_prim_ex3865);
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        this->followPush(FOLLOW_objectType_in_non_array_prim_ex3869);
        	        i=objectType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        this->followPush(FOLLOW_structInit_in_non_array_prim_ex3873);
        	        j=structInit();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        {
        	             i
        	            ->set_reference_type(scripting::reference_type::shared); j
        	            ->set_type(i
        	            ); node=j
        	            ; SET_START_LOCATION_FROM_NODE(node, i
        	            );
        	        }


        	    }
        	    break;
        	case 7:
        	    {
        	        this->followPush(FOLLOW_builtin_unary_in_non_array_prim_ex3887);
        	        u=builtin_unary();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        {
        	            node = u
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulenon_array_prim_exEx;
    rulenon_array_prim_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression *
WNScriptASTParser::prim_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression * node;


    scripting::type* k;
    scripting::array_allocation_expression* l;
    scripting::type* m;
    scripting::array_allocation_expression* n;
    scripting::expression* non_array_prim_ex35;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt29;

            alt29=3;

            switch ( this->LA(1) )
            {
            case BOOL:
            case CHAR:
            case FLOAT:
            case ID:
            case INT:
            case LBRACKET:
            case LENGTH:
            case NULLTOK:
            case STRING:
            	{
            		alt29=1;
            	}
                break;
            case VOID_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt29=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt29=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 29 );
            		    ex->set_state( 2 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case INT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt29=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt29=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 29 );
            		    ex->set_state( 3 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case FLOAT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt29=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt29=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 29 );
            		    ex->set_state( 4 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case CHAR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt29=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt29=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 29 );
            		    ex->set_state( 5 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case BOOL_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt29=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt29=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 29 );
            		    ex->set_state( 6 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case STRING_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt29=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt29=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 29 );
            		    ex->set_state( 7 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACKET:
            			{
            				alt29=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt29=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 29 );
            		    ex->set_state( 8 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case SHARED_REF:
            	{
            		switch ( this->LA(2) )
            		{
            		case TYPE:
            			{
            				switch ( this->LA(3) )
            				{
            				case LBRACKET:
            					{
            						alt29=1;
            					}
            				    break;
            				case DLSQBRACKET:
            				case LSQBRACKET:
            					{
            						alt29=3;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 29 );
            				    ex->set_state( 11 );


            				    goto ruleprim_exEx;

            				}

            			}
            		    break;
            		case BOOL_TYPE:
            		case CHAR_TYPE:
            		case FLOAT_TYPE:
            		case INT_TYPE:
            		case STRING_TYPE:
            		case VOID_TYPE:
            			{
            				alt29=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 29 );
            		    ex->set_state( 9 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 29 );
                ex->set_state( 0 );


                goto ruleprim_exEx;

            }

            switch (alt29)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_non_array_prim_ex_in_prim_ex3916);
        	        non_array_prim_ex35=non_array_prim_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	             node = non_array_prim_ex35
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_nonArrayType_in_prim_ex3930);
        	        k=nonArrayType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        this->followPush(FOLLOW_arrayInit_in_prim_ex3934);
        	        l=arrayInit();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	             l
        	            ->set_type(k
        	            ); node=l
        	            ; SET_START_LOCATION_FROM_NODE(node, k
        	            );
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	         this->matchToken(SHARED_REF, &FOLLOW_SHARED_REF_in_prim_ex3946);
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        this->followPush(FOLLOW_nonArrayType_in_prim_ex3950);
        	        m=nonArrayType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        this->followPush(FOLLOW_arrayInit_in_prim_ex3954);
        	        n=arrayInit();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	             m
        	            ->set_reference_type(scripting::reference_type::shared); n
        	            ->set_type(m
        	            ); node=n
        	            ; SET_START_LOCATION_FROM_NODE(node, m
        	            );
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleprim_exEx;
    ruleprim_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::cast_expression*
WNScriptASTParser::cast()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::cast_expression* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    scripting::expression* b;





      node = nullptr;



    {
        {
            a =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_cast3983);
            if  (this->hasException())
            {
                goto rulecastEx;
            }


            this->followPush(FOLLOW_expr_in_cast3987);
            b=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecastEx;
            }


            c =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_cast3991);
            if  (this->hasException())
            {
                goto rulecastEx;
            }


            {
                 node = m_allocator->construct<scripting::cast_expression>(m_allocator, b
                ); SET_LOCATION(node, a); SET_END_LOCATION(node, c);
            }


        }

    }
    goto rulecastEx;
    rulecastEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::struct_allocation_expression*
WNScriptASTParser::structInit()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::struct_allocation_expression* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* b = NULL;






        node = nullptr;



    {
        {
            a =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_structInit4020);
            if  (this->hasException())
            {
                goto rulestructInitEx;
            }


            b =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_structInit4024);
            if  (this->hasException())
            {
                goto rulestructInitEx;
            }


            {
                 node = m_allocator->construct<scripting::struct_allocation_expression>(m_allocator); SET_LOCATION(node, a); SET_END_LOCATION(node, b);
            }


        }

    }
    goto rulestructInitEx;
    rulestructInitEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::array_allocation_expression*
WNScriptASTParser::arrayInit()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::array_allocation_expression* node;


    const ImplTraits::CommonTokenType* c = NULL;
    scripting::expression* e;
    scripting::expression* f;
    scripting::expression* b;





        node = m_allocator->construct<scripting::array_allocation_expression>(m_allocator);



    {
        {
            {
                int alt30=2;
                switch ( this->LA(1) )
                {
                case LSQBRACKET:
                	{
                		alt30=1;
                	}
                    break;
                case DLSQBRACKET:
                	{
                		alt30=2;
                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 30 );
                    ex->set_state( 0 );


                    goto rulearrayInitEx;

                }

                switch (alt30)
                {
            	case 1:
            	    {
            	        {
            	             this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_arrayInit4061);
            	            if  (this->hasException())
            	            {
            	                goto rulearrayInitEx;
            	            }


            	            this->followPush(FOLLOW_expr_in_arrayInit4065);
            	            e=expr();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulearrayInitEx;
            	            }


            	             this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_arrayInit4067);
            	            if  (this->hasException())
            	            {
            	                goto rulearrayInitEx;
            	            }


            	            {
            	                 node->add_expression(e
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	             this->matchToken(DLSQBRACKET, &FOLLOW_DLSQBRACKET_in_arrayInit4084);
            	            if  (this->hasException())
            	            {
            	                goto rulearrayInitEx;
            	            }


            	            this->followPush(FOLLOW_expr_in_arrayInit4088);
            	            f=expr();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulearrayInitEx;
            	            }


            	             this->matchToken(DRSQBRACKET, &FOLLOW_DRSQBRACKET_in_arrayInit4090);
            	            if  (this->hasException())
            	            {
            	                goto rulearrayInitEx;
            	            }


            	            {
            	                 node->add_expression(f
            	                ); node->set_runtime(true);
            	            }


            	        }


            	    }
            	    break;

                }
            }

            {
                 this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_arrayInit4105);
                if  (this->hasException())
                {
                    goto rulearrayInitEx;
                }


                this->followPush(FOLLOW_expr_in_arrayInit4109);
                b=expr();

                this->followPop();
                if  (this->hasException())
                {
                    goto rulearrayInitEx;
                }


                c =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_arrayInit4113);
                if  (this->hasException())
                {
                    goto rulearrayInitEx;
                }


                {
                     node->set_copy_initializer(b); SET_LOCATION(node, c);
                }


            }


        }

    }
    goto rulearrayInitEx;
    rulearrayInitEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::declaration*
WNScriptASTParser::declaration()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::declaration* node;


    scripting::parameter* a;
    scripting::expression* c;





        node =  m_allocator->construct<scripting::declaration>(m_allocator);



    {
        {
            this->followPush(FOLLOW_param_in_declaration4147);
            a=param();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledeclarationEx;
            }


            {
                 node->set_parameter(a
                ); SET_LOCATION_FROM_NODE(node, a
                );
            }


            {
                {
                     this->matchToken(73, &FOLLOW_73_in_declaration4182);
                    if  (this->hasException())
                    {
                        goto ruledeclarationEx;
                    }


                    {
                        {
                            this->followPush(FOLLOW_expr_in_declaration4189);
                            c=expr();

                            this->followPop();
                            if  (this->hasException())
                            {
                                goto ruledeclarationEx;
                            }


                        }


                        {
                             node->add_expression_initializer(c
                            ); SET_END_LOCATION_FROM_NODE(node, c
                            );
                        }


                    }


                }


            }


        }

    }
    goto ruledeclarationEx;
    ruledeclarationEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::declaration*
WNScriptASTParser::inherited_declaration()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::declaration* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* d = NULL;
    scripting::expression* c;





        node =  m_allocator->construct<scripting::declaration>(m_allocator);



    {
        {
             this->matchToken(68, &FOLLOW_68_in_inherited_declaration4239);
            if  (this->hasException())
            {
                goto ruleinherited_declarationEx;
            }


            a =  this->matchToken(ID, &FOLLOW_ID_in_inherited_declaration4243);
            if  (this->hasException())
            {
                goto ruleinherited_declarationEx;
            }


            {
                 node->set_inherited_parameter((a->getText()).c_str());  SET_LOCATION(node, a);
            }


            {
                 this->matchToken(73, &FOLLOW_73_in_inherited_declaration4256);
                if  (this->hasException())
                {
                    goto ruleinherited_declarationEx;
                }


                {
                    int alt31=2;
                    switch ( this->LA(1) )
                    {
                    case BOOL:
                    case BOOL_TYPE:
                    case CHAR:
                    case CHAR_TYPE:
                    case DOUBDEC:
                    case DOUBINC:
                    case FLOAT:
                    case FLOAT_TYPE:
                    case ID:
                    case INT:
                    case INT_TYPE:
                    case LBRACKET:
                    case LENGTH:
                    case NULLTOK:
                    case SHARED_REF:
                    case STRING:
                    case STRING_TYPE:
                    case TYPE:
                    case VOID_TYPE:
                    case 56:
                    case 66:
                    	{
                    		alt31=1;
                    	}
                        break;
                    case DEFAULT:
                    	{
                    		alt31=2;
                    	}
                        break;

                    default:
                        ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                        ex->set_decisionNum( 31 );
                        ex->set_state( 0 );


                        goto ruleinherited_declarationEx;

                    }

                    switch (alt31)
                    {
                	case 1:
                	    {
                	        {
                	            this->followPush(FOLLOW_expr_in_inherited_declaration4292);
                	            c=expr();

                	            this->followPop();
                	            if  (this->hasException())
                	            {
                	                goto ruleinherited_declarationEx;
                	            }


                	            {
                	                 node->add_expression_initializer(c
                	                ); SET_END_LOCATION_FROM_NODE(node, c
                	                );
                	            }


                	        }


                	    }
                	    break;
                	case 2:
                	    {
                	        {
                	            d =  this->matchToken(DEFAULT, &FOLLOW_DEFAULT_in_inherited_declaration4318);
                	            if  (this->hasException())
                	            {
                	                goto ruleinherited_declarationEx;
                	            }


                	            {
                	                 node->set_default_initialization(); SET_END_LOCATION(node, d);
                	            }


                	        }


                	    }
                	    break;

                    }
                }

            }


        }

    }
    goto ruleinherited_declarationEx;
    ruleinherited_declarationEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::instructionScalar()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    scripting::declaration* declaration36;
    scripting::instruction* assignment_or_expression37;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt32;

            alt32=2;

            switch ( this->LA(1) )
            {
            case VOID_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt32=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case INT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 14 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 15 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 16 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 17 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 18 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case NULLTOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 19 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case VOID_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 20 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 21 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 22 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 23 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 24 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 25 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case RSQBRACKET:
            					{
            						alt32=1;
            					}
            				    break;
            				case DOUBDEC:
            				case DOUBINC:
            				case ID:
            				case LBRACKET:
            				case LENGTH:
            				case SHARED_REF:
            				case TYPE:
            				case 56:
            				case 66:
            					{
            						alt32=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 32 );
            				    ex->set_state( 11 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case DRSQBRACKET:
            					{
            						alt32=1;
            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case SHARED_REF:
            				case STRING:
            				case STRING_TYPE:
            				case TYPE:
            				case VOID_TYPE:
            				case 56:
            				case 66:
            					{
            						alt32=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 32 );
            				    ex->set_state( 12 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt32=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 32 );
            		    ex->set_state( 1 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case INT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt32=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case INT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 14 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 15 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 16 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 17 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 18 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case NULLTOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 19 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case VOID_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 20 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 21 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 22 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 23 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 24 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 25 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case RSQBRACKET:
            					{
            						alt32=1;
            					}
            				    break;
            				case DOUBDEC:
            				case DOUBINC:
            				case ID:
            				case LBRACKET:
            				case LENGTH:
            				case SHARED_REF:
            				case TYPE:
            				case 56:
            				case 66:
            					{
            						alt32=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 32 );
            				    ex->set_state( 11 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case DRSQBRACKET:
            					{
            						alt32=1;
            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case SHARED_REF:
            				case STRING:
            				case STRING_TYPE:
            				case TYPE:
            				case VOID_TYPE:
            				case 56:
            				case 66:
            					{
            						alt32=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 32 );
            				    ex->set_state( 12 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt32=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 32 );
            		    ex->set_state( 2 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case FLOAT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt32=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case INT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 14 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 15 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 16 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 17 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 18 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case NULLTOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 19 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case VOID_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 20 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 21 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 22 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 23 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 24 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 25 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case RSQBRACKET:
            					{
            						alt32=1;
            					}
            				    break;
            				case DOUBDEC:
            				case DOUBINC:
            				case ID:
            				case LBRACKET:
            				case LENGTH:
            				case SHARED_REF:
            				case TYPE:
            				case 56:
            				case 66:
            					{
            						alt32=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 32 );
            				    ex->set_state( 11 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case DRSQBRACKET:
            					{
            						alt32=1;
            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case SHARED_REF:
            				case STRING:
            				case STRING_TYPE:
            				case TYPE:
            				case VOID_TYPE:
            				case 56:
            				case 66:
            					{
            						alt32=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 32 );
            				    ex->set_state( 12 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt32=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 32 );
            		    ex->set_state( 3 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case CHAR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt32=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case INT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 14 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 15 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 16 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 17 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 18 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case NULLTOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 19 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case VOID_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 20 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 21 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 22 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 23 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 24 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 25 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case RSQBRACKET:
            					{
            						alt32=1;
            					}
            				    break;
            				case DOUBDEC:
            				case DOUBINC:
            				case ID:
            				case LBRACKET:
            				case LENGTH:
            				case SHARED_REF:
            				case TYPE:
            				case 56:
            				case 66:
            					{
            						alt32=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 32 );
            				    ex->set_state( 11 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case DRSQBRACKET:
            					{
            						alt32=1;
            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case SHARED_REF:
            				case STRING:
            				case STRING_TYPE:
            				case TYPE:
            				case VOID_TYPE:
            				case 56:
            				case 66:
            					{
            						alt32=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 32 );
            				    ex->set_state( 12 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt32=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 32 );
            		    ex->set_state( 4 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case BOOL_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt32=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case INT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 14 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 15 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 16 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 17 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 18 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case NULLTOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 19 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case VOID_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 20 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 21 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 22 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 23 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 24 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 25 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case RSQBRACKET:
            					{
            						alt32=1;
            					}
            				    break;
            				case DOUBDEC:
            				case DOUBINC:
            				case ID:
            				case LBRACKET:
            				case LENGTH:
            				case SHARED_REF:
            				case TYPE:
            				case 56:
            				case 66:
            					{
            						alt32=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 32 );
            				    ex->set_state( 11 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case DRSQBRACKET:
            					{
            						alt32=1;
            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case SHARED_REF:
            				case STRING:
            				case STRING_TYPE:
            				case TYPE:
            				case VOID_TYPE:
            				case 56:
            				case 66:
            					{
            						alt32=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 32 );
            				    ex->set_state( 12 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt32=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 32 );
            		    ex->set_state( 5 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case STRING_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt32=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case INT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 14 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 15 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 16 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 17 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 18 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case NULLTOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 19 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case VOID_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 20 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 21 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 22 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 23 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 24 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 25 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case RSQBRACKET:
            					{
            						alt32=1;
            					}
            				    break;
            				case DOUBDEC:
            				case DOUBINC:
            				case ID:
            				case LBRACKET:
            				case LENGTH:
            				case SHARED_REF:
            				case TYPE:
            				case 56:
            				case 66:
            					{
            						alt32=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 32 );
            				    ex->set_state( 11 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case DRSQBRACKET:
            					{
            						alt32=1;
            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case SHARED_REF:
            				case STRING:
            				case STRING_TYPE:
            				case TYPE:
            				case VOID_TYPE:
            				case 56:
            				case 66:
            					{
            						alt32=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 32 );
            				    ex->set_state( 12 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt32=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 32 );
            		    ex->set_state( 6 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            		case QUESTION:
            			{
            				alt32=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case INT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 14 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 15 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 16 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 17 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 18 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case NULLTOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 19 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case VOID_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 20 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 21 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 22 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 23 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 24 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 25 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case RSQBRACKET:
            					{
            						alt32=1;
            					}
            				    break;
            				case DOUBDEC:
            				case DOUBINC:
            				case ID:
            				case LBRACKET:
            				case LENGTH:
            				case SHARED_REF:
            				case TYPE:
            				case 56:
            				case 66:
            					{
            						alt32=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 32 );
            				    ex->set_state( 11 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case DRSQBRACKET:
            					{
            						alt32=1;
            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case SHARED_REF:
            				case STRING:
            				case STRING_TYPE:
            				case TYPE:
            				case VOID_TYPE:
            				case 56:
            				case 66:
            					{
            						alt32=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 32 );
            				    ex->set_state( 12 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACKET:
            			{
            				alt32=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 32 );
            		    ex->set_state( 7 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case SHARED_REF:
            	{
            		switch ( this->LA(2) )
            		{
            		case TYPE:
            			{
            				switch ( this->LA(3) )
            				{
            				case LSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case INT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RSQBRACKET:
            									{
            										switch ( this->LA(6) )
            										{
            										case ID:
            											{
            												alt32=1;
            											}
            										    break;
            										case LBRACKET:
            											{
            												alt32=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 43 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DOUBDEC:
            								case DOUBINC:
            								case LBRACKET:
            								case LSQBRACKET:
            								case QUESTION:
            								case 57:
            								case 58:
            								case 60:
            								case 61:
            								case 62:
            								case 64:
            								case 66:
            								case 68:
            								case 69:
            								case 71:
            								case 72:
            								case 74:
            								case 75:
            								case 76:
            								case 77:
            								case 78:
            								case 79:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 30 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case FLOAT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RSQBRACKET:
            									{
            										switch ( this->LA(6) )
            										{
            										case ID:
            											{
            												alt32=1;
            											}
            										    break;
            										case LBRACKET:
            											{
            												alt32=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 43 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DOUBDEC:
            								case DOUBINC:
            								case LBRACKET:
            								case LSQBRACKET:
            								case QUESTION:
            								case 57:
            								case 58:
            								case 60:
            								case 61:
            								case 62:
            								case 64:
            								case 66:
            								case 68:
            								case 69:
            								case 71:
            								case 72:
            								case 74:
            								case 75:
            								case 76:
            								case 77:
            								case 78:
            								case 79:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 31 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case CHAR:
            							{
            								switch ( this->LA(5) )
            								{
            								case RSQBRACKET:
            									{
            										switch ( this->LA(6) )
            										{
            										case ID:
            											{
            												alt32=1;
            											}
            										    break;
            										case LBRACKET:
            											{
            												alt32=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 43 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DOUBDEC:
            								case DOUBINC:
            								case LBRACKET:
            								case LSQBRACKET:
            								case QUESTION:
            								case 57:
            								case 58:
            								case 60:
            								case 61:
            								case 62:
            								case 64:
            								case 66:
            								case 68:
            								case 69:
            								case 71:
            								case 72:
            								case 74:
            								case 75:
            								case 76:
            								case 77:
            								case 78:
            								case 79:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case STRING:
            							{
            								switch ( this->LA(5) )
            								{
            								case RSQBRACKET:
            									{
            										switch ( this->LA(6) )
            										{
            										case ID:
            											{
            												alt32=1;
            											}
            										    break;
            										case LBRACKET:
            											{
            												alt32=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 43 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DOUBDEC:
            								case DOUBINC:
            								case LBRACKET:
            								case LSQBRACKET:
            								case QUESTION:
            								case 57:
            								case 58:
            								case 60:
            								case 61:
            								case 62:
            								case 64:
            								case 66:
            								case 68:
            								case 69:
            								case 71:
            								case 72:
            								case 74:
            								case 75:
            								case 76:
            								case 77:
            								case 78:
            								case 79:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case BOOL:
            							{
            								switch ( this->LA(5) )
            								{
            								case RSQBRACKET:
            									{
            										switch ( this->LA(6) )
            										{
            										case ID:
            											{
            												alt32=1;
            											}
            										    break;
            										case LBRACKET:
            											{
            												alt32=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 43 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DOUBDEC:
            								case DOUBINC:
            								case LBRACKET:
            								case LSQBRACKET:
            								case QUESTION:
            								case 57:
            								case 58:
            								case 60:
            								case 61:
            								case 62:
            								case 64:
            								case 66:
            								case 68:
            								case 69:
            								case 71:
            								case 72:
            								case 74:
            								case 75:
            								case 76:
            								case 77:
            								case 78:
            								case 79:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 34 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case NULLTOK:
            							{
            								switch ( this->LA(5) )
            								{
            								case RSQBRACKET:
            									{
            										switch ( this->LA(6) )
            										{
            										case ID:
            											{
            												alt32=1;
            											}
            										    break;
            										case LBRACKET:
            											{
            												alt32=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 43 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DOUBDEC:
            								case DOUBINC:
            								case LBRACKET:
            								case LSQBRACKET:
            								case QUESTION:
            								case 57:
            								case 58:
            								case 60:
            								case 61:
            								case 62:
            								case 64:
            								case 66:
            								case 68:
            								case 69:
            								case 71:
            								case 72:
            								case 74:
            								case 75:
            								case 76:
            								case 77:
            								case 78:
            								case 79:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 35 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case VOID_TYPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case LBRACE:
            									{
            										switch ( this->LA(6) )
            										{
            										case STRING:
            											{
            												switch ( this->LA(7) )
            												{
            												case RBRACE:
            													{
            														switch ( this->LA(8) )
            														{
            														case RSQBRACKET:
            															{
            																switch ( this->LA(9) )
            																{
            																case ID:
            																	{
            																		alt32=1;
            																	}
            																    break;
            																case LBRACKET:
            																	{
            																		alt32=2;
            																	}
            																    break;

            																default:
            																    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            																    ex->set_decisionNum( 32 );
            																    ex->set_state( 43 );


            																    goto ruleinstructionScalarEx;

            																}

            															}
            														    break;
            														case DOUBDEC:
            														case DOUBINC:
            														case LBRACKET:
            														case LSQBRACKET:
            														case QUESTION:
            														case 57:
            														case 58:
            														case 60:
            														case 61:
            														case 62:
            														case 64:
            														case 66:
            														case 68:
            														case 69:
            														case 71:
            														case 72:
            														case 74:
            														case 75:
            														case 76:
            														case 77:
            														case 78:
            														case 79:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 47 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 46 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 44 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DLSQBRACKET:
            								case LBRACKET:
            								case LSQBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case INT_TYPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case LBRACE:
            									{
            										switch ( this->LA(6) )
            										{
            										case STRING:
            											{
            												switch ( this->LA(7) )
            												{
            												case RBRACE:
            													{
            														switch ( this->LA(8) )
            														{
            														case RSQBRACKET:
            															{
            																switch ( this->LA(9) )
            																{
            																case ID:
            																	{
            																		alt32=1;
            																	}
            																    break;
            																case LBRACKET:
            																	{
            																		alt32=2;
            																	}
            																    break;

            																default:
            																    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            																    ex->set_decisionNum( 32 );
            																    ex->set_state( 43 );


            																    goto ruleinstructionScalarEx;

            																}

            															}
            														    break;
            														case DOUBDEC:
            														case DOUBINC:
            														case LBRACKET:
            														case LSQBRACKET:
            														case QUESTION:
            														case 57:
            														case 58:
            														case 60:
            														case 61:
            														case 62:
            														case 64:
            														case 66:
            														case 68:
            														case 69:
            														case 71:
            														case 72:
            														case 74:
            														case 75:
            														case 76:
            														case 77:
            														case 78:
            														case 79:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 47 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 46 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 44 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DLSQBRACKET:
            								case LBRACKET:
            								case LSQBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case FLOAT_TYPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case LBRACE:
            									{
            										switch ( this->LA(6) )
            										{
            										case STRING:
            											{
            												switch ( this->LA(7) )
            												{
            												case RBRACE:
            													{
            														switch ( this->LA(8) )
            														{
            														case RSQBRACKET:
            															{
            																switch ( this->LA(9) )
            																{
            																case ID:
            																	{
            																		alt32=1;
            																	}
            																    break;
            																case LBRACKET:
            																	{
            																		alt32=2;
            																	}
            																    break;

            																default:
            																    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            																    ex->set_decisionNum( 32 );
            																    ex->set_state( 43 );


            																    goto ruleinstructionScalarEx;

            																}

            															}
            														    break;
            														case DOUBDEC:
            														case DOUBINC:
            														case LBRACKET:
            														case LSQBRACKET:
            														case QUESTION:
            														case 57:
            														case 58:
            														case 60:
            														case 61:
            														case 62:
            														case 64:
            														case 66:
            														case 68:
            														case 69:
            														case 71:
            														case 72:
            														case 74:
            														case 75:
            														case 76:
            														case 77:
            														case 78:
            														case 79:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 47 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 46 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 44 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DLSQBRACKET:
            								case LBRACKET:
            								case LSQBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 38 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case CHAR_TYPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case LBRACE:
            									{
            										switch ( this->LA(6) )
            										{
            										case STRING:
            											{
            												switch ( this->LA(7) )
            												{
            												case RBRACE:
            													{
            														switch ( this->LA(8) )
            														{
            														case RSQBRACKET:
            															{
            																switch ( this->LA(9) )
            																{
            																case ID:
            																	{
            																		alt32=1;
            																	}
            																    break;
            																case LBRACKET:
            																	{
            																		alt32=2;
            																	}
            																    break;

            																default:
            																    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            																    ex->set_decisionNum( 32 );
            																    ex->set_state( 43 );


            																    goto ruleinstructionScalarEx;

            																}

            															}
            														    break;
            														case DOUBDEC:
            														case DOUBINC:
            														case LBRACKET:
            														case LSQBRACKET:
            														case QUESTION:
            														case 57:
            														case 58:
            														case 60:
            														case 61:
            														case 62:
            														case 64:
            														case 66:
            														case 68:
            														case 69:
            														case 71:
            														case 72:
            														case 74:
            														case 75:
            														case 76:
            														case 77:
            														case 78:
            														case 79:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 47 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 46 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 44 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DLSQBRACKET:
            								case LBRACKET:
            								case LSQBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 39 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case BOOL_TYPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case LBRACE:
            									{
            										switch ( this->LA(6) )
            										{
            										case STRING:
            											{
            												switch ( this->LA(7) )
            												{
            												case RBRACE:
            													{
            														switch ( this->LA(8) )
            														{
            														case RSQBRACKET:
            															{
            																switch ( this->LA(9) )
            																{
            																case ID:
            																	{
            																		alt32=1;
            																	}
            																    break;
            																case LBRACKET:
            																	{
            																		alt32=2;
            																	}
            																    break;

            																default:
            																    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            																    ex->set_decisionNum( 32 );
            																    ex->set_state( 43 );


            																    goto ruleinstructionScalarEx;

            																}

            															}
            														    break;
            														case DOUBDEC:
            														case DOUBINC:
            														case LBRACKET:
            														case LSQBRACKET:
            														case QUESTION:
            														case 57:
            														case 58:
            														case 60:
            														case 61:
            														case 62:
            														case 64:
            														case 66:
            														case 68:
            														case 69:
            														case 71:
            														case 72:
            														case 74:
            														case 75:
            														case 76:
            														case 77:
            														case 78:
            														case 79:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 47 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 46 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 44 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DLSQBRACKET:
            								case LBRACKET:
            								case LSQBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 40 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case STRING_TYPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case LBRACE:
            									{
            										switch ( this->LA(6) )
            										{
            										case STRING:
            											{
            												switch ( this->LA(7) )
            												{
            												case RBRACE:
            													{
            														switch ( this->LA(8) )
            														{
            														case RSQBRACKET:
            															{
            																switch ( this->LA(9) )
            																{
            																case ID:
            																	{
            																		alt32=1;
            																	}
            																    break;
            																case LBRACKET:
            																	{
            																		alt32=2;
            																	}
            																    break;

            																default:
            																    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            																    ex->set_decisionNum( 32 );
            																    ex->set_state( 43 );


            																    goto ruleinstructionScalarEx;

            																}

            															}
            														    break;
            														case DOUBDEC:
            														case DOUBINC:
            														case LBRACKET:
            														case LSQBRACKET:
            														case QUESTION:
            														case 57:
            														case 58:
            														case 60:
            														case 61:
            														case 62:
            														case 64:
            														case 66:
            														case 68:
            														case 69:
            														case 71:
            														case 72:
            														case 74:
            														case 75:
            														case 76:
            														case 77:
            														case 78:
            														case 79:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 47 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 46 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 44 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DLSQBRACKET:
            								case LBRACKET:
            								case LSQBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 41 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case RSQBRACKET:
            							{
            								alt32=1;
            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case ID:
            						case LBRACKET:
            						case LENGTH:
            						case SHARED_REF:
            						case TYPE:
            						case 56:
            						case 66:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 26 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case DLSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case DRSQBRACKET:
            							{
            								alt32=1;
            							}
            						    break;
            						case BOOL:
            						case BOOL_TYPE:
            						case CHAR:
            						case CHAR_TYPE:
            						case DOUBDEC:
            						case DOUBINC:
            						case FLOAT:
            						case FLOAT_TYPE:
            						case ID:
            						case INT:
            						case INT_TYPE:
            						case LBRACKET:
            						case LENGTH:
            						case NULLTOK:
            						case SHARED_REF:
            						case STRING:
            						case STRING_TYPE:
            						case TYPE:
            						case VOID_TYPE:
            						case 56:
            						case 66:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 27 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case ID:
            					{
            						alt32=1;
            					}
            				    break;
            				case LBRACKET:
            					{
            						alt32=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 32 );
            				    ex->set_state( 13 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case BOOL_TYPE:
            		case CHAR_TYPE:
            		case FLOAT_TYPE:
            		case INT_TYPE:
            		case STRING_TYPE:
            		case VOID_TYPE:
            			{
            				alt32=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 32 );
            		    ex->set_state( 8 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case WEAK_REF:
            	{
            		alt32=1;
            	}
                break;
            case BOOL:
            case CHAR:
            case DOUBDEC:
            case DOUBINC:
            case FLOAT:
            case ID:
            case INT:
            case LBRACKET:
            case LENGTH:
            case NULLTOK:
            case STRING:
            case 56:
            case 66:
            	{
            		alt32=2;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 32 );
                ex->set_state( 0 );


                goto ruleinstructionScalarEx;

            }

            switch (alt32)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_declaration_in_instructionScalar4374);
        	        declaration36=declaration();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionScalarEx;
        	        }


        	        {
        	            node = declaration36
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_assignment_or_expression_in_instructionScalar4387);
        	        assignment_or_expression37=assignment_or_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionScalarEx;
        	        }


        	        {
        	            node = assignment_or_expression37
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleinstructionScalarEx;
    ruleinstructionScalarEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::continue_instruction*
WNScriptASTParser::continueInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::continue_instruction* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* b = NULL;






      node = nullptr;



    {
        {
            a =  this->matchToken(CONTINUE, &FOLLOW_CONTINUE_in_continueInst4417);
            if  (this->hasException())
            {
                goto rulecontinueInstEx;
            }


            b =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_continueInst4421);
            if  (this->hasException())
            {
                goto rulecontinueInstEx;
            }


            {
                 node = m_allocator->construct<scripting::continue_instruction>(m_allocator); SET_LOCATION(node, a); SET_END_LOCATION(node, b);
            }


        }

    }
    goto rulecontinueInstEx;
    rulecontinueInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::break_instruction*
WNScriptASTParser::breakInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::break_instruction* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* b = NULL;






        node = nullptr;



    {
        {
            a =  this->matchToken(BREAK, &FOLLOW_BREAK_in_breakInst4447);
            if  (this->hasException())
            {
                goto rulebreakInstEx;
            }


            b =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_breakInst4451);
            if  (this->hasException())
            {
                goto rulebreakInstEx;
            }


            {
                 node = m_allocator->construct<scripting::break_instruction>(m_allocator); SET_LOCATION(node, a); SET_END_LOCATION(node, b);
            }


        }

    }
    goto rulebreakInstEx;
    rulebreakInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::return_instruction*
WNScriptASTParser::returnInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::return_instruction* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* b = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    const ImplTraits::CommonTokenType* d = NULL;
    scripting::expression* expr38;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt33;

            alt33=2;

            switch ( this->LA(1) )
            {
            case RETURN:
            	{
            		switch ( this->LA(2) )
            		{
            		case SEMICOLON:
            			{
            				alt33=2;
            			}
            		    break;
            		case BOOL:
            		case BOOL_TYPE:
            		case CHAR:
            		case CHAR_TYPE:
            		case DOUBDEC:
            		case DOUBINC:
            		case FLOAT:
            		case FLOAT_TYPE:
            		case ID:
            		case INT:
            		case INT_TYPE:
            		case LBRACKET:
            		case LENGTH:
            		case NULLTOK:
            		case SHARED_REF:
            		case STRING:
            		case STRING_TYPE:
            		case TYPE:
            		case VOID_TYPE:
            		case 56:
            		case 66:
            			{
            				alt33=1;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 33 );
            		    ex->set_state( 1 );


            		    goto rulereturnInstEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 33 );
                ex->set_state( 0 );


                goto rulereturnInstEx;

            }

            switch (alt33)
            {
        	case 1:
        	    {
        	        a =  this->matchToken(RETURN, &FOLLOW_RETURN_in_returnInst4478);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_returnInst4480);
        	        expr38=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        b =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_returnInst4484);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::return_instruction>(m_allocator, expr38
        	            ); SET_LOCATION(node, a); SET_END_LOCATION(node, b);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        c =  this->matchToken(RETURN, &FOLLOW_RETURN_in_returnInst4498);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        d =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_returnInst4502);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::return_instruction>(m_allocator); SET_LOCATION(node, c); SET_END_LOCATION(node, d);
        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulereturnInstEx;
    rulereturnInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::whileInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    const ImplTraits::CommonTokenType* WHILE41 = NULL;
    scripting::expression* expr39;
    scripting::instruction_list* instruction_list40;





        node = nullptr;



    {
        {
            WHILE41 =  this->matchToken(WHILE, &FOLLOW_WHILE_in_whileInst4535);
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_whileInst4537);
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


            this->followPush(FOLLOW_expr_in_whileInst4539);
            expr39=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_whileInst4541);
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


            this->followPush(FOLLOW_instruction_list_in_whileInst4543);
            instruction_list40=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


            {
                 node = m_allocator->construct<scripting::while_instruction>(m_allocator, expr39
                , instruction_list40
                ); SET_LOCATION(node, WHILE41); SET_END_LOCATION_FROM_NODE(node,
                instruction_list40
                );
            }


        }

    }
    goto rulewhileInstEx;
    rulewhileInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::doInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    const ImplTraits::CommonTokenType* DO44 = NULL;
    const ImplTraits::CommonTokenType* SEMICOLON45 = NULL;
    scripting::expression* expr42;
    scripting::instruction_list* instruction_list43;





        node = nullptr;



    {
        {
            DO44 =  this->matchToken(DO, &FOLLOW_DO_in_doInst4579);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            this->followPush(FOLLOW_instruction_list_in_doInst4581);
            instruction_list43=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


             this->matchToken(WHILE, &FOLLOW_WHILE_in_doInst4583);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_doInst4585);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            this->followPush(FOLLOW_expr_in_doInst4587);
            expr42=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_doInst4589);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            SEMICOLON45 =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_doInst4591);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            {
                node = m_allocator->construct<scripting::do_instruction>(m_allocator, expr42
                , instruction_list43
                ); SET_LOCATION(node, DO44); SET_END_LOCATION(node, SEMICOLON45);
            }


        }

    }
    goto ruledoInstEx;
    ruledoInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::for_instruction*
WNScriptASTParser::forInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::for_instruction* node;


    const ImplTraits::CommonTokenType* FOR46 = NULL;
    scripting::instruction* a;
    scripting::expression* b;
    scripting::instruction* c;
    scripting::instruction_list* d;





        node =  m_allocator->construct<scripting::for_instruction>(m_allocator);



    {
        {
            FOR46 =  this->matchToken(FOR, &FOLLOW_FOR_in_forInst4623);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_forInst4625);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            {
                 SET_LOCATION(node, FOR46);
            }


            {
                int alt34=2;
                switch ( this->LA(1) )
                {
                    case BOOL:
                    case BOOL_TYPE:
                    case CHAR:
                    case CHAR_TYPE:
                    case DOUBDEC:
                    case DOUBINC:
                    case FLOAT:
                    case FLOAT_TYPE:
                    case ID:
                    case INT:
                    case INT_TYPE:
                    case LBRACKET:
                    case LENGTH:
                    case NULLTOK:
                    case SHARED_REF:
                    case STRING:
                    case STRING_TYPE:
                    case TYPE:
                    case VOID_TYPE:
                    case WEAK_REF:
                    case 56:
                    case 66:
                    	{
                    		alt34=1;
                    	}
                        break;
                }

                switch (alt34)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_instructionScalar_in_forInst4653);
            	        a=instructionScalar();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleforInstEx;
            	        }


            	        {
            	            node->add_initializer(a
            	            );
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_forInst4659);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            {
                int alt35=2;
                switch ( this->LA(1) )
                {
                    case BOOL:
                    case BOOL_TYPE:
                    case CHAR:
                    case CHAR_TYPE:
                    case DOUBDEC:
                    case DOUBINC:
                    case FLOAT:
                    case FLOAT_TYPE:
                    case ID:
                    case INT:
                    case INT_TYPE:
                    case LBRACKET:
                    case LENGTH:
                    case NULLTOK:
                    case SHARED_REF:
                    case STRING:
                    case STRING_TYPE:
                    case TYPE:
                    case VOID_TYPE:
                    case 56:
                    case 66:
                    	{
                    		alt35=1;
                    	}
                        break;
                }

                switch (alt35)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_expr_in_forInst4684);
            	        b=expr();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleforInstEx;
            	        }


            	        {
            	            node->add_condition(b
            	            );
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_forInst4698);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            {
                int alt36=2;
                switch ( this->LA(1) )
                {
                    case BOOL:
                    case BOOL_TYPE:
                    case CHAR:
                    case CHAR_TYPE:
                    case DOUBDEC:
                    case DOUBINC:
                    case FLOAT:
                    case FLOAT_TYPE:
                    case ID:
                    case INT:
                    case INT_TYPE:
                    case LBRACKET:
                    case LENGTH:
                    case NULLTOK:
                    case SHARED_REF:
                    case STRING:
                    case STRING_TYPE:
                    case TYPE:
                    case VOID_TYPE:
                    case WEAK_REF:
                    case 56:
                    case 66:
                    	{
                    		alt36=1;
                    	}
                        break;
                }

                switch (alt36)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_instructionScalar_in_forInst4723);
            	        c=instructionScalar();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleforInstEx;
            	        }


            	        {
            	            node->add_post_op(c
            	            );
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_forInst4729);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            {
                this->followPush(FOLLOW_instruction_list_in_forInst4754);
                d=instruction_list();

                this->followPop();
                if  (this->hasException())
                {
                    goto ruleforInstEx;
                }


                {
                    node->add_body(d
                    ); SET_END_LOCATION_FROM_NODE(node, d
                    );
                }


            }


        }

    }
    goto ruleforInstEx;
    ruleforInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::else_if_instruction*
WNScriptASTParser::elsemiddle()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::else_if_instruction* node;


    const ImplTraits::CommonTokenType* ELSE49 = NULL;
    scripting::expression* expr47;
    scripting::instruction_list* instruction_list48;





        node = nullptr;



    {
        {
            ELSE49 =  this->matchToken(ELSE, &FOLLOW_ELSE_in_elsemiddle4802);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


             this->matchToken(IF, &FOLLOW_IF_in_elsemiddle4804);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_elsemiddle4806);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


            this->followPush(FOLLOW_expr_in_elsemiddle4808);
            expr47=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_elsemiddle4810);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


            this->followPush(FOLLOW_instruction_list_in_elsemiddle4812);
            instruction_list48=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


            {
                 node = m_allocator->construct<scripting::else_if_instruction>(m_allocator, expr47
                , instruction_list48
                ); SET_LOCATION(node, ELSE49); SET_END_LOCATION_FROM_NODE(node,
                instruction_list48
                );
            }


        }

    }
    goto ruleelsemiddleEx;
    ruleelsemiddleEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction_list*
WNScriptASTParser::endif()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction_list* node;


    scripting::instruction_list* instruction_list50;





        node = nullptr;



    {
        {
             this->matchToken(ELSE, &FOLLOW_ELSE_in_endif4845);
            if  (this->hasException())
            {
                goto ruleendifEx;
            }


            this->followPush(FOLLOW_instruction_list_in_endif4847);
            instruction_list50=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleendifEx;
            }


            {
                node = instruction_list50
                ;
            }


        }

    }
    goto ruleendifEx;
    ruleendifEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::if_instruction*
WNScriptASTParser::ifInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::if_instruction* node;


    const ImplTraits::CommonTokenType* IF53 = NULL;
    scripting::expression* expr51;
    scripting::instruction_list* instruction_list52;
    scripting::else_if_instruction* elsemiddle54;
    scripting::instruction_list* endif55;





        node = nullptr;



    {
        {
            IF53 =  this->matchToken(IF, &FOLLOW_IF_in_ifInst4877);
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_ifInst4879);
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


            this->followPush(FOLLOW_expr_in_ifInst4881);
            expr51=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_ifInst4883);
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


            this->followPush(FOLLOW_instruction_list_in_ifInst4885);
            instruction_list52=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


            {
                node = m_allocator->construct<scripting::if_instruction>(m_allocator, expr51
                , instruction_list52
                ); SET_LOCATION(node, IF53); SET_END_LOCATION_FROM_NODE(node,
                instruction_list52
                );
            }



            for (;;)
            {
                int alt37=2;
                switch ( this->LA(1) )
                {
                case ELSE:
                	{
                		switch ( this->LA(2) )
                		{
                		case IF:
                			{
                				alt37=1;
                			}
                		    break;

                		}

                	}
                    break;

                }

                switch (alt37)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_elsemiddle_in_ifInst4902);
            	        elsemiddle54=elsemiddle();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleifInstEx;
            	        }


            	        {
            	            node->add_else_if(elsemiddle54
            	            ); SET_END_LOCATION_FROM_NODE(node, elsemiddle54
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop37;
            	    break;
                }
            }
            loop37: ;


            {
                int alt38=2;
                switch ( this->LA(1) )
                {
                    case ELSE:
                    	{
                    		alt38=1;
                    	}
                        break;
                }

                switch (alt38)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_endif_in_ifInst4922);
            	        endif55=endif();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleifInstEx;
            	        }


            	        {
            	            node->add_else(endif55
            	            ); SET_LOCATION(node, IF53); SET_END_LOCATION_FROM_NODE(node,
            	            endif55
            	            );
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    goto ruleifInstEx;
    ruleifInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::instruction()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    scripting::if_instruction* ifInst56;
    scripting::instruction* whileInst57;
    scripting::instruction* doInst58;
    scripting::for_instruction* forInst59;
    scripting::instruction* instructionScalar60;
    scripting::break_instruction* breakInst61;
    scripting::continue_instruction* continueInst62;
    scripting::return_instruction* returnInst63;
    scripting::instruction_list* instruction_list64;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt39;

            alt39=9;

            switch ( this->LA(1) )
            {
            case IF:
            	{
            		alt39=1;
            	}
                break;
            case WHILE:
            	{
            		alt39=2;
            	}
                break;
            case DO:
            	{
            		alt39=3;
            	}
                break;
            case FOR:
            	{
            		alt39=4;
            	}
                break;
            case BOOL:
            case BOOL_TYPE:
            case CHAR:
            case CHAR_TYPE:
            case DOUBDEC:
            case DOUBINC:
            case FLOAT:
            case FLOAT_TYPE:
            case ID:
            case INT:
            case INT_TYPE:
            case LBRACKET:
            case LENGTH:
            case NULLTOK:
            case SHARED_REF:
            case STRING:
            case STRING_TYPE:
            case TYPE:
            case VOID_TYPE:
            case WEAK_REF:
            case 56:
            case 66:
            	{
            		alt39=5;
            	}
                break;
            case BREAK:
            	{
            		alt39=6;
            	}
                break;
            case CONTINUE:
            	{
            		alt39=7;
            	}
                break;
            case RETURN:
            	{
            		alt39=8;
            	}
                break;
            case LBRACE:
            	{
            		alt39=9;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 39 );
                ex->set_state( 0 );


                goto ruleinstructionEx;

            }

            switch (alt39)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_ifInst_in_instruction4956);
        	        ifInst56=ifInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	             node = ifInst56
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_whileInst_in_instruction4977);
        	        whileInst57=whileInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = whileInst57
        	            ;
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        this->followPush(FOLLOW_doInst_in_instruction4994);
        	        doInst58=doInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = doInst58
        	            ;
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        this->followPush(FOLLOW_forInst_in_instruction5014);
        	        forInst59=forInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = forInst59
        	            ;
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        this->followPush(FOLLOW_instructionScalar_in_instruction5034);
        	        instructionScalar60=instructionScalar();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	         this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_instruction5036);
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = instructionScalar60
        	            ;
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	        this->followPush(FOLLOW_breakInst_in_instruction5049);
        	        breakInst61=breakInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = breakInst61
        	            ;
        	        }


        	    }
        	    break;
        	case 7:
        	    {
        	        this->followPush(FOLLOW_continueInst_in_instruction5062);
        	        continueInst62=continueInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = continueInst62
        	            ;
        	        }


        	    }
        	    break;
        	case 8:
        	    {
        	        this->followPush(FOLLOW_returnInst_in_instruction5075);
        	        returnInst63=returnInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = returnInst63
        	            ;
        	        }


        	    }
        	    break;
        	case 9:
        	    {
        	        this->followPush(FOLLOW_instruction_list_in_instruction5088);
        	        instruction_list64=instruction_list();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	             node = instruction_list64
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleinstructionEx;
    ruleinstructionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction_list*
WNScriptASTParser::instruction_list()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction_list* node;


    const ImplTraits::CommonTokenType* lb = NULL;
    const ImplTraits::CommonTokenType* rb = NULL;
    scripting::instruction* b;





        node = m_allocator->construct<scripting::instruction_list>(m_allocator);



    {
        {
            lb =  this->matchToken(LBRACE, &FOLLOW_LBRACE_in_instruction_list5120);
            if  (this->hasException())
            {
                goto ruleinstruction_listEx;
            }



            for (;;)
            {
                int alt40=2;
                switch ( this->LA(1) )
                {
                case BOOL:
                case BOOL_TYPE:
                case BREAK:
                case CHAR:
                case CHAR_TYPE:
                case CONTINUE:
                case DO:
                case DOUBDEC:
                case DOUBINC:
                case FLOAT:
                case FLOAT_TYPE:
                case FOR:
                case ID:
                case IF:
                case INT:
                case INT_TYPE:
                case LBRACE:
                case LBRACKET:
                case LENGTH:
                case NULLTOK:
                case RETURN:
                case SHARED_REF:
                case STRING:
                case STRING_TYPE:
                case TYPE:
                case VOID_TYPE:
                case WEAK_REF:
                case WHILE:
                case 56:
                case 66:
                	{
                		alt40=1;
                	}
                    break;

                }

                switch (alt40)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_instruction_in_instruction_list5137);
            	        b=instruction();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleinstruction_listEx;
            	        }


            	        {
            	            node->add_instruction(b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop40;
            	    break;
                }
            }
            loop40: ;


            rb =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_instruction_list5154);
            if  (this->hasException())
            {
                goto ruleinstruction_listEx;
            }


            {

                          SET_LOCATION(node, lb); SET_END_LOCATION(node, rb);

            }


        }

    }
    goto ruleinstruction_listEx;
    ruleinstruction_listEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::function*
WNScriptASTParser::function()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::function* node;


    scripting::parameter* param65;
    scripting::parameter_list* parameterList66;
    scripting::instruction_list* instruction_list67;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_param_in_function5184);
            param65=param();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefunctionEx;
            }


            this->followPush(FOLLOW_parameterList_in_function5186);
            parameterList66=parameterList();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefunctionEx;
            }


            this->followPush(FOLLOW_instruction_list_in_function5188);
            instruction_list67=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefunctionEx;
            }


            {
                 node = m_allocator->construct<scripting::function>(m_allocator, param65
                , parameterList66
                , instruction_list67
                ); SET_LOCATION_FROM_NODE(node, param65
                ); SET_END_LOCATION_FROM_NODE(node, instruction_list67
                );
            }


        }

    }
    goto rulefunctionEx;
    rulefunctionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::struct_definition*
WNScriptASTParser::structDecl()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::struct_definition* node;


    const ImplTraits::CommonTokenType* TYPE68 = NULL;
    const ImplTraits::CommonTokenType* STRUCT69 = NULL;
    const ImplTraits::CommonTokenType* RBRACE70 = NULL;
    scripting::declaration* a;





        node = nullptr;



    {
        {
            STRUCT69 =  this->matchToken(STRUCT, &FOLLOW_STRUCT_in_structDecl5218);
            if  (this->hasException())
            {
                goto rulestructDeclEx;
            }


            TYPE68 =  this->matchToken(TYPE, &FOLLOW_TYPE_in_structDecl5220);
            if  (this->hasException())
            {
                goto rulestructDeclEx;
            }


            {
                node= m_allocator->construct<scripting::struct_definition>(m_allocator, (TYPE68->getText()).c_str()); SET_LOCATION(node, STRUCT69);
            }


             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_structDecl5236);
            if  (this->hasException())
            {
                goto rulestructDeclEx;
            }



            for (;;)
            {
                int alt41=2;
                switch ( this->LA(1) )
                {
                case BOOL_TYPE:
                case CHAR_TYPE:
                case FLOAT_TYPE:
                case INT_TYPE:
                case SHARED_REF:
                case STRING_TYPE:
                case TYPE:
                case VOID_TYPE:
                case WEAK_REF:
                	{
                		alt41=1;
                	}
                    break;

                }

                switch (alt41)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_declaration_in_structDecl5241);
            	        a=declaration();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulestructDeclEx;
            	        }


            	        {
            	             node->add_struct_elem(a
            	            );
            	        }


            	         this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_structDecl5245);
            	        if  (this->hasException())
            	        {
            	            goto rulestructDeclEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop41;
            	    break;
                }
            }
            loop41: ;


            RBRACE70 =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_structDecl5250);
            if  (this->hasException())
            {
                goto rulestructDeclEx;
            }


            {
                 SET_END_LOCATION(node, RBRACE70);
            }


        }

    }
    goto rulestructDeclEx;
    rulestructDeclEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::struct_definition*
WNScriptASTParser::classDecl()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::struct_definition* node;


    const ImplTraits::CommonTokenType* f = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    const ImplTraits::CommonTokenType* g = NULL;
    const ImplTraits::CommonTokenType* d = NULL;
    const ImplTraits::CommonTokenType* e = NULL;
    const ImplTraits::CommonTokenType* RBRACE71 = NULL;
    scripting::declaration* a;
    scripting::declaration* j;
    scripting::function* b;
    scripting::function* h;
    scripting::function* i;





        node = nullptr;



    {
        {
            {
                int alt42=2;
                switch ( this->LA(1) )
                {
                case CLASS:
                	{
                		switch ( this->LA(2) )
                		{
                		case TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case COLON:
                					{
                						alt42=2;
                					}
                				    break;
                				case LBRACE:
                					{
                						alt42=1;
                					}
                				    break;

                				default:
                				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 42 );
                				    ex->set_state( 2 );


                				    goto ruleclassDeclEx;

                				}

                			}
                		    break;

                		default:
                		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 42 );
                		    ex->set_state( 1 );


                		    goto ruleclassDeclEx;

                		}

                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 42 );
                    ex->set_state( 0 );


                    goto ruleclassDeclEx;

                }

                switch (alt42)
                {
            	case 1:
            	    {
            	        {
            	            f =  this->matchToken(CLASS, &FOLLOW_CLASS_in_classDecl5303);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            c =  this->matchToken(TYPE, &FOLLOW_TYPE_in_classDecl5307);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                node= m_allocator->construct<scripting::struct_definition>(m_allocator, (c->getText()).c_str(), true); SET_LOCATION(node, f);
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	            g =  this->matchToken(CLASS, &FOLLOW_CLASS_in_classDecl5327);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            d =  this->matchToken(TYPE, &FOLLOW_TYPE_in_classDecl5331);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	             this->matchToken(COLON, &FOLLOW_COLON_in_classDecl5333);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            e =  this->matchToken(TYPE, &FOLLOW_TYPE_in_classDecl5337);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                node= m_allocator->construct<scripting::struct_definition>(m_allocator, (d->getText()).c_str(), true, (e->getText()).c_str()); SET_LOCATION(node, g);
            	            }


            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_classDecl5364);
            if  (this->hasException())
            {
                goto ruleclassDeclEx;
            }



            for (;;)
            {
                int alt43=6;
                switch ( this->LA(1) )
                {
                case VOID_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 73:
                					{
                						alt43=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt43=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 73:
                									{
                										alt43=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt43=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 73:
                									{
                										alt43=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt43=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case INT_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 73:
                					{
                						alt43=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt43=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 73:
                									{
                										alt43=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt43=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 73:
                									{
                										alt43=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt43=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case FLOAT_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 73:
                					{
                						alt43=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt43=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 73:
                									{
                										alt43=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt43=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 73:
                									{
                										alt43=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt43=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case CHAR_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 73:
                					{
                						alt43=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt43=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 73:
                									{
                										alt43=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt43=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 73:
                									{
                										alt43=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt43=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case BOOL_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 73:
                					{
                						alt43=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt43=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 73:
                									{
                										alt43=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt43=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 73:
                									{
                										alt43=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt43=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case STRING_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 73:
                					{
                						alt43=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt43=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 73:
                									{
                										alt43=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt43=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 73:
                									{
                										alt43=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt43=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 73:
                					{
                						alt43=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt43=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 73:
                									{
                										alt43=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt43=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 73:
                									{
                										alt43=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt43=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case QUESTION:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 73:
                							{
                								alt43=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt43=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case SHARED_REF:
                	{
                		switch ( this->LA(2) )
                		{
                		case TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case LSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case INT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 73:
                													{
                														alt43=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt43=3;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 73:
                													{
                														alt43=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt43=3;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 73:
                													{
                														alt43=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt43=3;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 73:
                													{
                														alt43=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt43=3;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 73:
                													{
                														alt43=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt43=3;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case NULLTOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 73:
                													{
                														alt43=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt43=3;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case VOID_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 73:
                																			{
                																				alt43=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt43=3;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case INT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 73:
                																			{
                																				alt43=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt43=3;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 73:
                																			{
                																				alt43=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt43=3;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 73:
                																			{
                																				alt43=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt43=3;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 73:
                																			{
                																				alt43=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt43=3;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 73:
                																			{
                																				alt43=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt43=3;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case DLSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case DRSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 73:
                							{
                								alt43=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt43=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case WEAK_REF:
                	{
                		switch ( this->LA(2) )
                		{
                		case TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 73:
                							{
                								alt43=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt43=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case 68:
                	{
                		alt43=2;
                	}
                    break;
                case VIRTUAL:
                	{
                		alt43=4;
                	}
                    break;
                case OVERRIDE:
                	{
                		alt43=5;
                	}
                    break;

                }

                switch (alt43)
                {
            	case 1:
            	    {
            	        {
            	            this->followPush(FOLLOW_declaration_in_classDecl5407);
            	            a=declaration();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_struct_elem(a
            	                );
            	            }


            	             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_classDecl5411);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	            this->followPush(FOLLOW_inherited_declaration_in_classDecl5437);
            	            j=inherited_declaration();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_struct_elem(j
            	                );
            	            }


            	             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_classDecl5441);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	        {
            	            this->followPush(FOLLOW_function_in_classDecl5467);
            	            b=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_function(b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 4:
            	    {
            	        {
            	             this->matchToken(VIRTUAL, &FOLLOW_VIRTUAL_in_classDecl5496);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            this->followPush(FOLLOW_function_in_classDecl5500);
            	            h=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_function(h
            	                ); h
            	                ->set_is_virtual(true);
            	            }


            	        }


            	    }
            	    break;
            	case 5:
            	    {
            	        {
            	             this->matchToken(OVERRIDE, &FOLLOW_OVERRIDE_in_classDecl5526);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            this->followPush(FOLLOW_function_in_classDecl5530);
            	            i=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_function(i
            	                ); i
            	                ->set_is_override(true);
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop43;
            	    break;
                }
            }
            loop43: ;


            RBRACE71 =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_classDecl5566);
            if  (this->hasException())
            {
                goto ruleclassDeclEx;
            }


            {
                 SET_END_LOCATION(node, RBRACE71);
            }


        }

    }
    goto ruleclassDeclEx;
    ruleclassDeclEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






containers::string
WNScriptASTParser::inc()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    containers::string file;


    const ImplTraits::CommonTokenType* STRING72 = NULL;









    {
        {
             this->matchToken(INCLUDE, &FOLLOW_INCLUDE_in_inc5596);
            if  (this->hasException())
            {
                goto ruleincEx;
            }


            STRING72 =  this->matchToken(STRING, &FOLLOW_STRING_in_inc5598);
            if  (this->hasException())
            {
                goto ruleincEx;
            }


            {
                 file = containers::string(m_allocator, (STRING72->getText()).c_str());
            }


        }

    }
    goto ruleincEx;
    ruleincEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return file;
}






scripting::script_file*
WNScriptASTParser::program()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::script_file* node;


    containers::string inc73;
    scripting::function* function74;
    scripting::struct_definition* structDecl75;
    scripting::struct_definition* classDecl76;





        node = m_allocator->construct<scripting::script_file>(m_allocator);



    {
        {

            for (;;)
            {
                int alt44=2;
                switch ( this->LA(1) )
                {
                case INCLUDE:
                	{
                		alt44=1;
                	}
                    break;

                }

                switch (alt44)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_inc_in_program5627);
            	        inc73=inc();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_include(inc73
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop44;
            	    break;
                }
            }
            loop44: ;



            for (;;)
            {
                int alt45=4;
                switch ( this->LA(1) )
                {
                case BOOL_TYPE:
                case CHAR_TYPE:
                case FLOAT_TYPE:
                case INT_TYPE:
                case SHARED_REF:
                case STRING_TYPE:
                case TYPE:
                case VOID_TYPE:
                case WEAK_REF:
                	{
                		alt45=1;
                	}
                    break;
                case STRUCT:
                	{
                		alt45=2;
                	}
                    break;
                case CLASS:
                	{
                		alt45=3;
                	}
                    break;

                }

                switch (alt45)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_function_in_program5666);
            	        function74=function();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_function(function74
            	            );
            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        this->followPush(FOLLOW_structDecl_in_program5688);
            	        structDecl75=structDecl();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_struct(structDecl75
            	            );
            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	        this->followPush(FOLLOW_classDecl_in_program5708);
            	        classDecl76=classDecl();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_struct(classDecl76
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop45;
            	    break;
                }
            }
            loop45: ;


        }

    }
    goto ruleprogramEx;
    ruleprogramEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}

















