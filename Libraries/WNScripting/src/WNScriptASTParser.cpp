/** \file
 *  This C++ source file was generated by $ANTLR version 3.5.3-SNAPSHOT
 *
 *     -                for the parser : WNScriptASTParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF

// clang-format off





    #include "WNCore/inc/base.h"
#ifdef _WN_MSVC
    #pragma warning(disable: 4100)
    #pragma warning(disable: 4459)
    #pragma warning(disable: 4703)
#endif
#ifdef _WN_CLANG
    #pragma clang diagnostic ignored "-Wunused-function"
#endif
#ifdef _WN_GCC
    #pragma GCC diagnostic ignored "-Wunused-function"
    #pragma GCC diagnostic ignored "-Wunused-variable"
    #pragma GCC diagnostic ignored "-Wunused-but-set-variable"
    #pragma GCC diagnostic ignored "-Wsign-compare"
#endif
    #include "WNMemory/inc/allocator.h"
    #include "WNScripting/src/WNScriptASTLexer.hpp"
    #include "WNScripting/inc/WNNodeTypes.h"

    using namespace wn;

    #ifndef SET_LOCATION
    #define SET_LOCATION(node, tok) { scripting::source_location loc; \
                                     loc.m_start_index = tok->get_startIndex();\
                                     loc.m_end_index = tok->get_stopIndex();\
                                     loc.m_line_start = tok->get_lineStart();\
                                     loc.m_line_number = tok->get_line();\
                                     loc.m_char_number = tok->get_charPositionInLine();\
                                     node->set_start_location(loc); \
                                   }

    #define SET_LOCATION_FROM_NODE(node, node2) { \
                                        if(node2) { \
                                        node->set_start_location(node2->get_start_location()); \
                                        } \
                                   }
    #define SET_START_LOCATION_FROM_NODE(node, node2) { \
                                        if(node2) { \
                                        scripting::source_location loc = node->get_start_location(); \
                                        scripting::source_location loc2 = node2->get_start_location(); \
                                        loc.m_start_index = loc2.m_start_index; \
                                        loc.m_line_start = loc2.m_line_start; \
                                        loc.m_line_number = loc2.m_line_number; \
                                        loc.m_char_number = loc2.m_char_number; \
                                        node->set_start_location(loc); \
                                        } \
                                    }
    #define SET_END_LOCATION(node, tok) { \
                                        node->set_end_index(tok->get_stopIndex()); \
                                      }
    #define SET_END_LOCATION_FROM_NODE(node, node2) { \
                                            if(node2) { \
                                            node->set_end_index(node2->get_start_location().m_end_index); \
                                            } \
                                            }
    #endif








#include    "WNScriptASTParser.hpp"









using namespace antlr3;



ANTLR_UINT8* WNScriptASTParserTokenNames[76+4]
     = {
        (ANTLR_UINT8*) "<invalid>",
        (ANTLR_UINT8*) "<EOR>",
        (ANTLR_UINT8*) "<DOWN>",
        (ANTLR_UINT8*) "<UP>",
        (ANTLR_UINT8*) "BOOL",
        (ANTLR_UINT8*) "BOOL_TYPE",
        (ANTLR_UINT8*) "BREAK",
        (ANTLR_UINT8*) "CHAR",
        (ANTLR_UINT8*) "CHAR_TYPE",
        (ANTLR_UINT8*) "CLASS",
        (ANTLR_UINT8*) "COLON",
        (ANTLR_UINT8*) "COMMA",
        (ANTLR_UINT8*) "COMMENT",
        (ANTLR_UINT8*) "CONTINUE",
        (ANTLR_UINT8*) "DEFAULT",
        (ANTLR_UINT8*) "DLSQBRACKET",
        (ANTLR_UINT8*) "DO",
        (ANTLR_UINT8*) "DOUBDEC",
        (ANTLR_UINT8*) "DOUBINC",
        (ANTLR_UINT8*) "DRSQBRACKET",
        (ANTLR_UINT8*) "ELSE",
        (ANTLR_UINT8*) "ESC_SEQ",
        (ANTLR_UINT8*) "EXPONENT",
        (ANTLR_UINT8*) "FLOAT",
        (ANTLR_UINT8*) "FLOAT_TYPE",
        (ANTLR_UINT8*) "FOR",
        (ANTLR_UINT8*) "HEX_DIGIT",
        (ANTLR_UINT8*) "ID",
        (ANTLR_UINT8*) "IF",
        (ANTLR_UINT8*) "INCLUDE",
        (ANTLR_UINT8*) "INT",
        (ANTLR_UINT8*) "INT_TYPE",
        (ANTLR_UINT8*) "LBRACE",
        (ANTLR_UINT8*) "LBRACKET",
        (ANTLR_UINT8*) "LENGTH",
        (ANTLR_UINT8*) "LSQBRACKET",
        (ANTLR_UINT8*) "NULLTOK",
        (ANTLR_UINT8*) "OCTAL_ESC",
        (ANTLR_UINT8*) "OVERRIDE",
        (ANTLR_UINT8*) "QUESTION",
        (ANTLR_UINT8*) "RBRACE",
        (ANTLR_UINT8*) "RBRACKET",
        (ANTLR_UINT8*) "RETURN",
        (ANTLR_UINT8*) "RSQBRACKET",
        (ANTLR_UINT8*) "SEMICOLON",
        (ANTLR_UINT8*) "SHARED_REF",
        (ANTLR_UINT8*) "STRING",
        (ANTLR_UINT8*) "STRING_TYPE",
        (ANTLR_UINT8*) "STRUCT",
        (ANTLR_UINT8*) "TYPE",
        (ANTLR_UINT8*) "UNICODE_ESC",
        (ANTLR_UINT8*) "VIRTUAL",
        (ANTLR_UINT8*) "VOID_TYPE",
        (ANTLR_UINT8*) "WEAK_REF",
        (ANTLR_UINT8*) "WHILE",
        (ANTLR_UINT8*) "WS",
        (ANTLR_UINT8*) "'!'",
        (ANTLR_UINT8*) "'!='",
        (ANTLR_UINT8*) "'%'",
        (ANTLR_UINT8*) "'%='",
        (ANTLR_UINT8*) "'&&'",
        (ANTLR_UINT8*) "'&'",
        (ANTLR_UINT8*) "'*'",
        (ANTLR_UINT8*) "'*='",
        (ANTLR_UINT8*) "'+'",
        (ANTLR_UINT8*) "'+='",
        (ANTLR_UINT8*) "'-'",
        (ANTLR_UINT8*) "'-='",
        (ANTLR_UINT8*) "'.'",
        (ANTLR_UINT8*) "'/'",
        (ANTLR_UINT8*) "'/='",
        (ANTLR_UINT8*) "'<'",
        (ANTLR_UINT8*) "'<='",
        (ANTLR_UINT8*) "'='",
        (ANTLR_UINT8*) "'=='",
        (ANTLR_UINT8*) "'>'",
        (ANTLR_UINT8*) "'>='",
        (ANTLR_UINT8*) "'^'",
        (ANTLR_UINT8*) "'|'",
        (ANTLR_UINT8*) "'||'"
       };




static const char fileName[] = "WNScriptAST.g";



const char* WNScriptASTParser::getGrammarFileName()
{
	return fileName;
}






WNScriptASTParser::WNScriptASTParser( StreamType* instream)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, NULL)

{
	this->init(instream);
}







WNScriptASTParser::WNScriptASTParser( StreamType* instream, RecognizerSharedStateType* state)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, state)

{
	this->init(instream );
}

void WNScriptASTParser::init(StreamType* instream)
{


	this->get_psrstate()->set_tokenNames( WNScriptASTParserTokenNames );


}

void
WNScriptASTParser::reset()
{
    this->get_rec()->reset();
}



WNScriptASTParser::~WNScriptASTParser()
 {
}








static ANTLR_UINT8**	getTokenNames()
{
        return WNScriptASTParserTokenNames;
}





static	ANTLR_BITWORD FOLLOW_TYPE_in_objectType1209_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_objectType1209( FOLLOW_TYPE_in_objectType1209_bits, 1 );

static	ANTLR_BITWORD FOLLOW_VOID_TYPE_in_scalarType1241_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_VOID_TYPE_in_scalarType1241( FOLLOW_VOID_TYPE_in_scalarType1241_bits, 1 );

static	ANTLR_BITWORD FOLLOW_INT_TYPE_in_scalarType1253_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_INT_TYPE_in_scalarType1253( FOLLOW_INT_TYPE_in_scalarType1253_bits, 1 );

static	ANTLR_BITWORD FOLLOW_FLOAT_TYPE_in_scalarType1265_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_FLOAT_TYPE_in_scalarType1265( FOLLOW_FLOAT_TYPE_in_scalarType1265_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CHAR_TYPE_in_scalarType1277_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CHAR_TYPE_in_scalarType1277( FOLLOW_CHAR_TYPE_in_scalarType1277_bits, 1 );

static	ANTLR_BITWORD FOLLOW_BOOL_TYPE_in_scalarType1289_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_BOOL_TYPE_in_scalarType1289( FOLLOW_BOOL_TYPE_in_scalarType1289_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRING_TYPE_in_scalarType1301_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_TYPE_in_scalarType1301( FOLLOW_STRING_TYPE_in_scalarType1301_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_arrayType1338_bits[]	= { ANTLR_UINT64_LIT(0x0000000800008000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_arrayType1338( FOLLOW_scalarType_in_arrayType1338_bits, 1 );

static	ANTLR_BITWORD FOLLOW_objectType_in_arrayType1355_bits[]	= { ANTLR_UINT64_LIT(0x0000000800008000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_objectType_in_arrayType1355( FOLLOW_objectType_in_arrayType1355_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SHARED_REF_in_arrayType1369_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SHARED_REF_in_arrayType1369( FOLLOW_SHARED_REF_in_arrayType1369_bits, 1 );

static	ANTLR_BITWORD FOLLOW_objectType_in_arrayType1373_bits[]	= { ANTLR_UINT64_LIT(0x0000000800008000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_objectType_in_arrayType1373( FOLLOW_objectType_in_arrayType1373_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_arrayType1401_bits[]	= { ANTLR_UINT64_LIT(0x0010C810C18001B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_arrayType1401( FOLLOW_LSQBRACKET_in_arrayType1401_bits, 1 );

static	ANTLR_BITWORD FOLLOW_constant_in_arrayType1414_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_constant_in_arrayType1414( FOLLOW_constant_in_arrayType1414_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_arrayType1436_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_arrayType1436( FOLLOW_RSQBRACKET_in_arrayType1436_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DLSQBRACKET_in_arrayType1466_bits[]	= { ANTLR_UINT64_LIT(0x0000000000080000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DLSQBRACKET_in_arrayType1466( FOLLOW_DLSQBRACKET_in_arrayType1466_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DRSQBRACKET_in_arrayType1468_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DRSQBRACKET_in_arrayType1468( FOLLOW_DRSQBRACKET_in_arrayType1468_bits, 1 );

static	ANTLR_BITWORD FOLLOW_objectType_in_compoundType1506_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_objectType_in_compoundType1506( FOLLOW_objectType_in_compoundType1506_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_nonArrayType1533_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_nonArrayType1533( FOLLOW_scalarType_in_nonArrayType1533_bits, 1 );

static	ANTLR_BITWORD FOLLOW_objectType_in_nonArrayType1543_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_objectType_in_nonArrayType1543( FOLLOW_objectType_in_nonArrayType1543_bits, 1 );

static	ANTLR_BITWORD FOLLOW_compoundType_in_type1573_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_compoundType_in_type1573( FOLLOW_compoundType_in_type1573_bits, 1 );

static	ANTLR_BITWORD FOLLOW_arrayType_in_type1583_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arrayType_in_type1583( FOLLOW_arrayType_in_type1583_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_type1593_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_type1593( FOLLOW_scalarType_in_type1593_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_param1625_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_param1625( FOLLOW_scalarType_in_param1625_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1629_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1629( FOLLOW_ID_in_param1629_bits, 1 );

static	ANTLR_BITWORD FOLLOW_compoundType_in_param1644_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_compoundType_in_param1644( FOLLOW_compoundType_in_param1644_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1648_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1648( FOLLOW_ID_in_param1648_bits, 1 );

static	ANTLR_BITWORD FOLLOW_arrayType_in_param1663_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arrayType_in_param1663( FOLLOW_arrayType_in_param1663_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1667_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1667( FOLLOW_ID_in_param1667_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SHARED_REF_in_param1680_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SHARED_REF_in_param1680( FOLLOW_SHARED_REF_in_param1680_bits, 1 );

static	ANTLR_BITWORD FOLLOW_compoundType_in_param1684_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_compoundType_in_param1684( FOLLOW_compoundType_in_param1684_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1688_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1688( FOLLOW_ID_in_param1688_bits, 1 );

static	ANTLR_BITWORD FOLLOW_WEAK_REF_in_param1701_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_WEAK_REF_in_param1701( FOLLOW_WEAK_REF_in_param1701_bits, 1 );

static	ANTLR_BITWORD FOLLOW_compoundType_in_param1705_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_compoundType_in_param1705( FOLLOW_compoundType_in_param1705_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1710_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1710( FOLLOW_ID_in_param1710_bits, 1 );

static	ANTLR_BITWORD FOLLOW_compoundType_in_param1725_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_compoundType_in_param1725( FOLLOW_compoundType_in_param1725_bits, 1 );

static	ANTLR_BITWORD FOLLOW_QUESTION_in_param1727_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_QUESTION_in_param1727( FOLLOW_QUESTION_in_param1727_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1732_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1732( FOLLOW_ID_in_param1732_bits, 1 );

static	ANTLR_BITWORD FOLLOW_param_in_paramList1764_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000802) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_param_in_paramList1764( FOLLOW_param_in_paramList1764_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COMMA_in_paramList1777_bits[]	= { ANTLR_UINT64_LIT(0x0032A00081000120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COMMA_in_paramList1777( FOLLOW_COMMA_in_paramList1777_bits, 1 );

static	ANTLR_BITWORD FOLLOW_param_in_paramList1781_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000802) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_param_in_paramList1781( FOLLOW_param_in_paramList1781_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_parameterList1813_bits[]	= { ANTLR_UINT64_LIT(0x0032A00081000120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_parameterList1813( FOLLOW_LBRACKET_in_parameterList1813_bits, 1 );

static	ANTLR_BITWORD FOLLOW_paramList_in_parameterList1815_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_paramList_in_parameterList1815( FOLLOW_paramList_in_parameterList1815_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_parameterList1817_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_parameterList1817( FOLLOW_RBRACKET_in_parameterList1817_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_parameterList1834_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_parameterList1834( FOLLOW_LBRACKET_in_parameterList1834_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_parameterList1836_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_parameterList1836( FOLLOW_RBRACKET_in_parameterList1836_bits, 1 );

static	ANTLR_BITWORD FOLLOW_73_in_assign_type1872_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_73_in_assign_type1872( FOLLOW_73_in_assign_type1872_bits, 1 );

static	ANTLR_BITWORD FOLLOW_65_in_assign_type1886_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_65_in_assign_type1886( FOLLOW_65_in_assign_type1886_bits, 1 );

static	ANTLR_BITWORD FOLLOW_67_in_assign_type1899_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_67_in_assign_type1899( FOLLOW_67_in_assign_type1899_bits, 1 );

static	ANTLR_BITWORD FOLLOW_63_in_assign_type1912_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_63_in_assign_type1912( FOLLOW_63_in_assign_type1912_bits, 1 );

static	ANTLR_BITWORD FOLLOW_70_in_assign_type1925_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_70_in_assign_type1925( FOLLOW_70_in_assign_type1925_bits, 1 );

static	ANTLR_BITWORD FOLLOW_59_in_assign_type1938_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_59_in_assign_type1938( FOLLOW_59_in_assign_type1938_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_arglist1996_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000802) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arglist1996( FOLLOW_expr_in_arglist1996_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COMMA_in_arglist2029_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98609B2), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COMMA_in_arglist2029( FOLLOW_COMMA_in_arglist2029_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_arglist2073_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000802) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arglist2073( FOLLOW_expr_in_arglist2073_bits, 1 );

static	ANTLR_BITWORD FOLLOW_cond_ex_in_expr2148_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_cond_ex_in_expr2148( FOLLOW_cond_ex_in_expr2148_bits, 1 );

static	ANTLR_BITWORD FOLLOW_or_ex_in_cond_ex2186_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_or_ex_in_cond_ex2186( FOLLOW_or_ex_in_cond_ex2186_bits, 1 );

static	ANTLR_BITWORD FOLLOW_QUESTION_in_cond_ex2209_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_QUESTION_in_cond_ex2209( FOLLOW_QUESTION_in_cond_ex2209_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_cond_ex2213_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_cond_ex2213( FOLLOW_expr_in_cond_ex2213_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COLON_in_cond_ex2215_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COLON_in_cond_ex2215( FOLLOW_COLON_in_cond_ex2215_bits, 2 );

static	ANTLR_BITWORD FOLLOW_cond_ex_in_cond_ex2219_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_cond_ex_in_cond_ex2219( FOLLOW_cond_ex_in_cond_ex2219_bits, 1 );

static	ANTLR_BITWORD FOLLOW_and_ex_in_or_ex2266_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000008000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_and_ex_in_or_ex2266( FOLLOW_and_ex_in_or_ex2266_bits, 2 );

static	ANTLR_BITWORD FOLLOW_79_in_or_ex2283_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_79_in_or_ex2283( FOLLOW_79_in_or_ex2283_bits, 2 );

static	ANTLR_BITWORD FOLLOW_and_ex_in_or_ex2287_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000008000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_and_ex_in_or_ex2287( FOLLOW_and_ex_in_or_ex2287_bits, 2 );

static	ANTLR_BITWORD FOLLOW_bit_or_ex_in_and_ex2330_bits[]	= { ANTLR_UINT64_LIT(0x1000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_bit_or_ex_in_and_ex2330( FOLLOW_bit_or_ex_in_and_ex2330_bits, 1 );

static	ANTLR_BITWORD FOLLOW_60_in_and_ex2347_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_60_in_and_ex2347( FOLLOW_60_in_and_ex2347_bits, 2 );

static	ANTLR_BITWORD FOLLOW_bit_or_ex_in_and_ex2351_bits[]	= { ANTLR_UINT64_LIT(0x1000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_bit_or_ex_in_and_ex2351( FOLLOW_bit_or_ex_in_and_ex2351_bits, 1 );

static	ANTLR_BITWORD FOLLOW_bit_xor_ex_in_bit_or_ex2385_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000004000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_bit_xor_ex_in_bit_or_ex2385( FOLLOW_bit_xor_ex_in_bit_or_ex2385_bits, 2 );

static	ANTLR_BITWORD FOLLOW_78_in_bit_or_ex2402_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_78_in_bit_or_ex2402( FOLLOW_78_in_bit_or_ex2402_bits, 2 );

static	ANTLR_BITWORD FOLLOW_bit_xor_ex_in_bit_or_ex2406_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000004000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_bit_xor_ex_in_bit_or_ex2406( FOLLOW_bit_xor_ex_in_bit_or_ex2406_bits, 2 );

static	ANTLR_BITWORD FOLLOW_bit_and_ex_in_bit_xor_ex2441_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_bit_and_ex_in_bit_xor_ex2441( FOLLOW_bit_and_ex_in_bit_xor_ex2441_bits, 2 );

static	ANTLR_BITWORD FOLLOW_77_in_bit_xor_ex2458_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_77_in_bit_xor_ex2458( FOLLOW_77_in_bit_xor_ex2458_bits, 2 );

static	ANTLR_BITWORD FOLLOW_bit_and_ex_in_bit_xor_ex2462_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_bit_and_ex_in_bit_xor_ex2462( FOLLOW_bit_and_ex_in_bit_xor_ex2462_bits, 2 );

static	ANTLR_BITWORD FOLLOW_eq_ex_in_bit_and_ex2497_bits[]	= { ANTLR_UINT64_LIT(0x2000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_eq_ex_in_bit_and_ex2497( FOLLOW_eq_ex_in_bit_and_ex2497_bits, 1 );

static	ANTLR_BITWORD FOLLOW_61_in_bit_and_ex2514_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_61_in_bit_and_ex2514( FOLLOW_61_in_bit_and_ex2514_bits, 2 );

static	ANTLR_BITWORD FOLLOW_eq_ex_in_bit_and_ex2518_bits[]	= { ANTLR_UINT64_LIT(0x2000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_eq_ex_in_bit_and_ex2518( FOLLOW_eq_ex_in_bit_and_ex2518_bits, 1 );

static	ANTLR_BITWORD FOLLOW_rel_ex_in_eq_ex2556_bits[]	= { ANTLR_UINT64_LIT(0x0200000000000002), ANTLR_UINT64_LIT(0x0000000000000400) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_rel_ex_in_eq_ex2556( FOLLOW_rel_ex_in_eq_ex2556_bits, 2 );

static	ANTLR_BITWORD FOLLOW_74_in_eq_ex2591_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_74_in_eq_ex2591( FOLLOW_74_in_eq_ex2591_bits, 2 );

static	ANTLR_BITWORD FOLLOW_rel_ex_in_eq_ex2595_bits[]	= { ANTLR_UINT64_LIT(0x0200000000000002), ANTLR_UINT64_LIT(0x0000000000000400) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_rel_ex_in_eq_ex2595( FOLLOW_rel_ex_in_eq_ex2595_bits, 2 );

static	ANTLR_BITWORD FOLLOW_57_in_eq_ex2618_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_57_in_eq_ex2618( FOLLOW_57_in_eq_ex2618_bits, 2 );

static	ANTLR_BITWORD FOLLOW_rel_ex_in_eq_ex2622_bits[]	= { ANTLR_UINT64_LIT(0x0200000000000002), ANTLR_UINT64_LIT(0x0000000000000400) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_rel_ex_in_eq_ex2622( FOLLOW_rel_ex_in_eq_ex2622_bits, 2 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2680_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000001980) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2680( FOLLOW_add_ex_in_rel_ex2680_bits, 2 );

static	ANTLR_BITWORD FOLLOW_71_in_rel_ex2716_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_71_in_rel_ex2716( FOLLOW_71_in_rel_ex2716_bits, 2 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2720_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000001980) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2720( FOLLOW_add_ex_in_rel_ex2720_bits, 2 );

static	ANTLR_BITWORD FOLLOW_75_in_rel_ex2744_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_75_in_rel_ex2744( FOLLOW_75_in_rel_ex2744_bits, 2 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2748_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000001980) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2748( FOLLOW_add_ex_in_rel_ex2748_bits, 2 );

static	ANTLR_BITWORD FOLLOW_72_in_rel_ex2772_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_72_in_rel_ex2772( FOLLOW_72_in_rel_ex2772_bits, 2 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2776_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000001980) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2776( FOLLOW_add_ex_in_rel_ex2776_bits, 2 );

static	ANTLR_BITWORD FOLLOW_76_in_rel_ex2800_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_76_in_rel_ex2800( FOLLOW_76_in_rel_ex2800_bits, 2 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2804_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000001980) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2804( FOLLOW_add_ex_in_rel_ex2804_bits, 2 );

static	ANTLR_BITWORD FOLLOW_mult_ex_in_add_ex2865_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000005) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_mult_ex_in_add_ex2865( FOLLOW_mult_ex_in_add_ex2865_bits, 2 );

static	ANTLR_BITWORD FOLLOW_64_in_add_ex2900_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_64_in_add_ex2900( FOLLOW_64_in_add_ex2900_bits, 2 );

static	ANTLR_BITWORD FOLLOW_mult_ex_in_add_ex2904_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000005) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_mult_ex_in_add_ex2904( FOLLOW_mult_ex_in_add_ex2904_bits, 2 );

static	ANTLR_BITWORD FOLLOW_66_in_add_ex2926_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_66_in_add_ex2926( FOLLOW_66_in_add_ex2926_bits, 2 );

static	ANTLR_BITWORD FOLLOW_mult_ex_in_add_ex2930_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000005) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_mult_ex_in_add_ex2930( FOLLOW_mult_ex_in_add_ex2930_bits, 2 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex2989_bits[]	= { ANTLR_UINT64_LIT(0x4400000000000002), ANTLR_UINT64_LIT(0x0000000000000020) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex2989( FOLLOW_unary_ex_in_mult_ex2989_bits, 2 );

static	ANTLR_BITWORD FOLLOW_62_in_mult_ex3028_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_62_in_mult_ex3028( FOLLOW_62_in_mult_ex3028_bits, 2 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex3032_bits[]	= { ANTLR_UINT64_LIT(0x4400000000000002), ANTLR_UINT64_LIT(0x0000000000000020) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex3032( FOLLOW_unary_ex_in_mult_ex3032_bits, 2 );

static	ANTLR_BITWORD FOLLOW_69_in_mult_ex3058_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_69_in_mult_ex3058( FOLLOW_69_in_mult_ex3058_bits, 2 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex3062_bits[]	= { ANTLR_UINT64_LIT(0x4400000000000002), ANTLR_UINT64_LIT(0x0000000000000020) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex3062( FOLLOW_unary_ex_in_mult_ex3062_bits, 2 );

static	ANTLR_BITWORD FOLLOW_58_in_mult_ex3088_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_58_in_mult_ex3088( FOLLOW_58_in_mult_ex3088_bits, 2 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex3092_bits[]	= { ANTLR_UINT64_LIT(0x4400000000000002), ANTLR_UINT64_LIT(0x0000000000000020) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex3092( FOLLOW_unary_ex_in_mult_ex3092_bits, 2 );

static	ANTLR_BITWORD FOLLOW_post_ex_in_unary_ex3144_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_post_ex_in_unary_ex3144( FOLLOW_post_ex_in_unary_ex3144_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DOUBINC_in_unary_ex3157_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBINC_in_unary_ex3157( FOLLOW_DOUBINC_in_unary_ex3157_bits, 2 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_unary_ex3161_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_unary_ex3161( FOLLOW_unary_ex_in_unary_ex3161_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DOUBDEC_in_unary_ex3174_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBDEC_in_unary_ex3174( FOLLOW_DOUBDEC_in_unary_ex3174_bits, 2 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_unary_ex3178_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_unary_ex3178( FOLLOW_unary_ex_in_unary_ex3178_bits, 1 );

static	ANTLR_BITWORD FOLLOW_66_in_unary_ex3191_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_66_in_unary_ex3191( FOLLOW_66_in_unary_ex3191_bits, 2 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_unary_ex3195_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_unary_ex3195( FOLLOW_unary_ex_in_unary_ex3195_bits, 1 );

static	ANTLR_BITWORD FOLLOW_56_in_unary_ex3209_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_56_in_unary_ex3209( FOLLOW_56_in_unary_ex3209_bits, 2 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_unary_ex3213_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_unary_ex3213( FOLLOW_unary_ex_in_unary_ex3213_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_post_ex_proper3251_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_post_ex_proper3251( FOLLOW_LSQBRACKET_in_post_ex_proper3251_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_post_ex_proper3255_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_post_ex_proper3255( FOLLOW_expr_in_post_ex_proper3255_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_post_ex_proper3259_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_post_ex_proper3259( FOLLOW_RSQBRACKET_in_post_ex_proper3259_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_post_ex_proper3274_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_post_ex_proper3274( FOLLOW_LBRACKET_in_post_ex_proper3274_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_post_ex_proper3278_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_post_ex_proper3278( FOLLOW_RBRACKET_in_post_ex_proper3278_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_post_ex_proper3306_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_post_ex_proper3306( FOLLOW_LBRACKET_in_post_ex_proper3306_bits, 2 );

static	ANTLR_BITWORD FOLLOW_arglist_in_post_ex_proper3312_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arglist_in_post_ex_proper3312( FOLLOW_arglist_in_post_ex_proper3312_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_post_ex_proper3316_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_post_ex_proper3316( FOLLOW_RBRACKET_in_post_ex_proper3316_bits, 1 );

static	ANTLR_BITWORD FOLLOW_68_in_post_ex_proper3329_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_68_in_post_ex_proper3329( FOLLOW_68_in_post_ex_proper3329_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_post_ex_proper3333_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_post_ex_proper3333( FOLLOW_ID_in_post_ex_proper3333_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DOUBINC_in_post_ex_proper3360_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBINC_in_post_ex_proper3360( FOLLOW_DOUBINC_in_post_ex_proper3360_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DOUBDEC_in_post_ex_proper3389_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBDEC_in_post_ex_proper3389( FOLLOW_DOUBDEC_in_post_ex_proper3389_bits, 1 );

static	ANTLR_BITWORD FOLLOW_prim_ex_in_post_ex3442_bits[]	= { ANTLR_UINT64_LIT(0x0000000A00060002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_prim_ex_in_post_ex3442( FOLLOW_prim_ex_in_post_ex3442_bits, 2 );

static	ANTLR_BITWORD FOLLOW_post_ex_proper_in_post_ex3461_bits[]	= { ANTLR_UINT64_LIT(0x0000000A00060002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_post_ex_proper_in_post_ex3461( FOLLOW_post_ex_proper_in_post_ex3461_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_assignment_or_expression3492_bits[]	= { ANTLR_UINT64_LIT(0x8800000000000002), ANTLR_UINT64_LIT(0x000000000000024A) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_assignment_or_expression3492( FOLLOW_expr_in_assignment_or_expression3492_bits, 2 );

static	ANTLR_BITWORD FOLLOW_assign_type_in_assignment_or_expression3524_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_assign_type_in_assignment_or_expression3524( FOLLOW_assign_type_in_assignment_or_expression3524_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_assignment_or_expression3528_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_assignment_or_expression3528( FOLLOW_expr_in_assignment_or_expression3528_bits, 1 );

static	ANTLR_BITWORD FOLLOW_INT_in_constant3594_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_INT_in_constant3594( FOLLOW_INT_in_constant3594_bits, 1 );

static	ANTLR_BITWORD FOLLOW_FLOAT_in_constant3612_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_FLOAT_in_constant3612( FOLLOW_FLOAT_in_constant3612_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CHAR_in_constant3628_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CHAR_in_constant3628( FOLLOW_CHAR_in_constant3628_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRING_in_constant3645_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_in_constant3645( FOLLOW_STRING_in_constant3645_bits, 1 );

static	ANTLR_BITWORD FOLLOW_BOOL_in_constant3660_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_BOOL_in_constant3660( FOLLOW_BOOL_in_constant3660_bits, 1 );

static	ANTLR_BITWORD FOLLOW_NULLTOK_in_constant3677_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_NULLTOK_in_constant3677( FOLLOW_NULLTOK_in_constant3677_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_constant3692_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_constant3692( FOLLOW_scalarType_in_constant3692_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACE_in_constant3696_bits[]	= { ANTLR_UINT64_LIT(0x0000400000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_constant3696( FOLLOW_LBRACE_in_constant3696_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRING_in_constant3700_bits[]	= { ANTLR_UINT64_LIT(0x0000010000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_in_constant3700( FOLLOW_STRING_in_constant3700_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACE_in_constant3704_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_constant3704( FOLLOW_RBRACE_in_constant3704_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LENGTH_in_builtin_unary3733_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LENGTH_in_builtin_unary3733( FOLLOW_LENGTH_in_builtin_unary3733_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_builtin_unary3735_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_builtin_unary3735( FOLLOW_LBRACKET_in_builtin_unary3735_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_builtin_unary3737_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_builtin_unary3737( FOLLOW_expr_in_builtin_unary3737_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_builtin_unary3739_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_builtin_unary3739( FOLLOW_RBRACKET_in_builtin_unary3739_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_non_array_prim_ex3768_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_non_array_prim_ex3768( FOLLOW_ID_in_non_array_prim_ex3768_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_non_array_prim_ex3782_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_non_array_prim_ex3782( FOLLOW_LBRACKET_in_non_array_prim_ex3782_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_non_array_prim_ex3786_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_non_array_prim_ex3786( FOLLOW_expr_in_non_array_prim_ex3786_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_non_array_prim_ex3790_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_non_array_prim_ex3790( FOLLOW_RBRACKET_in_non_array_prim_ex3790_bits, 1 );

static	ANTLR_BITWORD FOLLOW_constant_in_non_array_prim_ex3804_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_constant_in_non_array_prim_ex3804( FOLLOW_constant_in_non_array_prim_ex3804_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_non_array_prim_ex3819_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_non_array_prim_ex3819( FOLLOW_scalarType_in_non_array_prim_ex3819_bits, 1 );

static	ANTLR_BITWORD FOLLOW_cast_in_non_array_prim_ex3825_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_cast_in_non_array_prim_ex3825( FOLLOW_cast_in_non_array_prim_ex3825_bits, 1 );

static	ANTLR_BITWORD FOLLOW_objectType_in_non_array_prim_ex3840_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_objectType_in_non_array_prim_ex3840( FOLLOW_objectType_in_non_array_prim_ex3840_bits, 1 );

static	ANTLR_BITWORD FOLLOW_structInit_in_non_array_prim_ex3844_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_structInit_in_non_array_prim_ex3844( FOLLOW_structInit_in_non_array_prim_ex3844_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SHARED_REF_in_non_array_prim_ex3856_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SHARED_REF_in_non_array_prim_ex3856( FOLLOW_SHARED_REF_in_non_array_prim_ex3856_bits, 1 );

static	ANTLR_BITWORD FOLLOW_objectType_in_non_array_prim_ex3860_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_objectType_in_non_array_prim_ex3860( FOLLOW_objectType_in_non_array_prim_ex3860_bits, 1 );

static	ANTLR_BITWORD FOLLOW_structInit_in_non_array_prim_ex3864_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_structInit_in_non_array_prim_ex3864( FOLLOW_structInit_in_non_array_prim_ex3864_bits, 1 );

static	ANTLR_BITWORD FOLLOW_builtin_unary_in_non_array_prim_ex3878_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_builtin_unary_in_non_array_prim_ex3878( FOLLOW_builtin_unary_in_non_array_prim_ex3878_bits, 1 );

static	ANTLR_BITWORD FOLLOW_non_array_prim_ex_in_prim_ex3907_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_non_array_prim_ex_in_prim_ex3907( FOLLOW_non_array_prim_ex_in_prim_ex3907_bits, 1 );

static	ANTLR_BITWORD FOLLOW_nonArrayType_in_prim_ex3921_bits[]	= { ANTLR_UINT64_LIT(0x0000000800008000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_nonArrayType_in_prim_ex3921( FOLLOW_nonArrayType_in_prim_ex3921_bits, 1 );

static	ANTLR_BITWORD FOLLOW_arrayInit_in_prim_ex3925_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arrayInit_in_prim_ex3925( FOLLOW_arrayInit_in_prim_ex3925_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SHARED_REF_in_prim_ex3937_bits[]	= { ANTLR_UINT64_LIT(0x0012800081000120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SHARED_REF_in_prim_ex3937( FOLLOW_SHARED_REF_in_prim_ex3937_bits, 1 );

static	ANTLR_BITWORD FOLLOW_nonArrayType_in_prim_ex3941_bits[]	= { ANTLR_UINT64_LIT(0x0000000800008000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_nonArrayType_in_prim_ex3941( FOLLOW_nonArrayType_in_prim_ex3941_bits, 1 );

static	ANTLR_BITWORD FOLLOW_arrayInit_in_prim_ex3945_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arrayInit_in_prim_ex3945( FOLLOW_arrayInit_in_prim_ex3945_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_cast3974_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_cast3974( FOLLOW_LBRACKET_in_cast3974_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_cast3978_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_cast3978( FOLLOW_expr_in_cast3978_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_cast3982_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_cast3982( FOLLOW_RBRACKET_in_cast3982_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_structInit4011_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_structInit4011( FOLLOW_LBRACKET_in_structInit4011_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_structInit4015_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_structInit4015( FOLLOW_RBRACKET_in_structInit4015_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_arrayInit4052_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_arrayInit4052( FOLLOW_LSQBRACKET_in_arrayInit4052_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_arrayInit4056_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arrayInit4056( FOLLOW_expr_in_arrayInit4056_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_arrayInit4058_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_arrayInit4058( FOLLOW_RSQBRACKET_in_arrayInit4058_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DLSQBRACKET_in_arrayInit4075_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DLSQBRACKET_in_arrayInit4075( FOLLOW_DLSQBRACKET_in_arrayInit4075_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_arrayInit4079_bits[]	= { ANTLR_UINT64_LIT(0x0000000000080000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arrayInit4079( FOLLOW_expr_in_arrayInit4079_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DRSQBRACKET_in_arrayInit4081_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DRSQBRACKET_in_arrayInit4081( FOLLOW_DRSQBRACKET_in_arrayInit4081_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_arrayInit4096_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_arrayInit4096( FOLLOW_LBRACKET_in_arrayInit4096_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_arrayInit4100_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arrayInit4100( FOLLOW_expr_in_arrayInit4100_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_arrayInit4104_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_arrayInit4104( FOLLOW_RBRACKET_in_arrayInit4104_bits, 1 );

static	ANTLR_BITWORD FOLLOW_param_in_declaration4138_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_param_in_declaration4138( FOLLOW_param_in_declaration4138_bits, 2 );

static	ANTLR_BITWORD FOLLOW_73_in_declaration4173_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_73_in_declaration4173( FOLLOW_73_in_declaration4173_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_declaration4180_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_declaration4180( FOLLOW_expr_in_declaration4180_bits, 1 );

static	ANTLR_BITWORD FOLLOW_68_in_inherited_declaration4230_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_68_in_inherited_declaration4230( FOLLOW_68_in_inherited_declaration4230_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_inherited_declaration4234_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_inherited_declaration4234( FOLLOW_ID_in_inherited_declaration4234_bits, 2 );

static	ANTLR_BITWORD FOLLOW_73_in_inherited_declaration4247_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98641B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_73_in_inherited_declaration4247( FOLLOW_73_in_inherited_declaration4247_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_inherited_declaration4283_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_inherited_declaration4283( FOLLOW_expr_in_inherited_declaration4283_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DEFAULT_in_inherited_declaration4309_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DEFAULT_in_inherited_declaration4309( FOLLOW_DEFAULT_in_inherited_declaration4309_bits, 1 );

static	ANTLR_BITWORD FOLLOW_declaration_in_instructionScalar4365_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_declaration_in_instructionScalar4365( FOLLOW_declaration_in_instructionScalar4365_bits, 1 );

static	ANTLR_BITWORD FOLLOW_assignment_or_expression_in_instructionScalar4378_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_assignment_or_expression_in_instructionScalar4378( FOLLOW_assignment_or_expression_in_instructionScalar4378_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CONTINUE_in_continueInst4408_bits[]	= { ANTLR_UINT64_LIT(0x0000100000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CONTINUE_in_continueInst4408( FOLLOW_CONTINUE_in_continueInst4408_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_continueInst4412_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_continueInst4412( FOLLOW_SEMICOLON_in_continueInst4412_bits, 1 );

static	ANTLR_BITWORD FOLLOW_BREAK_in_breakInst4438_bits[]	= { ANTLR_UINT64_LIT(0x0000100000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_BREAK_in_breakInst4438( FOLLOW_BREAK_in_breakInst4438_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_breakInst4442_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_breakInst4442( FOLLOW_SEMICOLON_in_breakInst4442_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RETURN_in_returnInst4469_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RETURN_in_returnInst4469( FOLLOW_RETURN_in_returnInst4469_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_returnInst4471_bits[]	= { ANTLR_UINT64_LIT(0x0000100000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_returnInst4471( FOLLOW_expr_in_returnInst4471_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_returnInst4475_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_returnInst4475( FOLLOW_SEMICOLON_in_returnInst4475_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RETURN_in_returnInst4489_bits[]	= { ANTLR_UINT64_LIT(0x0000100000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RETURN_in_returnInst4489( FOLLOW_RETURN_in_returnInst4489_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_returnInst4493_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_returnInst4493( FOLLOW_SEMICOLON_in_returnInst4493_bits, 1 );

static	ANTLR_BITWORD FOLLOW_WHILE_in_whileInst4526_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_WHILE_in_whileInst4526( FOLLOW_WHILE_in_whileInst4526_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_whileInst4528_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_whileInst4528( FOLLOW_LBRACKET_in_whileInst4528_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_whileInst4530_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_whileInst4530( FOLLOW_expr_in_whileInst4530_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_whileInst4532_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_whileInst4532( FOLLOW_RBRACKET_in_whileInst4532_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_whileInst4534_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_whileInst4534( FOLLOW_instruction_list_in_whileInst4534_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DO_in_doInst4570_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DO_in_doInst4570( FOLLOW_DO_in_doInst4570_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_doInst4572_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_doInst4572( FOLLOW_instruction_list_in_doInst4572_bits, 1 );

static	ANTLR_BITWORD FOLLOW_WHILE_in_doInst4574_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_WHILE_in_doInst4574( FOLLOW_WHILE_in_doInst4574_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_doInst4576_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_doInst4576( FOLLOW_LBRACKET_in_doInst4576_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_doInst4578_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_doInst4578( FOLLOW_expr_in_doInst4578_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_doInst4580_bits[]	= { ANTLR_UINT64_LIT(0x0000100000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_doInst4580( FOLLOW_RBRACKET_in_doInst4580_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_doInst4582_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_doInst4582( FOLLOW_SEMICOLON_in_doInst4582_bits, 1 );

static	ANTLR_BITWORD FOLLOW_FOR_in_forInst4614_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_FOR_in_forInst4614( FOLLOW_FOR_in_forInst4614_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_forInst4616_bits[]	= { ANTLR_UINT64_LIT(0x0132F016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_forInst4616( FOLLOW_LBRACKET_in_forInst4616_bits, 2 );

static	ANTLR_BITWORD FOLLOW_instructionScalar_in_forInst4644_bits[]	= { ANTLR_UINT64_LIT(0x0000100000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instructionScalar_in_forInst4644( FOLLOW_instructionScalar_in_forInst4644_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_forInst4650_bits[]	= { ANTLR_UINT64_LIT(0x0112F016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_forInst4650( FOLLOW_SEMICOLON_in_forInst4650_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_forInst4675_bits[]	= { ANTLR_UINT64_LIT(0x0000100000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_forInst4675( FOLLOW_expr_in_forInst4675_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_forInst4689_bits[]	= { ANTLR_UINT64_LIT(0x0132E216C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_forInst4689( FOLLOW_SEMICOLON_in_forInst4689_bits, 2 );

static	ANTLR_BITWORD FOLLOW_instructionScalar_in_forInst4714_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instructionScalar_in_forInst4714( FOLLOW_instructionScalar_in_forInst4714_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_forInst4720_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_forInst4720( FOLLOW_RBRACKET_in_forInst4720_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_forInst4745_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_forInst4745( FOLLOW_instruction_list_in_forInst4745_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ELSE_in_elsemiddle4793_bits[]	= { ANTLR_UINT64_LIT(0x0000000010000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ELSE_in_elsemiddle4793( FOLLOW_ELSE_in_elsemiddle4793_bits, 1 );

static	ANTLR_BITWORD FOLLOW_IF_in_elsemiddle4795_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_IF_in_elsemiddle4795( FOLLOW_IF_in_elsemiddle4795_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_elsemiddle4797_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_elsemiddle4797( FOLLOW_LBRACKET_in_elsemiddle4797_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_elsemiddle4799_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_elsemiddle4799( FOLLOW_expr_in_elsemiddle4799_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_elsemiddle4801_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_elsemiddle4801( FOLLOW_RBRACKET_in_elsemiddle4801_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_elsemiddle4803_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_elsemiddle4803( FOLLOW_instruction_list_in_elsemiddle4803_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ELSE_in_endif4836_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ELSE_in_endif4836( FOLLOW_ELSE_in_endif4836_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_endif4838_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_endif4838( FOLLOW_instruction_list_in_endif4838_bits, 1 );

static	ANTLR_BITWORD FOLLOW_IF_in_ifInst4868_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_IF_in_ifInst4868( FOLLOW_IF_in_ifInst4868_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_ifInst4870_bits[]	= { ANTLR_UINT64_LIT(0x0112E016C98601B0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_ifInst4870( FOLLOW_LBRACKET_in_ifInst4870_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_ifInst4872_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_ifInst4872( FOLLOW_expr_in_ifInst4872_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_ifInst4874_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_ifInst4874( FOLLOW_RBRACKET_in_ifInst4874_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_ifInst4876_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_ifInst4876( FOLLOW_instruction_list_in_ifInst4876_bits, 1 );

static	ANTLR_BITWORD FOLLOW_elsemiddle_in_ifInst4893_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_elsemiddle_in_ifInst4893( FOLLOW_elsemiddle_in_ifInst4893_bits, 1 );

static	ANTLR_BITWORD FOLLOW_endif_in_ifInst4913_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_endif_in_ifInst4913( FOLLOW_endif_in_ifInst4913_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ifInst_in_instruction4947_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ifInst_in_instruction4947( FOLLOW_ifInst_in_instruction4947_bits, 1 );

static	ANTLR_BITWORD FOLLOW_whileInst_in_instruction4968_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_whileInst_in_instruction4968( FOLLOW_whileInst_in_instruction4968_bits, 1 );

static	ANTLR_BITWORD FOLLOW_doInst_in_instruction4985_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_doInst_in_instruction4985( FOLLOW_doInst_in_instruction4985_bits, 1 );

static	ANTLR_BITWORD FOLLOW_forInst_in_instruction5005_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_forInst_in_instruction5005( FOLLOW_forInst_in_instruction5005_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instructionScalar_in_instruction5025_bits[]	= { ANTLR_UINT64_LIT(0x0000100000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instructionScalar_in_instruction5025( FOLLOW_instructionScalar_in_instruction5025_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_instruction5027_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_instruction5027( FOLLOW_SEMICOLON_in_instruction5027_bits, 1 );

static	ANTLR_BITWORD FOLLOW_breakInst_in_instruction5040_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_breakInst_in_instruction5040( FOLLOW_breakInst_in_instruction5040_bits, 1 );

static	ANTLR_BITWORD FOLLOW_continueInst_in_instruction5053_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_continueInst_in_instruction5053( FOLLOW_continueInst_in_instruction5053_bits, 1 );

static	ANTLR_BITWORD FOLLOW_returnInst_in_instruction5066_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_returnInst_in_instruction5066( FOLLOW_returnInst_in_instruction5066_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_instruction5079_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_instruction5079( FOLLOW_instruction_list_in_instruction5079_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACE_in_instruction_list5111_bits[]	= { ANTLR_UINT64_LIT(0x0172E517DB8721F0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_instruction_list5111( FOLLOW_LBRACE_in_instruction_list5111_bits, 2 );

static	ANTLR_BITWORD FOLLOW_instruction_in_instruction_list5128_bits[]	= { ANTLR_UINT64_LIT(0x0172E517DB8721F0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_in_instruction_list5128( FOLLOW_instruction_in_instruction_list5128_bits, 2 );

static	ANTLR_BITWORD FOLLOW_RBRACE_in_instruction_list5145_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_instruction_list5145( FOLLOW_RBRACE_in_instruction_list5145_bits, 1 );

static	ANTLR_BITWORD FOLLOW_param_in_function5175_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_param_in_function5175( FOLLOW_param_in_function5175_bits, 1 );

static	ANTLR_BITWORD FOLLOW_parameterList_in_function5177_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_parameterList_in_function5177( FOLLOW_parameterList_in_function5177_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_function5179_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_function5179( FOLLOW_instruction_list_in_function5179_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRUCT_in_structDecl5209_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRUCT_in_structDecl5209( FOLLOW_STRUCT_in_structDecl5209_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_structDecl5211_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_structDecl5211( FOLLOW_TYPE_in_structDecl5211_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACE_in_structDecl5227_bits[]	= { ANTLR_UINT64_LIT(0x0032A10081000120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_structDecl5227( FOLLOW_LBRACE_in_structDecl5227_bits, 1 );

static	ANTLR_BITWORD FOLLOW_declaration_in_structDecl5232_bits[]	= { ANTLR_UINT64_LIT(0x0000100000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_declaration_in_structDecl5232( FOLLOW_declaration_in_structDecl5232_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_structDecl5236_bits[]	= { ANTLR_UINT64_LIT(0x0032A10081000120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_structDecl5236( FOLLOW_SEMICOLON_in_structDecl5236_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACE_in_structDecl5241_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_structDecl5241( FOLLOW_RBRACE_in_structDecl5241_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CLASS_in_classDecl5294_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CLASS_in_classDecl5294( FOLLOW_CLASS_in_classDecl5294_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_classDecl5298_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_classDecl5298( FOLLOW_TYPE_in_classDecl5298_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CLASS_in_classDecl5318_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CLASS_in_classDecl5318( FOLLOW_CLASS_in_classDecl5318_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_classDecl5322_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_classDecl5322( FOLLOW_TYPE_in_classDecl5322_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COLON_in_classDecl5324_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COLON_in_classDecl5324( FOLLOW_COLON_in_classDecl5324_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_classDecl5328_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_classDecl5328( FOLLOW_TYPE_in_classDecl5328_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACE_in_classDecl5355_bits[]	= { ANTLR_UINT64_LIT(0x003AA14081000120), ANTLR_UINT64_LIT(0x0000000000000010) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_classDecl5355( FOLLOW_LBRACE_in_classDecl5355_bits, 2 );

static	ANTLR_BITWORD FOLLOW_declaration_in_classDecl5398_bits[]	= { ANTLR_UINT64_LIT(0x0000100000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_declaration_in_classDecl5398( FOLLOW_declaration_in_classDecl5398_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_classDecl5402_bits[]	= { ANTLR_UINT64_LIT(0x003AA14081000120), ANTLR_UINT64_LIT(0x0000000000000010) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_classDecl5402( FOLLOW_SEMICOLON_in_classDecl5402_bits, 2 );

static	ANTLR_BITWORD FOLLOW_inherited_declaration_in_classDecl5428_bits[]	= { ANTLR_UINT64_LIT(0x0000100000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_inherited_declaration_in_classDecl5428( FOLLOW_inherited_declaration_in_classDecl5428_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_classDecl5432_bits[]	= { ANTLR_UINT64_LIT(0x003AA14081000120), ANTLR_UINT64_LIT(0x0000000000000010) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_classDecl5432( FOLLOW_SEMICOLON_in_classDecl5432_bits, 2 );

static	ANTLR_BITWORD FOLLOW_function_in_classDecl5458_bits[]	= { ANTLR_UINT64_LIT(0x003AA14081000120), ANTLR_UINT64_LIT(0x0000000000000010) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl5458( FOLLOW_function_in_classDecl5458_bits, 2 );

static	ANTLR_BITWORD FOLLOW_VIRTUAL_in_classDecl5487_bits[]	= { ANTLR_UINT64_LIT(0x0032A00081000120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_VIRTUAL_in_classDecl5487( FOLLOW_VIRTUAL_in_classDecl5487_bits, 1 );

static	ANTLR_BITWORD FOLLOW_function_in_classDecl5491_bits[]	= { ANTLR_UINT64_LIT(0x003AA14081000120), ANTLR_UINT64_LIT(0x0000000000000010) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl5491( FOLLOW_function_in_classDecl5491_bits, 2 );

static	ANTLR_BITWORD FOLLOW_OVERRIDE_in_classDecl5517_bits[]	= { ANTLR_UINT64_LIT(0x0032A00081000120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_OVERRIDE_in_classDecl5517( FOLLOW_OVERRIDE_in_classDecl5517_bits, 1 );

static	ANTLR_BITWORD FOLLOW_function_in_classDecl5521_bits[]	= { ANTLR_UINT64_LIT(0x003AA14081000120), ANTLR_UINT64_LIT(0x0000000000000010) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl5521( FOLLOW_function_in_classDecl5521_bits, 2 );

static	ANTLR_BITWORD FOLLOW_RBRACE_in_classDecl5557_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_classDecl5557( FOLLOW_RBRACE_in_classDecl5557_bits, 1 );

static	ANTLR_BITWORD FOLLOW_INCLUDE_in_inc5587_bits[]	= { ANTLR_UINT64_LIT(0x0000400000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_INCLUDE_in_inc5587( FOLLOW_INCLUDE_in_inc5587_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRING_in_inc5589_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_in_inc5589( FOLLOW_STRING_in_inc5589_bits, 1 );

static	ANTLR_BITWORD FOLLOW_function_in_program5635_bits[]	= { ANTLR_UINT64_LIT(0x0033A000A1000322) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_program5635( FOLLOW_function_in_program5635_bits, 1 );

static	ANTLR_BITWORD FOLLOW_structDecl_in_program5657_bits[]	= { ANTLR_UINT64_LIT(0x0033A000A1000322) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_structDecl_in_program5657( FOLLOW_structDecl_in_program5657_bits, 1 );

static	ANTLR_BITWORD FOLLOW_classDecl_in_program5677_bits[]	= { ANTLR_UINT64_LIT(0x0033A000A1000322) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_classDecl_in_program5677( FOLLOW_classDecl_in_program5677_bits, 1 );

static	ANTLR_BITWORD FOLLOW_inc_in_program5698_bits[]	= { ANTLR_UINT64_LIT(0x0033A000A1000322) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_inc_in_program5698( FOLLOW_inc_in_program5698_bits, 1 );









scripting::type*
WNScriptASTParser::objectType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    const ImplTraits::CommonTokenType* TYPE1 = NULL;






        node = nullptr;



    {
        {
            TYPE1 =  this->matchToken(TYPE, &FOLLOW_TYPE_in_objectType1209);
            if  (this->hasException())
            {
                goto ruleobjectTypeEx;
            }


            {
                 node = m_allocator->construct<scripting::type>(m_allocator, (TYPE1->getText()).c_str()); SET_LOCATION(node, TYPE1);
            }


        }

    }
    goto ruleobjectTypeEx;
    ruleobjectTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::type*
WNScriptASTParser::scalarType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    const ImplTraits::CommonTokenType* VOID_TYPE2 = NULL;
    const ImplTraits::CommonTokenType* INT_TYPE3 = NULL;
    const ImplTraits::CommonTokenType* FLOAT_TYPE4 = NULL;
    const ImplTraits::CommonTokenType* CHAR_TYPE5 = NULL;
    const ImplTraits::CommonTokenType* BOOL_TYPE6 = NULL;
    const ImplTraits::CommonTokenType* STRING_TYPE7 = NULL;






        node = nullptr;



    {
        {

            ANTLR_UINT32 alt1;

            alt1=6;

            switch ( this->LA(1) )
            {
            case VOID_TYPE:
            	{
            		alt1=1;
            	}
                break;
            case INT_TYPE:
            	{
            		alt1=2;
            	}
                break;
            case FLOAT_TYPE:
            	{
            		alt1=3;
            	}
                break;
            case CHAR_TYPE:
            	{
            		alt1=4;
            	}
                break;
            case BOOL_TYPE:
            	{
            		alt1=5;
            	}
                break;
            case STRING_TYPE:
            	{
            		alt1=6;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 1 );
                ex->set_state( 0 );


                goto rulescalarTypeEx;

            }

            switch (alt1)
            {
        	case 1:
        	    {
        	        VOID_TYPE2 =  this->matchToken(VOID_TYPE, &FOLLOW_VOID_TYPE_in_scalarType1241);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::void_type); SET_LOCATION(node, VOID_TYPE2);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        INT_TYPE3 =  this->matchToken(INT_TYPE, &FOLLOW_INT_TYPE_in_scalarType1253);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::int_type); SET_LOCATION(node, INT_TYPE3);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        FLOAT_TYPE4 =  this->matchToken(FLOAT_TYPE, &FOLLOW_FLOAT_TYPE_in_scalarType1265);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::float_type); SET_LOCATION(node, FLOAT_TYPE4);
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        CHAR_TYPE5 =  this->matchToken(CHAR_TYPE, &FOLLOW_CHAR_TYPE_in_scalarType1277);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::char_type); SET_LOCATION(node, CHAR_TYPE5);
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        BOOL_TYPE6 =  this->matchToken(BOOL_TYPE, &FOLLOW_BOOL_TYPE_in_scalarType1289);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::bool_type); SET_LOCATION(node, BOOL_TYPE6);
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	        STRING_TYPE7 =  this->matchToken(STRING_TYPE, &FOLLOW_STRING_TYPE_in_scalarType1301);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::string_type); SET_LOCATION(node, STRING_TYPE7);
        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulescalarTypeEx;
    rulescalarTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::type*
WNScriptASTParser::arrayType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    const ImplTraits::CommonTokenType* LSQBRACKET9 = NULL;
    const ImplTraits::CommonTokenType* RSQBRACKET11 = NULL;
    const ImplTraits::CommonTokenType* DLSQBRACKET12 = NULL;
    const ImplTraits::CommonTokenType* DRSQBRACKET13 = NULL;
    scripting::type* a;
    scripting::type* b;
    scripting::type* scalarType8;
    scripting::constant_expression* constant10;





        node = nullptr;
        scripting::reference_type rt = scripting::reference_type::raw;



    {
        {
            {
                int alt2=3;
                switch ( this->LA(1) )
                {
                case BOOL_TYPE:
                case CHAR_TYPE:
                case FLOAT_TYPE:
                case INT_TYPE:
                case STRING_TYPE:
                case VOID_TYPE:
                	{
                		alt2=1;
                	}
                    break;
                case TYPE:
                	{
                		alt2=2;
                	}
                    break;
                case SHARED_REF:
                	{
                		alt2=3;
                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 2 );
                    ex->set_state( 0 );


                    goto rulearrayTypeEx;

                }

                switch (alt2)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_scalarType_in_arrayType1338);
            	        scalarType8=scalarType();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulearrayTypeEx;
            	        }


            	        {
            	             node = scalarType8
            	            ; SET_LOCATION_FROM_NODE(node, scalarType8
            	            );
            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        this->followPush(FOLLOW_objectType_in_arrayType1355);
            	        a=objectType();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulearrayTypeEx;
            	        }


            	        {
            	             node = a
            	            ; SET_LOCATION_FROM_NODE(node, a
            	            );
            	                        rt = scripting::reference_type::raw;
            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	         this->matchToken(SHARED_REF, &FOLLOW_SHARED_REF_in_arrayType1369);
            	        if  (this->hasException())
            	        {
            	            goto rulearrayTypeEx;
            	        }


            	        this->followPush(FOLLOW_objectType_in_arrayType1373);
            	        b=objectType();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulearrayTypeEx;
            	        }


            	        {
            	             node = b
            	            ; SET_LOCATION_FROM_NODE(node, b
            	            );
            	                        rt = scripting::reference_type::shared;
            	        }


            	    }
            	    break;

                }
            }

            {
                int alt4=2;
                switch ( this->LA(1) )
                {
                case LSQBRACKET:
                	{
                		alt4=1;
                	}
                    break;
                case DLSQBRACKET:
                	{
                		alt4=2;
                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 4 );
                    ex->set_state( 0 );


                    goto rulearrayTypeEx;

                }

                switch (alt4)
                {
            	case 1:
            	    {
            	        {
            	            {
            	                LSQBRACKET9 =  this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_arrayType1401);
            	                if  (this->hasException())
            	                {
            	                    goto rulearrayTypeEx;
            	                }


            	                {
            	                     node->set_reference_type(rt); node = m_allocator->construct<scripting::array_type>(m_allocator, node); SET_LOCATION(node, LSQBRACKET9);
            	                }


            	            }


            	            {
            	                int alt3=2;
            	                switch ( this->LA(1) )
            	                {
            	                    case BOOL:
            	                    case BOOL_TYPE:
            	                    case CHAR:
            	                    case CHAR_TYPE:
            	                    case FLOAT:
            	                    case FLOAT_TYPE:
            	                    case INT:
            	                    case INT_TYPE:
            	                    case NULLTOK:
            	                    case STRING:
            	                    case STRING_TYPE:
            	                    case VOID_TYPE:
            	                    	{
            	                    		alt3=1;
            	                    	}
            	                        break;
            	                }

            	                switch (alt3)
            	                {
            	            	case 1:
            	            	    {
            	            	        this->followPush(FOLLOW_constant_in_arrayType1414);
            	            	        constant10=constant();

            	            	        this->followPop();
            	            	        if  (this->hasException())
            	            	        {
            	            	            goto rulearrayTypeEx;
            	            	        }


            	            	        {
            	            	             scripting::cast_to<scripting::array_type>(node)->set_constant(constant10
            	            	            );
            	            	        }


            	            	    }
            	            	    break;

            	                }
            	            }

            	            {
            	                RSQBRACKET11 =  this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_arrayType1436);
            	                if  (this->hasException())
            	                {
            	                    goto rulearrayTypeEx;
            	                }


            	                {
            	                     SET_END_LOCATION(node, RSQBRACKET11);
            	                }


            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	            DLSQBRACKET12 =  this->matchToken(DLSQBRACKET, &FOLLOW_DLSQBRACKET_in_arrayType1466);
            	            if  (this->hasException())
            	            {
            	                goto rulearrayTypeEx;
            	            }


            	            DRSQBRACKET13 =  this->matchToken(DRSQBRACKET, &FOLLOW_DRSQBRACKET_in_arrayType1468);
            	            if  (this->hasException())
            	            {
            	                goto rulearrayTypeEx;
            	            }


            	            {
            	                 node->set_reference_type(rt); node = m_allocator->construct<scripting::runtime_array_type>(m_allocator, node); SET_LOCATION(node, DLSQBRACKET12); SET_END_LOCATION(node, DRSQBRACKET13);
            	            }


            	        }


            	    }
            	    break;

                }
            }

        }

    }
    goto rulearrayTypeEx;
    rulearrayTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::type*
WNScriptASTParser::compoundType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    scripting::type* objectType14;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_objectType_in_compoundType1506);
            objectType14=objectType();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecompoundTypeEx;
            }


            {
                 node = objectType14
                ;
            }


        }

    }
    goto rulecompoundTypeEx;
    rulecompoundTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::type*
WNScriptASTParser::nonArrayType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    scripting::type* scalarType15;
    scripting::type* objectType16;





      node = nullptr;



    {
        {

            ANTLR_UINT32 alt5;

            alt5=2;

            switch ( this->LA(1) )
            {
            case BOOL_TYPE:
            case CHAR_TYPE:
            case FLOAT_TYPE:
            case INT_TYPE:
            case STRING_TYPE:
            case VOID_TYPE:
            	{
            		alt5=1;
            	}
                break;
            case TYPE:
            	{
            		alt5=2;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 5 );
                ex->set_state( 0 );


                goto rulenonArrayTypeEx;

            }

            switch (alt5)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_nonArrayType1533);
        	        scalarType15=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenonArrayTypeEx;
        	        }


        	        {
        	             node = scalarType15
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_objectType_in_nonArrayType1543);
        	        objectType16=objectType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenonArrayTypeEx;
        	        }


        	        {
        	             node = objectType16
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulenonArrayTypeEx;
    rulenonArrayTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::type*
WNScriptASTParser::type()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    scripting::type* compoundType17;
    scripting::type* arrayType18;
    scripting::type* scalarType19;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt6;

            alt6=3;

            switch ( this->LA(1) )
            {
            case TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case EOF:
            			{
            				alt6=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt6=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 6 );
            		    ex->set_state( 1 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case VOID_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt6=2;
            			}
            		    break;
            		case EOF:
            			{
            				alt6=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 6 );
            		    ex->set_state( 2 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case INT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt6=2;
            			}
            		    break;
            		case EOF:
            			{
            				alt6=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 6 );
            		    ex->set_state( 3 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case FLOAT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt6=2;
            			}
            		    break;
            		case EOF:
            			{
            				alt6=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 6 );
            		    ex->set_state( 4 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case CHAR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt6=2;
            			}
            		    break;
            		case EOF:
            			{
            				alt6=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 6 );
            		    ex->set_state( 5 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case BOOL_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt6=2;
            			}
            		    break;
            		case EOF:
            			{
            				alt6=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 6 );
            		    ex->set_state( 6 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case STRING_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt6=2;
            			}
            		    break;
            		case EOF:
            			{
            				alt6=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 6 );
            		    ex->set_state( 7 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case SHARED_REF:
            	{
            		alt6=2;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 6 );
                ex->set_state( 0 );


                goto ruletypeEx;

            }

            switch (alt6)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_compoundType_in_type1573);
        	        compoundType17=compoundType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruletypeEx;
        	        }


        	        {
        	             node = compoundType17
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_arrayType_in_type1583);
        	        arrayType18=arrayType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruletypeEx;
        	        }


        	        {
        	             node = arrayType18
        	            ;
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_type1593);
        	        scalarType19=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruletypeEx;
        	        }


        	        {
        	             node = scalarType19
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruletypeEx;
    ruletypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::parameter*
WNScriptASTParser::param()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::parameter* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* aa = NULL;
    const ImplTraits::CommonTokenType* dd = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    const ImplTraits::CommonTokenType* e = NULL;
    const ImplTraits::CommonTokenType* g = NULL;
    const ImplTraits::CommonTokenType* SHARED_REF21 = NULL;
    const ImplTraits::CommonTokenType* WEAK_REF22 = NULL;
    scripting::type* bb;
    scripting::type* cc;
    scripting::type* b;
    scripting::type* d;
    scripting::type* f;
    scripting::type* scalarType20;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt7;

            alt7=6;

            switch ( this->LA(1) )
            {
            case VOID_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt7=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt7=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 1 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case INT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt7=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt7=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 2 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case FLOAT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt7=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt7=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 3 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case CHAR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt7=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt7=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 4 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case BOOL_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt7=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt7=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 5 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case STRING_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt7=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt7=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 6 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt7=2;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt7=3;
            			}
            		    break;
            		case QUESTION:
            			{
            				alt7=6;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 7 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case SHARED_REF:
            	{
            		switch ( this->LA(2) )
            		{
            		case TYPE:
            			{
            				switch ( this->LA(3) )
            				{
            				case DLSQBRACKET:
            				case LSQBRACKET:
            					{
            						alt7=3;
            					}
            				    break;
            				case ID:
            					{
            						alt7=4;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 7 );
            				    ex->set_state( 14 );


            				    goto ruleparamEx;

            				}

            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 8 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case WEAK_REF:
            	{
            		alt7=5;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 7 );
                ex->set_state( 0 );


                goto ruleparamEx;

            }

            switch (alt7)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_param1625);
        	        scalarType20=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        a =  this->matchToken(ID, &FOLLOW_ID_in_param1629);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                        node = m_allocator->construct<scripting::parameter>(m_allocator, scalarType20
        	            , (a->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            scalarType20
        	            ); SET_END_LOCATION(node, a);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_compoundType_in_param1644);
        	        bb=compoundType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        aa =  this->matchToken(ID, &FOLLOW_ID_in_param1648);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                        bb
        	            ->set_reference_type(scripting::reference_type::unique);
        	                        node = m_allocator->construct<scripting::parameter>(m_allocator, bb
        	            , (aa->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            bb
        	            ); SET_END_LOCATION(node, aa);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        this->followPush(FOLLOW_arrayType_in_param1663);
        	        cc=arrayType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        dd =  this->matchToken(ID, &FOLLOW_ID_in_param1667);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                        cc
        	            ->set_reference_type(scripting::reference_type::unique);
        	                        node = m_allocator->construct<scripting::parameter>(m_allocator, cc
        	            , (dd->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            cc
        	            ); SET_END_LOCATION(node, dd);
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        SHARED_REF21 =  this->matchToken(SHARED_REF, &FOLLOW_SHARED_REF_in_param1680);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        this->followPush(FOLLOW_compoundType_in_param1684);
        	        b=compoundType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        c =  this->matchToken(ID, &FOLLOW_ID_in_param1688);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                       b
        	            ->set_reference_type(scripting::reference_type::shared);
        	                       node = m_allocator->construct<scripting::parameter>(m_allocator, b
        	            , (c->getText()).c_str()); SET_LOCATION(node, SHARED_REF21); SET_END_LOCATION(node, c);

        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        WEAK_REF22 =  this->matchToken(WEAK_REF, &FOLLOW_WEAK_REF_in_param1701);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        this->followPush(FOLLOW_compoundType_in_param1705);
        	        d=compoundType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        e =  this->matchToken(ID, &FOLLOW_ID_in_param1710);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                       d
        	            ->set_reference_type(scripting::reference_type::weak);
        	                       node = m_allocator->construct<scripting::parameter>(m_allocator, d
        	            , (e->getText()).c_str()); SET_LOCATION(node, WEAK_REF22); SET_END_LOCATION(node, e);

        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	        this->followPush(FOLLOW_compoundType_in_param1725);
        	        f=compoundType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	         this->matchToken(QUESTION, &FOLLOW_QUESTION_in_param1727);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        g =  this->matchToken(ID, &FOLLOW_ID_in_param1732);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                       f
        	            ->set_reference_type(scripting::reference_type::nullable);
        	                       node = m_allocator->construct<scripting::parameter>(m_allocator, f
        	            , (g->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            f
        	            ); SET_END_LOCATION(node, g);

        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleparamEx;
    ruleparamEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::parameter_list*
WNScriptASTParser::paramList()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::parameter_list* node;


    scripting::parameter* a;
    scripting::parameter* b;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_param_in_paramList1764);
            a=param();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleparamListEx;
            }


            {
                 node = m_allocator->construct<scripting::parameter_list>(m_allocator, a
                ); SET_LOCATION_FROM_NODE(node, a
                );
            }



            for (;;)
            {
                int alt8=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt8=1;
                	}
                    break;

                }

                switch (alt8)
                {
            	case 1:
            	    {
            	         this->matchToken(COMMA, &FOLLOW_COMMA_in_paramList1777);
            	        if  (this->hasException())
            	        {
            	            goto ruleparamListEx;
            	        }


            	        this->followPush(FOLLOW_param_in_paramList1781);
            	        b=param();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleparamListEx;
            	        }


            	        {
            	             node
            	            ->add_parameter(b
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop8;
            	    break;
                }
            }
            loop8: ;


        }

    }
    goto ruleparamListEx;
    ruleparamListEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::parameter_list*
WNScriptASTParser::parameterList()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::parameter_list* node;


    const ImplTraits::CommonTokenType* LBRACKET24 = NULL;
    const ImplTraits::CommonTokenType* RBRACKET25 = NULL;
    scripting::parameter_list* paramList23;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt9;

            alt9=2;

            switch ( this->LA(1) )
            {
            case LBRACKET:
            	{
            		switch ( this->LA(2) )
            		{
            		case RBRACKET:
            			{
            				alt9=2;
            			}
            		    break;
            		case BOOL_TYPE:
            		case CHAR_TYPE:
            		case FLOAT_TYPE:
            		case INT_TYPE:
            		case SHARED_REF:
            		case STRING_TYPE:
            		case TYPE:
            		case VOID_TYPE:
            		case WEAK_REF:
            			{
            				alt9=1;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 9 );
            		    ex->set_state( 1 );


            		    goto ruleparameterListEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 9 );
                ex->set_state( 0 );


                goto ruleparameterListEx;

            }

            switch (alt9)
            {
        	case 1:
        	    {
        	        LBRACKET24 =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_parameterList1813);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        this->followPush(FOLLOW_paramList_in_parameterList1815);
        	        paramList23=paramList();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        RBRACKET25 =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_parameterList1817);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        {
        	             node = paramList23
        	            ; SET_LOCATION(node, LBRACKET24); SET_END_LOCATION(node, RBRACKET25);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	         this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_parameterList1834);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	         this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_parameterList1836);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        {
        	             node = nullptr;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleparameterListEx;
    ruleparameterListEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::assign_type
WNScriptASTParser::assign_type()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::assign_type node;







        node = scripting::assign_type::equal;



    {
        {

            ANTLR_UINT32 alt10;

            alt10=6;

            switch ( this->LA(1) )
            {
            case 73:
            	{
            		alt10=1;
            	}
                break;
            case 65:
            	{
            		alt10=2;
            	}
                break;
            case 67:
            	{
            		alt10=3;
            	}
                break;
            case 63:
            	{
            		alt10=4;
            	}
                break;
            case 70:
            	{
            		alt10=5;
            	}
                break;
            case 59:
            	{
            		alt10=6;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 10 );
                ex->set_state( 0 );


                goto ruleassign_typeEx;

            }

            switch (alt10)
            {
        	case 1:
        	    {
        	         this->matchToken(73, &FOLLOW_73_in_assign_type1872);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::equal;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	         this->matchToken(65, &FOLLOW_65_in_assign_type1886);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::add_equal;
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	         this->matchToken(67, &FOLLOW_67_in_assign_type1899);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::sub_equal;
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	         this->matchToken(63, &FOLLOW_63_in_assign_type1912);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::mult_equal;
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	         this->matchToken(70, &FOLLOW_70_in_assign_type1925);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::div_equal;
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	         this->matchToken(59, &FOLLOW_59_in_assign_type1938);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::mod_equal;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleassign_typeEx;
    ruleassign_typeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::arg_list*
WNScriptASTParser::arglist()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::arg_list* node;


    scripting::expression* a;
    scripting::expression* d;





        node = m_allocator->construct<scripting::arg_list>(m_allocator);



    {
        {
            {
                {
                    this->followPush(FOLLOW_expr_in_arglist1996);
                    a=expr();

                    this->followPop();
                    if  (this->hasException())
                    {
                        goto rulearglistEx;
                    }


                    {
                         node->add_expression(a
                        ); SET_LOCATION_FROM_NODE(node, a
                        );
                    }


                }


            }



            for (;;)
            {
                int alt12=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt12=1;
                	}
                    break;

                }

                switch (alt12)
                {
            	case 1:
            	    {
            	         this->matchToken(COMMA, &FOLLOW_COMMA_in_arglist2029);
            	        if  (this->hasException())
            	        {
            	            goto rulearglistEx;
            	        }


            	        {
            	            int alt11=2;
            	            switch ( this->LA(1) )
            	            {
            	            case BOOL:
            	            case BOOL_TYPE:
            	            case CHAR:
            	            case CHAR_TYPE:
            	            case DOUBDEC:
            	            case DOUBINC:
            	            case FLOAT:
            	            case FLOAT_TYPE:
            	            case ID:
            	            case INT:
            	            case INT_TYPE:
            	            case LBRACKET:
            	            case LENGTH:
            	            case NULLTOK:
            	            case SHARED_REF:
            	            case STRING:
            	            case STRING_TYPE:
            	            case TYPE:
            	            case VOID_TYPE:
            	            case 56:
            	            case 66:
            	            	{
            	            		alt11=1;
            	            	}
            	                break;
            	            case COMMA:
            	            case RBRACKET:
            	            	{
            	            		alt11=2;
            	            	}
            	                break;

            	            default:
            	                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 11 );
            	                ex->set_state( 0 );


            	                goto rulearglistEx;

            	            }

            	            switch (alt11)
            	            {
            	        	case 1:
            	        	    {
            	        	        {
            	        	            this->followPush(FOLLOW_expr_in_arglist2073);
            	        	            d=expr();

            	        	            this->followPop();
            	        	            if  (this->hasException())
            	        	            {
            	        	                goto rulearglistEx;
            	        	            }


            	        	            {
            	        	                 node->add_expression(d
            	        	                , true); SET_END_LOCATION_FROM_NODE(node, d
            	        	                );
            	        	            }


            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    {
            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

            	default:
            	    goto loop12;
            	    break;
                }
            }
            loop12: ;


        }

    }
    goto rulearglistEx;
    rulearglistEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::expr()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* cond_ex26;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_cond_ex_in_expr2148);
            cond_ex26=cond_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexprEx;
            }


            {
                 node = cond_ex26
                ;
            }


        }

    }
    goto ruleexprEx;
    ruleexprEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::cond_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* or_ex27;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_or_ex_in_cond_ex2186);
            or_ex27=or_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecond_exEx;
            }


            {
                 node = or_ex27
                ;
            }


            {
                int alt13=2;
                switch ( this->LA(1) )
                {
                    case QUESTION:
                    	{
                    		alt13=1;
                    	}
                        break;
                }

                switch (alt13)
                {
            	case 1:
            	    {
            	         this->matchToken(QUESTION, &FOLLOW_QUESTION_in_cond_ex2209);
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	        this->followPush(FOLLOW_expr_in_cond_ex2213);
            	        b=expr();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	         this->matchToken(COLON, &FOLLOW_COLON_in_cond_ex2215);
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	        this->followPush(FOLLOW_cond_ex_in_cond_ex2219);
            	        c=cond_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	        {
            	             node = m_allocator->construct<scripting::cond_expression>(m_allocator, node, b
            	            , c
            	            );  SET_LOCATION_FROM_NODE(node, or_ex27
            	            ); SET_END_LOCATION_FROM_NODE(node, c
            	            );
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    goto rulecond_exEx;
    rulecond_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::or_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_and_ex_in_or_ex2266);
            a=and_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleor_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt14=2;
                switch ( this->LA(1) )
                {
                case 79:
                	{
                		alt14=1;
                	}
                    break;

                }

                switch (alt14)
                {
            	case 1:
            	    {
            	         this->matchToken(79, &FOLLOW_79_in_or_ex2283);
            	        if  (this->hasException())
            	        {
            	            goto ruleor_exEx;
            	        }


            	        this->followPush(FOLLOW_and_ex_in_or_ex2287);
            	        b=and_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleor_exEx;
            	        }


            	        {
            	             node = m_allocator->construct<scripting::short_circuit_expression>(m_allocator, scripting::short_circuit_type::or_operator, node, b
            	            ); SET_LOCATION_FROM_NODE(node, a
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop14;
            	    break;
                }
            }
            loop14: ;


        }

    }
    goto ruleor_exEx;
    ruleor_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::and_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_bit_or_ex_in_and_ex2330);
            a=bit_or_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleand_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt15=2;
                switch ( this->LA(1) )
                {
                case 60:
                	{
                		alt15=1;
                	}
                    break;

                }

                switch (alt15)
                {
            	case 1:
            	    {
            	         this->matchToken(60, &FOLLOW_60_in_and_ex2347);
            	        if  (this->hasException())
            	        {
            	            goto ruleand_exEx;
            	        }


            	        this->followPush(FOLLOW_bit_or_ex_in_and_ex2351);
            	        b=bit_or_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleand_exEx;
            	        }


            	        {
            	            node = m_allocator->construct<scripting::short_circuit_expression>(m_allocator, scripting::short_circuit_type::and_operator, node, b
            	            ); SET_LOCATION_FROM_NODE(node, a
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop15;
            	    break;
                }
            }
            loop15: ;


        }

    }
    goto ruleand_exEx;
    ruleand_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::bit_or_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_bit_xor_ex_in_bit_or_ex2385);
            a=bit_xor_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebit_or_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt16=2;
                switch ( this->LA(1) )
                {
                case 78:
                	{
                		alt16=1;
                	}
                    break;

                }

                switch (alt16)
                {
            	case 1:
            	    {
            	         this->matchToken(78, &FOLLOW_78_in_bit_or_ex2402);
            	        if  (this->hasException())
            	        {
            	            goto rulebit_or_exEx;
            	        }


            	        this->followPush(FOLLOW_bit_xor_ex_in_bit_or_ex2406);
            	        b=bit_xor_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulebit_or_exEx;
            	        }


            	        {
            	            node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_or, node, b
            	            );  SET_LOCATION_FROM_NODE(node, a
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop16;
            	    break;
                }
            }
            loop16: ;


        }

    }
    goto rulebit_or_exEx;
    rulebit_or_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::bit_xor_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_bit_and_ex_in_bit_xor_ex2441);
            a=bit_and_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebit_xor_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt17=2;
                switch ( this->LA(1) )
                {
                case 77:
                	{
                		alt17=1;
                	}
                    break;

                }

                switch (alt17)
                {
            	case 1:
            	    {
            	         this->matchToken(77, &FOLLOW_77_in_bit_xor_ex2458);
            	        if  (this->hasException())
            	        {
            	            goto rulebit_xor_exEx;
            	        }


            	        this->followPush(FOLLOW_bit_and_ex_in_bit_xor_ex2462);
            	        b=bit_and_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulebit_xor_exEx;
            	        }


            	        {
            	            node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_xor, node, b
            	            );  SET_LOCATION_FROM_NODE(node, a
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop17;
            	    break;
                }
            }
            loop17: ;


        }

    }
    goto rulebit_xor_exEx;
    rulebit_xor_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::bit_and_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_eq_ex_in_bit_and_ex2497);
            a=eq_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebit_and_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt18=2;
                switch ( this->LA(1) )
                {
                case 61:
                	{
                		alt18=1;
                	}
                    break;

                }

                switch (alt18)
                {
            	case 1:
            	    {
            	         this->matchToken(61, &FOLLOW_61_in_bit_and_ex2514);
            	        if  (this->hasException())
            	        {
            	            goto rulebit_and_exEx;
            	        }


            	        this->followPush(FOLLOW_eq_ex_in_bit_and_ex2518);
            	        b=eq_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulebit_and_exEx;
            	        }


            	        {
            	            node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_and, node, b
            	            );  SET_LOCATION_FROM_NODE(node, a
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop18;
            	    break;
                }
            }
            loop18: ;


        }

    }
    goto rulebit_and_exEx;
    rulebit_and_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::eq_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_rel_ex_in_eq_ex2556);
            a=rel_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleeq_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt19=3;
                switch ( this->LA(1) )
                {
                case 74:
                	{
                		alt19=1;
                	}
                    break;
                case 57:
                	{
                		alt19=2;
                	}
                    break;

                }

                switch (alt19)
                {
            	case 1:
            	    {
            	        {
            	             this->matchToken(74, &FOLLOW_74_in_eq_ex2591);
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            this->followPush(FOLLOW_rel_ex_in_eq_ex2595);
            	            b=rel_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_equal, node, b
            	                );  SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	             this->matchToken(57, &FOLLOW_57_in_eq_ex2618);
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            this->followPush(FOLLOW_rel_ex_in_eq_ex2622);
            	            c=rel_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_not_equal, node, c
            	                ); SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                );
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop19;
            	    break;
                }
            }
            loop19: ;


        }

    }
    goto ruleeq_exEx;
    ruleeq_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::rel_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* d;
    scripting::expression* e;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_add_ex_in_rel_ex2680);
            a=add_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulerel_exEx;
            }


            {
                 node=a
                ;
            }



            for (;;)
            {
                int alt20=5;
                switch ( this->LA(1) )
                {
                case 71:
                	{
                		alt20=1;
                	}
                    break;
                case 75:
                	{
                		alt20=2;
                	}
                    break;
                case 72:
                	{
                		alt20=3;
                	}
                    break;
                case 76:
                	{
                		alt20=4;
                	}
                    break;

                }

                switch (alt20)
                {
            	case 1:
            	    {
            	        {
            	             this->matchToken(71, &FOLLOW_71_in_rel_ex2716);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex2720);
            	            b=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_less_than, node, b
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	             this->matchToken(75, &FOLLOW_75_in_rel_ex2744);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex2748);
            	            c=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_greater_than, node, c
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	        {
            	             this->matchToken(72, &FOLLOW_72_in_rel_ex2772);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex2776);
            	            d=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_less_than_or_equal, node, d
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, d
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 4:
            	    {
            	        {
            	             this->matchToken(76, &FOLLOW_76_in_rel_ex2800);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex2804);
            	            e=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_greater_than_or_equal, node, e
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, e
            	                );
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop20;
            	    break;
                }
            }
            loop20: ;


        }

    }
    goto rulerel_exEx;
    rulerel_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::add_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_mult_ex_in_add_ex2865);
            a=mult_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleadd_exEx;
            }


            {
                node = a
                ;
            }



            for (;;)
            {
                int alt21=3;
                switch ( this->LA(1) )
                {
                case 64:
                	{
                		alt21=1;
                	}
                    break;
                case 66:
                	{
                		alt21=2;
                	}
                    break;

                }

                switch (alt21)
                {
            	case 1:
            	    {
            	        {
            	             this->matchToken(64, &FOLLOW_64_in_add_ex2900);
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            this->followPush(FOLLOW_mult_ex_in_add_ex2904);
            	            b=mult_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_add, node, b
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	             this->matchToken(66, &FOLLOW_66_in_add_ex2926);
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            this->followPush(FOLLOW_mult_ex_in_add_ex2930);
            	            c=mult_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_sub, node, c
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                );
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop21;
            	    break;
                }
            }
            loop21: ;


        }

    }
    goto ruleadd_exEx;
    ruleadd_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::mult_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* d;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_unary_ex_in_mult_ex2989);
            a=unary_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemult_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt22=4;
                switch ( this->LA(1) )
                {
                case 62:
                	{
                		alt22=1;
                	}
                    break;
                case 69:
                	{
                		alt22=2;
                	}
                    break;
                case 58:
                	{
                		alt22=3;
                	}
                    break;

                }

                switch (alt22)
                {
            	case 1:
            	    {
            	        {
            	             this->matchToken(62, &FOLLOW_62_in_mult_ex3028);
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            this->followPush(FOLLOW_unary_ex_in_mult_ex3032);
            	            b=unary_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_mult, node, b
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	             this->matchToken(69, &FOLLOW_69_in_mult_ex3058);
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            this->followPush(FOLLOW_unary_ex_in_mult_ex3062);
            	            c=unary_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_div, node, c
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	        {
            	             this->matchToken(58, &FOLLOW_58_in_mult_ex3088);
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            this->followPush(FOLLOW_unary_ex_in_mult_ex3092);
            	            d=unary_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_mod, node, d
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, d
            	                );
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop22;
            	    break;
                }
            }
            loop22: ;


        }

    }
    goto rulemult_exEx;
    rulemult_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::unary_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* d;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt23;

            alt23=5;

            switch ( this->LA(1) )
            {
            case BOOL:
            case BOOL_TYPE:
            case CHAR:
            case CHAR_TYPE:
            case FLOAT:
            case FLOAT_TYPE:
            case ID:
            case INT:
            case INT_TYPE:
            case LBRACKET:
            case LENGTH:
            case NULLTOK:
            case SHARED_REF:
            case STRING:
            case STRING_TYPE:
            case TYPE:
            case VOID_TYPE:
            	{
            		alt23=1;
            	}
                break;
            case DOUBINC:
            	{
            		alt23=2;
            	}
                break;
            case DOUBDEC:
            	{
            		alt23=3;
            	}
                break;
            case 66:
            	{
            		alt23=4;
            	}
                break;
            case 56:
            	{
            		alt23=5;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 23 );
                ex->set_state( 0 );


                goto ruleunary_exEx;

            }

            switch (alt23)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_post_ex_in_unary_ex3144);
        	        a=post_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             node = a
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	         this->matchToken(DOUBINC, &FOLLOW_DOUBINC_in_unary_ex3157);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        this->followPush(FOLLOW_unary_ex_in_unary_ex3161);
        	        b=unary_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             scripting::node* t = node; node = m_allocator->construct<scripting::unary_expression>(m_allocator, scripting::unary_type::pre_increment, b
        	            );   SET_LOCATION_FROM_NODE(node, t); SET_END_LOCATION_FROM_NODE(node, b
        	            );
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	         this->matchToken(DOUBDEC, &FOLLOW_DOUBDEC_in_unary_ex3174);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        this->followPush(FOLLOW_unary_ex_in_unary_ex3178);
        	        c=unary_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             scripting::node* t = node; node = m_allocator->construct<scripting::unary_expression>(m_allocator, scripting::unary_type::pre_decrement, c
        	            );   SET_LOCATION_FROM_NODE(node, t); SET_END_LOCATION_FROM_NODE(node, c
        	            );
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	         this->matchToken(66, &FOLLOW_66_in_unary_ex3191);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        this->followPush(FOLLOW_unary_ex_in_unary_ex3195);
        	        d=unary_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             scripting::node* t = node; node = m_allocator->construct<scripting::unary_expression>(m_allocator, scripting::unary_type::negation, d
        	            );   SET_LOCATION_FROM_NODE(node, t); SET_END_LOCATION_FROM_NODE(node, d
        	            );
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	         this->matchToken(56, &FOLLOW_56_in_unary_ex3209);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        this->followPush(FOLLOW_unary_ex_in_unary_ex3213);
        	        d=unary_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             scripting::node* t = node; node = m_allocator->construct<scripting::unary_expression>(m_allocator, scripting::unary_type::inversion, d
        	            );   SET_LOCATION_FROM_NODE(node, t); SET_END_LOCATION_FROM_NODE(node, d
        	            );
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleunary_exEx;
    ruleunary_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::post_expression*
WNScriptASTParser::post_ex_proper()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::post_expression* node;


    const ImplTraits::CommonTokenType* d = NULL;
    const ImplTraits::CommonTokenType* e = NULL;
    const ImplTraits::CommonTokenType* f = NULL;
    const ImplTraits::CommonTokenType* g = NULL;
    const ImplTraits::CommonTokenType* h = NULL;
    const ImplTraits::CommonTokenType* i = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    const ImplTraits::CommonTokenType* DOUBINC28 = NULL;
    const ImplTraits::CommonTokenType* DOUBDEC29 = NULL;
    scripting::expression* a;
    scripting::arg_list* b;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt24;

            alt24=6;

            switch ( this->LA(1) )
            {
            case LSQBRACKET:
            	{
            		alt24=1;
            	}
                break;
            case LBRACKET:
            	{
            		switch ( this->LA(2) )
            		{
            		case RBRACKET:
            			{
            				alt24=2;
            			}
            		    break;
            		case BOOL:
            		case BOOL_TYPE:
            		case CHAR:
            		case CHAR_TYPE:
            		case DOUBDEC:
            		case DOUBINC:
            		case FLOAT:
            		case FLOAT_TYPE:
            		case ID:
            		case INT:
            		case INT_TYPE:
            		case LBRACKET:
            		case LENGTH:
            		case NULLTOK:
            		case SHARED_REF:
            		case STRING:
            		case STRING_TYPE:
            		case TYPE:
            		case VOID_TYPE:
            		case 56:
            		case 66:
            			{
            				alt24=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 24 );
            		    ex->set_state( 2 );


            		    goto rulepost_ex_properEx;

            		}

            	}
                break;
            case 68:
            	{
            		alt24=4;
            	}
                break;
            case DOUBINC:
            	{
            		alt24=5;
            	}
                break;
            case DOUBDEC:
            	{
            		alt24=6;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 24 );
                ex->set_state( 0 );


                goto rulepost_ex_properEx;

            }

            switch (alt24)
            {
        	case 1:
        	    {
        	        d =  this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_post_ex_proper3251);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_post_ex_proper3255);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        e =  this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_post_ex_proper3259);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::array_access_expression>(m_allocator, a
        	            ); SET_LOCATION(node, d); SET_END_LOCATION(node, e);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        f =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_post_ex_proper3274);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        g =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_post_ex_proper3278);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::function_call_expression>(m_allocator); SET_LOCATION(node, f); SET_END_LOCATION(node, g);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        h =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_post_ex_proper3306);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        this->followPush(FOLLOW_arglist_in_post_ex_proper3312);
        	        b=arglist();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        i =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_post_ex_proper3316);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::function_call_expression>(m_allocator, b
        	            ); SET_LOCATION(node, h); SET_END_LOCATION(node, i);
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	         this->matchToken(68, &FOLLOW_68_in_post_ex_proper3329);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        c =  this->matchToken(ID, &FOLLOW_ID_in_post_ex_proper3333);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::member_access_expression>(m_allocator, (c->getText()).c_str()); SET_LOCATION(node, c);
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        DOUBINC28 =  this->matchToken(DOUBINC, &FOLLOW_DOUBINC_in_post_ex_proper3360);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::post_unary_expression>(m_allocator, scripting::post_unary_type::post_increment); SET_LOCATION(node, DOUBINC28);
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	        DOUBDEC29 =  this->matchToken(DOUBDEC, &FOLLOW_DOUBDEC_in_post_ex_proper3389);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::post_unary_expression>(m_allocator, scripting::post_unary_type::post_decrement); SET_LOCATION(node, DOUBDEC29);
        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulepost_ex_properEx;
    rulepost_ex_properEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::post_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::post_expression* a;
    scripting::expression * prim_ex30;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_prim_ex_in_post_ex3442);
            prim_ex30=prim_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulepost_exEx;
            }


            {
                 node = prim_ex30
                ;
            }



            for (;;)
            {
                int alt25=2;
                switch ( this->LA(1) )
                {
                case DOUBDEC:
                case DOUBINC:
                case LBRACKET:
                case LSQBRACKET:
                case 68:
                	{
                		alt25=1;
                	}
                    break;

                }

                switch (alt25)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_post_ex_proper_in_post_ex3461);
            	        a=post_ex_proper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulepost_exEx;
            	        }


            	        {
            	            a
            	            ->add_base_expression(node); SET_END_LOCATION_FROM_NODE(a
            	            , node); node = a
            	            ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop25;
            	    break;
                }
            }
            loop25: ;


        }

    }
    goto rulepost_exEx;
    rulepost_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::assignment_or_expression()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    scripting::expression* a;
    scripting::assign_type b;
    scripting::expression* c;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_expr_in_assignment_or_expression3492);
            a=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleassignment_or_expressionEx;
            }


            {
                int alt26=2;
                switch ( this->LA(1) )
                {
                case 59:
                case 63:
                case 65:
                case 67:
                case 70:
                case 73:
                	{
                		alt26=1;
                	}
                    break;
                case RBRACKET:
                case SEMICOLON:
                	{
                		alt26=2;
                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 26 );
                    ex->set_state( 0 );


                    goto ruleassignment_or_expressionEx;

                }

                switch (alt26)
                {
            	case 1:
            	    {
            	        {
            	            this->followPush(FOLLOW_assign_type_in_assignment_or_expression3524);
            	            b=assign_type();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleassignment_or_expressionEx;
            	            }


            	            this->followPush(FOLLOW_expr_in_assignment_or_expression3528);
            	            c=expr();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleassignment_or_expressionEx;
            	            }


            	            {

            	                                  scripting::lvalue* lval = m_allocator->construct<scripting::lvalue>(m_allocator, a
            	                );
            	                                  SET_LOCATION_FROM_NODE(lval, c
            	                );

            	                                  scripting::assignment_instruction* assign = m_allocator->construct<scripting::assignment_instruction>(m_allocator, lval);
            	                                  SET_LOCATION_FROM_NODE(assign , lval);

            	                                  assign->add_value(b
            	                , c
            	                );
            	                                  SET_END_LOCATION_FROM_NODE(assign, c
            	                );
            	                                  node = assign;

            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	            {

            	                                  node = m_allocator->construct<scripting::expression_instruction>(m_allocator, a
            	                );
            	                                  SET_LOCATION_FROM_NODE(node, a
            	                );

            	            }


            	        }


            	    }
            	    break;

                }
            }

        }

    }
    goto ruleassignment_or_expressionEx;
    ruleassignment_or_expressionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::constant_expression*
WNScriptASTParser::constant()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::constant_expression* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* b = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    const ImplTraits::CommonTokenType* d = NULL;
    const ImplTraits::CommonTokenType* e = NULL;
    const ImplTraits::CommonTokenType* g = NULL;
    const ImplTraits::CommonTokenType* h = NULL;
    const ImplTraits::CommonTokenType* i = NULL;
    scripting::type* f;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt27;

            alt27=7;

            switch ( this->LA(1) )
            {
            case INT:
            	{
            		alt27=1;
            	}
                break;
            case FLOAT:
            	{
            		alt27=2;
            	}
                break;
            case CHAR:
            	{
            		alt27=3;
            	}
                break;
            case STRING:
            	{
            		alt27=4;
            	}
                break;
            case BOOL:
            	{
            		alt27=5;
            	}
                break;
            case NULLTOK:
            	{
            		alt27=6;
            	}
                break;
            case BOOL_TYPE:
            case CHAR_TYPE:
            case FLOAT_TYPE:
            case INT_TYPE:
            case STRING_TYPE:
            case VOID_TYPE:
            	{
            		alt27=7;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 27 );
                ex->set_state( 0 );


                goto ruleconstantEx;

            }

            switch (alt27)
            {
        	case 1:
        	    {
        	        a =  this->matchToken(INT, &FOLLOW_INT_in_constant3594);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::int_type); SET_LOCATION(type_node, a); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, (a->getText()).c_str()); SET_LOCATION(node, a);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        b =  this->matchToken(FLOAT, &FOLLOW_FLOAT_in_constant3612);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::float_type); SET_LOCATION(type_node, b); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, (b->getText()).c_str()); SET_LOCATION(node, b);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        c =  this->matchToken(CHAR, &FOLLOW_CHAR_in_constant3628);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::char_type); SET_LOCATION(type_node, c); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, (c->getText()).c_str()); SET_LOCATION(node, c);
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        d =  this->matchToken(STRING, &FOLLOW_STRING_in_constant3645);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::string_type); SET_LOCATION(type_node, d); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, (d->getText()).c_str()); SET_LOCATION(node, d);
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        e =  this->matchToken(BOOL, &FOLLOW_BOOL_in_constant3660);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::bool_type); SET_LOCATION(type_node, e); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, (e->getText()).c_str()); SET_LOCATION(node, e);
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	        g =  this->matchToken(NULLTOK, &FOLLOW_NULLTOK_in_constant3677);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::nullptr_type); SET_LOCATION(type_node, g); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, "null"); SET_LOCATION(node, g);
        	        }


        	    }
        	    break;
        	case 7:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_constant3692);
        	        f=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        g =  this->matchToken(LBRACE, &FOLLOW_LBRACE_in_constant3696);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        h =  this->matchToken(STRING, &FOLLOW_STRING_in_constant3700);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        i =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_constant3704);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::constant_expression>(m_allocator, f
        	            , (h->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            f
        	            ); SET_END_LOCATION(node, i);
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleconstantEx;
    ruleconstantEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::builtin_unary_expression*
WNScriptASTParser::builtin_unary()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::builtin_unary_expression* node;


    const ImplTraits::CommonTokenType* LENGTH32 = NULL;
    const ImplTraits::CommonTokenType* RBRACKET33 = NULL;
    scripting::expression* expr31;





        node = nullptr;



    {
        {
            LENGTH32 =  this->matchToken(LENGTH, &FOLLOW_LENGTH_in_builtin_unary3733);
            if  (this->hasException())
            {
                goto rulebuiltin_unaryEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_builtin_unary3735);
            if  (this->hasException())
            {
                goto rulebuiltin_unaryEx;
            }


            this->followPush(FOLLOW_expr_in_builtin_unary3737);
            expr31=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebuiltin_unaryEx;
            }


            RBRACKET33 =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_builtin_unary3739);
            if  (this->hasException())
            {
                goto rulebuiltin_unaryEx;
            }


            {
                 node = m_allocator->construct<scripting::builtin_unary_expression>(m_allocator, scripting::builtin_unary_type::length, expr31
                ); SET_LOCATION(node, LENGTH32); SET_END_LOCATION(node, RBRACKET33);
            }


        }

    }
    goto rulebuiltin_unaryEx;
    rulebuiltin_unaryEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::non_array_prim_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    const ImplTraits::CommonTokenType* ba = NULL;
    const ImplTraits::CommonTokenType* bb = NULL;
    const ImplTraits::CommonTokenType* ID34 = NULL;
    scripting::expression* a;
    scripting::constant_expression* b;
    scripting::type* c;
    scripting::cast_expression* f;
    scripting::type* e;
    scripting::struct_allocation_expression* h;
    scripting::type* i;
    scripting::struct_allocation_expression* j;
    scripting::builtin_unary_expression* u;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt28;

            alt28=7;

            switch ( this->LA(1) )
            {
            case ID:
            	{
            		alt28=1;
            	}
                break;
            case LBRACKET:
            	{
            		alt28=2;
            	}
                break;
            case BOOL:
            case CHAR:
            case FLOAT:
            case INT:
            case NULLTOK:
            case STRING:
            	{
            		alt28=3;
            	}
                break;
            case VOID_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt28=3;
            			}
            		    break;
            		case LBRACKET:
            			{
            				alt28=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 28 );
            		    ex->set_state( 4 );


            		    goto rulenon_array_prim_exEx;

            		}

            	}
                break;
            case INT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt28=3;
            			}
            		    break;
            		case LBRACKET:
            			{
            				alt28=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 28 );
            		    ex->set_state( 5 );


            		    goto rulenon_array_prim_exEx;

            		}

            	}
                break;
            case FLOAT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt28=3;
            			}
            		    break;
            		case LBRACKET:
            			{
            				alt28=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 28 );
            		    ex->set_state( 6 );


            		    goto rulenon_array_prim_exEx;

            		}

            	}
                break;
            case CHAR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt28=3;
            			}
            		    break;
            		case LBRACKET:
            			{
            				alt28=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 28 );
            		    ex->set_state( 7 );


            		    goto rulenon_array_prim_exEx;

            		}

            	}
                break;
            case BOOL_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt28=3;
            			}
            		    break;
            		case LBRACKET:
            			{
            				alt28=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 28 );
            		    ex->set_state( 8 );


            		    goto rulenon_array_prim_exEx;

            		}

            	}
                break;
            case STRING_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt28=3;
            			}
            		    break;
            		case LBRACKET:
            			{
            				alt28=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 28 );
            		    ex->set_state( 9 );


            		    goto rulenon_array_prim_exEx;

            		}

            	}
                break;
            case TYPE:
            	{
            		alt28=5;
            	}
                break;
            case SHARED_REF:
            	{
            		alt28=6;
            	}
                break;
            case LENGTH:
            	{
            		alt28=7;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 28 );
                ex->set_state( 0 );


                goto rulenon_array_prim_exEx;

            }

            switch (alt28)
            {
        	case 1:
        	    {
        	        ID34 =  this->matchToken(ID, &FOLLOW_ID_in_non_array_prim_ex3768);
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::id_expression>(m_allocator, (ID34->getText()).c_str()); SET_LOCATION(node, ID34);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        ba =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_non_array_prim_ex3782);
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_non_array_prim_ex3786);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        bb =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_non_array_prim_ex3790);
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        {
        	            node = a
        	            ; SET_LOCATION(node, ba); SET_END_LOCATION(node, bb);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        this->followPush(FOLLOW_constant_in_non_array_prim_ex3804);
        	        b=constant();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        {
        	            node = b
        	            ;
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_non_array_prim_ex3819);
        	        c=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        {
        	            this->followPush(FOLLOW_cast_in_non_array_prim_ex3825);
        	            f=cast();

        	            this->followPop();
        	            if  (this->hasException())
        	            {
        	                goto rulenon_array_prim_exEx;
        	            }


        	        }


        	        {
        	             f
        	            ->set_type(c
        	            ); node=f
        	            ; SET_START_LOCATION_FROM_NODE(node, c
        	            );
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        this->followPush(FOLLOW_objectType_in_non_array_prim_ex3840);
        	        e=objectType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        this->followPush(FOLLOW_structInit_in_non_array_prim_ex3844);
        	        h=structInit();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        {
        	             h
        	            ->set_type(e
        	            ); node=h
        	            ; SET_START_LOCATION_FROM_NODE(node, e
        	            );
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	         this->matchToken(SHARED_REF, &FOLLOW_SHARED_REF_in_non_array_prim_ex3856);
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        this->followPush(FOLLOW_objectType_in_non_array_prim_ex3860);
        	        i=objectType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        this->followPush(FOLLOW_structInit_in_non_array_prim_ex3864);
        	        j=structInit();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        {
        	             i
        	            ->set_reference_type(scripting::reference_type::shared); j
        	            ->set_type(i
        	            ); node=j
        	            ; SET_START_LOCATION_FROM_NODE(node, i
        	            );
        	        }


        	    }
        	    break;
        	case 7:
        	    {
        	        this->followPush(FOLLOW_builtin_unary_in_non_array_prim_ex3878);
        	        u=builtin_unary();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        {
        	            node = u
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulenon_array_prim_exEx;
    rulenon_array_prim_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression *
WNScriptASTParser::prim_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression * node;


    scripting::type* k;
    scripting::array_allocation_expression* l;
    scripting::type* m;
    scripting::array_allocation_expression* n;
    scripting::expression* non_array_prim_ex35;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt29;

            alt29=3;

            switch ( this->LA(1) )
            {
            case BOOL:
            case CHAR:
            case FLOAT:
            case ID:
            case INT:
            case LBRACKET:
            case LENGTH:
            case NULLTOK:
            case STRING:
            	{
            		alt29=1;
            	}
                break;
            case VOID_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt29=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt29=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 29 );
            		    ex->set_state( 2 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case INT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt29=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt29=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 29 );
            		    ex->set_state( 3 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case FLOAT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt29=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt29=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 29 );
            		    ex->set_state( 4 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case CHAR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt29=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt29=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 29 );
            		    ex->set_state( 5 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case BOOL_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt29=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt29=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 29 );
            		    ex->set_state( 6 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case STRING_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt29=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt29=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 29 );
            		    ex->set_state( 7 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACKET:
            			{
            				alt29=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt29=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 29 );
            		    ex->set_state( 8 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case SHARED_REF:
            	{
            		switch ( this->LA(2) )
            		{
            		case TYPE:
            			{
            				switch ( this->LA(3) )
            				{
            				case LBRACKET:
            					{
            						alt29=1;
            					}
            				    break;
            				case DLSQBRACKET:
            				case LSQBRACKET:
            					{
            						alt29=3;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 29 );
            				    ex->set_state( 11 );


            				    goto ruleprim_exEx;

            				}

            			}
            		    break;
            		case BOOL_TYPE:
            		case CHAR_TYPE:
            		case FLOAT_TYPE:
            		case INT_TYPE:
            		case STRING_TYPE:
            		case VOID_TYPE:
            			{
            				alt29=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 29 );
            		    ex->set_state( 9 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 29 );
                ex->set_state( 0 );


                goto ruleprim_exEx;

            }

            switch (alt29)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_non_array_prim_ex_in_prim_ex3907);
        	        non_array_prim_ex35=non_array_prim_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	             node = non_array_prim_ex35
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_nonArrayType_in_prim_ex3921);
        	        k=nonArrayType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        this->followPush(FOLLOW_arrayInit_in_prim_ex3925);
        	        l=arrayInit();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	             l
        	            ->set_type(k
        	            ); node=l
        	            ; SET_START_LOCATION_FROM_NODE(node, k
        	            );
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	         this->matchToken(SHARED_REF, &FOLLOW_SHARED_REF_in_prim_ex3937);
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        this->followPush(FOLLOW_nonArrayType_in_prim_ex3941);
        	        m=nonArrayType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        this->followPush(FOLLOW_arrayInit_in_prim_ex3945);
        	        n=arrayInit();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	             m
        	            ->set_reference_type(scripting::reference_type::shared); n
        	            ->set_type(m
        	            ); node=n
        	            ; SET_START_LOCATION_FROM_NODE(node, m
        	            );
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleprim_exEx;
    ruleprim_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::cast_expression*
WNScriptASTParser::cast()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::cast_expression* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    scripting::expression* b;





      node = nullptr;



    {
        {
            a =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_cast3974);
            if  (this->hasException())
            {
                goto rulecastEx;
            }


            this->followPush(FOLLOW_expr_in_cast3978);
            b=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecastEx;
            }


            c =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_cast3982);
            if  (this->hasException())
            {
                goto rulecastEx;
            }


            {
                 node = m_allocator->construct<scripting::cast_expression>(m_allocator, b
                ); SET_LOCATION(node, a); SET_END_LOCATION(node, c);
            }


        }

    }
    goto rulecastEx;
    rulecastEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::struct_allocation_expression*
WNScriptASTParser::structInit()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::struct_allocation_expression* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* b = NULL;






        node = nullptr;



    {
        {
            a =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_structInit4011);
            if  (this->hasException())
            {
                goto rulestructInitEx;
            }


            b =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_structInit4015);
            if  (this->hasException())
            {
                goto rulestructInitEx;
            }


            {
                 node = m_allocator->construct<scripting::struct_allocation_expression>(m_allocator); SET_LOCATION(node, a); SET_END_LOCATION(node, b);
            }


        }

    }
    goto rulestructInitEx;
    rulestructInitEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::array_allocation_expression*
WNScriptASTParser::arrayInit()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::array_allocation_expression* node;


    const ImplTraits::CommonTokenType* c = NULL;
    scripting::expression* e;
    scripting::expression* f;
    scripting::expression* b;





        node = m_allocator->construct<scripting::array_allocation_expression>(m_allocator);



    {
        {
            {
                int alt30=2;
                switch ( this->LA(1) )
                {
                case LSQBRACKET:
                	{
                		alt30=1;
                	}
                    break;
                case DLSQBRACKET:
                	{
                		alt30=2;
                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 30 );
                    ex->set_state( 0 );


                    goto rulearrayInitEx;

                }

                switch (alt30)
                {
            	case 1:
            	    {
            	        {
            	             this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_arrayInit4052);
            	            if  (this->hasException())
            	            {
            	                goto rulearrayInitEx;
            	            }


            	            this->followPush(FOLLOW_expr_in_arrayInit4056);
            	            e=expr();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulearrayInitEx;
            	            }


            	             this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_arrayInit4058);
            	            if  (this->hasException())
            	            {
            	                goto rulearrayInitEx;
            	            }


            	            {
            	                 node->add_expression(e
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	             this->matchToken(DLSQBRACKET, &FOLLOW_DLSQBRACKET_in_arrayInit4075);
            	            if  (this->hasException())
            	            {
            	                goto rulearrayInitEx;
            	            }


            	            this->followPush(FOLLOW_expr_in_arrayInit4079);
            	            f=expr();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulearrayInitEx;
            	            }


            	             this->matchToken(DRSQBRACKET, &FOLLOW_DRSQBRACKET_in_arrayInit4081);
            	            if  (this->hasException())
            	            {
            	                goto rulearrayInitEx;
            	            }


            	            {
            	                 node->add_expression(f
            	                ); node->set_runtime(true);
            	            }


            	        }


            	    }
            	    break;

                }
            }

            {
                 this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_arrayInit4096);
                if  (this->hasException())
                {
                    goto rulearrayInitEx;
                }


                this->followPush(FOLLOW_expr_in_arrayInit4100);
                b=expr();

                this->followPop();
                if  (this->hasException())
                {
                    goto rulearrayInitEx;
                }


                c =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_arrayInit4104);
                if  (this->hasException())
                {
                    goto rulearrayInitEx;
                }


                {
                     node->set_copy_initializer(b); SET_LOCATION(node, c);
                }


            }


        }

    }
    goto rulearrayInitEx;
    rulearrayInitEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::declaration*
WNScriptASTParser::declaration()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::declaration* node;


    scripting::parameter* a;
    scripting::expression* c;





        node =  m_allocator->construct<scripting::declaration>(m_allocator);



    {
        {
            this->followPush(FOLLOW_param_in_declaration4138);
            a=param();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledeclarationEx;
            }


            {
                 node->set_parameter(a
                ); SET_LOCATION_FROM_NODE(node, a
                );
            }


            {
                {
                     this->matchToken(73, &FOLLOW_73_in_declaration4173);
                    if  (this->hasException())
                    {
                        goto ruledeclarationEx;
                    }


                    {
                        {
                            this->followPush(FOLLOW_expr_in_declaration4180);
                            c=expr();

                            this->followPop();
                            if  (this->hasException())
                            {
                                goto ruledeclarationEx;
                            }


                        }


                        {
                             node->add_expression_initializer(c
                            ); SET_END_LOCATION_FROM_NODE(node, c
                            );
                        }


                    }


                }


            }


        }

    }
    goto ruledeclarationEx;
    ruledeclarationEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::declaration*
WNScriptASTParser::inherited_declaration()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::declaration* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* d = NULL;
    scripting::expression* c;





        node =  m_allocator->construct<scripting::declaration>(m_allocator);



    {
        {
             this->matchToken(68, &FOLLOW_68_in_inherited_declaration4230);
            if  (this->hasException())
            {
                goto ruleinherited_declarationEx;
            }


            a =  this->matchToken(ID, &FOLLOW_ID_in_inherited_declaration4234);
            if  (this->hasException())
            {
                goto ruleinherited_declarationEx;
            }


            {
                 node->set_inherited_parameter((a->getText()).c_str());  SET_LOCATION(node, a);
            }


            {
                 this->matchToken(73, &FOLLOW_73_in_inherited_declaration4247);
                if  (this->hasException())
                {
                    goto ruleinherited_declarationEx;
                }


                {
                    int alt31=2;
                    switch ( this->LA(1) )
                    {
                    case BOOL:
                    case BOOL_TYPE:
                    case CHAR:
                    case CHAR_TYPE:
                    case DOUBDEC:
                    case DOUBINC:
                    case FLOAT:
                    case FLOAT_TYPE:
                    case ID:
                    case INT:
                    case INT_TYPE:
                    case LBRACKET:
                    case LENGTH:
                    case NULLTOK:
                    case SHARED_REF:
                    case STRING:
                    case STRING_TYPE:
                    case TYPE:
                    case VOID_TYPE:
                    case 56:
                    case 66:
                    	{
                    		alt31=1;
                    	}
                        break;
                    case DEFAULT:
                    	{
                    		alt31=2;
                    	}
                        break;

                    default:
                        ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                        ex->set_decisionNum( 31 );
                        ex->set_state( 0 );


                        goto ruleinherited_declarationEx;

                    }

                    switch (alt31)
                    {
                	case 1:
                	    {
                	        {
                	            this->followPush(FOLLOW_expr_in_inherited_declaration4283);
                	            c=expr();

                	            this->followPop();
                	            if  (this->hasException())
                	            {
                	                goto ruleinherited_declarationEx;
                	            }


                	            {
                	                 node->add_expression_initializer(c
                	                ); SET_END_LOCATION_FROM_NODE(node, c
                	                );
                	            }


                	        }


                	    }
                	    break;
                	case 2:
                	    {
                	        {
                	            d =  this->matchToken(DEFAULT, &FOLLOW_DEFAULT_in_inherited_declaration4309);
                	            if  (this->hasException())
                	            {
                	                goto ruleinherited_declarationEx;
                	            }


                	            {
                	                 node->set_default_initialization(); SET_END_LOCATION(node, d);
                	            }


                	        }


                	    }
                	    break;

                    }
                }

            }


        }

    }
    goto ruleinherited_declarationEx;
    ruleinherited_declarationEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::instructionScalar()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    scripting::declaration* declaration36;
    scripting::instruction* assignment_or_expression37;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt32;

            alt32=2;

            switch ( this->LA(1) )
            {
            case VOID_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt32=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case INT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 14 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 15 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 16 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 17 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 18 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case NULLTOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 19 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case VOID_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 20 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 21 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 22 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 23 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 24 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 25 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case RSQBRACKET:
            					{
            						alt32=1;
            					}
            				    break;
            				case DOUBDEC:
            				case DOUBINC:
            				case ID:
            				case LBRACKET:
            				case LENGTH:
            				case SHARED_REF:
            				case TYPE:
            				case 56:
            				case 66:
            					{
            						alt32=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 32 );
            				    ex->set_state( 11 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case DRSQBRACKET:
            					{
            						alt32=1;
            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case SHARED_REF:
            				case STRING:
            				case STRING_TYPE:
            				case TYPE:
            				case VOID_TYPE:
            				case 56:
            				case 66:
            					{
            						alt32=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 32 );
            				    ex->set_state( 12 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt32=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 32 );
            		    ex->set_state( 1 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case INT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt32=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case INT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 14 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 15 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 16 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 17 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 18 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case NULLTOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 19 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case VOID_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 20 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 21 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 22 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 23 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 24 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 25 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case RSQBRACKET:
            					{
            						alt32=1;
            					}
            				    break;
            				case DOUBDEC:
            				case DOUBINC:
            				case ID:
            				case LBRACKET:
            				case LENGTH:
            				case SHARED_REF:
            				case TYPE:
            				case 56:
            				case 66:
            					{
            						alt32=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 32 );
            				    ex->set_state( 11 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case DRSQBRACKET:
            					{
            						alt32=1;
            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case SHARED_REF:
            				case STRING:
            				case STRING_TYPE:
            				case TYPE:
            				case VOID_TYPE:
            				case 56:
            				case 66:
            					{
            						alt32=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 32 );
            				    ex->set_state( 12 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt32=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 32 );
            		    ex->set_state( 2 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case FLOAT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt32=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case INT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 14 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 15 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 16 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 17 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 18 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case NULLTOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 19 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case VOID_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 20 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 21 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 22 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 23 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 24 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 25 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case RSQBRACKET:
            					{
            						alt32=1;
            					}
            				    break;
            				case DOUBDEC:
            				case DOUBINC:
            				case ID:
            				case LBRACKET:
            				case LENGTH:
            				case SHARED_REF:
            				case TYPE:
            				case 56:
            				case 66:
            					{
            						alt32=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 32 );
            				    ex->set_state( 11 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case DRSQBRACKET:
            					{
            						alt32=1;
            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case SHARED_REF:
            				case STRING:
            				case STRING_TYPE:
            				case TYPE:
            				case VOID_TYPE:
            				case 56:
            				case 66:
            					{
            						alt32=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 32 );
            				    ex->set_state( 12 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt32=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 32 );
            		    ex->set_state( 3 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case CHAR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt32=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case INT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 14 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 15 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 16 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 17 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 18 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case NULLTOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 19 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case VOID_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 20 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 21 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 22 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 23 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 24 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 25 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case RSQBRACKET:
            					{
            						alt32=1;
            					}
            				    break;
            				case DOUBDEC:
            				case DOUBINC:
            				case ID:
            				case LBRACKET:
            				case LENGTH:
            				case SHARED_REF:
            				case TYPE:
            				case 56:
            				case 66:
            					{
            						alt32=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 32 );
            				    ex->set_state( 11 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case DRSQBRACKET:
            					{
            						alt32=1;
            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case SHARED_REF:
            				case STRING:
            				case STRING_TYPE:
            				case TYPE:
            				case VOID_TYPE:
            				case 56:
            				case 66:
            					{
            						alt32=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 32 );
            				    ex->set_state( 12 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt32=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 32 );
            		    ex->set_state( 4 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case BOOL_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt32=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case INT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 14 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 15 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 16 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 17 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 18 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case NULLTOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 19 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case VOID_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 20 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 21 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 22 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 23 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 24 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 25 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case RSQBRACKET:
            					{
            						alt32=1;
            					}
            				    break;
            				case DOUBDEC:
            				case DOUBINC:
            				case ID:
            				case LBRACKET:
            				case LENGTH:
            				case SHARED_REF:
            				case TYPE:
            				case 56:
            				case 66:
            					{
            						alt32=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 32 );
            				    ex->set_state( 11 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case DRSQBRACKET:
            					{
            						alt32=1;
            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case SHARED_REF:
            				case STRING:
            				case STRING_TYPE:
            				case TYPE:
            				case VOID_TYPE:
            				case 56:
            				case 66:
            					{
            						alt32=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 32 );
            				    ex->set_state( 12 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt32=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 32 );
            		    ex->set_state( 5 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case STRING_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt32=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case INT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 14 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 15 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 16 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 17 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 18 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case NULLTOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 19 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case VOID_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 20 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 21 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 22 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 23 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 24 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 25 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case RSQBRACKET:
            					{
            						alt32=1;
            					}
            				    break;
            				case DOUBDEC:
            				case DOUBINC:
            				case ID:
            				case LBRACKET:
            				case LENGTH:
            				case SHARED_REF:
            				case TYPE:
            				case 56:
            				case 66:
            					{
            						alt32=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 32 );
            				    ex->set_state( 11 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case DRSQBRACKET:
            					{
            						alt32=1;
            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case SHARED_REF:
            				case STRING:
            				case STRING_TYPE:
            				case TYPE:
            				case VOID_TYPE:
            				case 56:
            				case 66:
            					{
            						alt32=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 32 );
            				    ex->set_state( 12 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt32=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 32 );
            		    ex->set_state( 6 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            		case QUESTION:
            			{
            				alt32=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case INT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 14 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 15 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 16 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 17 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 18 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case NULLTOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt32=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 28 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACKET:
            						case LSQBRACKET:
            						case QUESTION:
            						case 57:
            						case 58:
            						case 60:
            						case 61:
            						case 62:
            						case 64:
            						case 66:
            						case 68:
            						case 69:
            						case 71:
            						case 72:
            						case 74:
            						case 75:
            						case 76:
            						case 77:
            						case 78:
            						case 79:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 19 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case VOID_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 20 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 21 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 22 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 23 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 24 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt32=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 28 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACKET:
            												case LSQBRACKET:
            												case QUESTION:
            												case 57:
            												case 58:
            												case 60:
            												case 61:
            												case 62:
            												case 64:
            												case 66:
            												case 68:
            												case 69:
            												case 71:
            												case 72:
            												case 74:
            												case 75:
            												case 76:
            												case 77:
            												case 78:
            												case 79:
            													{
            														alt32=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 45 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 42 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 29 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 25 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case RSQBRACKET:
            					{
            						alt32=1;
            					}
            				    break;
            				case DOUBDEC:
            				case DOUBINC:
            				case ID:
            				case LBRACKET:
            				case LENGTH:
            				case SHARED_REF:
            				case TYPE:
            				case 56:
            				case 66:
            					{
            						alt32=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 32 );
            				    ex->set_state( 11 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case DRSQBRACKET:
            					{
            						alt32=1;
            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case SHARED_REF:
            				case STRING:
            				case STRING_TYPE:
            				case TYPE:
            				case VOID_TYPE:
            				case 56:
            				case 66:
            					{
            						alt32=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 32 );
            				    ex->set_state( 12 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACKET:
            			{
            				alt32=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 32 );
            		    ex->set_state( 7 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case SHARED_REF:
            	{
            		switch ( this->LA(2) )
            		{
            		case TYPE:
            			{
            				switch ( this->LA(3) )
            				{
            				case LSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case INT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RSQBRACKET:
            									{
            										switch ( this->LA(6) )
            										{
            										case ID:
            											{
            												alt32=1;
            											}
            										    break;
            										case LBRACKET:
            											{
            												alt32=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 43 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DOUBDEC:
            								case DOUBINC:
            								case LBRACKET:
            								case LSQBRACKET:
            								case QUESTION:
            								case 57:
            								case 58:
            								case 60:
            								case 61:
            								case 62:
            								case 64:
            								case 66:
            								case 68:
            								case 69:
            								case 71:
            								case 72:
            								case 74:
            								case 75:
            								case 76:
            								case 77:
            								case 78:
            								case 79:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 30 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case FLOAT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RSQBRACKET:
            									{
            										switch ( this->LA(6) )
            										{
            										case ID:
            											{
            												alt32=1;
            											}
            										    break;
            										case LBRACKET:
            											{
            												alt32=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 43 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DOUBDEC:
            								case DOUBINC:
            								case LBRACKET:
            								case LSQBRACKET:
            								case QUESTION:
            								case 57:
            								case 58:
            								case 60:
            								case 61:
            								case 62:
            								case 64:
            								case 66:
            								case 68:
            								case 69:
            								case 71:
            								case 72:
            								case 74:
            								case 75:
            								case 76:
            								case 77:
            								case 78:
            								case 79:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 31 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case CHAR:
            							{
            								switch ( this->LA(5) )
            								{
            								case RSQBRACKET:
            									{
            										switch ( this->LA(6) )
            										{
            										case ID:
            											{
            												alt32=1;
            											}
            										    break;
            										case LBRACKET:
            											{
            												alt32=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 43 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DOUBDEC:
            								case DOUBINC:
            								case LBRACKET:
            								case LSQBRACKET:
            								case QUESTION:
            								case 57:
            								case 58:
            								case 60:
            								case 61:
            								case 62:
            								case 64:
            								case 66:
            								case 68:
            								case 69:
            								case 71:
            								case 72:
            								case 74:
            								case 75:
            								case 76:
            								case 77:
            								case 78:
            								case 79:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case STRING:
            							{
            								switch ( this->LA(5) )
            								{
            								case RSQBRACKET:
            									{
            										switch ( this->LA(6) )
            										{
            										case ID:
            											{
            												alt32=1;
            											}
            										    break;
            										case LBRACKET:
            											{
            												alt32=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 43 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DOUBDEC:
            								case DOUBINC:
            								case LBRACKET:
            								case LSQBRACKET:
            								case QUESTION:
            								case 57:
            								case 58:
            								case 60:
            								case 61:
            								case 62:
            								case 64:
            								case 66:
            								case 68:
            								case 69:
            								case 71:
            								case 72:
            								case 74:
            								case 75:
            								case 76:
            								case 77:
            								case 78:
            								case 79:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case BOOL:
            							{
            								switch ( this->LA(5) )
            								{
            								case RSQBRACKET:
            									{
            										switch ( this->LA(6) )
            										{
            										case ID:
            											{
            												alt32=1;
            											}
            										    break;
            										case LBRACKET:
            											{
            												alt32=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 43 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DOUBDEC:
            								case DOUBINC:
            								case LBRACKET:
            								case LSQBRACKET:
            								case QUESTION:
            								case 57:
            								case 58:
            								case 60:
            								case 61:
            								case 62:
            								case 64:
            								case 66:
            								case 68:
            								case 69:
            								case 71:
            								case 72:
            								case 74:
            								case 75:
            								case 76:
            								case 77:
            								case 78:
            								case 79:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 34 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case NULLTOK:
            							{
            								switch ( this->LA(5) )
            								{
            								case RSQBRACKET:
            									{
            										switch ( this->LA(6) )
            										{
            										case ID:
            											{
            												alt32=1;
            											}
            										    break;
            										case LBRACKET:
            											{
            												alt32=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 43 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DOUBDEC:
            								case DOUBINC:
            								case LBRACKET:
            								case LSQBRACKET:
            								case QUESTION:
            								case 57:
            								case 58:
            								case 60:
            								case 61:
            								case 62:
            								case 64:
            								case 66:
            								case 68:
            								case 69:
            								case 71:
            								case 72:
            								case 74:
            								case 75:
            								case 76:
            								case 77:
            								case 78:
            								case 79:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 35 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case VOID_TYPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case LBRACE:
            									{
            										switch ( this->LA(6) )
            										{
            										case STRING:
            											{
            												switch ( this->LA(7) )
            												{
            												case RBRACE:
            													{
            														switch ( this->LA(8) )
            														{
            														case RSQBRACKET:
            															{
            																switch ( this->LA(9) )
            																{
            																case ID:
            																	{
            																		alt32=1;
            																	}
            																    break;
            																case LBRACKET:
            																	{
            																		alt32=2;
            																	}
            																    break;

            																default:
            																    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            																    ex->set_decisionNum( 32 );
            																    ex->set_state( 43 );


            																    goto ruleinstructionScalarEx;

            																}

            															}
            														    break;
            														case DOUBDEC:
            														case DOUBINC:
            														case LBRACKET:
            														case LSQBRACKET:
            														case QUESTION:
            														case 57:
            														case 58:
            														case 60:
            														case 61:
            														case 62:
            														case 64:
            														case 66:
            														case 68:
            														case 69:
            														case 71:
            														case 72:
            														case 74:
            														case 75:
            														case 76:
            														case 77:
            														case 78:
            														case 79:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 47 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 46 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 44 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DLSQBRACKET:
            								case LBRACKET:
            								case LSQBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case INT_TYPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case LBRACE:
            									{
            										switch ( this->LA(6) )
            										{
            										case STRING:
            											{
            												switch ( this->LA(7) )
            												{
            												case RBRACE:
            													{
            														switch ( this->LA(8) )
            														{
            														case RSQBRACKET:
            															{
            																switch ( this->LA(9) )
            																{
            																case ID:
            																	{
            																		alt32=1;
            																	}
            																    break;
            																case LBRACKET:
            																	{
            																		alt32=2;
            																	}
            																    break;

            																default:
            																    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            																    ex->set_decisionNum( 32 );
            																    ex->set_state( 43 );


            																    goto ruleinstructionScalarEx;

            																}

            															}
            														    break;
            														case DOUBDEC:
            														case DOUBINC:
            														case LBRACKET:
            														case LSQBRACKET:
            														case QUESTION:
            														case 57:
            														case 58:
            														case 60:
            														case 61:
            														case 62:
            														case 64:
            														case 66:
            														case 68:
            														case 69:
            														case 71:
            														case 72:
            														case 74:
            														case 75:
            														case 76:
            														case 77:
            														case 78:
            														case 79:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 47 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 46 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 44 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DLSQBRACKET:
            								case LBRACKET:
            								case LSQBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case FLOAT_TYPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case LBRACE:
            									{
            										switch ( this->LA(6) )
            										{
            										case STRING:
            											{
            												switch ( this->LA(7) )
            												{
            												case RBRACE:
            													{
            														switch ( this->LA(8) )
            														{
            														case RSQBRACKET:
            															{
            																switch ( this->LA(9) )
            																{
            																case ID:
            																	{
            																		alt32=1;
            																	}
            																    break;
            																case LBRACKET:
            																	{
            																		alt32=2;
            																	}
            																    break;

            																default:
            																    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            																    ex->set_decisionNum( 32 );
            																    ex->set_state( 43 );


            																    goto ruleinstructionScalarEx;

            																}

            															}
            														    break;
            														case DOUBDEC:
            														case DOUBINC:
            														case LBRACKET:
            														case LSQBRACKET:
            														case QUESTION:
            														case 57:
            														case 58:
            														case 60:
            														case 61:
            														case 62:
            														case 64:
            														case 66:
            														case 68:
            														case 69:
            														case 71:
            														case 72:
            														case 74:
            														case 75:
            														case 76:
            														case 77:
            														case 78:
            														case 79:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 47 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 46 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 44 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DLSQBRACKET:
            								case LBRACKET:
            								case LSQBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 38 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case CHAR_TYPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case LBRACE:
            									{
            										switch ( this->LA(6) )
            										{
            										case STRING:
            											{
            												switch ( this->LA(7) )
            												{
            												case RBRACE:
            													{
            														switch ( this->LA(8) )
            														{
            														case RSQBRACKET:
            															{
            																switch ( this->LA(9) )
            																{
            																case ID:
            																	{
            																		alt32=1;
            																	}
            																    break;
            																case LBRACKET:
            																	{
            																		alt32=2;
            																	}
            																    break;

            																default:
            																    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            																    ex->set_decisionNum( 32 );
            																    ex->set_state( 43 );


            																    goto ruleinstructionScalarEx;

            																}

            															}
            														    break;
            														case DOUBDEC:
            														case DOUBINC:
            														case LBRACKET:
            														case LSQBRACKET:
            														case QUESTION:
            														case 57:
            														case 58:
            														case 60:
            														case 61:
            														case 62:
            														case 64:
            														case 66:
            														case 68:
            														case 69:
            														case 71:
            														case 72:
            														case 74:
            														case 75:
            														case 76:
            														case 77:
            														case 78:
            														case 79:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 47 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 46 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 44 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DLSQBRACKET:
            								case LBRACKET:
            								case LSQBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 39 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case BOOL_TYPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case LBRACE:
            									{
            										switch ( this->LA(6) )
            										{
            										case STRING:
            											{
            												switch ( this->LA(7) )
            												{
            												case RBRACE:
            													{
            														switch ( this->LA(8) )
            														{
            														case RSQBRACKET:
            															{
            																switch ( this->LA(9) )
            																{
            																case ID:
            																	{
            																		alt32=1;
            																	}
            																    break;
            																case LBRACKET:
            																	{
            																		alt32=2;
            																	}
            																    break;

            																default:
            																    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            																    ex->set_decisionNum( 32 );
            																    ex->set_state( 43 );


            																    goto ruleinstructionScalarEx;

            																}

            															}
            														    break;
            														case DOUBDEC:
            														case DOUBINC:
            														case LBRACKET:
            														case LSQBRACKET:
            														case QUESTION:
            														case 57:
            														case 58:
            														case 60:
            														case 61:
            														case 62:
            														case 64:
            														case 66:
            														case 68:
            														case 69:
            														case 71:
            														case 72:
            														case 74:
            														case 75:
            														case 76:
            														case 77:
            														case 78:
            														case 79:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 47 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 46 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 44 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DLSQBRACKET:
            								case LBRACKET:
            								case LSQBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 40 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case STRING_TYPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case LBRACE:
            									{
            										switch ( this->LA(6) )
            										{
            										case STRING:
            											{
            												switch ( this->LA(7) )
            												{
            												case RBRACE:
            													{
            														switch ( this->LA(8) )
            														{
            														case RSQBRACKET:
            															{
            																switch ( this->LA(9) )
            																{
            																case ID:
            																	{
            																		alt32=1;
            																	}
            																    break;
            																case LBRACKET:
            																	{
            																		alt32=2;
            																	}
            																    break;

            																default:
            																    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            																    ex->set_decisionNum( 32 );
            																    ex->set_state( 43 );


            																    goto ruleinstructionScalarEx;

            																}

            															}
            														    break;
            														case DOUBDEC:
            														case DOUBINC:
            														case LBRACKET:
            														case LSQBRACKET:
            														case QUESTION:
            														case 57:
            														case 58:
            														case 60:
            														case 61:
            														case 62:
            														case 64:
            														case 66:
            														case 68:
            														case 69:
            														case 71:
            														case 72:
            														case 74:
            														case 75:
            														case 76:
            														case 77:
            														case 78:
            														case 79:
            															{
            																alt32=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 32 );
            														    ex->set_state( 47 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 32 );
            												    ex->set_state( 46 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 32 );
            										    ex->set_state( 44 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DLSQBRACKET:
            								case LBRACKET:
            								case LSQBRACKET:
            									{
            										alt32=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 32 );
            								    ex->set_state( 41 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case RSQBRACKET:
            							{
            								alt32=1;
            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case ID:
            						case LBRACKET:
            						case LENGTH:
            						case SHARED_REF:
            						case TYPE:
            						case 56:
            						case 66:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 26 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case DLSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case DRSQBRACKET:
            							{
            								alt32=1;
            							}
            						    break;
            						case BOOL:
            						case BOOL_TYPE:
            						case CHAR:
            						case CHAR_TYPE:
            						case DOUBDEC:
            						case DOUBINC:
            						case FLOAT:
            						case FLOAT_TYPE:
            						case ID:
            						case INT:
            						case INT_TYPE:
            						case LBRACKET:
            						case LENGTH:
            						case NULLTOK:
            						case SHARED_REF:
            						case STRING:
            						case STRING_TYPE:
            						case TYPE:
            						case VOID_TYPE:
            						case 56:
            						case 66:
            							{
            								alt32=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 32 );
            						    ex->set_state( 27 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case ID:
            					{
            						alt32=1;
            					}
            				    break;
            				case LBRACKET:
            					{
            						alt32=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 32 );
            				    ex->set_state( 13 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case BOOL_TYPE:
            		case CHAR_TYPE:
            		case FLOAT_TYPE:
            		case INT_TYPE:
            		case STRING_TYPE:
            		case VOID_TYPE:
            			{
            				alt32=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 32 );
            		    ex->set_state( 8 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case WEAK_REF:
            	{
            		alt32=1;
            	}
                break;
            case BOOL:
            case CHAR:
            case DOUBDEC:
            case DOUBINC:
            case FLOAT:
            case ID:
            case INT:
            case LBRACKET:
            case LENGTH:
            case NULLTOK:
            case STRING:
            case 56:
            case 66:
            	{
            		alt32=2;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 32 );
                ex->set_state( 0 );


                goto ruleinstructionScalarEx;

            }

            switch (alt32)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_declaration_in_instructionScalar4365);
        	        declaration36=declaration();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionScalarEx;
        	        }


        	        {
        	            node = declaration36
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_assignment_or_expression_in_instructionScalar4378);
        	        assignment_or_expression37=assignment_or_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionScalarEx;
        	        }


        	        {
        	            node = assignment_or_expression37
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleinstructionScalarEx;
    ruleinstructionScalarEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::continue_instruction*
WNScriptASTParser::continueInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::continue_instruction* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* b = NULL;






      node = nullptr;



    {
        {
            a =  this->matchToken(CONTINUE, &FOLLOW_CONTINUE_in_continueInst4408);
            if  (this->hasException())
            {
                goto rulecontinueInstEx;
            }


            b =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_continueInst4412);
            if  (this->hasException())
            {
                goto rulecontinueInstEx;
            }


            {
                 node = m_allocator->construct<scripting::continue_instruction>(m_allocator); SET_LOCATION(node, a); SET_END_LOCATION(node, b);
            }


        }

    }
    goto rulecontinueInstEx;
    rulecontinueInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::break_instruction*
WNScriptASTParser::breakInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::break_instruction* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* b = NULL;






        node = nullptr;



    {
        {
            a =  this->matchToken(BREAK, &FOLLOW_BREAK_in_breakInst4438);
            if  (this->hasException())
            {
                goto rulebreakInstEx;
            }


            b =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_breakInst4442);
            if  (this->hasException())
            {
                goto rulebreakInstEx;
            }


            {
                 node = m_allocator->construct<scripting::break_instruction>(m_allocator); SET_LOCATION(node, a); SET_END_LOCATION(node, b);
            }


        }

    }
    goto rulebreakInstEx;
    rulebreakInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::return_instruction*
WNScriptASTParser::returnInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::return_instruction* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* b = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    const ImplTraits::CommonTokenType* d = NULL;
    scripting::expression* expr38;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt33;

            alt33=2;

            switch ( this->LA(1) )
            {
            case RETURN:
            	{
            		switch ( this->LA(2) )
            		{
            		case SEMICOLON:
            			{
            				alt33=2;
            			}
            		    break;
            		case BOOL:
            		case BOOL_TYPE:
            		case CHAR:
            		case CHAR_TYPE:
            		case DOUBDEC:
            		case DOUBINC:
            		case FLOAT:
            		case FLOAT_TYPE:
            		case ID:
            		case INT:
            		case INT_TYPE:
            		case LBRACKET:
            		case LENGTH:
            		case NULLTOK:
            		case SHARED_REF:
            		case STRING:
            		case STRING_TYPE:
            		case TYPE:
            		case VOID_TYPE:
            		case 56:
            		case 66:
            			{
            				alt33=1;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 33 );
            		    ex->set_state( 1 );


            		    goto rulereturnInstEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 33 );
                ex->set_state( 0 );


                goto rulereturnInstEx;

            }

            switch (alt33)
            {
        	case 1:
        	    {
        	        a =  this->matchToken(RETURN, &FOLLOW_RETURN_in_returnInst4469);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_returnInst4471);
        	        expr38=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        b =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_returnInst4475);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::return_instruction>(m_allocator, expr38
        	            ); SET_LOCATION(node, a); SET_END_LOCATION(node, b);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        c =  this->matchToken(RETURN, &FOLLOW_RETURN_in_returnInst4489);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        d =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_returnInst4493);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::return_instruction>(m_allocator); SET_LOCATION(node, c); SET_END_LOCATION(node, d);
        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulereturnInstEx;
    rulereturnInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::whileInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    const ImplTraits::CommonTokenType* WHILE41 = NULL;
    scripting::expression* expr39;
    scripting::instruction_list* instruction_list40;





        node = nullptr;



    {
        {
            WHILE41 =  this->matchToken(WHILE, &FOLLOW_WHILE_in_whileInst4526);
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_whileInst4528);
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


            this->followPush(FOLLOW_expr_in_whileInst4530);
            expr39=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_whileInst4532);
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


            this->followPush(FOLLOW_instruction_list_in_whileInst4534);
            instruction_list40=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


            {
                 node = m_allocator->construct<scripting::while_instruction>(m_allocator, expr39
                , instruction_list40
                ); SET_LOCATION(node, WHILE41); SET_END_LOCATION_FROM_NODE(node,
                instruction_list40
                );
            }


        }

    }
    goto rulewhileInstEx;
    rulewhileInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::doInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    const ImplTraits::CommonTokenType* DO44 = NULL;
    const ImplTraits::CommonTokenType* SEMICOLON45 = NULL;
    scripting::expression* expr42;
    scripting::instruction_list* instruction_list43;





        node = nullptr;



    {
        {
            DO44 =  this->matchToken(DO, &FOLLOW_DO_in_doInst4570);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            this->followPush(FOLLOW_instruction_list_in_doInst4572);
            instruction_list43=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


             this->matchToken(WHILE, &FOLLOW_WHILE_in_doInst4574);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_doInst4576);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            this->followPush(FOLLOW_expr_in_doInst4578);
            expr42=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_doInst4580);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            SEMICOLON45 =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_doInst4582);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            {
                node = m_allocator->construct<scripting::do_instruction>(m_allocator, expr42
                , instruction_list43
                ); SET_LOCATION(node, DO44); SET_END_LOCATION(node, SEMICOLON45);
            }


        }

    }
    goto ruledoInstEx;
    ruledoInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::for_instruction*
WNScriptASTParser::forInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::for_instruction* node;


    const ImplTraits::CommonTokenType* FOR46 = NULL;
    scripting::instruction* a;
    scripting::expression* b;
    scripting::instruction* c;
    scripting::instruction_list* d;





        node =  m_allocator->construct<scripting::for_instruction>(m_allocator);



    {
        {
            FOR46 =  this->matchToken(FOR, &FOLLOW_FOR_in_forInst4614);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_forInst4616);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            {
                 SET_LOCATION(node, FOR46);
            }


            {
                int alt34=2;
                switch ( this->LA(1) )
                {
                    case BOOL:
                    case BOOL_TYPE:
                    case CHAR:
                    case CHAR_TYPE:
                    case DOUBDEC:
                    case DOUBINC:
                    case FLOAT:
                    case FLOAT_TYPE:
                    case ID:
                    case INT:
                    case INT_TYPE:
                    case LBRACKET:
                    case LENGTH:
                    case NULLTOK:
                    case SHARED_REF:
                    case STRING:
                    case STRING_TYPE:
                    case TYPE:
                    case VOID_TYPE:
                    case WEAK_REF:
                    case 56:
                    case 66:
                    	{
                    		alt34=1;
                    	}
                        break;
                }

                switch (alt34)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_instructionScalar_in_forInst4644);
            	        a=instructionScalar();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleforInstEx;
            	        }


            	        {
            	            node->add_initializer(a
            	            );
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_forInst4650);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            {
                int alt35=2;
                switch ( this->LA(1) )
                {
                    case BOOL:
                    case BOOL_TYPE:
                    case CHAR:
                    case CHAR_TYPE:
                    case DOUBDEC:
                    case DOUBINC:
                    case FLOAT:
                    case FLOAT_TYPE:
                    case ID:
                    case INT:
                    case INT_TYPE:
                    case LBRACKET:
                    case LENGTH:
                    case NULLTOK:
                    case SHARED_REF:
                    case STRING:
                    case STRING_TYPE:
                    case TYPE:
                    case VOID_TYPE:
                    case 56:
                    case 66:
                    	{
                    		alt35=1;
                    	}
                        break;
                }

                switch (alt35)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_expr_in_forInst4675);
            	        b=expr();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleforInstEx;
            	        }


            	        {
            	            node->add_condition(b
            	            );
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_forInst4689);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            {
                int alt36=2;
                switch ( this->LA(1) )
                {
                    case BOOL:
                    case BOOL_TYPE:
                    case CHAR:
                    case CHAR_TYPE:
                    case DOUBDEC:
                    case DOUBINC:
                    case FLOAT:
                    case FLOAT_TYPE:
                    case ID:
                    case INT:
                    case INT_TYPE:
                    case LBRACKET:
                    case LENGTH:
                    case NULLTOK:
                    case SHARED_REF:
                    case STRING:
                    case STRING_TYPE:
                    case TYPE:
                    case VOID_TYPE:
                    case WEAK_REF:
                    case 56:
                    case 66:
                    	{
                    		alt36=1;
                    	}
                        break;
                }

                switch (alt36)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_instructionScalar_in_forInst4714);
            	        c=instructionScalar();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleforInstEx;
            	        }


            	        {
            	            node->add_post_op(c
            	            );
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_forInst4720);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            {
                this->followPush(FOLLOW_instruction_list_in_forInst4745);
                d=instruction_list();

                this->followPop();
                if  (this->hasException())
                {
                    goto ruleforInstEx;
                }


                {
                    node->add_body(d
                    ); SET_END_LOCATION_FROM_NODE(node, d
                    );
                }


            }


        }

    }
    goto ruleforInstEx;
    ruleforInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::else_if_instruction*
WNScriptASTParser::elsemiddle()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::else_if_instruction* node;


    const ImplTraits::CommonTokenType* ELSE49 = NULL;
    scripting::expression* expr47;
    scripting::instruction_list* instruction_list48;





        node = nullptr;



    {
        {
            ELSE49 =  this->matchToken(ELSE, &FOLLOW_ELSE_in_elsemiddle4793);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


             this->matchToken(IF, &FOLLOW_IF_in_elsemiddle4795);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_elsemiddle4797);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


            this->followPush(FOLLOW_expr_in_elsemiddle4799);
            expr47=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_elsemiddle4801);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


            this->followPush(FOLLOW_instruction_list_in_elsemiddle4803);
            instruction_list48=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


            {
                 node = m_allocator->construct<scripting::else_if_instruction>(m_allocator, expr47
                , instruction_list48
                ); SET_LOCATION(node, ELSE49); SET_END_LOCATION_FROM_NODE(node,
                instruction_list48
                );
            }


        }

    }
    goto ruleelsemiddleEx;
    ruleelsemiddleEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction_list*
WNScriptASTParser::endif()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction_list* node;


    scripting::instruction_list* instruction_list50;





        node = nullptr;



    {
        {
             this->matchToken(ELSE, &FOLLOW_ELSE_in_endif4836);
            if  (this->hasException())
            {
                goto ruleendifEx;
            }


            this->followPush(FOLLOW_instruction_list_in_endif4838);
            instruction_list50=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleendifEx;
            }


            {
                node = instruction_list50
                ;
            }


        }

    }
    goto ruleendifEx;
    ruleendifEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::if_instruction*
WNScriptASTParser::ifInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::if_instruction* node;


    const ImplTraits::CommonTokenType* IF53 = NULL;
    scripting::expression* expr51;
    scripting::instruction_list* instruction_list52;
    scripting::else_if_instruction* elsemiddle54;
    scripting::instruction_list* endif55;





        node = nullptr;



    {
        {
            IF53 =  this->matchToken(IF, &FOLLOW_IF_in_ifInst4868);
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_ifInst4870);
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


            this->followPush(FOLLOW_expr_in_ifInst4872);
            expr51=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_ifInst4874);
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


            this->followPush(FOLLOW_instruction_list_in_ifInst4876);
            instruction_list52=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


            {
                node = m_allocator->construct<scripting::if_instruction>(m_allocator, expr51
                , instruction_list52
                ); SET_LOCATION(node, IF53); SET_END_LOCATION_FROM_NODE(node,
                instruction_list52
                );
            }



            for (;;)
            {
                int alt37=2;
                switch ( this->LA(1) )
                {
                case ELSE:
                	{
                		switch ( this->LA(2) )
                		{
                		case IF:
                			{
                				alt37=1;
                			}
                		    break;

                		}

                	}
                    break;

                }

                switch (alt37)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_elsemiddle_in_ifInst4893);
            	        elsemiddle54=elsemiddle();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleifInstEx;
            	        }


            	        {
            	            node->add_else_if(elsemiddle54
            	            ); SET_END_LOCATION_FROM_NODE(node, elsemiddle54
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop37;
            	    break;
                }
            }
            loop37: ;


            {
                int alt38=2;
                switch ( this->LA(1) )
                {
                    case ELSE:
                    	{
                    		alt38=1;
                    	}
                        break;
                }

                switch (alt38)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_endif_in_ifInst4913);
            	        endif55=endif();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleifInstEx;
            	        }


            	        {
            	            node->add_else(endif55
            	            ); SET_LOCATION(node, IF53); SET_END_LOCATION_FROM_NODE(node,
            	            endif55
            	            );
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    goto ruleifInstEx;
    ruleifInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::instruction()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    scripting::if_instruction* ifInst56;
    scripting::instruction* whileInst57;
    scripting::instruction* doInst58;
    scripting::for_instruction* forInst59;
    scripting::instruction* instructionScalar60;
    scripting::break_instruction* breakInst61;
    scripting::continue_instruction* continueInst62;
    scripting::return_instruction* returnInst63;
    scripting::instruction_list* instruction_list64;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt39;

            alt39=9;

            switch ( this->LA(1) )
            {
            case IF:
            	{
            		alt39=1;
            	}
                break;
            case WHILE:
            	{
            		alt39=2;
            	}
                break;
            case DO:
            	{
            		alt39=3;
            	}
                break;
            case FOR:
            	{
            		alt39=4;
            	}
                break;
            case BOOL:
            case BOOL_TYPE:
            case CHAR:
            case CHAR_TYPE:
            case DOUBDEC:
            case DOUBINC:
            case FLOAT:
            case FLOAT_TYPE:
            case ID:
            case INT:
            case INT_TYPE:
            case LBRACKET:
            case LENGTH:
            case NULLTOK:
            case SHARED_REF:
            case STRING:
            case STRING_TYPE:
            case TYPE:
            case VOID_TYPE:
            case WEAK_REF:
            case 56:
            case 66:
            	{
            		alt39=5;
            	}
                break;
            case BREAK:
            	{
            		alt39=6;
            	}
                break;
            case CONTINUE:
            	{
            		alt39=7;
            	}
                break;
            case RETURN:
            	{
            		alt39=8;
            	}
                break;
            case LBRACE:
            	{
            		alt39=9;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 39 );
                ex->set_state( 0 );


                goto ruleinstructionEx;

            }

            switch (alt39)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_ifInst_in_instruction4947);
        	        ifInst56=ifInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	             node = ifInst56
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_whileInst_in_instruction4968);
        	        whileInst57=whileInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = whileInst57
        	            ;
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        this->followPush(FOLLOW_doInst_in_instruction4985);
        	        doInst58=doInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = doInst58
        	            ;
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        this->followPush(FOLLOW_forInst_in_instruction5005);
        	        forInst59=forInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = forInst59
        	            ;
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        this->followPush(FOLLOW_instructionScalar_in_instruction5025);
        	        instructionScalar60=instructionScalar();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	         this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_instruction5027);
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = instructionScalar60
        	            ;
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	        this->followPush(FOLLOW_breakInst_in_instruction5040);
        	        breakInst61=breakInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = breakInst61
        	            ;
        	        }


        	    }
        	    break;
        	case 7:
        	    {
        	        this->followPush(FOLLOW_continueInst_in_instruction5053);
        	        continueInst62=continueInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = continueInst62
        	            ;
        	        }


        	    }
        	    break;
        	case 8:
        	    {
        	        this->followPush(FOLLOW_returnInst_in_instruction5066);
        	        returnInst63=returnInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = returnInst63
        	            ;
        	        }


        	    }
        	    break;
        	case 9:
        	    {
        	        this->followPush(FOLLOW_instruction_list_in_instruction5079);
        	        instruction_list64=instruction_list();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	             node = instruction_list64
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleinstructionEx;
    ruleinstructionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction_list*
WNScriptASTParser::instruction_list()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction_list* node;


    const ImplTraits::CommonTokenType* lb = NULL;
    const ImplTraits::CommonTokenType* rb = NULL;
    scripting::instruction* b;





        node = m_allocator->construct<scripting::instruction_list>(m_allocator);



    {
        {
            lb =  this->matchToken(LBRACE, &FOLLOW_LBRACE_in_instruction_list5111);
            if  (this->hasException())
            {
                goto ruleinstruction_listEx;
            }



            for (;;)
            {
                int alt40=2;
                switch ( this->LA(1) )
                {
                case BOOL:
                case BOOL_TYPE:
                case BREAK:
                case CHAR:
                case CHAR_TYPE:
                case CONTINUE:
                case DO:
                case DOUBDEC:
                case DOUBINC:
                case FLOAT:
                case FLOAT_TYPE:
                case FOR:
                case ID:
                case IF:
                case INT:
                case INT_TYPE:
                case LBRACE:
                case LBRACKET:
                case LENGTH:
                case NULLTOK:
                case RETURN:
                case SHARED_REF:
                case STRING:
                case STRING_TYPE:
                case TYPE:
                case VOID_TYPE:
                case WEAK_REF:
                case WHILE:
                case 56:
                case 66:
                	{
                		alt40=1;
                	}
                    break;

                }

                switch (alt40)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_instruction_in_instruction_list5128);
            	        b=instruction();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleinstruction_listEx;
            	        }


            	        {
            	            node->add_instruction(b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop40;
            	    break;
                }
            }
            loop40: ;


            rb =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_instruction_list5145);
            if  (this->hasException())
            {
                goto ruleinstruction_listEx;
            }


            {

                          SET_LOCATION(node, lb); SET_END_LOCATION(node, rb);

            }


        }

    }
    goto ruleinstruction_listEx;
    ruleinstruction_listEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::function*
WNScriptASTParser::function()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::function* node;


    scripting::parameter* param65;
    scripting::parameter_list* parameterList66;
    scripting::instruction_list* instruction_list67;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_param_in_function5175);
            param65=param();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefunctionEx;
            }


            this->followPush(FOLLOW_parameterList_in_function5177);
            parameterList66=parameterList();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefunctionEx;
            }


            this->followPush(FOLLOW_instruction_list_in_function5179);
            instruction_list67=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefunctionEx;
            }


            {
                 node = m_allocator->construct<scripting::function>(m_allocator, param65
                , parameterList66
                , instruction_list67
                ); SET_LOCATION_FROM_NODE(node, param65
                ); SET_END_LOCATION_FROM_NODE(node, instruction_list67
                );
            }


        }

    }
    goto rulefunctionEx;
    rulefunctionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::struct_definition*
WNScriptASTParser::structDecl()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::struct_definition* node;


    const ImplTraits::CommonTokenType* TYPE68 = NULL;
    const ImplTraits::CommonTokenType* STRUCT69 = NULL;
    const ImplTraits::CommonTokenType* RBRACE70 = NULL;
    scripting::declaration* a;





        node = nullptr;



    {
        {
            STRUCT69 =  this->matchToken(STRUCT, &FOLLOW_STRUCT_in_structDecl5209);
            if  (this->hasException())
            {
                goto rulestructDeclEx;
            }


            TYPE68 =  this->matchToken(TYPE, &FOLLOW_TYPE_in_structDecl5211);
            if  (this->hasException())
            {
                goto rulestructDeclEx;
            }


            {
                node= m_allocator->construct<scripting::struct_definition>(m_allocator, (TYPE68->getText()).c_str()); SET_LOCATION(node, STRUCT69);
            }


             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_structDecl5227);
            if  (this->hasException())
            {
                goto rulestructDeclEx;
            }



            for (;;)
            {
                int alt41=2;
                switch ( this->LA(1) )
                {
                case BOOL_TYPE:
                case CHAR_TYPE:
                case FLOAT_TYPE:
                case INT_TYPE:
                case SHARED_REF:
                case STRING_TYPE:
                case TYPE:
                case VOID_TYPE:
                case WEAK_REF:
                	{
                		alt41=1;
                	}
                    break;

                }

                switch (alt41)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_declaration_in_structDecl5232);
            	        a=declaration();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulestructDeclEx;
            	        }


            	        {
            	             node->add_struct_elem(a
            	            );
            	        }


            	         this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_structDecl5236);
            	        if  (this->hasException())
            	        {
            	            goto rulestructDeclEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop41;
            	    break;
                }
            }
            loop41: ;


            RBRACE70 =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_structDecl5241);
            if  (this->hasException())
            {
                goto rulestructDeclEx;
            }


            {
                 SET_END_LOCATION(node, RBRACE70);
            }


        }

    }
    goto rulestructDeclEx;
    rulestructDeclEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::struct_definition*
WNScriptASTParser::classDecl()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::struct_definition* node;


    const ImplTraits::CommonTokenType* f = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    const ImplTraits::CommonTokenType* g = NULL;
    const ImplTraits::CommonTokenType* d = NULL;
    const ImplTraits::CommonTokenType* e = NULL;
    const ImplTraits::CommonTokenType* RBRACE71 = NULL;
    scripting::declaration* a;
    scripting::declaration* j;
    scripting::function* b;
    scripting::function* h;
    scripting::function* i;





        node = nullptr;



    {
        {
            {
                int alt42=2;
                switch ( this->LA(1) )
                {
                case CLASS:
                	{
                		switch ( this->LA(2) )
                		{
                		case TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case COLON:
                					{
                						alt42=2;
                					}
                				    break;
                				case LBRACE:
                					{
                						alt42=1;
                					}
                				    break;

                				default:
                				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 42 );
                				    ex->set_state( 2 );


                				    goto ruleclassDeclEx;

                				}

                			}
                		    break;

                		default:
                		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 42 );
                		    ex->set_state( 1 );


                		    goto ruleclassDeclEx;

                		}

                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 42 );
                    ex->set_state( 0 );


                    goto ruleclassDeclEx;

                }

                switch (alt42)
                {
            	case 1:
            	    {
            	        {
            	            f =  this->matchToken(CLASS, &FOLLOW_CLASS_in_classDecl5294);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            c =  this->matchToken(TYPE, &FOLLOW_TYPE_in_classDecl5298);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                node= m_allocator->construct<scripting::struct_definition>(m_allocator, (c->getText()).c_str(), true); SET_LOCATION(node, f);
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	            g =  this->matchToken(CLASS, &FOLLOW_CLASS_in_classDecl5318);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            d =  this->matchToken(TYPE, &FOLLOW_TYPE_in_classDecl5322);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	             this->matchToken(COLON, &FOLLOW_COLON_in_classDecl5324);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            e =  this->matchToken(TYPE, &FOLLOW_TYPE_in_classDecl5328);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                node= m_allocator->construct<scripting::struct_definition>(m_allocator, (d->getText()).c_str(), true, (e->getText()).c_str()); SET_LOCATION(node, g);
            	            }


            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_classDecl5355);
            if  (this->hasException())
            {
                goto ruleclassDeclEx;
            }



            for (;;)
            {
                int alt43=6;
                switch ( this->LA(1) )
                {
                case VOID_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 73:
                					{
                						alt43=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt43=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 73:
                									{
                										alt43=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt43=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 73:
                									{
                										alt43=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt43=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case INT_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 73:
                					{
                						alt43=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt43=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 73:
                									{
                										alt43=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt43=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 73:
                									{
                										alt43=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt43=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case FLOAT_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 73:
                					{
                						alt43=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt43=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 73:
                									{
                										alt43=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt43=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 73:
                									{
                										alt43=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt43=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case CHAR_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 73:
                					{
                						alt43=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt43=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 73:
                									{
                										alt43=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt43=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 73:
                									{
                										alt43=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt43=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case BOOL_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 73:
                					{
                						alt43=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt43=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 73:
                									{
                										alt43=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt43=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 73:
                									{
                										alt43=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt43=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case STRING_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 73:
                					{
                						alt43=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt43=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 73:
                									{
                										alt43=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt43=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 73:
                									{
                										alt43=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt43=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 73:
                					{
                						alt43=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt43=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 73:
                																	{
                																		alt43=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt43=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 73:
                									{
                										alt43=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt43=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 73:
                									{
                										alt43=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt43=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case QUESTION:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 73:
                							{
                								alt43=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt43=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case SHARED_REF:
                	{
                		switch ( this->LA(2) )
                		{
                		case TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case LSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case INT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 73:
                													{
                														alt43=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt43=3;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 73:
                													{
                														alt43=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt43=3;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 73:
                													{
                														alt43=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt43=3;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 73:
                													{
                														alt43=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt43=3;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 73:
                													{
                														alt43=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt43=3;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case NULLTOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 73:
                													{
                														alt43=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt43=3;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case VOID_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 73:
                																			{
                																				alt43=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt43=3;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case INT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 73:
                																			{
                																				alt43=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt43=3;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 73:
                																			{
                																				alt43=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt43=3;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 73:
                																			{
                																				alt43=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt43=3;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 73:
                																			{
                																				alt43=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt43=3;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 73:
                																			{
                																				alt43=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt43=3;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case DLSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case DRSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 73:
                											{
                												alt43=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt43=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 73:
                							{
                								alt43=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt43=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case WEAK_REF:
                	{
                		switch ( this->LA(2) )
                		{
                		case TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 73:
                							{
                								alt43=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt43=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case 68:
                	{
                		alt43=2;
                	}
                    break;
                case VIRTUAL:
                	{
                		alt43=4;
                	}
                    break;
                case OVERRIDE:
                	{
                		alt43=5;
                	}
                    break;

                }

                switch (alt43)
                {
            	case 1:
            	    {
            	        {
            	            this->followPush(FOLLOW_declaration_in_classDecl5398);
            	            a=declaration();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_struct_elem(a
            	                );
            	            }


            	             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_classDecl5402);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	            this->followPush(FOLLOW_inherited_declaration_in_classDecl5428);
            	            j=inherited_declaration();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_struct_elem(j
            	                );
            	            }


            	             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_classDecl5432);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	        {
            	            this->followPush(FOLLOW_function_in_classDecl5458);
            	            b=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_function(b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 4:
            	    {
            	        {
            	             this->matchToken(VIRTUAL, &FOLLOW_VIRTUAL_in_classDecl5487);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            this->followPush(FOLLOW_function_in_classDecl5491);
            	            h=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_function(h
            	                ); h
            	                ->set_is_virtual(true);
            	            }


            	        }


            	    }
            	    break;
            	case 5:
            	    {
            	        {
            	             this->matchToken(OVERRIDE, &FOLLOW_OVERRIDE_in_classDecl5517);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            this->followPush(FOLLOW_function_in_classDecl5521);
            	            i=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_function(i
            	                ); i
            	                ->set_is_override(true);
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop43;
            	    break;
                }
            }
            loop43: ;


            RBRACE71 =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_classDecl5557);
            if  (this->hasException())
            {
                goto ruleclassDeclEx;
            }


            {
                 SET_END_LOCATION(node, RBRACE71);
            }


        }

    }
    goto ruleclassDeclEx;
    ruleclassDeclEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






const char*
WNScriptASTParser::inc()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    const char* file;


    const ImplTraits::CommonTokenType* STRING72 = NULL;






        file = nullptr;



    {
        {
             this->matchToken(INCLUDE, &FOLLOW_INCLUDE_in_inc5587);
            if  (this->hasException())
            {
                goto ruleincEx;
            }


            STRING72 =  this->matchToken(STRING, &FOLLOW_STRING_in_inc5589);
            if  (this->hasException())
            {
                goto ruleincEx;
            }


            {
                 file = (STRING72->getText()).c_str();
            }


        }

    }
    goto ruleincEx;
    ruleincEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return file;
}






scripting::script_file*
WNScriptASTParser::program()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::script_file* node;


    scripting::function* function73;
    scripting::struct_definition* structDecl74;
    scripting::struct_definition* classDecl75;
    const char* inc76;





        node = m_allocator->construct<scripting::script_file>(m_allocator);



    {
        {

            for (;;)
            {
                int alt44=5;
                switch ( this->LA(1) )
                {
                case BOOL_TYPE:
                case CHAR_TYPE:
                case FLOAT_TYPE:
                case INT_TYPE:
                case SHARED_REF:
                case STRING_TYPE:
                case TYPE:
                case VOID_TYPE:
                case WEAK_REF:
                	{
                		alt44=1;
                	}
                    break;
                case STRUCT:
                	{
                		alt44=2;
                	}
                    break;
                case CLASS:
                	{
                		alt44=3;
                	}
                    break;
                case INCLUDE:
                	{
                		alt44=4;
                	}
                    break;

                }

                switch (alt44)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_function_in_program5635);
            	        function73=function();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_function(function73
            	            );
            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        this->followPush(FOLLOW_structDecl_in_program5657);
            	        structDecl74=structDecl();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_struct(structDecl74
            	            );
            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	        this->followPush(FOLLOW_classDecl_in_program5677);
            	        classDecl75=classDecl();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_struct(classDecl75
            	            );
            	        }


            	    }
            	    break;
            	case 4:
            	    {
            	        this->followPush(FOLLOW_inc_in_program5698);
            	        inc76=inc();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_include(inc76
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop44;
            	    break;
                }
            }
            loop44: ;


        }

    }
    goto ruleprogramEx;
    ruleprogramEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}

















