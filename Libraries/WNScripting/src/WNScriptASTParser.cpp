/** \file
 *  This C++ source file was generated by $ANTLR version 3.5.3-SNAPSHOT
 *
 *     -                for the parser : WNScriptASTParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF






    #include "WNCore/inc/WNBase.h"
#ifdef _WN_MSVC
    #pragma warning(disable: 4100)
    #pragma warning(disable: 4459)
    #pragma warning(disable: 4703)
#endif
    #include "WNMemory/inc/WNAllocator.h"
	  #include "WNScripting/src/WNScriptASTLexer.hpp"
    #include "WNScripting/inc/WNNodeTypes.h"

    using namespace wn;

    #ifndef SET_LOCATION
    #define SET_LOCATION(node, tok) { scripting::source_location loc; \
                                     loc.m_start_index = tok->get_startIndex();\
                                     loc.m_end_index = tok->get_stopIndex();\
                                     loc.m_line_start = tok->get_lineStart();\
                                     loc.m_line_number = tok->get_line();\
                                     loc.m_char_number = tok->get_charPositionInLine();\
                                     node->set_start_location(loc); \
                                   }

    #define SET_LOCATION_FROM_NODE(node, node2) { \
                                        if(node2) { \
                                        node->set_start_location(node2->get_start_location()); \
                                        } \
                                   }
    #define SET_START_LOCATION_FROM_NODE(node, node2) { \
                                        if(node2) { \
                                        scripting::source_location loc = node->get_start_location(); \
                                        scripting::source_location loc2 = node2->get_start_location(); \
                                        loc.m_start_index = loc2.m_start_index; \
                                        loc.m_line_start = loc2.m_line_start; \
                                        loc.m_line_number = loc2.m_line_number; \
                                        loc.m_char_number = loc2.m_char_number; \
                                        node->set_start_location(loc); \
                                        } \
                                    }
    #define SET_END_LOCATION(node, tok) { \
                                        node->set_end_index(tok->get_stopIndex()); \
                                      }
    #define SET_END_LOCATION_FROM_NODE(node, node2) { \
                                            if(node2) { \
                                            node->set_end_index(node2->get_start_location().m_end_index); \
                                            } \
                                            }
    #endif








#include    "WNScriptASTParser.hpp"









using namespace antlr3;



ANTLR_UINT8* WNScriptASTParserTokenNames[66+4]
     = {
        (ANTLR_UINT8*) "<invalid>",
        (ANTLR_UINT8*) "<EOR>",
        (ANTLR_UINT8*) "<DOWN>",
        (ANTLR_UINT8*) "<UP>",
        (ANTLR_UINT8*) "BOOL",
        (ANTLR_UINT8*) "BOOL_TYPE",
        (ANTLR_UINT8*) "CHAR",
        (ANTLR_UINT8*) "CHAR_TYPE",
        (ANTLR_UINT8*) "CLASS",
        (ANTLR_UINT8*) "COLON",
        (ANTLR_UINT8*) "COMMA",
        (ANTLR_UINT8*) "COMMENT",
        (ANTLR_UINT8*) "DO",
        (ANTLR_UINT8*) "DOUBDEC",
        (ANTLR_UINT8*) "DOUBINC",
        (ANTLR_UINT8*) "ELSE",
        (ANTLR_UINT8*) "ESC_SEQ",
        (ANTLR_UINT8*) "EXPONENT",
        (ANTLR_UINT8*) "FLOAT",
        (ANTLR_UINT8*) "FLOAT_TYPE",
        (ANTLR_UINT8*) "FOR",
        (ANTLR_UINT8*) "HEX_DIGIT",
        (ANTLR_UINT8*) "ID",
        (ANTLR_UINT8*) "IF",
        (ANTLR_UINT8*) "INCLUDE",
        (ANTLR_UINT8*) "INT",
        (ANTLR_UINT8*) "INT_TYPE",
        (ANTLR_UINT8*) "LBRACE",
        (ANTLR_UINT8*) "LBRACKET",
        (ANTLR_UINT8*) "LSQBRACKET",
        (ANTLR_UINT8*) "NULLTOK",
        (ANTLR_UINT8*) "OCTAL_ESC",
        (ANTLR_UINT8*) "OVERRIDE",
        (ANTLR_UINT8*) "QUESTION",
        (ANTLR_UINT8*) "RBRACE",
        (ANTLR_UINT8*) "RBRACKET",
        (ANTLR_UINT8*) "RETURN",
        (ANTLR_UINT8*) "RSQBRACKET",
        (ANTLR_UINT8*) "SEMICOLON",
        (ANTLR_UINT8*) "SHARED_REF",
        (ANTLR_UINT8*) "STRING",
        (ANTLR_UINT8*) "STRING_TYPE",
        (ANTLR_UINT8*) "STRUCT",
        (ANTLR_UINT8*) "TYPE",
        (ANTLR_UINT8*) "UNICODE_ESC",
        (ANTLR_UINT8*) "VIRTUAL",
        (ANTLR_UINT8*) "VOID_TYPE",
        (ANTLR_UINT8*) "WEAK_REF",
        (ANTLR_UINT8*) "WHILE",
        (ANTLR_UINT8*) "WS",
        (ANTLR_UINT8*) "'!='",
        (ANTLR_UINT8*) "'%'",
        (ANTLR_UINT8*) "'%='",
        (ANTLR_UINT8*) "'&&'",
        (ANTLR_UINT8*) "'*'",
        (ANTLR_UINT8*) "'*='",
        (ANTLR_UINT8*) "'+'",
        (ANTLR_UINT8*) "'+='",
        (ANTLR_UINT8*) "'-'",
        (ANTLR_UINT8*) "'-='",
        (ANTLR_UINT8*) "'.'",
        (ANTLR_UINT8*) "'/'",
        (ANTLR_UINT8*) "'/='",
        (ANTLR_UINT8*) "'<'",
        (ANTLR_UINT8*) "'<='",
        (ANTLR_UINT8*) "'='",
        (ANTLR_UINT8*) "'=='",
        (ANTLR_UINT8*) "'>'",
        (ANTLR_UINT8*) "'>='",
        (ANTLR_UINT8*) "'||'"
       };




static const char fileName[] = "WNScriptAST.g";



const char* WNScriptASTParser::getGrammarFileName()
{
	return fileName;
}






WNScriptASTParser::WNScriptASTParser( StreamType* instream)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, NULL)

{
	this->init(instream);
}







WNScriptASTParser::WNScriptASTParser( StreamType* instream, RecognizerSharedStateType* state)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, state)

{
	this->init(instream );
}

void WNScriptASTParser::init(StreamType* instream)
{


	this->get_psrstate()->set_tokenNames( WNScriptASTParserTokenNames );


}

void
WNScriptASTParser::reset()
{
    this->get_rec()->reset();
}



WNScriptASTParser::~WNScriptASTParser()
 {
}








static ANTLR_UINT8**	getTokenNames()
{
        return WNScriptASTParserTokenNames;
}





static	ANTLR_BITWORD FOLLOW_TYPE_in_objectType1151_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_objectType1151( FOLLOW_TYPE_in_objectType1151_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRING_TYPE_in_objectType1166_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_TYPE_in_objectType1166( FOLLOW_STRING_TYPE_in_objectType1166_bits, 1 );

static	ANTLR_BITWORD FOLLOW_VOID_TYPE_in_scalarType1195_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_VOID_TYPE_in_scalarType1195( FOLLOW_VOID_TYPE_in_scalarType1195_bits, 1 );

static	ANTLR_BITWORD FOLLOW_INT_TYPE_in_scalarType1207_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_INT_TYPE_in_scalarType1207( FOLLOW_INT_TYPE_in_scalarType1207_bits, 1 );

static	ANTLR_BITWORD FOLLOW_FLOAT_TYPE_in_scalarType1219_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_FLOAT_TYPE_in_scalarType1219( FOLLOW_FLOAT_TYPE_in_scalarType1219_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CHAR_TYPE_in_scalarType1231_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CHAR_TYPE_in_scalarType1231( FOLLOW_CHAR_TYPE_in_scalarType1231_bits, 1 );

static	ANTLR_BITWORD FOLLOW_BOOL_TYPE_in_scalarType1243_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_BOOL_TYPE_in_scalarType1243( FOLLOW_BOOL_TYPE_in_scalarType1243_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_compoundType1270_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_compoundType1270( FOLLOW_scalarType_in_compoundType1270_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_compoundType1286_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_compoundType1286( FOLLOW_LSQBRACKET_in_compoundType1286_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_compoundType1288_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_compoundType1288( FOLLOW_RSQBRACKET_in_compoundType1288_bits, 1 );

static	ANTLR_BITWORD FOLLOW_objectType_in_compoundType1300_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_objectType_in_compoundType1300( FOLLOW_objectType_in_compoundType1300_bits, 1 );

static	ANTLR_BITWORD FOLLOW_compoundType_in_type1330_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_compoundType_in_type1330( FOLLOW_compoundType_in_type1330_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_type1340_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_type1340( FOLLOW_scalarType_in_type1340_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_param1376_bits[]	= { ANTLR_UINT64_LIT(0x0000000000400000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_param1376( FOLLOW_scalarType_in_param1376_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1380_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1380( FOLLOW_ID_in_param1380_bits, 1 );

static	ANTLR_BITWORD FOLLOW_compoundType_in_param1395_bits[]	= { ANTLR_UINT64_LIT(0x0000000000400000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_compoundType_in_param1395( FOLLOW_compoundType_in_param1395_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1399_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1399( FOLLOW_ID_in_param1399_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SHARED_REF_in_param1412_bits[]	= { ANTLR_UINT64_LIT(0x00004A00040800A0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SHARED_REF_in_param1412( FOLLOW_SHARED_REF_in_param1412_bits, 1 );

static	ANTLR_BITWORD FOLLOW_compoundType_in_param1416_bits[]	= { ANTLR_UINT64_LIT(0x0000000000400000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_compoundType_in_param1416( FOLLOW_compoundType_in_param1416_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1420_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1420( FOLLOW_ID_in_param1420_bits, 1 );

static	ANTLR_BITWORD FOLLOW_WEAK_REF_in_param1433_bits[]	= { ANTLR_UINT64_LIT(0x00004A00040800A0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_WEAK_REF_in_param1433( FOLLOW_WEAK_REF_in_param1433_bits, 1 );

static	ANTLR_BITWORD FOLLOW_compoundType_in_param1437_bits[]	= { ANTLR_UINT64_LIT(0x0000000000400000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_compoundType_in_param1437( FOLLOW_compoundType_in_param1437_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1442_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1442( FOLLOW_ID_in_param1442_bits, 1 );

static	ANTLR_BITWORD FOLLOW_compoundType_in_param1457_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_compoundType_in_param1457( FOLLOW_compoundType_in_param1457_bits, 1 );

static	ANTLR_BITWORD FOLLOW_QUESTION_in_param1459_bits[]	= { ANTLR_UINT64_LIT(0x0000000000400000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_QUESTION_in_param1459( FOLLOW_QUESTION_in_param1459_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1464_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1464( FOLLOW_ID_in_param1464_bits, 1 );

static	ANTLR_BITWORD FOLLOW_param_in_paramList1496_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000402) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_param_in_paramList1496( FOLLOW_param_in_paramList1496_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COMMA_in_paramList1509_bits[]	= { ANTLR_UINT64_LIT(0x0000CA80040800A0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COMMA_in_paramList1509( FOLLOW_COMMA_in_paramList1509_bits, 1 );

static	ANTLR_BITWORD FOLLOW_param_in_paramList1513_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000402) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_param_in_paramList1513( FOLLOW_param_in_paramList1513_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_parameterList1545_bits[]	= { ANTLR_UINT64_LIT(0x0000CA80040800A0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_parameterList1545( FOLLOW_LBRACKET_in_parameterList1545_bits, 1 );

static	ANTLR_BITWORD FOLLOW_paramList_in_parameterList1547_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_paramList_in_parameterList1547( FOLLOW_paramList_in_parameterList1547_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_parameterList1549_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_parameterList1549( FOLLOW_RBRACKET_in_parameterList1549_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_parameterList1566_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_parameterList1566( FOLLOW_LBRACKET_in_parameterList1566_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_parameterList1568_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_parameterList1568( FOLLOW_RBRACKET_in_parameterList1568_bits, 1 );

static	ANTLR_BITWORD FOLLOW_65_in_assign_type1604_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_65_in_assign_type1604( FOLLOW_65_in_assign_type1604_bits, 1 );

static	ANTLR_BITWORD FOLLOW_57_in_assign_type1618_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_57_in_assign_type1618( FOLLOW_57_in_assign_type1618_bits, 1 );

static	ANTLR_BITWORD FOLLOW_59_in_assign_type1631_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_59_in_assign_type1631( FOLLOW_59_in_assign_type1631_bits, 1 );

static	ANTLR_BITWORD FOLLOW_55_in_assign_type1644_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_55_in_assign_type1644( FOLLOW_55_in_assign_type1644_bits, 1 );

static	ANTLR_BITWORD FOLLOW_62_in_assign_type1657_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_62_in_assign_type1657( FOLLOW_62_in_assign_type1657_bits, 1 );

static	ANTLR_BITWORD FOLLOW_52_in_assign_type1670_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_52_in_assign_type1670( FOLLOW_52_in_assign_type1670_bits, 1 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_lvalue1700_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_lvalue1700( FOLLOW_unary_ex_in_lvalue1700_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_arglist1758_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000402) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arglist1758( FOLLOW_expr_in_arglist1758_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COMMA_in_arglist1791_bits[]	= { ANTLR_UINT64_LIT(0x04004100564C64F2) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COMMA_in_arglist1791( FOLLOW_COMMA_in_arglist1791_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_arglist1835_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000402) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arglist1835( FOLLOW_expr_in_arglist1835_bits, 1 );

static	ANTLR_BITWORD FOLLOW_cond_ex_in_expr1910_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_cond_ex_in_expr1910( FOLLOW_cond_ex_in_expr1910_bits, 1 );

static	ANTLR_BITWORD FOLLOW_or_ex_in_cond_ex1948_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_or_ex_in_cond_ex1948( FOLLOW_or_ex_in_cond_ex1948_bits, 1 );

static	ANTLR_BITWORD FOLLOW_QUESTION_in_cond_ex1971_bits[]	= { ANTLR_UINT64_LIT(0x04004100564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_QUESTION_in_cond_ex1971( FOLLOW_QUESTION_in_cond_ex1971_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_cond_ex1975_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000200) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_cond_ex1975( FOLLOW_expr_in_cond_ex1975_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COLON_in_cond_ex1977_bits[]	= { ANTLR_UINT64_LIT(0x04004100564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COLON_in_cond_ex1977( FOLLOW_COLON_in_cond_ex1977_bits, 1 );

static	ANTLR_BITWORD FOLLOW_cond_ex_in_cond_ex1981_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_cond_ex_in_cond_ex1981( FOLLOW_cond_ex_in_cond_ex1981_bits, 1 );

static	ANTLR_BITWORD FOLLOW_and_ex_in_or_ex2028_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000020) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_and_ex_in_or_ex2028( FOLLOW_and_ex_in_or_ex2028_bits, 2 );

static	ANTLR_BITWORD FOLLOW_69_in_or_ex2045_bits[]	= { ANTLR_UINT64_LIT(0x04004100564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_69_in_or_ex2045( FOLLOW_69_in_or_ex2045_bits, 1 );

static	ANTLR_BITWORD FOLLOW_and_ex_in_or_ex2049_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000020) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_and_ex_in_or_ex2049( FOLLOW_and_ex_in_or_ex2049_bits, 2 );

static	ANTLR_BITWORD FOLLOW_eq_ex_in_and_ex2092_bits[]	= { ANTLR_UINT64_LIT(0x0020000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_eq_ex_in_and_ex2092( FOLLOW_eq_ex_in_and_ex2092_bits, 1 );

static	ANTLR_BITWORD FOLLOW_53_in_and_ex2109_bits[]	= { ANTLR_UINT64_LIT(0x04004100564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_53_in_and_ex2109( FOLLOW_53_in_and_ex2109_bits, 1 );

static	ANTLR_BITWORD FOLLOW_eq_ex_in_and_ex2113_bits[]	= { ANTLR_UINT64_LIT(0x0020000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_eq_ex_in_and_ex2113( FOLLOW_eq_ex_in_and_ex2113_bits, 1 );

static	ANTLR_BITWORD FOLLOW_rel_ex_in_eq_ex2149_bits[]	= { ANTLR_UINT64_LIT(0x0004000000000002), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_rel_ex_in_eq_ex2149( FOLLOW_rel_ex_in_eq_ex2149_bits, 2 );

static	ANTLR_BITWORD FOLLOW_66_in_eq_ex2184_bits[]	= { ANTLR_UINT64_LIT(0x04004100564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_66_in_eq_ex2184( FOLLOW_66_in_eq_ex2184_bits, 1 );

static	ANTLR_BITWORD FOLLOW_rel_ex_in_eq_ex2188_bits[]	= { ANTLR_UINT64_LIT(0x0004000000000002), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_rel_ex_in_eq_ex2188( FOLLOW_rel_ex_in_eq_ex2188_bits, 2 );

static	ANTLR_BITWORD FOLLOW_50_in_eq_ex2211_bits[]	= { ANTLR_UINT64_LIT(0x04004100564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_50_in_eq_ex2211( FOLLOW_50_in_eq_ex2211_bits, 1 );

static	ANTLR_BITWORD FOLLOW_rel_ex_in_eq_ex2215_bits[]	= { ANTLR_UINT64_LIT(0x0004000000000002), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_rel_ex_in_eq_ex2215( FOLLOW_rel_ex_in_eq_ex2215_bits, 2 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2273_bits[]	= { ANTLR_UINT64_LIT(0x8000000000000002), ANTLR_UINT64_LIT(0x0000000000000019) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2273( FOLLOW_add_ex_in_rel_ex2273_bits, 2 );

static	ANTLR_BITWORD FOLLOW_63_in_rel_ex2309_bits[]	= { ANTLR_UINT64_LIT(0x04004100564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_63_in_rel_ex2309( FOLLOW_63_in_rel_ex2309_bits, 1 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2313_bits[]	= { ANTLR_UINT64_LIT(0x8000000000000002), ANTLR_UINT64_LIT(0x0000000000000019) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2313( FOLLOW_add_ex_in_rel_ex2313_bits, 2 );

static	ANTLR_BITWORD FOLLOW_67_in_rel_ex2337_bits[]	= { ANTLR_UINT64_LIT(0x04004100564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_67_in_rel_ex2337( FOLLOW_67_in_rel_ex2337_bits, 1 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2341_bits[]	= { ANTLR_UINT64_LIT(0x8000000000000002), ANTLR_UINT64_LIT(0x0000000000000019) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2341( FOLLOW_add_ex_in_rel_ex2341_bits, 2 );

static	ANTLR_BITWORD FOLLOW_64_in_rel_ex2365_bits[]	= { ANTLR_UINT64_LIT(0x04004100564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_64_in_rel_ex2365( FOLLOW_64_in_rel_ex2365_bits, 1 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2369_bits[]	= { ANTLR_UINT64_LIT(0x8000000000000002), ANTLR_UINT64_LIT(0x0000000000000019) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2369( FOLLOW_add_ex_in_rel_ex2369_bits, 2 );

static	ANTLR_BITWORD FOLLOW_68_in_rel_ex2393_bits[]	= { ANTLR_UINT64_LIT(0x04004100564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_68_in_rel_ex2393( FOLLOW_68_in_rel_ex2393_bits, 1 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2397_bits[]	= { ANTLR_UINT64_LIT(0x8000000000000002), ANTLR_UINT64_LIT(0x0000000000000019) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2397( FOLLOW_add_ex_in_rel_ex2397_bits, 2 );

static	ANTLR_BITWORD FOLLOW_mult_ex_in_add_ex2458_bits[]	= { ANTLR_UINT64_LIT(0x0500000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_mult_ex_in_add_ex2458( FOLLOW_mult_ex_in_add_ex2458_bits, 1 );

static	ANTLR_BITWORD FOLLOW_56_in_add_ex2493_bits[]	= { ANTLR_UINT64_LIT(0x04004100564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_56_in_add_ex2493( FOLLOW_56_in_add_ex2493_bits, 1 );

static	ANTLR_BITWORD FOLLOW_mult_ex_in_add_ex2497_bits[]	= { ANTLR_UINT64_LIT(0x0500000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_mult_ex_in_add_ex2497( FOLLOW_mult_ex_in_add_ex2497_bits, 1 );

static	ANTLR_BITWORD FOLLOW_58_in_add_ex2519_bits[]	= { ANTLR_UINT64_LIT(0x04004100564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_58_in_add_ex2519( FOLLOW_58_in_add_ex2519_bits, 1 );

static	ANTLR_BITWORD FOLLOW_mult_ex_in_add_ex2523_bits[]	= { ANTLR_UINT64_LIT(0x0500000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_mult_ex_in_add_ex2523( FOLLOW_mult_ex_in_add_ex2523_bits, 1 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex2582_bits[]	= { ANTLR_UINT64_LIT(0x2048000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex2582( FOLLOW_unary_ex_in_mult_ex2582_bits, 1 );

static	ANTLR_BITWORD FOLLOW_54_in_mult_ex2621_bits[]	= { ANTLR_UINT64_LIT(0x04004100564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_54_in_mult_ex2621( FOLLOW_54_in_mult_ex2621_bits, 1 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex2625_bits[]	= { ANTLR_UINT64_LIT(0x2048000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex2625( FOLLOW_unary_ex_in_mult_ex2625_bits, 1 );

static	ANTLR_BITWORD FOLLOW_61_in_mult_ex2651_bits[]	= { ANTLR_UINT64_LIT(0x04004100564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_61_in_mult_ex2651( FOLLOW_61_in_mult_ex2651_bits, 1 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex2655_bits[]	= { ANTLR_UINT64_LIT(0x2048000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex2655( FOLLOW_unary_ex_in_mult_ex2655_bits, 1 );

static	ANTLR_BITWORD FOLLOW_51_in_mult_ex2681_bits[]	= { ANTLR_UINT64_LIT(0x04004100564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_51_in_mult_ex2681( FOLLOW_51_in_mult_ex2681_bits, 1 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex2685_bits[]	= { ANTLR_UINT64_LIT(0x2048000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex2685( FOLLOW_unary_ex_in_mult_ex2685_bits, 1 );

static	ANTLR_BITWORD FOLLOW_post_ex_in_unary_ex2737_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_post_ex_in_unary_ex2737( FOLLOW_post_ex_in_unary_ex2737_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DOUBINC_in_unary_ex2750_bits[]	= { ANTLR_UINT64_LIT(0x04004100564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBINC_in_unary_ex2750( FOLLOW_DOUBINC_in_unary_ex2750_bits, 1 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_unary_ex2754_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_unary_ex2754( FOLLOW_unary_ex_in_unary_ex2754_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DOUBDEC_in_unary_ex2767_bits[]	= { ANTLR_UINT64_LIT(0x04004100564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBDEC_in_unary_ex2767( FOLLOW_DOUBDEC_in_unary_ex2767_bits, 1 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_unary_ex2771_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_unary_ex2771( FOLLOW_unary_ex_in_unary_ex2771_bits, 1 );

static	ANTLR_BITWORD FOLLOW_58_in_unary_ex2784_bits[]	= { ANTLR_UINT64_LIT(0x04004100564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_58_in_unary_ex2784( FOLLOW_58_in_unary_ex2784_bits, 1 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_unary_ex2788_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_unary_ex2788( FOLLOW_unary_ex_in_unary_ex2788_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_post_ex_proper2826_bits[]	= { ANTLR_UINT64_LIT(0x04004100564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_post_ex_proper2826( FOLLOW_LSQBRACKET_in_post_ex_proper2826_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_post_ex_proper2830_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_post_ex_proper2830( FOLLOW_expr_in_post_ex_proper2830_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_post_ex_proper2834_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_post_ex_proper2834( FOLLOW_RSQBRACKET_in_post_ex_proper2834_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_post_ex_proper2849_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_post_ex_proper2849( FOLLOW_LBRACKET_in_post_ex_proper2849_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_post_ex_proper2853_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_post_ex_proper2853( FOLLOW_RBRACKET_in_post_ex_proper2853_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_post_ex_proper2881_bits[]	= { ANTLR_UINT64_LIT(0x04004100564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_post_ex_proper2881( FOLLOW_LBRACKET_in_post_ex_proper2881_bits, 1 );

static	ANTLR_BITWORD FOLLOW_arglist_in_post_ex_proper2887_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arglist_in_post_ex_proper2887( FOLLOW_arglist_in_post_ex_proper2887_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_post_ex_proper2891_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_post_ex_proper2891( FOLLOW_RBRACKET_in_post_ex_proper2891_bits, 1 );

static	ANTLR_BITWORD FOLLOW_60_in_post_ex_proper2904_bits[]	= { ANTLR_UINT64_LIT(0x0000000000400000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_60_in_post_ex_proper2904( FOLLOW_60_in_post_ex_proper2904_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_post_ex_proper2908_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_post_ex_proper2908( FOLLOW_ID_in_post_ex_proper2908_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DOUBINC_in_post_ex_proper2935_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBINC_in_post_ex_proper2935( FOLLOW_DOUBINC_in_post_ex_proper2935_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DOUBDEC_in_post_ex_proper2964_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBDEC_in_post_ex_proper2964( FOLLOW_DOUBDEC_in_post_ex_proper2964_bits, 1 );

static	ANTLR_BITWORD FOLLOW_prim_ex_in_post_ex3017_bits[]	= { ANTLR_UINT64_LIT(0x1000000030006002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_prim_ex_in_post_ex3017( FOLLOW_prim_ex_in_post_ex3017_bits, 1 );

static	ANTLR_BITWORD FOLLOW_post_ex_proper_in_post_ex3036_bits[]	= { ANTLR_UINT64_LIT(0x1000000030006002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_post_ex_proper_in_post_ex3036( FOLLOW_post_ex_proper_in_post_ex3036_bits, 1 );

static	ANTLR_BITWORD FOLLOW_lvalue_in_assignment3065_bits[]	= { ANTLR_UINT64_LIT(0x4A90000000000002), ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_lvalue_in_assignment3065( FOLLOW_lvalue_in_assignment3065_bits, 2 );

static	ANTLR_BITWORD FOLLOW_assign_type_in_assignment3078_bits[]	= { ANTLR_UINT64_LIT(0x04004100564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_assign_type_in_assignment3078( FOLLOW_assign_type_in_assignment3078_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_assignment3080_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_assignment3080( FOLLOW_expr_in_assignment3080_bits, 1 );

static	ANTLR_BITWORD FOLLOW_INT_in_constant3115_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_INT_in_constant3115( FOLLOW_INT_in_constant3115_bits, 1 );

static	ANTLR_BITWORD FOLLOW_FLOAT_in_constant3133_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_FLOAT_in_constant3133( FOLLOW_FLOAT_in_constant3133_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CHAR_in_constant3149_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CHAR_in_constant3149( FOLLOW_CHAR_in_constant3149_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRING_in_constant3166_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_in_constant3166( FOLLOW_STRING_in_constant3166_bits, 1 );

static	ANTLR_BITWORD FOLLOW_BOOL_in_constant3181_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_BOOL_in_constant3181( FOLLOW_BOOL_in_constant3181_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_constant3198_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_constant3198( FOLLOW_scalarType_in_constant3198_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACE_in_constant3202_bits[]	= { ANTLR_UINT64_LIT(0x0000010000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_constant3202( FOLLOW_LBRACE_in_constant3202_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRING_in_constant3206_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_in_constant3206( FOLLOW_STRING_in_constant3206_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACE_in_constant3210_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_constant3210( FOLLOW_RBRACE_in_constant3210_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_prim_ex3240_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_prim_ex3240( FOLLOW_ID_in_prim_ex3240_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_prim_ex3255_bits[]	= { ANTLR_UINT64_LIT(0x04004100564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_prim_ex3255( FOLLOW_LBRACKET_in_prim_ex3255_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_prim_ex3259_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_prim_ex3259( FOLLOW_expr_in_prim_ex3259_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_prim_ex3263_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_prim_ex3263( FOLLOW_RBRACKET_in_prim_ex3263_bits, 1 );

static	ANTLR_BITWORD FOLLOW_constant_in_prim_ex3278_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_constant_in_prim_ex3278( FOLLOW_constant_in_prim_ex3278_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_prim_ex3293_bits[]	= { ANTLR_UINT64_LIT(0x0000000030000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_prim_ex3293( FOLLOW_scalarType_in_prim_ex3293_bits, 1 );

static	ANTLR_BITWORD FOLLOW_structInit_in_prim_ex3325_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_structInit_in_prim_ex3325( FOLLOW_structInit_in_prim_ex3325_bits, 1 );

static	ANTLR_BITWORD FOLLOW_cast_in_prim_ex3350_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_cast_in_prim_ex3350( FOLLOW_cast_in_prim_ex3350_bits, 1 );

static	ANTLR_BITWORD FOLLOW_arrayInit_in_prim_ex3373_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arrayInit_in_prim_ex3373( FOLLOW_arrayInit_in_prim_ex3373_bits, 1 );

static	ANTLR_BITWORD FOLLOW_NULLTOK_in_prim_ex3402_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_NULLTOK_in_prim_ex3402( FOLLOW_NULLTOK_in_prim_ex3402_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_cast3431_bits[]	= { ANTLR_UINT64_LIT(0x04004100564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_cast3431( FOLLOW_LBRACKET_in_cast3431_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_cast3435_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_cast3435( FOLLOW_expr_in_cast3435_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_cast3439_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_cast3439( FOLLOW_RBRACKET_in_cast3439_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_structInit3468_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_structInit3468( FOLLOW_LBRACKET_in_structInit3468_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_structInit3472_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_structInit3472( FOLLOW_RBRACKET_in_structInit3472_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_arrayInit3534_bits[]	= { ANTLR_UINT64_LIT(0x04004100564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_arrayInit3534( FOLLOW_LSQBRACKET_in_arrayInit3534_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_arrayInit3538_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arrayInit3538( FOLLOW_expr_in_arrayInit3538_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_arrayInit3540_bits[]	= { ANTLR_UINT64_LIT(0x0000000030000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_arrayInit3540( FOLLOW_RSQBRACKET_in_arrayInit3540_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_arrayInit3564_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_arrayInit3564( FOLLOW_LSQBRACKET_in_arrayInit3564_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_arrayInit3566_bits[]	= { ANTLR_UINT64_LIT(0x0000000030000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_arrayInit3566( FOLLOW_RSQBRACKET_in_arrayInit3566_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_arrayInit3604_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_arrayInit3604( FOLLOW_LSQBRACKET_in_arrayInit3604_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_arrayInit3606_bits[]	= { ANTLR_UINT64_LIT(0x0000000030000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_arrayInit3606( FOLLOW_RSQBRACKET_in_arrayInit3606_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_arrayInit3647_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_arrayInit3647( FOLLOW_LBRACKET_in_arrayInit3647_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_arrayInit3651_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_arrayInit3651( FOLLOW_RBRACKET_in_arrayInit3651_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_arrayInit3685_bits[]	= { ANTLR_UINT64_LIT(0x04004100564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_arrayInit3685( FOLLOW_LBRACKET_in_arrayInit3685_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_arrayInit3689_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arrayInit3689( FOLLOW_expr_in_arrayInit3689_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_arrayInit3693_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_arrayInit3693( FOLLOW_RBRACKET_in_arrayInit3693_bits, 1 );

static	ANTLR_BITWORD FOLLOW_param_in_declaration3738_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_param_in_declaration3738( FOLLOW_param_in_declaration3738_bits, 2 );

static	ANTLR_BITWORD FOLLOW_65_in_declaration3773_bits[]	= { ANTLR_UINT64_LIT(0x04004100564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_65_in_declaration3773( FOLLOW_65_in_declaration3773_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_declaration3780_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_declaration3780( FOLLOW_expr_in_declaration3780_bits, 1 );

static	ANTLR_BITWORD FOLLOW_declaration_in_instructionScalar3829_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_declaration_in_instructionScalar3829( FOLLOW_declaration_in_instructionScalar3829_bits, 1 );

static	ANTLR_BITWORD FOLLOW_assignment_in_instructionScalar3842_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_assignment_in_instructionScalar3842( FOLLOW_assignment_in_instructionScalar3842_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RETURN_in_returnInst3874_bits[]	= { ANTLR_UINT64_LIT(0x04004100564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RETURN_in_returnInst3874( FOLLOW_RETURN_in_returnInst3874_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_returnInst3876_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_returnInst3876( FOLLOW_expr_in_returnInst3876_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_returnInst3880_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_returnInst3880( FOLLOW_SEMICOLON_in_returnInst3880_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RETURN_in_returnInst3894_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RETURN_in_returnInst3894( FOLLOW_RETURN_in_returnInst3894_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_returnInst3898_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_returnInst3898( FOLLOW_SEMICOLON_in_returnInst3898_bits, 1 );

static	ANTLR_BITWORD FOLLOW_WHILE_in_whileInst3931_bits[]	= { ANTLR_UINT64_LIT(0x0000000010000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_WHILE_in_whileInst3931( FOLLOW_WHILE_in_whileInst3931_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_whileInst3933_bits[]	= { ANTLR_UINT64_LIT(0x04004100564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_whileInst3933( FOLLOW_LBRACKET_in_whileInst3933_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_whileInst3935_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_whileInst3935( FOLLOW_expr_in_whileInst3935_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_whileInst3937_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_whileInst3937( FOLLOW_RBRACKET_in_whileInst3937_bits, 1 );

static	ANTLR_BITWORD FOLLOW_body_in_whileInst3939_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_body_in_whileInst3939( FOLLOW_body_in_whileInst3939_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DO_in_doInst3975_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DO_in_doInst3975( FOLLOW_DO_in_doInst3975_bits, 1 );

static	ANTLR_BITWORD FOLLOW_body_in_doInst3977_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_body_in_doInst3977( FOLLOW_body_in_doInst3977_bits, 1 );

static	ANTLR_BITWORD FOLLOW_WHILE_in_doInst3979_bits[]	= { ANTLR_UINT64_LIT(0x0000000010000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_WHILE_in_doInst3979( FOLLOW_WHILE_in_doInst3979_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_doInst3981_bits[]	= { ANTLR_UINT64_LIT(0x04004100564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_doInst3981( FOLLOW_LBRACKET_in_doInst3981_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_doInst3983_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_doInst3983( FOLLOW_expr_in_doInst3983_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_doInst3985_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_doInst3985( FOLLOW_RBRACKET_in_doInst3985_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_doInst3987_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_doInst3987( FOLLOW_SEMICOLON_in_doInst3987_bits, 1 );

static	ANTLR_BITWORD FOLLOW_FOR_in_forInst4019_bits[]	= { ANTLR_UINT64_LIT(0x0000000010000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_FOR_in_forInst4019( FOLLOW_FOR_in_forInst4019_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_forInst4021_bits[]	= { ANTLR_UINT64_LIT(0x0400CBC0564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_forInst4021( FOLLOW_LBRACKET_in_forInst4021_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instructionScalar_in_forInst4049_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instructionScalar_in_forInst4049( FOLLOW_instructionScalar_in_forInst4049_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_forInst4055_bits[]	= { ANTLR_UINT64_LIT(0x04004140564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_forInst4055( FOLLOW_SEMICOLON_in_forInst4055_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_forInst4080_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_forInst4080( FOLLOW_expr_in_forInst4080_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_forInst4094_bits[]	= { ANTLR_UINT64_LIT(0x0400CB88564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_forInst4094( FOLLOW_SEMICOLON_in_forInst4094_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instructionScalar_in_forInst4119_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instructionScalar_in_forInst4119( FOLLOW_instructionScalar_in_forInst4119_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_forInst4125_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_forInst4125( FOLLOW_RBRACKET_in_forInst4125_bits, 1 );

static	ANTLR_BITWORD FOLLOW_body_in_forInst4150_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_body_in_forInst4150( FOLLOW_body_in_forInst4150_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ELSE_in_elsemiddle4198_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ELSE_in_elsemiddle4198( FOLLOW_ELSE_in_elsemiddle4198_bits, 1 );

static	ANTLR_BITWORD FOLLOW_IF_in_elsemiddle4200_bits[]	= { ANTLR_UINT64_LIT(0x0000000010000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_IF_in_elsemiddle4200( FOLLOW_IF_in_elsemiddle4200_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_elsemiddle4202_bits[]	= { ANTLR_UINT64_LIT(0x04004100564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_elsemiddle4202( FOLLOW_LBRACKET_in_elsemiddle4202_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_elsemiddle4204_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_elsemiddle4204( FOLLOW_expr_in_elsemiddle4204_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_elsemiddle4206_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_elsemiddle4206( FOLLOW_RBRACKET_in_elsemiddle4206_bits, 1 );

static	ANTLR_BITWORD FOLLOW_body_in_elsemiddle4208_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_body_in_elsemiddle4208( FOLLOW_body_in_elsemiddle4208_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ELSE_in_endif4241_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ELSE_in_endif4241( FOLLOW_ELSE_in_endif4241_bits, 1 );

static	ANTLR_BITWORD FOLLOW_body_in_endif4243_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_body_in_endif4243( FOLLOW_body_in_endif4243_bits, 1 );

static	ANTLR_BITWORD FOLLOW_IF_in_ifInst4273_bits[]	= { ANTLR_UINT64_LIT(0x0000000010000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_IF_in_ifInst4273( FOLLOW_IF_in_ifInst4273_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_ifInst4275_bits[]	= { ANTLR_UINT64_LIT(0x04004100564C60F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_ifInst4275( FOLLOW_LBRACKET_in_ifInst4275_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_ifInst4277_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_ifInst4277( FOLLOW_expr_in_ifInst4277_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_ifInst4279_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_ifInst4279( FOLLOW_RBRACKET_in_ifInst4279_bits, 1 );

static	ANTLR_BITWORD FOLLOW_body_in_ifInst4281_bits[]	= { ANTLR_UINT64_LIT(0x0000000000008002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_body_in_ifInst4281( FOLLOW_body_in_ifInst4281_bits, 1 );

static	ANTLR_BITWORD FOLLOW_elsemiddle_in_ifInst4298_bits[]	= { ANTLR_UINT64_LIT(0x0000000000008002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_elsemiddle_in_ifInst4298( FOLLOW_elsemiddle_in_ifInst4298_bits, 1 );

static	ANTLR_BITWORD FOLLOW_endif_in_ifInst4318_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_endif_in_ifInst4318( FOLLOW_endif_in_ifInst4318_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ifInst_in_instruction4352_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ifInst_in_instruction4352( FOLLOW_ifInst_in_instruction4352_bits, 1 );

static	ANTLR_BITWORD FOLLOW_whileInst_in_instruction4373_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_whileInst_in_instruction4373( FOLLOW_whileInst_in_instruction4373_bits, 1 );

static	ANTLR_BITWORD FOLLOW_doInst_in_instruction4390_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_doInst_in_instruction4390( FOLLOW_doInst_in_instruction4390_bits, 1 );

static	ANTLR_BITWORD FOLLOW_forInst_in_instruction4410_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_forInst_in_instruction4410( FOLLOW_forInst_in_instruction4410_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instructionScalar_in_instruction4430_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instructionScalar_in_instruction4430( FOLLOW_instructionScalar_in_instruction4430_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_instruction4432_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_instruction4432( FOLLOW_SEMICOLON_in_instruction4432_bits, 1 );

static	ANTLR_BITWORD FOLLOW_returnInst_in_instruction4445_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_returnInst_in_instruction4445( FOLLOW_returnInst_in_instruction4445_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_in_instruction_list4477_bits[]	= { ANTLR_UINT64_LIT(0x0401CB9056DC70F2) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_in_instruction_list4477( FOLLOW_instruction_in_instruction_list4477_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_in_instruction_list4493_bits[]	= { ANTLR_UINT64_LIT(0x0401CB9056DC70F2) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_in_instruction_list4493( FOLLOW_instruction_in_instruction_list4493_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACE_in_body4527_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_body4527( FOLLOW_LBRACE_in_body4527_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACE_in_body4531_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_body4531( FOLLOW_RBRACE_in_body4531_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACE_in_body4546_bits[]	= { ANTLR_UINT64_LIT(0x0401CB9056DC70F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_body4546( FOLLOW_LBRACE_in_body4546_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_body4548_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_body4548( FOLLOW_instruction_list_in_body4548_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACE_in_body4552_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_body4552( FOLLOW_RBRACE_in_body4552_bits, 1 );

static	ANTLR_BITWORD FOLLOW_param_in_function4582_bits[]	= { ANTLR_UINT64_LIT(0x0000000010000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_param_in_function4582( FOLLOW_param_in_function4582_bits, 1 );

static	ANTLR_BITWORD FOLLOW_parameterList_in_function4584_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_parameterList_in_function4584( FOLLOW_parameterList_in_function4584_bits, 1 );

static	ANTLR_BITWORD FOLLOW_body_in_function4586_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_body_in_function4586( FOLLOW_body_in_function4586_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRUCT_in_structDecl4616_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRUCT_in_structDecl4616( FOLLOW_STRUCT_in_structDecl4616_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_structDecl4618_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_structDecl4618( FOLLOW_TYPE_in_structDecl4618_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACE_in_structDecl4634_bits[]	= { ANTLR_UINT64_LIT(0x0000CA84040800A0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_structDecl4634( FOLLOW_LBRACE_in_structDecl4634_bits, 1 );

static	ANTLR_BITWORD FOLLOW_declaration_in_structDecl4639_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_declaration_in_structDecl4639( FOLLOW_declaration_in_structDecl4639_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_structDecl4643_bits[]	= { ANTLR_UINT64_LIT(0x0000CA84040800A0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_structDecl4643( FOLLOW_SEMICOLON_in_structDecl4643_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACE_in_structDecl4648_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_structDecl4648( FOLLOW_RBRACE_in_structDecl4648_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CLASS_in_classDecl4701_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CLASS_in_classDecl4701( FOLLOW_CLASS_in_classDecl4701_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_classDecl4705_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_classDecl4705( FOLLOW_TYPE_in_classDecl4705_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CLASS_in_classDecl4725_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CLASS_in_classDecl4725( FOLLOW_CLASS_in_classDecl4725_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_classDecl4729_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000200) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_classDecl4729( FOLLOW_TYPE_in_classDecl4729_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COLON_in_classDecl4731_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COLON_in_classDecl4731( FOLLOW_COLON_in_classDecl4731_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_classDecl4735_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_classDecl4735( FOLLOW_TYPE_in_classDecl4735_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACE_in_classDecl4762_bits[]	= { ANTLR_UINT64_LIT(0x0000EA85040800A0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_classDecl4762( FOLLOW_LBRACE_in_classDecl4762_bits, 1 );

static	ANTLR_BITWORD FOLLOW_declaration_in_classDecl4805_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_declaration_in_classDecl4805( FOLLOW_declaration_in_classDecl4805_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_classDecl4809_bits[]	= { ANTLR_UINT64_LIT(0x0000EA85040800A0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_classDecl4809( FOLLOW_SEMICOLON_in_classDecl4809_bits, 1 );

static	ANTLR_BITWORD FOLLOW_function_in_classDecl4835_bits[]	= { ANTLR_UINT64_LIT(0x0000EA85040800A0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl4835( FOLLOW_function_in_classDecl4835_bits, 1 );

static	ANTLR_BITWORD FOLLOW_VIRTUAL_in_classDecl4864_bits[]	= { ANTLR_UINT64_LIT(0x0000CA80040800A0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_VIRTUAL_in_classDecl4864( FOLLOW_VIRTUAL_in_classDecl4864_bits, 1 );

static	ANTLR_BITWORD FOLLOW_function_in_classDecl4868_bits[]	= { ANTLR_UINT64_LIT(0x0000EA85040800A0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl4868( FOLLOW_function_in_classDecl4868_bits, 1 );

static	ANTLR_BITWORD FOLLOW_OVERRIDE_in_classDecl4894_bits[]	= { ANTLR_UINT64_LIT(0x0000CA80040800A0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_OVERRIDE_in_classDecl4894( FOLLOW_OVERRIDE_in_classDecl4894_bits, 1 );

static	ANTLR_BITWORD FOLLOW_function_in_classDecl4898_bits[]	= { ANTLR_UINT64_LIT(0x0000EA85040800A0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl4898( FOLLOW_function_in_classDecl4898_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACE_in_classDecl4934_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_classDecl4934( FOLLOW_RBRACE_in_classDecl4934_bits, 1 );

static	ANTLR_BITWORD FOLLOW_INCLUDE_in_inc4964_bits[]	= { ANTLR_UINT64_LIT(0x0000010000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_INCLUDE_in_inc4964( FOLLOW_INCLUDE_in_inc4964_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRING_in_inc4966_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_in_inc4966( FOLLOW_STRING_in_inc4966_bits, 1 );

static	ANTLR_BITWORD FOLLOW_function_in_program5012_bits[]	= { ANTLR_UINT64_LIT(0x0000CE80050801A2) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_program5012( FOLLOW_function_in_program5012_bits, 1 );

static	ANTLR_BITWORD FOLLOW_structDecl_in_program5034_bits[]	= { ANTLR_UINT64_LIT(0x0000CE80050801A2) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_structDecl_in_program5034( FOLLOW_structDecl_in_program5034_bits, 1 );

static	ANTLR_BITWORD FOLLOW_classDecl_in_program5054_bits[]	= { ANTLR_UINT64_LIT(0x0000CE80050801A2) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_classDecl_in_program5054( FOLLOW_classDecl_in_program5054_bits, 1 );

static	ANTLR_BITWORD FOLLOW_inc_in_program5075_bits[]	= { ANTLR_UINT64_LIT(0x0000CE80050801A2) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_inc_in_program5075( FOLLOW_inc_in_program5075_bits, 1 );









static const ANTLR_INT32 dfa6_eot[15] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa6_eof[15] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa6_min[15] =
    {
	5, 22, 22, 22, 22, 22, 22, 22, -1, -1, -1, 37, -1, -1, 22
    };
static const ANTLR_INT32 dfa6_max[15] =
    {
	47, 29, 29, 29, 29, 29, 33, 33, -1, -1, -1, 37, -1, -1, 33
    };
static const ANTLR_INT32 dfa6_accept[15] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, 3, 4, 1, -1, 2, 5, -1
    };
static const ANTLR_INT32 dfa6_special[15] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };


static const ANTLR_INT32* dfa6_T_empty	 =   NULL;

static const ANTLR_INT32 dfa6_T0[] =
    {
	12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13
    };
static const ANTLR_INT32 dfa6_T1[] =
    {
	10, -1, -1, -1, -1, -1, -1, 11
    };
static const ANTLR_INT32 dfa6_T2[] =
    {
	14
    };
static const ANTLR_INT32 dfa6_T3[] =
    {
	12, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, 13
    };
static const ANTLR_INT32 dfa6_T4[] =
    {
	5, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1,
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, 7, -1,
	6, -1, -1, 1, 9
    };





static const ANTLR_INT32 * const dfa6_transitions[] =
{
    dfa6_T4, dfa6_T1, dfa6_T1, dfa6_T1, dfa6_T1, dfa6_T1, dfa6_T0, dfa6_T0,
    NULL, NULL, NULL, dfa6_T2, NULL, NULL, dfa6_T3
};




class WNScriptASTParserCyclicDFA6 : public CyclicDFA< WNScriptASTParserImplTraits, WNScriptASTParser >, public WNScriptASTParserTokens
{
public:
	typedef CyclicDFA< WNScriptASTParserImplTraits, WNScriptASTParser >  BaseType;
	typedef BaseType::ContextType CtxType;

private:


public:
	WNScriptASTParserCyclicDFA6( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{

	}

};

static WNScriptASTParserCyclicDFA6  cdfa6(
	    6,

	    (const ANTLR_UCHAR*)"276:1: param returns [scripting::parameter* node] : ( scalarType a= ID |bb= compoundType aa= ID | SHARED_REF b= compoundType c= ID | WEAK_REF d= compoundType e= ID |f= compoundType QUESTION g= ID );",
	    dfa6_eot,
	    dfa6_eof,
	    dfa6_min,
	    dfa6_max,
	    dfa6_accept,
	    dfa6_special,
	    dfa6_transitions

	);







static const ANTLR_INT32 dfa31_eot[11] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa31_eof[11] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa31_min[11] =
    {
	4, 22, 22, 22, 22, 22, -1, -1, 4, 22, 37
    };
static const ANTLR_INT32 dfa31_max[11] =
    {
	58, 29, 29, 29, 29, 29, -1, -1, 58, 33, 37
    };
static const ANTLR_INT32 dfa31_accept[11] =
    {
	-1, -1, -1, -1, -1, -1, 1, 2, -1, -1, -1
    };
static const ANTLR_INT32 dfa31_special[11] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };


static const ANTLR_INT32* dfa31_T_empty	 =   NULL;

static const ANTLR_INT32 dfa31_T0[] =
    {
	7, 5, 7, 4, -1, -1, -1, -1, -1, 7, 7, -1, -1, -1, 7, 3, -1, -1, 7, -1,
	-1, 7, 2, -1, 7, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, 6, 7, 6, -1, 6,
	-1, -1, 1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    };
static const ANTLR_INT32 dfa31_T1[] =
    {
	6, -1, -1, -1, -1, -1, 7, 10, -1, -1, -1, 6
    };
static const ANTLR_INT32 dfa31_T2[] =
    {
	6, -1, -1, -1, -1, 7, 7, 8
    };
static const ANTLR_INT32 dfa31_T3[] =
    {
	9
    };
static const ANTLR_INT32 dfa31_T4[] =
    {
	7, 7, 7, 7, -1, -1, -1, -1, -1, 7, 7, -1, -1, -1, 7, 7, -1, -1, 7, -1,
	-1, 7, 7, -1, 7, -1, 7, -1, -1, -1, -1, -1, -1, 9, -1, -1, 7, -1, -1, -1,
	-1, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7
    };





static const ANTLR_INT32 * const dfa31_transitions[] =
{
    dfa31_T0, dfa31_T2, dfa31_T2, dfa31_T2, dfa31_T2, dfa31_T2, NULL, NULL,
    dfa31_T4, dfa31_T1, dfa31_T3
};




class WNScriptASTParserCyclicDFA31 : public CyclicDFA< WNScriptASTParserImplTraits, WNScriptASTParser >, public WNScriptASTParserTokens
{
public:
	typedef CyclicDFA< WNScriptASTParserImplTraits, WNScriptASTParser >  BaseType;
	typedef BaseType::ContextType CtxType;

private:


public:
	WNScriptASTParserCyclicDFA31( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{

	}

};

static WNScriptASTParserCyclicDFA31  cdfa31(
	    31,

	    (const ANTLR_UCHAR*)"536:1: instructionScalar returns [scripting::instruction* node] : ( declaration | assignment );",
	    dfa31_eot,
	    dfa31_eof,
	    dfa31_min,
	    dfa31_max,
	    dfa31_accept,
	    dfa31_special,
	    dfa31_transitions

	);







static const ANTLR_INT32 dfa43_eot[41] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa43_eof[41] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa43_min[41] =
    {
	5, -1, 22, 22, 22, 22, 22, 22, 22, 5, 5, -1, -1, 28, 37, 28, 22, 29, 29,
	29, 29, 29, 22, 22, 29, 29, 29, 29, 29, 22, 22, -1, -1, 22, 28, 37, 28,
	37, 28, 22, 22
    };
static const ANTLR_INT32 dfa43_max[41] =
    {
	47, -1, 29, 29, 29, 29, 29, 33, 33, 46, 46, -1, -1, 65, 37, 65, 22, 29,
	29, 29, 29, 29, 22, 22, 29, 29, 29, 29, 29, 22, 22, -1, -1, 33, 65, 37,
	65, 37, 65, 29, 29
    };
static const ANTLR_INT32 dfa43_accept[41] =
    {
	-1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 4, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, -1, -1, -1, -1, -1,
	-1, -1, -1
    };
static const ANTLR_INT32 dfa43_special[41] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1
    };


static const ANTLR_INT32* dfa43_T_empty	 =   NULL;

static const ANTLR_INT32 dfa43_T0[] =
    {
	32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, 31
    };
static const ANTLR_INT32 dfa43_T1[] =
    {
	34
    };
static const ANTLR_INT32 dfa43_T2[] =
    {
	36
    };
static const ANTLR_INT32 dfa43_T3[] =
    {
	39
    };
static const ANTLR_INT32 dfa43_T4[] =
    {
	40
    };
static const ANTLR_INT32 dfa43_T5[] =
    {
	38
    };
static const ANTLR_INT32 dfa43_T6[] =
    {
	13, -1, -1, -1, -1, -1, -1, 14
    };
static const ANTLR_INT32 dfa43_T7[] =
    {
	35
    };
static const ANTLR_INT32 dfa43_T8[] =
    {
	37
    };
static const ANTLR_INT32 dfa43_T9[] =
    {
	33
    };
static const ANTLR_INT32 dfa43_T10[] =
    {
	6, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1,
	-1, -1, 3, -1, -1, -1, -1, -1, 12, -1, 1, -1, -1, -1, -1, 9, -1, 8, -1,
	7, -1, 11, 2, 10
    };
static const ANTLR_INT32 dfa43_T11[] =
    {
	36, -1, -1, -1, -1, -1, -1, 35
    };
static const ANTLR_INT32 dfa43_T12[] =
    {
	21, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1,
	-1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	23, -1, 22, -1, -1, 17
    };
static const ANTLR_INT32 dfa43_T13[] =
    {
	15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16
    };
static const ANTLR_INT32 dfa43_T14[] =
    {
	38, -1, -1, -1, -1, -1, -1, 37
    };
static const ANTLR_INT32 dfa43_T15[] =
    {
	28, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, -1, -1, -1,
	-1, -1, -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	30, -1, 29, -1, -1, 24
    };
static const ANTLR_INT32 dfa43_T16[] =
    {
	15, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, 16
    };





static const ANTLR_INT32 * const dfa43_transitions[] =
{
    dfa43_T10, NULL, dfa43_T6, dfa43_T6, dfa43_T6, dfa43_T6, dfa43_T6, dfa43_T13,
    dfa43_T13, dfa43_T12, dfa43_T15, NULL, NULL, dfa43_T0, dfa43_T9, dfa43_T0,
    dfa43_T1, dfa43_T7, dfa43_T7, dfa43_T7, dfa43_T7, dfa43_T7, dfa43_T2,
    dfa43_T2, dfa43_T8, dfa43_T8, dfa43_T8, dfa43_T8, dfa43_T8, dfa43_T5,
    dfa43_T5, NULL, NULL, dfa43_T16, dfa43_T0, dfa43_T3, dfa43_T0, dfa43_T4,
    dfa43_T0, dfa43_T11, dfa43_T14
};




class WNScriptASTParserCyclicDFA43 : public CyclicDFA< WNScriptASTParserImplTraits, WNScriptASTParser >, public WNScriptASTParserTokens
{
public:
	typedef CyclicDFA< WNScriptASTParserImplTraits, WNScriptASTParser >  BaseType;
	typedef BaseType::ContextType CtxType;

private:


public:
	WNScriptASTParserCyclicDFA43( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{

	}

};

static WNScriptASTParserCyclicDFA43  cdfa43(
	    43,

	    (const ANTLR_UCHAR*)"()* loopback of 652:17: ( (a= declaration SEMICOLON ) | (b= function ) | ( VIRTUAL h= function ) | ( OVERRIDE i= function ) )*",
	    dfa43_eot,
	    dfa43_eof,
	    dfa43_min,
	    dfa43_max,
	    dfa43_accept,
	    dfa43_special,
	    dfa43_transitions

	);
















scripting::type*
WNScriptASTParser::objectType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    const ImplTraits::CommonTokenType* TYPE1 = NULL;
    const ImplTraits::CommonTokenType* STRING_TYPE2 = NULL;






        node = wn_nullptr;



    {
        {

            ANTLR_UINT32 alt1;

            alt1=2;

            switch ( this->LA(1) )
            {
            case TYPE:
            	{
            		alt1=1;
            	}
                break;
            case STRING_TYPE:
            	{
            		alt1=2;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 1 );
                ex->set_state( 0 );


                goto ruleobjectTypeEx;

            }

            switch (alt1)
            {
        	case 1:
        	    {
        	        TYPE1 =  this->matchToken(TYPE, &FOLLOW_TYPE_in_objectType1151);
        	        if  (this->hasException())
        	        {
        	            goto ruleobjectTypeEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::type>(m_allocator, (TYPE1->getText()).c_str()); SET_LOCATION(node, TYPE1);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        STRING_TYPE2 =  this->matchToken(STRING_TYPE, &FOLLOW_STRING_TYPE_in_objectType1166);
        	        if  (this->hasException())
        	        {
        	            goto ruleobjectTypeEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::type>(m_allocator, scripting::type_classification::string_type); SET_LOCATION(node, STRING_TYPE2);
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleobjectTypeEx;
    ruleobjectTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::type*
WNScriptASTParser::scalarType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    const ImplTraits::CommonTokenType* VOID_TYPE3 = NULL;
    const ImplTraits::CommonTokenType* INT_TYPE4 = NULL;
    const ImplTraits::CommonTokenType* FLOAT_TYPE5 = NULL;
    const ImplTraits::CommonTokenType* CHAR_TYPE6 = NULL;
    const ImplTraits::CommonTokenType* BOOL_TYPE7 = NULL;






        node = wn_nullptr;



    {
        {

            ANTLR_UINT32 alt2;

            alt2=5;

            switch ( this->LA(1) )
            {
            case VOID_TYPE:
            	{
            		alt2=1;
            	}
                break;
            case INT_TYPE:
            	{
            		alt2=2;
            	}
                break;
            case FLOAT_TYPE:
            	{
            		alt2=3;
            	}
                break;
            case CHAR_TYPE:
            	{
            		alt2=4;
            	}
                break;
            case BOOL_TYPE:
            	{
            		alt2=5;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 2 );
                ex->set_state( 0 );


                goto rulescalarTypeEx;

            }

            switch (alt2)
            {
        	case 1:
        	    {
        	        VOID_TYPE3 =  this->matchToken(VOID_TYPE, &FOLLOW_VOID_TYPE_in_scalarType1195);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::type>(m_allocator, scripting::type_classification::void_type); SET_LOCATION(node, VOID_TYPE3);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        INT_TYPE4 =  this->matchToken(INT_TYPE, &FOLLOW_INT_TYPE_in_scalarType1207);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::type>(m_allocator, scripting::type_classification::int_type); SET_LOCATION(node, INT_TYPE4);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        FLOAT_TYPE5 =  this->matchToken(FLOAT_TYPE, &FOLLOW_FLOAT_TYPE_in_scalarType1219);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::type>(m_allocator, scripting::type_classification::float_type); SET_LOCATION(node, FLOAT_TYPE5);
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        CHAR_TYPE6 =  this->matchToken(CHAR_TYPE, &FOLLOW_CHAR_TYPE_in_scalarType1231);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::type>(m_allocator, scripting::type_classification::char_type); SET_LOCATION(node, CHAR_TYPE6);
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        BOOL_TYPE7 =  this->matchToken(BOOL_TYPE, &FOLLOW_BOOL_TYPE_in_scalarType1243);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::type>(m_allocator, scripting::type_classification::bool_type); SET_LOCATION(node, BOOL_TYPE7);
        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulescalarTypeEx;
    rulescalarTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::type*
WNScriptASTParser::compoundType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    const ImplTraits::CommonTokenType* RSQBRACKET9 = NULL;
    const ImplTraits::CommonTokenType* LSQBRACKET10 = NULL;
    scripting::type* scalarType8;
    scripting::type* objectType11;





        node = wn_nullptr;



    {
        {

            ANTLR_UINT32 alt4;

            alt4=2;

            switch ( this->LA(1) )
            {
            case BOOL_TYPE:
            case CHAR_TYPE:
            case FLOAT_TYPE:
            case INT_TYPE:
            case VOID_TYPE:
            	{
            		alt4=1;
            	}
                break;
            case STRING_TYPE:
            case TYPE:
            	{
            		alt4=2;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 4 );
                ex->set_state( 0 );


                goto rulecompoundTypeEx;

            }

            switch (alt4)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_compoundType1270);
        	        scalarType8=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecompoundTypeEx;
        	        }


        	        {
        	             node = scalarType8
        	            ; SET_LOCATION_FROM_NODE(node, scalarType8
        	            );
        	        }


        	        {
        	            int cnt3=0;

        	            for (;;)
        	            {
        	                int alt3=2;
        	        	switch ( this->LA(1) )
        	        	{
        	        	case LSQBRACKET:
        	        		{
        	        			alt3=1;
        	        		}
        	        	    break;

        	        	}

        	        	switch (alt3)
        	        	{
        	        	    case 1:
        	        	        {
        	        	            LSQBRACKET10 =  this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_compoundType1286);
        	        	            if  (this->hasException())
        	        	            {
        	        	                goto rulecompoundTypeEx;
        	        	            }


        	        	            RSQBRACKET9 =  this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_compoundType1288);
        	        	            if  (this->hasException())
        	        	            {
        	        	                goto rulecompoundTypeEx;
        	        	            }


        	        	            {

        	        	                                   SET_END_LOCATION(node, RSQBRACKET9);
        	        	                                   node = m_allocator->make_allocated<scripting::array_type>(m_allocator, node);
        	        	                                   SET_LOCATION(node, LSQBRACKET10);
        	        	                                   SET_END_LOCATION(node, RSQBRACKET9);

        	        	            }


        	        	        }
        	        	        break;

        	        	    default:

        	        		if ( cnt3 >= 1 )
        	        		{
        	        		    goto loop3;
        	        		}


        	        		new ANTLR_Exception< WNScriptASTParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        	        		goto rulecompoundTypeEx;
        	        	}
        	        	cnt3++;
        	            }
        	            loop3: ;
        	        }

        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_objectType_in_compoundType1300);
        	        objectType11=objectType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecompoundTypeEx;
        	        }


        	        {
        	             node = objectType11
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulecompoundTypeEx;
    rulecompoundTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::type*
WNScriptASTParser::type()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    scripting::type* compoundType12;
    scripting::type* scalarType13;





        node = wn_nullptr;



    {
        {

            ANTLR_UINT32 alt5;

            alt5=2;

            switch ( this->LA(1) )
            {
            case VOID_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LSQBRACKET:
            			{
            				alt5=1;
            			}
            		    break;
            		case EOF:
            			{
            				alt5=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 5 );
            		    ex->set_state( 1 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case INT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LSQBRACKET:
            			{
            				alt5=1;
            			}
            		    break;
            		case EOF:
            			{
            				alt5=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 5 );
            		    ex->set_state( 2 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case FLOAT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LSQBRACKET:
            			{
            				alt5=1;
            			}
            		    break;
            		case EOF:
            			{
            				alt5=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 5 );
            		    ex->set_state( 3 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case CHAR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LSQBRACKET:
            			{
            				alt5=1;
            			}
            		    break;
            		case EOF:
            			{
            				alt5=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 5 );
            		    ex->set_state( 4 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case BOOL_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LSQBRACKET:
            			{
            				alt5=1;
            			}
            		    break;
            		case EOF:
            			{
            				alt5=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 5 );
            		    ex->set_state( 5 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case STRING_TYPE:
            case TYPE:
            	{
            		alt5=1;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 5 );
                ex->set_state( 0 );


                goto ruletypeEx;

            }

            switch (alt5)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_compoundType_in_type1330);
        	        compoundType12=compoundType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruletypeEx;
        	        }


        	        {
        	             node = compoundType12
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_type1340);
        	        scalarType13=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruletypeEx;
        	        }


        	        {
        	             node = scalarType13
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruletypeEx;
    ruletypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::parameter*
WNScriptASTParser::param()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::parameter* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* aa = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    const ImplTraits::CommonTokenType* e = NULL;
    const ImplTraits::CommonTokenType* g = NULL;
    const ImplTraits::CommonTokenType* SHARED_REF15 = NULL;
    const ImplTraits::CommonTokenType* WEAK_REF16 = NULL;
    scripting::type* bb;
    scripting::type* b;
    scripting::type* d;
    scripting::type* f;
    scripting::type* scalarType14;





        node = wn_nullptr;



    {
        {

            ANTLR_UINT32 alt6;

            alt6=5;

            alt6 = cdfa6.predict(this, this->get_rec(), this->get_istream(), cdfa6 );
            if  (this->hasException())
            {
                goto ruleparamEx;
            }

            switch (alt6)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_param1376);
        	        scalarType14=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        a =  this->matchToken(ID, &FOLLOW_ID_in_param1380);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                        node = m_allocator->make_allocated<scripting::parameter>(m_allocator, scalarType14
        	            , (a->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            scalarType14
        	            ); SET_END_LOCATION(node, a);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_compoundType_in_param1395);
        	        bb=compoundType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        aa =  this->matchToken(ID, &FOLLOW_ID_in_param1399);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                        bb
        	            ->set_qualifier(scripting::type_qualifier::non_nullable);
        	                        node = m_allocator->make_allocated<scripting::parameter>(m_allocator, bb
        	            , (aa->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            bb
        	            ); SET_END_LOCATION(node, aa);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        SHARED_REF15 =  this->matchToken(SHARED_REF, &FOLLOW_SHARED_REF_in_param1412);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        this->followPush(FOLLOW_compoundType_in_param1416);
        	        b=compoundType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        c =  this->matchToken(ID, &FOLLOW_ID_in_param1420);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                       b
        	            ->set_qualifier(scripting::type_qualifier::shared);
        	                       node = m_allocator->make_allocated<scripting::parameter>(m_allocator, b
        	            , (c->getText()).c_str()); SET_LOCATION(node, SHARED_REF15); SET_END_LOCATION(node, c);

        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        WEAK_REF16 =  this->matchToken(WEAK_REF, &FOLLOW_WEAK_REF_in_param1433);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        this->followPush(FOLLOW_compoundType_in_param1437);
        	        d=compoundType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        e =  this->matchToken(ID, &FOLLOW_ID_in_param1442);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                       d
        	            ->set_qualifier(scripting::type_qualifier::weak);
        	                       node = m_allocator->make_allocated<scripting::parameter>(m_allocator, d
        	            , (e->getText()).c_str()); SET_LOCATION(node, WEAK_REF16); SET_END_LOCATION(node, e);

        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        this->followPush(FOLLOW_compoundType_in_param1457);
        	        f=compoundType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	         this->matchToken(QUESTION, &FOLLOW_QUESTION_in_param1459);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        g =  this->matchToken(ID, &FOLLOW_ID_in_param1464);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                       f
        	            ->set_qualifier(scripting::type_qualifier::nullable);
        	                       node = m_allocator->make_allocated<scripting::parameter>(m_allocator, f
        	            , (g->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            f
        	            ); SET_END_LOCATION(node, g);

        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleparamEx;
    ruleparamEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::parameter_list*
WNScriptASTParser::paramList()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::parameter_list* node;


    scripting::parameter* a;
    scripting::parameter* b;





        node = wn_nullptr;



    {
        {
            this->followPush(FOLLOW_param_in_paramList1496);
            a=param();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleparamListEx;
            }


            {
                 node = m_allocator->make_allocated<scripting::parameter_list>(m_allocator, a
                ); SET_LOCATION_FROM_NODE(node, a
                );
            }



            for (;;)
            {
                int alt7=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt7=1;
                	}
                    break;

                }

                switch (alt7)
                {
            	case 1:
            	    {
            	         this->matchToken(COMMA, &FOLLOW_COMMA_in_paramList1509);
            	        if  (this->hasException())
            	        {
            	            goto ruleparamListEx;
            	        }


            	        this->followPush(FOLLOW_param_in_paramList1513);
            	        b=param();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleparamListEx;
            	        }


            	        {
            	             node
            	            ->add_parameter(b
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop7;
            	    break;
                }
            }
            loop7: ;


        }

    }
    goto ruleparamListEx;
    ruleparamListEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::parameter_list*
WNScriptASTParser::parameterList()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::parameter_list* node;


    const ImplTraits::CommonTokenType* LBRACKET18 = NULL;
    const ImplTraits::CommonTokenType* RBRACKET19 = NULL;
    scripting::parameter_list* paramList17;





        node = wn_nullptr;



    {
        {

            ANTLR_UINT32 alt8;

            alt8=2;

            switch ( this->LA(1) )
            {
            case LBRACKET:
            	{
            		switch ( this->LA(2) )
            		{
            		case RBRACKET:
            			{
            				alt8=2;
            			}
            		    break;
            		case BOOL_TYPE:
            		case CHAR_TYPE:
            		case FLOAT_TYPE:
            		case INT_TYPE:
            		case SHARED_REF:
            		case STRING_TYPE:
            		case TYPE:
            		case VOID_TYPE:
            		case WEAK_REF:
            			{
            				alt8=1;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 8 );
            		    ex->set_state( 1 );


            		    goto ruleparameterListEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 8 );
                ex->set_state( 0 );


                goto ruleparameterListEx;

            }

            switch (alt8)
            {
        	case 1:
        	    {
        	        LBRACKET18 =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_parameterList1545);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        this->followPush(FOLLOW_paramList_in_parameterList1547);
        	        paramList17=paramList();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        RBRACKET19 =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_parameterList1549);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        {
        	             node = paramList17
        	            ; SET_LOCATION(node, LBRACKET18); SET_END_LOCATION(node, RBRACKET19);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	         this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_parameterList1566);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	         this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_parameterList1568);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        {
        	             node = wn_nullptr;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleparameterListEx;
    ruleparameterListEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::assign_type
WNScriptASTParser::assign_type()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::assign_type node;







        node = scripting::assign_type::equal;



    {
        {

            ANTLR_UINT32 alt9;

            alt9=6;

            switch ( this->LA(1) )
            {
            case 65:
            	{
            		alt9=1;
            	}
                break;
            case 57:
            	{
            		alt9=2;
            	}
                break;
            case 59:
            	{
            		alt9=3;
            	}
                break;
            case 55:
            	{
            		alt9=4;
            	}
                break;
            case 62:
            	{
            		alt9=5;
            	}
                break;
            case 52:
            	{
            		alt9=6;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 9 );
                ex->set_state( 0 );


                goto ruleassign_typeEx;

            }

            switch (alt9)
            {
        	case 1:
        	    {
        	         this->matchToken(65, &FOLLOW_65_in_assign_type1604);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::equal;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	         this->matchToken(57, &FOLLOW_57_in_assign_type1618);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::add_equal;
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	         this->matchToken(59, &FOLLOW_59_in_assign_type1631);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::sub_equal;
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	         this->matchToken(55, &FOLLOW_55_in_assign_type1644);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::mult_equal;
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	         this->matchToken(62, &FOLLOW_62_in_assign_type1657);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::div_equal;
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	         this->matchToken(52, &FOLLOW_52_in_assign_type1670);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::mod_equal;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleassign_typeEx;
    ruleassign_typeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::lvalue*
WNScriptASTParser::lvalue()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::lvalue* node;


    scripting::expression* unary_ex20;





        node = wn_nullptr;



    {
        {
            this->followPush(FOLLOW_unary_ex_in_lvalue1700);
            unary_ex20=unary_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelvalueEx;
            }


            {
                 node = m_allocator->make_allocated<scripting::lvalue>(m_allocator, unary_ex20
                ); SET_LOCATION_FROM_NODE(node, unary_ex20
                );
            }


        }

    }
    goto rulelvalueEx;
    rulelvalueEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::arg_list*
WNScriptASTParser::arglist()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::arg_list* node;


    scripting::expression* a;
    scripting::expression* d;





        node = m_allocator->make_allocated<scripting::arg_list>(m_allocator);



    {
        {
            {
                {
                    this->followPush(FOLLOW_expr_in_arglist1758);
                    a=expr();

                    this->followPop();
                    if  (this->hasException())
                    {
                        goto rulearglistEx;
                    }


                    {
                         node->add_expression(a
                        ); SET_LOCATION_FROM_NODE(node, a
                        );
                    }


                }


            }



            for (;;)
            {
                int alt11=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt11=1;
                	}
                    break;

                }

                switch (alt11)
                {
            	case 1:
            	    {
            	         this->matchToken(COMMA, &FOLLOW_COMMA_in_arglist1791);
            	        if  (this->hasException())
            	        {
            	            goto rulearglistEx;
            	        }


            	        {
            	            int alt10=2;
            	            switch ( this->LA(1) )
            	            {
            	            case BOOL:
            	            case BOOL_TYPE:
            	            case CHAR:
            	            case CHAR_TYPE:
            	            case DOUBDEC:
            	            case DOUBINC:
            	            case FLOAT:
            	            case FLOAT_TYPE:
            	            case ID:
            	            case INT:
            	            case INT_TYPE:
            	            case LBRACKET:
            	            case NULLTOK:
            	            case STRING:
            	            case VOID_TYPE:
            	            case 58:
            	            	{
            	            		alt10=1;
            	            	}
            	                break;
            	            case COMMA:
            	            case RBRACKET:
            	            	{
            	            		alt10=2;
            	            	}
            	                break;

            	            default:
            	                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 10 );
            	                ex->set_state( 0 );


            	                goto rulearglistEx;

            	            }

            	            switch (alt10)
            	            {
            	        	case 1:
            	        	    {
            	        	        {
            	        	            this->followPush(FOLLOW_expr_in_arglist1835);
            	        	            d=expr();

            	        	            this->followPop();
            	        	            if  (this->hasException())
            	        	            {
            	        	                goto rulearglistEx;
            	        	            }


            	        	            {
            	        	                 node->add_expression(d
            	        	                , wn_true); SET_END_LOCATION_FROM_NODE(node, d
            	        	                );
            	        	            }


            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    {
            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

            	default:
            	    goto loop11;
            	    break;
                }
            }
            loop11: ;


        }

    }
    goto rulearglistEx;
    rulearglistEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::expr()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* cond_ex21;





        node = wn_nullptr;



    {
        {
            this->followPush(FOLLOW_cond_ex_in_expr1910);
            cond_ex21=cond_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexprEx;
            }


            {
                 node = cond_ex21
                ;
            }


        }

    }
    goto ruleexprEx;
    ruleexprEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::cond_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* or_ex22;





        node = wn_nullptr;



    {
        {
            this->followPush(FOLLOW_or_ex_in_cond_ex1948);
            or_ex22=or_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecond_exEx;
            }


            {
                 node = or_ex22
                ;
            }


            {
                int alt12=2;
                switch ( this->LA(1) )
                {
                    case QUESTION:
                    	{
                    		alt12=1;
                    	}
                        break;
                }

                switch (alt12)
                {
            	case 1:
            	    {
            	         this->matchToken(QUESTION, &FOLLOW_QUESTION_in_cond_ex1971);
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	        this->followPush(FOLLOW_expr_in_cond_ex1975);
            	        b=expr();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	         this->matchToken(COLON, &FOLLOW_COLON_in_cond_ex1977);
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	        this->followPush(FOLLOW_cond_ex_in_cond_ex1981);
            	        c=cond_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	        {
            	             node = m_allocator->make_allocated<scripting::cond_expression>(m_allocator, node, b
            	            , c
            	            );  SET_LOCATION_FROM_NODE(node, or_ex22
            	            ); SET_END_LOCATION_FROM_NODE(node, c
            	            );
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    goto rulecond_exEx;
    rulecond_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::or_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;





        node = wn_nullptr;



    {
        {
            this->followPush(FOLLOW_and_ex_in_or_ex2028);
            a=and_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleor_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt13=2;
                switch ( this->LA(1) )
                {
                case 69:
                	{
                		alt13=1;
                	}
                    break;

                }

                switch (alt13)
                {
            	case 1:
            	    {
            	         this->matchToken(69, &FOLLOW_69_in_or_ex2045);
            	        if  (this->hasException())
            	        {
            	            goto ruleor_exEx;
            	        }


            	        this->followPush(FOLLOW_and_ex_in_or_ex2049);
            	        b=and_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleor_exEx;
            	        }


            	        {
            	             node = m_allocator->make_allocated<scripting::short_circuit_expression>(m_allocator, scripting::short_circuit_type::or_operator, node, b
            	            ); SET_LOCATION_FROM_NODE(node, a
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop13;
            	    break;
                }
            }
            loop13: ;


        }

    }
    goto ruleor_exEx;
    ruleor_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::and_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;





        node = wn_nullptr;



    {
        {
            this->followPush(FOLLOW_eq_ex_in_and_ex2092);
            a=eq_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleand_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt14=2;
                switch ( this->LA(1) )
                {
                case 53:
                	{
                		alt14=1;
                	}
                    break;

                }

                switch (alt14)
                {
            	case 1:
            	    {
            	         this->matchToken(53, &FOLLOW_53_in_and_ex2109);
            	        if  (this->hasException())
            	        {
            	            goto ruleand_exEx;
            	        }


            	        this->followPush(FOLLOW_eq_ex_in_and_ex2113);
            	        b=eq_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleand_exEx;
            	        }


            	        {
            	            node = m_allocator->make_allocated<scripting::short_circuit_expression>(m_allocator, scripting::short_circuit_type::and_operator, node, b
            	            ); SET_LOCATION_FROM_NODE(node, a
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop14;
            	    break;
                }
            }
            loop14: ;


        }

    }
    goto ruleand_exEx;
    ruleand_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::eq_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;





        node = wn_nullptr;



    {
        {
            this->followPush(FOLLOW_rel_ex_in_eq_ex2149);
            a=rel_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleeq_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt15=3;
                switch ( this->LA(1) )
                {
                case 66:
                	{
                		alt15=1;
                	}
                    break;
                case 50:
                	{
                		alt15=2;
                	}
                    break;

                }

                switch (alt15)
                {
            	case 1:
            	    {
            	        {
            	             this->matchToken(66, &FOLLOW_66_in_eq_ex2184);
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            this->followPush(FOLLOW_rel_ex_in_eq_ex2188);
            	            b=rel_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            {
            	                node = m_allocator->make_allocated<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_equal, node, b
            	                );  SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	             this->matchToken(50, &FOLLOW_50_in_eq_ex2211);
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            this->followPush(FOLLOW_rel_ex_in_eq_ex2215);
            	            c=rel_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            {
            	                node = m_allocator->make_allocated<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_not_equal, node, c
            	                ); SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                );
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop15;
            	    break;
                }
            }
            loop15: ;


        }

    }
    goto ruleeq_exEx;
    ruleeq_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::rel_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* d;
    scripting::expression* e;





        node = wn_nullptr;



    {
        {
            this->followPush(FOLLOW_add_ex_in_rel_ex2273);
            a=add_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulerel_exEx;
            }


            {
                 node=a
                ;
            }



            for (;;)
            {
                int alt16=5;
                switch ( this->LA(1) )
                {
                case 63:
                	{
                		alt16=1;
                	}
                    break;
                case 67:
                	{
                		alt16=2;
                	}
                    break;
                case 64:
                	{
                		alt16=3;
                	}
                    break;
                case 68:
                	{
                		alt16=4;
                	}
                    break;

                }

                switch (alt16)
                {
            	case 1:
            	    {
            	        {
            	             this->matchToken(63, &FOLLOW_63_in_rel_ex2309);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex2313);
            	            b=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->make_allocated<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_less_than, node, b
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	             this->matchToken(67, &FOLLOW_67_in_rel_ex2337);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex2341);
            	            c=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->make_allocated<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_greater_than, node, c
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	        {
            	             this->matchToken(64, &FOLLOW_64_in_rel_ex2365);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex2369);
            	            d=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->make_allocated<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_less_than_or_equal, node, d
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, d
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 4:
            	    {
            	        {
            	             this->matchToken(68, &FOLLOW_68_in_rel_ex2393);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex2397);
            	            e=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->make_allocated<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_greater_than_or_equal, node, e
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, e
            	                );
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop16;
            	    break;
                }
            }
            loop16: ;


        }

    }
    goto rulerel_exEx;
    rulerel_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::add_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;





        node = wn_nullptr;



    {
        {
            this->followPush(FOLLOW_mult_ex_in_add_ex2458);
            a=mult_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleadd_exEx;
            }


            {
                node = a
                ;
            }



            for (;;)
            {
                int alt17=3;
                switch ( this->LA(1) )
                {
                case 56:
                	{
                		alt17=1;
                	}
                    break;
                case 58:
                	{
                		alt17=2;
                	}
                    break;

                }

                switch (alt17)
                {
            	case 1:
            	    {
            	        {
            	             this->matchToken(56, &FOLLOW_56_in_add_ex2493);
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            this->followPush(FOLLOW_mult_ex_in_add_ex2497);
            	            b=mult_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            {
            	                node = m_allocator->make_allocated<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_add, node, b
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	             this->matchToken(58, &FOLLOW_58_in_add_ex2519);
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            this->followPush(FOLLOW_mult_ex_in_add_ex2523);
            	            c=mult_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            {
            	                node = m_allocator->make_allocated<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_sub, node, c
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                );
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop17;
            	    break;
                }
            }
            loop17: ;


        }

    }
    goto ruleadd_exEx;
    ruleadd_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::mult_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* d;





        node = wn_nullptr;



    {
        {
            this->followPush(FOLLOW_unary_ex_in_mult_ex2582);
            a=unary_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemult_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt18=4;
                switch ( this->LA(1) )
                {
                case 54:
                	{
                		alt18=1;
                	}
                    break;
                case 61:
                	{
                		alt18=2;
                	}
                    break;
                case 51:
                	{
                		alt18=3;
                	}
                    break;

                }

                switch (alt18)
                {
            	case 1:
            	    {
            	        {
            	             this->matchToken(54, &FOLLOW_54_in_mult_ex2621);
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            this->followPush(FOLLOW_unary_ex_in_mult_ex2625);
            	            b=unary_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            {
            	                node = m_allocator->make_allocated<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_mult, node, b
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	             this->matchToken(61, &FOLLOW_61_in_mult_ex2651);
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            this->followPush(FOLLOW_unary_ex_in_mult_ex2655);
            	            c=unary_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            {
            	                node = m_allocator->make_allocated<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_div, node, c
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	        {
            	             this->matchToken(51, &FOLLOW_51_in_mult_ex2681);
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            this->followPush(FOLLOW_unary_ex_in_mult_ex2685);
            	            d=unary_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            {
            	                node = m_allocator->make_allocated<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_mod, node, d
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, d
            	                );
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop18;
            	    break;
                }
            }
            loop18: ;


        }

    }
    goto rulemult_exEx;
    rulemult_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::unary_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* d;





        node = wn_nullptr;



    {
        {

            ANTLR_UINT32 alt19;

            alt19=4;

            switch ( this->LA(1) )
            {
            case BOOL:
            case BOOL_TYPE:
            case CHAR:
            case CHAR_TYPE:
            case FLOAT:
            case FLOAT_TYPE:
            case ID:
            case INT:
            case INT_TYPE:
            case LBRACKET:
            case NULLTOK:
            case STRING:
            case VOID_TYPE:
            	{
            		alt19=1;
            	}
                break;
            case DOUBINC:
            	{
            		alt19=2;
            	}
                break;
            case DOUBDEC:
            	{
            		alt19=3;
            	}
                break;
            case 58:
            	{
            		alt19=4;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 19 );
                ex->set_state( 0 );


                goto ruleunary_exEx;

            }

            switch (alt19)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_post_ex_in_unary_ex2737);
        	        a=post_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             node = a
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	         this->matchToken(DOUBINC, &FOLLOW_DOUBINC_in_unary_ex2750);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        this->followPush(FOLLOW_unary_ex_in_unary_ex2754);
        	        b=unary_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             scripting::node* t = node; node = m_allocator->make_allocated<scripting::unary_expression>(m_allocator, scripting::unary_type::pre_increment, b
        	            );   SET_LOCATION_FROM_NODE(node, t); SET_END_LOCATION_FROM_NODE(node, b
        	            );
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	         this->matchToken(DOUBDEC, &FOLLOW_DOUBDEC_in_unary_ex2767);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        this->followPush(FOLLOW_unary_ex_in_unary_ex2771);
        	        c=unary_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             scripting::node* t = node; node = m_allocator->make_allocated<scripting::unary_expression>(m_allocator, scripting::unary_type::pre_decrement, c
        	            );   SET_LOCATION_FROM_NODE(node, t); SET_END_LOCATION_FROM_NODE(node, c
        	            );
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	         this->matchToken(58, &FOLLOW_58_in_unary_ex2784);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        this->followPush(FOLLOW_unary_ex_in_unary_ex2788);
        	        d=unary_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             scripting::node* t = node; node = m_allocator->make_allocated<scripting::unary_expression>(m_allocator, scripting::unary_type::negation, d
        	            );   SET_LOCATION_FROM_NODE(node, t); SET_END_LOCATION_FROM_NODE(node, d
        	            );
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleunary_exEx;
    ruleunary_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::post_expression*
WNScriptASTParser::post_ex_proper()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::post_expression* node;


    const ImplTraits::CommonTokenType* d = NULL;
    const ImplTraits::CommonTokenType* e = NULL;
    const ImplTraits::CommonTokenType* f = NULL;
    const ImplTraits::CommonTokenType* g = NULL;
    const ImplTraits::CommonTokenType* h = NULL;
    const ImplTraits::CommonTokenType* i = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    const ImplTraits::CommonTokenType* DOUBINC23 = NULL;
    const ImplTraits::CommonTokenType* DOUBDEC24 = NULL;
    scripting::expression* a;
    scripting::arg_list* b;





        node = wn_nullptr;



    {
        {

            ANTLR_UINT32 alt20;

            alt20=6;

            switch ( this->LA(1) )
            {
            case LSQBRACKET:
            	{
            		alt20=1;
            	}
                break;
            case LBRACKET:
            	{
            		switch ( this->LA(2) )
            		{
            		case RBRACKET:
            			{
            				alt20=2;
            			}
            		    break;
            		case BOOL:
            		case BOOL_TYPE:
            		case CHAR:
            		case CHAR_TYPE:
            		case DOUBDEC:
            		case DOUBINC:
            		case FLOAT:
            		case FLOAT_TYPE:
            		case ID:
            		case INT:
            		case INT_TYPE:
            		case LBRACKET:
            		case NULLTOK:
            		case STRING:
            		case VOID_TYPE:
            		case 58:
            			{
            				alt20=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 20 );
            		    ex->set_state( 2 );


            		    goto rulepost_ex_properEx;

            		}

            	}
                break;
            case 60:
            	{
            		alt20=4;
            	}
                break;
            case DOUBINC:
            	{
            		alt20=5;
            	}
                break;
            case DOUBDEC:
            	{
            		alt20=6;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 20 );
                ex->set_state( 0 );


                goto rulepost_ex_properEx;

            }

            switch (alt20)
            {
        	case 1:
        	    {
        	        d =  this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_post_ex_proper2826);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_post_ex_proper2830);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        e =  this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_post_ex_proper2834);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::array_access_expression>(m_allocator, a
        	            ); SET_LOCATION(node, d); SET_END_LOCATION(node, e);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        f =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_post_ex_proper2849);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        g =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_post_ex_proper2853);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::function_call_expression>(m_allocator); SET_LOCATION(node, f); SET_END_LOCATION(node, g);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        h =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_post_ex_proper2881);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        this->followPush(FOLLOW_arglist_in_post_ex_proper2887);
        	        b=arglist();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        i =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_post_ex_proper2891);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::function_call_expression>(m_allocator, b
        	            ); SET_LOCATION(node, h); SET_END_LOCATION(node, i);
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	         this->matchToken(60, &FOLLOW_60_in_post_ex_proper2904);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        c =  this->matchToken(ID, &FOLLOW_ID_in_post_ex_proper2908);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::member_access_expression>(m_allocator, (c->getText()).c_str()); SET_LOCATION(node, c);
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        DOUBINC23 =  this->matchToken(DOUBINC, &FOLLOW_DOUBINC_in_post_ex_proper2935);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::post_unary_expression>(m_allocator, scripting::post_unary_type::post_increment); SET_LOCATION(node, DOUBINC23);
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	        DOUBDEC24 =  this->matchToken(DOUBDEC, &FOLLOW_DOUBDEC_in_post_ex_proper2964);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::post_unary_expression>(m_allocator, scripting::post_unary_type::post_decrement); SET_LOCATION(node, DOUBDEC24);
        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulepost_ex_properEx;
    rulepost_ex_properEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::post_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::post_expression* a;
    scripting::expression * prim_ex25;





        node = wn_nullptr;



    {
        {
            this->followPush(FOLLOW_prim_ex_in_post_ex3017);
            prim_ex25=prim_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulepost_exEx;
            }


            {
                 node = prim_ex25
                ;
            }



            for (;;)
            {
                int alt21=2;
                switch ( this->LA(1) )
                {
                case DOUBDEC:
                case DOUBINC:
                case LBRACKET:
                case LSQBRACKET:
                case 60:
                	{
                		alt21=1;
                	}
                    break;

                }

                switch (alt21)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_post_ex_proper_in_post_ex3036);
            	        a=post_ex_proper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulepost_exEx;
            	        }


            	        {
            	            a
            	            ->add_base_expression(node); SET_END_LOCATION_FROM_NODE(a
            	            , node); node = a
            	            ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop21;
            	    break;
                }
            }
            loop21: ;


        }

    }
    goto rulepost_exEx;
    rulepost_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::assignment_instruction*
WNScriptASTParser::assignment()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::assignment_instruction* node;


    scripting::lvalue* lvalue26;
    scripting::assign_type assign_type27;
    scripting::expression* expr28;





        node = wn_nullptr;



    {
        {
            this->followPush(FOLLOW_lvalue_in_assignment3065);
            lvalue26=lvalue();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleassignmentEx;
            }


            {
                 node = m_allocator->make_allocated<scripting::assignment_instruction>(m_allocator, lvalue26
                ); SET_LOCATION_FROM_NODE(node, lvalue26
                );
            }


            {
                int alt22=2;
                switch ( this->LA(1) )
                {
                    case 52:
                    case 55:
                    case 57:
                    case 59:
                    case 62:
                    case 65:
                    	{
                    		alt22=1;
                    	}
                        break;
                }

                switch (alt22)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_assign_type_in_assignment3078);
            	        assign_type27=assign_type();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }


            	        this->followPush(FOLLOW_expr_in_assignment3080);
            	        expr28=expr();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }


            	        {
            	             node->add_value(assign_type27
            	            , expr28
            	            ); SET_END_LOCATION_FROM_NODE(node, expr28
            	            );
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    goto ruleassignmentEx;
    ruleassignmentEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::constant_expression*
WNScriptASTParser::constant()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::constant_expression* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* b = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    const ImplTraits::CommonTokenType* d = NULL;
    const ImplTraits::CommonTokenType* e = NULL;
    const ImplTraits::CommonTokenType* g = NULL;
    const ImplTraits::CommonTokenType* h = NULL;
    const ImplTraits::CommonTokenType* i = NULL;
    scripting::type* f;





        node = wn_nullptr;



    {
        {

            ANTLR_UINT32 alt23;

            alt23=6;

            switch ( this->LA(1) )
            {
            case INT:
            	{
            		alt23=1;
            	}
                break;
            case FLOAT:
            	{
            		alt23=2;
            	}
                break;
            case CHAR:
            	{
            		alt23=3;
            	}
                break;
            case STRING:
            	{
            		alt23=4;
            	}
                break;
            case BOOL:
            	{
            		alt23=5;
            	}
                break;
            case BOOL_TYPE:
            case CHAR_TYPE:
            case FLOAT_TYPE:
            case INT_TYPE:
            case VOID_TYPE:
            	{
            		alt23=6;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 23 );
                ex->set_state( 0 );


                goto ruleconstantEx;

            }

            switch (alt23)
            {
        	case 1:
        	    {
        	        a =  this->matchToken(INT, &FOLLOW_INT_in_constant3115);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->make_allocated<scripting::type>(m_allocator, scripting::type_classification::int_type); SET_LOCATION(type_node, a); node = m_allocator->make_allocated<scripting::constant_expression>(m_allocator, type_node, (a->getText()).c_str()); SET_LOCATION(node, a);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        b =  this->matchToken(FLOAT, &FOLLOW_FLOAT_in_constant3133);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->make_allocated<scripting::type>(m_allocator, scripting::type_classification::float_type); SET_LOCATION(type_node, b); node = m_allocator->make_allocated<scripting::constant_expression>(m_allocator, type_node, (b->getText()).c_str()); SET_LOCATION(node, b);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        c =  this->matchToken(CHAR, &FOLLOW_CHAR_in_constant3149);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->make_allocated<scripting::type>(m_allocator, scripting::type_classification::char_type); SET_LOCATION(type_node, c); node = m_allocator->make_allocated<scripting::constant_expression>(m_allocator, type_node, (c->getText()).c_str()); SET_LOCATION(node, c);
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        d =  this->matchToken(STRING, &FOLLOW_STRING_in_constant3166);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->make_allocated<scripting::type>(m_allocator, scripting::type_classification::string_type); SET_LOCATION(type_node, d); node = m_allocator->make_allocated<scripting::constant_expression>(m_allocator, type_node, (d->getText()).c_str()); SET_LOCATION(node, d);
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        e =  this->matchToken(BOOL, &FOLLOW_BOOL_in_constant3181);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->make_allocated<scripting::type>(m_allocator, scripting::type_classification::bool_type); SET_LOCATION(type_node, e); node = m_allocator->make_allocated<scripting::constant_expression>(m_allocator, type_node, (e->getText()).c_str()); SET_LOCATION(node, e);
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_constant3198);
        	        f=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        g =  this->matchToken(LBRACE, &FOLLOW_LBRACE_in_constant3202);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        h =  this->matchToken(STRING, &FOLLOW_STRING_in_constant3206);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        i =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_constant3210);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::constant_expression>(m_allocator, f
        	            , (h->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            f
        	            ); SET_END_LOCATION(node, i);
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleconstantEx;
    ruleconstantEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression *
WNScriptASTParser::prim_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression * node;


    const ImplTraits::CommonTokenType* ba = NULL;
    const ImplTraits::CommonTokenType* bb = NULL;
    const ImplTraits::CommonTokenType* d = NULL;
    const ImplTraits::CommonTokenType* ID29 = NULL;
    scripting::expression* a;
    scripting::constant_expression* b;
    scripting::type* c;
    scripting::struct_allocation_expression* e;
    scripting::cast_expression* f;
    scripting::array_allocation_expression* g;





        node = wn_nullptr;



    {
        {

            ANTLR_UINT32 alt25;

            alt25=5;

            switch ( this->LA(1) )
            {
            case ID:
            	{
            		alt25=1;
            	}
                break;
            case LBRACKET:
            	{
            		alt25=2;
            	}
                break;
            case BOOL:
            case CHAR:
            case FLOAT:
            case INT:
            case STRING:
            	{
            		alt25=3;
            	}
                break;
            case VOID_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt25=3;
            			}
            		    break;
            		case LBRACKET:
            		case LSQBRACKET:
            			{
            				alt25=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 25 );
            		    ex->set_state( 4 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case INT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt25=3;
            			}
            		    break;
            		case LBRACKET:
            		case LSQBRACKET:
            			{
            				alt25=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 25 );
            		    ex->set_state( 5 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case FLOAT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt25=3;
            			}
            		    break;
            		case LBRACKET:
            		case LSQBRACKET:
            			{
            				alt25=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 25 );
            		    ex->set_state( 6 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case CHAR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt25=3;
            			}
            		    break;
            		case LBRACKET:
            		case LSQBRACKET:
            			{
            				alt25=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 25 );
            		    ex->set_state( 7 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case BOOL_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt25=3;
            			}
            		    break;
            		case LBRACKET:
            		case LSQBRACKET:
            			{
            				alt25=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 25 );
            		    ex->set_state( 8 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case NULLTOK:
            	{
            		alt25=5;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 25 );
                ex->set_state( 0 );


                goto ruleprim_exEx;

            }

            switch (alt25)
            {
        	case 1:
        	    {
        	        ID29 =  this->matchToken(ID, &FOLLOW_ID_in_prim_ex3240);
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::id_expression>(m_allocator, (ID29->getText()).c_str()); SET_LOCATION(node, ID29);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        ba =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_prim_ex3255);
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_prim_ex3259);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        bb =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_prim_ex3263);
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	            node = a
        	            ; SET_LOCATION(node, ba); SET_END_LOCATION(node, bb);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        this->followPush(FOLLOW_constant_in_prim_ex3278);
        	        b=constant();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	            node = b
        	            ;
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_prim_ex3293);
        	        c=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	            int alt24=3;
        	            switch ( this->LA(1) )
        	            {
        	            case LBRACKET:
        	            	{
        	            		switch ( this->LA(2) )
        	            		{
        	            		case RBRACKET:
        	            			{
        	            				alt24=1;
        	            			}
        	            		    break;
        	            		case BOOL:
        	            		case BOOL_TYPE:
        	            		case CHAR:
        	            		case CHAR_TYPE:
        	            		case DOUBDEC:
        	            		case DOUBINC:
        	            		case FLOAT:
        	            		case FLOAT_TYPE:
        	            		case ID:
        	            		case INT:
        	            		case INT_TYPE:
        	            		case LBRACKET:
        	            		case NULLTOK:
        	            		case STRING:
        	            		case VOID_TYPE:
        	            		case 58:
        	            			{
        	            				alt24=2;
        	            			}
        	            		    break;

        	            		default:
        	            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	            		    ex->set_decisionNum( 24 );
        	            		    ex->set_state( 1 );


        	            		    goto ruleprim_exEx;

        	            		}

        	            	}
        	                break;
        	            case LSQBRACKET:
        	            	{
        	            		alt24=3;
        	            	}
        	                break;

        	            default:
        	                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                ex->set_decisionNum( 24 );
        	                ex->set_state( 0 );


        	                goto ruleprim_exEx;

        	            }

        	            switch (alt24)
        	            {
        	        	case 1:
        	        	    {
        	        	        {
        	        	            this->followPush(FOLLOW_structInit_in_prim_ex3325);
        	        	            e=structInit();

        	        	            this->followPop();
        	        	            if  (this->hasException())
        	        	            {
        	        	                goto ruleprim_exEx;
        	        	            }


        	        	        }


        	        	        {
        	        	             e
        	        	            ->set_type(c
        	        	            ); node=e
        	        	            ; SET_START_LOCATION_FROM_NODE(node, c
        	        	            );
        	        	        }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    {
        	        	        {
        	        	            this->followPush(FOLLOW_cast_in_prim_ex3350);
        	        	            f=cast();

        	        	            this->followPop();
        	        	            if  (this->hasException())
        	        	            {
        	        	                goto ruleprim_exEx;
        	        	            }


        	        	        }


        	        	        {
        	        	             f
        	        	            ->set_type(c
        	        	            ); node=f
        	        	            ; SET_START_LOCATION_FROM_NODE(node, c
        	        	            );
        	        	        }


        	        	    }
        	        	    break;
        	        	case 3:
        	        	    {
        	        	        {
        	        	            this->followPush(FOLLOW_arrayInit_in_prim_ex3373);
        	        	            g=arrayInit();

        	        	            this->followPop();
        	        	            if  (this->hasException())
        	        	            {
        	        	                goto ruleprim_exEx;
        	        	            }


        	        	        }


        	        	        {
        	        	             g
        	        	            ->set_type(c
        	        	            ); node=g
        	        	            ; SET_START_LOCATION_FROM_NODE(node, c
        	        	            );
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 5:
        	    {
        	        d =  this->matchToken(NULLTOK, &FOLLOW_NULLTOK_in_prim_ex3402);
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::null_allocation_expression>(m_allocator); SET_LOCATION(node, d);
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleprim_exEx;
    ruleprim_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::cast_expression*
WNScriptASTParser::cast()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::cast_expression* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    scripting::expression* b;





      node = wn_nullptr;



    {
        {
            a =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_cast3431);
            if  (this->hasException())
            {
                goto rulecastEx;
            }


            this->followPush(FOLLOW_expr_in_cast3435);
            b=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecastEx;
            }


            c =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_cast3439);
            if  (this->hasException())
            {
                goto rulecastEx;
            }


            {
                 node = m_allocator->make_allocated<scripting::cast_expression>(m_allocator, b
                ); SET_LOCATION(node, a); SET_END_LOCATION(node, c);
            }


        }

    }
    goto rulecastEx;
    rulecastEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::struct_allocation_expression*
WNScriptASTParser::structInit()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::struct_allocation_expression* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* b = NULL;






        node = wn_nullptr;



    {
        {
            a =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_structInit3468);
            if  (this->hasException())
            {
                goto rulestructInitEx;
            }


            b =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_structInit3472);
            if  (this->hasException())
            {
                goto rulestructInitEx;
            }


            {
                 node = m_allocator->make_allocated<scripting::struct_allocation_expression>(m_allocator); SET_LOCATION(node, a); SET_END_LOCATION(node, b);
            }


        }

    }
    goto rulestructInitEx;
    rulestructInitEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::array_allocation_expression*
WNScriptASTParser::arrayInit()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::array_allocation_expression* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    scripting::expression* e;
    scripting::expression* b;





        node = m_allocator->make_allocated<scripting::array_allocation_expression>(m_allocator);



    {
        {
            {
                int alt29=2;
                switch ( this->LA(1) )
                {
                case LSQBRACKET:
                	{
                		switch ( this->LA(2) )
                		{
                		case RSQBRACKET:
                			{
                				alt29=2;
                			}
                		    break;
                		case BOOL:
                		case BOOL_TYPE:
                		case CHAR:
                		case CHAR_TYPE:
                		case DOUBDEC:
                		case DOUBINC:
                		case FLOAT:
                		case FLOAT_TYPE:
                		case ID:
                		case INT:
                		case INT_TYPE:
                		case LBRACKET:
                		case NULLTOK:
                		case STRING:
                		case VOID_TYPE:
                		case 58:
                			{
                				alt29=1;
                			}
                		    break;

                		default:
                		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 29 );
                		    ex->set_state( 1 );


                		    goto rulearrayInitEx;

                		}

                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 29 );
                    ex->set_state( 0 );


                    goto rulearrayInitEx;

                }

                switch (alt29)
                {
            	case 1:
            	    {
            	        {
            	            {
            	                int cnt26=0;

            	                for (;;)
            	                {
            	                    int alt26=2;
            	            	switch ( this->LA(1) )
            	            	{
            	            	case LSQBRACKET:
            	            		{
            	            			switch ( this->LA(2) )
            	            			{
            	            			case BOOL:
            	            			case BOOL_TYPE:
            	            			case CHAR:
            	            			case CHAR_TYPE:
            	            			case DOUBDEC:
            	            			case DOUBINC:
            	            			case FLOAT:
            	            			case FLOAT_TYPE:
            	            			case ID:
            	            			case INT:
            	            			case INT_TYPE:
            	            			case LBRACKET:
            	            			case NULLTOK:
            	            			case STRING:
            	            			case VOID_TYPE:
            	            			case 58:
            	            				{
            	            					alt26=1;
            	            				}
            	            			    break;

            	            			}

            	            		}
            	            	    break;

            	            	}

            	            	switch (alt26)
            	            	{
            	            	    case 1:
            	            	        {
            	            	             this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_arrayInit3534);
            	            	            if  (this->hasException())
            	            	            {
            	            	                goto rulearrayInitEx;
            	            	            }


            	            	            this->followPush(FOLLOW_expr_in_arrayInit3538);
            	            	            e=expr();

            	            	            this->followPop();
            	            	            if  (this->hasException())
            	            	            {
            	            	                goto rulearrayInitEx;
            	            	            }


            	            	             this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_arrayInit3540);
            	            	            if  (this->hasException())
            	            	            {
            	            	                goto rulearrayInitEx;
            	            	            }


            	            	            {
            	            	                 node->add_expression(e
            	            	                );
            	            	            }


            	            	        }
            	            	        break;

            	            	    default:

            	            		if ( cnt26 >= 1 )
            	            		{
            	            		    goto loop26;
            	            		}


            	            		new ANTLR_Exception< WNScriptASTParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            	            		goto rulearrayInitEx;
            	            	}
            	            	cnt26++;
            	                }
            	                loop26: ;
            	            }


            	            for (;;)
            	            {
            	                int alt27=2;
            	                switch ( this->LA(1) )
            	                {
            	                case LSQBRACKET:
            	                	{
            	                		alt27=1;
            	                	}
            	                    break;

            	                }

            	                switch (alt27)
            	                {
            	            	case 1:
            	            	    {
            	            	         this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_arrayInit3564);
            	            	        if  (this->hasException())
            	            	        {
            	            	            goto rulearrayInitEx;
            	            	        }


            	            	         this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_arrayInit3566);
            	            	        if  (this->hasException())
            	            	        {
            	            	            goto rulearrayInitEx;
            	            	        }


            	            	        {
            	            	             node->add_level();
            	            	        }


            	            	    }
            	            	    break;

            	            	default:
            	            	    goto loop27;
            	            	    break;
            	                }
            	            }
            	            loop27: ;


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	            int cnt28=0;

            	            for (;;)
            	            {
            	                int alt28=2;
            	        	switch ( this->LA(1) )
            	        	{
            	        	case LSQBRACKET:
            	        		{
            	        			alt28=1;
            	        		}
            	        	    break;

            	        	}

            	        	switch (alt28)
            	        	{
            	        	    case 1:
            	        	        {
            	        	             this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_arrayInit3604);
            	        	            if  (this->hasException())
            	        	            {
            	        	                goto rulearrayInitEx;
            	        	            }


            	        	             this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_arrayInit3606);
            	        	            if  (this->hasException())
            	        	            {
            	        	                goto rulearrayInitEx;
            	        	            }


            	        	            {
            	        	                 node->add_level();
            	        	            }


            	        	        }
            	        	        break;

            	        	    default:

            	        		if ( cnt28 >= 1 )
            	        		{
            	        		    goto loop28;
            	        		}


            	        		new ANTLR_Exception< WNScriptASTParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            	        		goto rulearrayInitEx;
            	        	}
            	        	cnt28++;
            	            }
            	            loop28: ;
            	        }

            	    }
            	    break;

                }
            }

            {
                int alt30=2;
                switch ( this->LA(1) )
                {
                case LBRACKET:
                	{
                		switch ( this->LA(2) )
                		{
                		case RBRACKET:
                			{
                				alt30=1;
                			}
                		    break;
                		case BOOL:
                		case BOOL_TYPE:
                		case CHAR:
                		case CHAR_TYPE:
                		case DOUBDEC:
                		case DOUBINC:
                		case FLOAT:
                		case FLOAT_TYPE:
                		case ID:
                		case INT:
                		case INT_TYPE:
                		case LBRACKET:
                		case NULLTOK:
                		case STRING:
                		case VOID_TYPE:
                		case 58:
                			{
                				alt30=2;
                			}
                		    break;

                		default:
                		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 30 );
                		    ex->set_state( 1 );


                		    goto rulearrayInitEx;

                		}

                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 30 );
                    ex->set_state( 0 );


                    goto rulearrayInitEx;

                }

                switch (alt30)
                {
            	case 1:
            	    {
            	        {
            	             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_arrayInit3647);
            	            if  (this->hasException())
            	            {
            	                goto rulearrayInitEx;
            	            }


            	            a =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_arrayInit3651);
            	            if  (this->hasException())
            	            {
            	                goto rulearrayInitEx;
            	            }


            	            {
            	                 SET_LOCATION(node, a);
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_arrayInit3685);
            	            if  (this->hasException())
            	            {
            	                goto rulearrayInitEx;
            	            }


            	            this->followPush(FOLLOW_expr_in_arrayInit3689);
            	            b=expr();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulearrayInitEx;
            	            }


            	            c =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_arrayInit3693);
            	            if  (this->hasException())
            	            {
            	                goto rulearrayInitEx;
            	            }


            	            {
            	                 node->set_copy_initializer(b); SET_LOCATION(node, c);
            	            }


            	        }


            	    }
            	    break;

                }
            }

        }

    }
    goto rulearrayInitEx;
    rulearrayInitEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::declaration*
WNScriptASTParser::declaration()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::declaration* node;


    scripting::parameter* a;
    scripting::expression* c;





        node =  m_allocator->make_allocated<scripting::declaration>(m_allocator);



    {
        {
            this->followPush(FOLLOW_param_in_declaration3738);
            a=param();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledeclarationEx;
            }


            {
                 node->set_parameter(a
                ); SET_LOCATION_FROM_NODE(node, a
                );
            }


            {
                {
                     this->matchToken(65, &FOLLOW_65_in_declaration3773);
                    if  (this->hasException())
                    {
                        goto ruledeclarationEx;
                    }


                    {
                        {
                            this->followPush(FOLLOW_expr_in_declaration3780);
                            c=expr();

                            this->followPop();
                            if  (this->hasException())
                            {
                                goto ruledeclarationEx;
                            }


                        }


                        {
                             node->add_expression_initializer(c
                            ); SET_END_LOCATION_FROM_NODE(node, c
                            );
                        }


                    }


                }


            }


        }

    }
    goto ruledeclarationEx;
    ruledeclarationEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::instructionScalar()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    scripting::declaration* declaration30;
    scripting::assignment_instruction* assignment31;





        node = wn_nullptr;



    {
        {

            ANTLR_UINT32 alt31;

            alt31=2;

            alt31 = cdfa31.predict(this, this->get_rec(), this->get_istream(), cdfa31 );
            if  (this->hasException())
            {
                goto ruleinstructionScalarEx;
            }

            switch (alt31)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_declaration_in_instructionScalar3829);
        	        declaration30=declaration();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionScalarEx;
        	        }


        	        {
        	            node = declaration30
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_assignment_in_instructionScalar3842);
        	        assignment31=assignment();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionScalarEx;
        	        }


        	        {
        	            node = assignment31
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleinstructionScalarEx;
    ruleinstructionScalarEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::return_instruction*
WNScriptASTParser::returnInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::return_instruction* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* b = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    const ImplTraits::CommonTokenType* d = NULL;
    scripting::expression* expr32;





        node = wn_nullptr;



    {
        {

            ANTLR_UINT32 alt32;

            alt32=2;

            switch ( this->LA(1) )
            {
            case RETURN:
            	{
            		switch ( this->LA(2) )
            		{
            		case SEMICOLON:
            			{
            				alt32=2;
            			}
            		    break;
            		case BOOL:
            		case BOOL_TYPE:
            		case CHAR:
            		case CHAR_TYPE:
            		case DOUBDEC:
            		case DOUBINC:
            		case FLOAT:
            		case FLOAT_TYPE:
            		case ID:
            		case INT:
            		case INT_TYPE:
            		case LBRACKET:
            		case NULLTOK:
            		case STRING:
            		case VOID_TYPE:
            		case 58:
            			{
            				alt32=1;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 32 );
            		    ex->set_state( 1 );


            		    goto rulereturnInstEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 32 );
                ex->set_state( 0 );


                goto rulereturnInstEx;

            }

            switch (alt32)
            {
        	case 1:
        	    {
        	        a =  this->matchToken(RETURN, &FOLLOW_RETURN_in_returnInst3874);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_returnInst3876);
        	        expr32=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        b =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_returnInst3880);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::return_instruction>(m_allocator, expr32
        	            ); SET_LOCATION(node, a); SET_END_LOCATION(node, b);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        c =  this->matchToken(RETURN, &FOLLOW_RETURN_in_returnInst3894);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        d =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_returnInst3898);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::return_instruction>(m_allocator); SET_LOCATION(node, c); SET_END_LOCATION(node, d);
        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulereturnInstEx;
    rulereturnInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::whileInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    const ImplTraits::CommonTokenType* WHILE35 = NULL;
    scripting::expression* expr33;
    scripting::instruction_list* body34;





        node = wn_nullptr;



    {
        {
            WHILE35 =  this->matchToken(WHILE, &FOLLOW_WHILE_in_whileInst3931);
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_whileInst3933);
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


            this->followPush(FOLLOW_expr_in_whileInst3935);
            expr33=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_whileInst3937);
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


            this->followPush(FOLLOW_body_in_whileInst3939);
            body34=body();

            this->followPop();
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


            {
                 node = m_allocator->make_allocated<scripting::while_instruction>(m_allocator, expr33
                , body34
                ); SET_LOCATION(node, WHILE35); SET_END_LOCATION_FROM_NODE(node,
                body34
                );
            }


        }

    }
    goto rulewhileInstEx;
    rulewhileInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::doInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    const ImplTraits::CommonTokenType* DO38 = NULL;
    const ImplTraits::CommonTokenType* SEMICOLON39 = NULL;
    scripting::expression* expr36;
    scripting::instruction_list* body37;





        node = wn_nullptr;



    {
        {
            DO38 =  this->matchToken(DO, &FOLLOW_DO_in_doInst3975);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            this->followPush(FOLLOW_body_in_doInst3977);
            body37=body();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


             this->matchToken(WHILE, &FOLLOW_WHILE_in_doInst3979);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_doInst3981);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            this->followPush(FOLLOW_expr_in_doInst3983);
            expr36=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_doInst3985);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            SEMICOLON39 =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_doInst3987);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            {
                node = m_allocator->make_allocated<scripting::do_instruction>(m_allocator, expr36
                , body37
                ); SET_LOCATION(node, DO38); SET_END_LOCATION(node, SEMICOLON39);
            }


        }

    }
    goto ruledoInstEx;
    ruledoInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::for_instruction*
WNScriptASTParser::forInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::for_instruction* node;


    const ImplTraits::CommonTokenType* FOR40 = NULL;
    scripting::instruction* a;
    scripting::expression* b;
    scripting::instruction* c;
    scripting::instruction_list* d;





        node =  m_allocator->make_allocated<scripting::for_instruction>(m_allocator);



    {
        {
            FOR40 =  this->matchToken(FOR, &FOLLOW_FOR_in_forInst4019);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_forInst4021);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            {
                 SET_LOCATION(node, FOR40);
            }


            {
                int alt33=2;
                switch ( this->LA(1) )
                {
                    case BOOL:
                    case BOOL_TYPE:
                    case CHAR:
                    case CHAR_TYPE:
                    case DOUBDEC:
                    case DOUBINC:
                    case FLOAT:
                    case FLOAT_TYPE:
                    case ID:
                    case INT:
                    case INT_TYPE:
                    case LBRACKET:
                    case NULLTOK:
                    case SHARED_REF:
                    case STRING:
                    case STRING_TYPE:
                    case TYPE:
                    case VOID_TYPE:
                    case WEAK_REF:
                    case 58:
                    	{
                    		alt33=1;
                    	}
                        break;
                }

                switch (alt33)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_instructionScalar_in_forInst4049);
            	        a=instructionScalar();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleforInstEx;
            	        }


            	        {
            	            node->add_initializer(a
            	            );
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_forInst4055);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            {
                int alt34=2;
                switch ( this->LA(1) )
                {
                    case BOOL:
                    case BOOL_TYPE:
                    case CHAR:
                    case CHAR_TYPE:
                    case DOUBDEC:
                    case DOUBINC:
                    case FLOAT:
                    case FLOAT_TYPE:
                    case ID:
                    case INT:
                    case INT_TYPE:
                    case LBRACKET:
                    case NULLTOK:
                    case STRING:
                    case VOID_TYPE:
                    case 58:
                    	{
                    		alt34=1;
                    	}
                        break;
                }

                switch (alt34)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_expr_in_forInst4080);
            	        b=expr();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleforInstEx;
            	        }


            	        {
            	            node->add_condition(b
            	            );
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_forInst4094);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            {
                int alt35=2;
                switch ( this->LA(1) )
                {
                    case BOOL:
                    case BOOL_TYPE:
                    case CHAR:
                    case CHAR_TYPE:
                    case DOUBDEC:
                    case DOUBINC:
                    case FLOAT:
                    case FLOAT_TYPE:
                    case ID:
                    case INT:
                    case INT_TYPE:
                    case LBRACKET:
                    case NULLTOK:
                    case SHARED_REF:
                    case STRING:
                    case STRING_TYPE:
                    case TYPE:
                    case VOID_TYPE:
                    case WEAK_REF:
                    case 58:
                    	{
                    		alt35=1;
                    	}
                        break;
                }

                switch (alt35)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_instructionScalar_in_forInst4119);
            	        c=instructionScalar();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleforInstEx;
            	        }


            	        {
            	            node->add_post_op(c
            	            );
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_forInst4125);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            {
                this->followPush(FOLLOW_body_in_forInst4150);
                d=body();

                this->followPop();
                if  (this->hasException())
                {
                    goto ruleforInstEx;
                }


                {
                    node->add_body(d
                    ); SET_END_LOCATION_FROM_NODE(node, d
                    );
                }


            }


        }

    }
    goto ruleforInstEx;
    ruleforInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::else_if_instruction*
WNScriptASTParser::elsemiddle()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::else_if_instruction* node;


    const ImplTraits::CommonTokenType* ELSE43 = NULL;
    scripting::expression* expr41;
    scripting::instruction_list* body42;





        node = wn_nullptr;



    {
        {
            ELSE43 =  this->matchToken(ELSE, &FOLLOW_ELSE_in_elsemiddle4198);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


             this->matchToken(IF, &FOLLOW_IF_in_elsemiddle4200);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_elsemiddle4202);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


            this->followPush(FOLLOW_expr_in_elsemiddle4204);
            expr41=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_elsemiddle4206);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


            this->followPush(FOLLOW_body_in_elsemiddle4208);
            body42=body();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


            {
                 node = m_allocator->make_allocated<scripting::else_if_instruction>(m_allocator, expr41
                , body42
                ); SET_LOCATION(node, ELSE43); SET_END_LOCATION_FROM_NODE(node,
                body42
                );
            }


        }

    }
    goto ruleelsemiddleEx;
    ruleelsemiddleEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction_list*
WNScriptASTParser::endif()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction_list* node;


    scripting::instruction_list* body44;





        node = wn_nullptr;



    {
        {
             this->matchToken(ELSE, &FOLLOW_ELSE_in_endif4241);
            if  (this->hasException())
            {
                goto ruleendifEx;
            }


            this->followPush(FOLLOW_body_in_endif4243);
            body44=body();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleendifEx;
            }


            {
                node = body44
                ;
            }


        }

    }
    goto ruleendifEx;
    ruleendifEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::if_instruction*
WNScriptASTParser::ifInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::if_instruction* node;


    const ImplTraits::CommonTokenType* IF47 = NULL;
    scripting::expression* expr45;
    scripting::instruction_list* body46;
    scripting::else_if_instruction* elsemiddle48;
    scripting::instruction_list* endif49;





        node = wn_nullptr;



    {
        {
            IF47 =  this->matchToken(IF, &FOLLOW_IF_in_ifInst4273);
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_ifInst4275);
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


            this->followPush(FOLLOW_expr_in_ifInst4277);
            expr45=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_ifInst4279);
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


            this->followPush(FOLLOW_body_in_ifInst4281);
            body46=body();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


            {
                node = m_allocator->make_allocated<scripting::if_instruction>(m_allocator, expr45
                , body46
                ); SET_LOCATION(node, IF47); SET_END_LOCATION_FROM_NODE(node,
                body46
                );
            }



            for (;;)
            {
                int alt36=2;
                switch ( this->LA(1) )
                {
                case ELSE:
                	{
                		switch ( this->LA(2) )
                		{
                		case IF:
                			{
                				alt36=1;
                			}
                		    break;

                		}

                	}
                    break;

                }

                switch (alt36)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_elsemiddle_in_ifInst4298);
            	        elsemiddle48=elsemiddle();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleifInstEx;
            	        }


            	        {
            	            node->add_else_if(elsemiddle48
            	            ); SET_END_LOCATION_FROM_NODE(node, elsemiddle48
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop36;
            	    break;
                }
            }
            loop36: ;


            {
                int alt37=2;
                switch ( this->LA(1) )
                {
                    case ELSE:
                    	{
                    		alt37=1;
                    	}
                        break;
                }

                switch (alt37)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_endif_in_ifInst4318);
            	        endif49=endif();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleifInstEx;
            	        }


            	        {
            	            node->add_else(endif49
            	            ); SET_LOCATION(node, IF47); SET_END_LOCATION_FROM_NODE(node,
            	            endif49
            	            );
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    goto ruleifInstEx;
    ruleifInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::instruction()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    scripting::if_instruction* ifInst50;
    scripting::instruction* whileInst51;
    scripting::instruction* doInst52;
    scripting::for_instruction* forInst53;
    scripting::instruction* instructionScalar54;
    scripting::return_instruction* returnInst55;





        node = wn_nullptr;



    {
        {

            ANTLR_UINT32 alt38;

            alt38=6;

            switch ( this->LA(1) )
            {
            case IF:
            	{
            		alt38=1;
            	}
                break;
            case WHILE:
            	{
            		alt38=2;
            	}
                break;
            case DO:
            	{
            		alt38=3;
            	}
                break;
            case FOR:
            	{
            		alt38=4;
            	}
                break;
            case BOOL:
            case BOOL_TYPE:
            case CHAR:
            case CHAR_TYPE:
            case DOUBDEC:
            case DOUBINC:
            case FLOAT:
            case FLOAT_TYPE:
            case ID:
            case INT:
            case INT_TYPE:
            case LBRACKET:
            case NULLTOK:
            case SHARED_REF:
            case STRING:
            case STRING_TYPE:
            case TYPE:
            case VOID_TYPE:
            case WEAK_REF:
            case 58:
            	{
            		alt38=5;
            	}
                break;
            case RETURN:
            	{
            		alt38=6;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 38 );
                ex->set_state( 0 );


                goto ruleinstructionEx;

            }

            switch (alt38)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_ifInst_in_instruction4352);
        	        ifInst50=ifInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	             node = ifInst50
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_whileInst_in_instruction4373);
        	        whileInst51=whileInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = whileInst51
        	            ;
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        this->followPush(FOLLOW_doInst_in_instruction4390);
        	        doInst52=doInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = doInst52
        	            ;
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        this->followPush(FOLLOW_forInst_in_instruction4410);
        	        forInst53=forInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = forInst53
        	            ;
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        this->followPush(FOLLOW_instructionScalar_in_instruction4430);
        	        instructionScalar54=instructionScalar();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	         this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_instruction4432);
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = instructionScalar54
        	            ;
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	        this->followPush(FOLLOW_returnInst_in_instruction4445);
        	        returnInst55=returnInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = returnInst55
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleinstructionEx;
    ruleinstructionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction_list*
WNScriptASTParser::instruction_list()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction_list* node;


    scripting::instruction* a;
    scripting::instruction* b;





        node = wn_nullptr;



    {
        {
            this->followPush(FOLLOW_instruction_in_instruction_list4477);
            a=instruction();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleinstruction_listEx;
            }


            {
                node = m_allocator->make_allocated<scripting::instruction_list>(m_allocator, a
                ); SET_LOCATION_FROM_NODE(node, a
                );
            }



            for (;;)
            {
                int alt39=2;
                switch ( this->LA(1) )
                {
                case BOOL:
                case BOOL_TYPE:
                case CHAR:
                case CHAR_TYPE:
                case DO:
                case DOUBDEC:
                case DOUBINC:
                case FLOAT:
                case FLOAT_TYPE:
                case FOR:
                case ID:
                case IF:
                case INT:
                case INT_TYPE:
                case LBRACKET:
                case NULLTOK:
                case RETURN:
                case SHARED_REF:
                case STRING:
                case STRING_TYPE:
                case TYPE:
                case VOID_TYPE:
                case WEAK_REF:
                case WHILE:
                case 58:
                	{
                		alt39=1;
                	}
                    break;

                }

                switch (alt39)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_instruction_in_instruction_list4493);
            	        b=instruction();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleinstruction_listEx;
            	        }


            	        {
            	            node->add_instruction(b
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop39;
            	    break;
                }
            }
            loop39: ;


        }

    }
    goto ruleinstruction_listEx;
    ruleinstruction_listEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction_list*
WNScriptASTParser::body()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction_list* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* b = NULL;
    const ImplTraits::CommonTokenType* d = NULL;
    const ImplTraits::CommonTokenType* e = NULL;
    scripting::instruction_list* instruction_list56;





        node = wn_nullptr;



    {
        {

            ANTLR_UINT32 alt40;

            alt40=2;

            switch ( this->LA(1) )
            {
            case LBRACE:
            	{
            		switch ( this->LA(2) )
            		{
            		case RBRACE:
            			{
            				alt40=1;
            			}
            		    break;
            		case BOOL:
            		case BOOL_TYPE:
            		case CHAR:
            		case CHAR_TYPE:
            		case DO:
            		case DOUBDEC:
            		case DOUBINC:
            		case FLOAT:
            		case FLOAT_TYPE:
            		case FOR:
            		case ID:
            		case IF:
            		case INT:
            		case INT_TYPE:
            		case LBRACKET:
            		case NULLTOK:
            		case RETURN:
            		case SHARED_REF:
            		case STRING:
            		case STRING_TYPE:
            		case TYPE:
            		case VOID_TYPE:
            		case WEAK_REF:
            		case WHILE:
            		case 58:
            			{
            				alt40=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 40 );
            		    ex->set_state( 1 );


            		    goto rulebodyEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 40 );
                ex->set_state( 0 );


                goto rulebodyEx;

            }

            switch (alt40)
            {
        	case 1:
        	    {
        	        a =  this->matchToken(LBRACE, &FOLLOW_LBRACE_in_body4527);
        	        if  (this->hasException())
        	        {
        	            goto rulebodyEx;
        	        }


        	        b =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_body4531);
        	        if  (this->hasException())
        	        {
        	            goto rulebodyEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::instruction_list>(m_allocator); SET_LOCATION(node, a); SET_END_LOCATION(node, b);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        d =  this->matchToken(LBRACE, &FOLLOW_LBRACE_in_body4546);
        	        if  (this->hasException())
        	        {
        	            goto rulebodyEx;
        	        }


        	        this->followPush(FOLLOW_instruction_list_in_body4548);
        	        instruction_list56=instruction_list();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulebodyEx;
        	        }


        	        e =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_body4552);
        	        if  (this->hasException())
        	        {
        	            goto rulebodyEx;
        	        }


        	        {
        	            node = instruction_list56
        	            ; SET_LOCATION(node, d); SET_END_LOCATION(node, e);
        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulebodyEx;
    rulebodyEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::function*
WNScriptASTParser::function()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::function* node;


    scripting::parameter* param57;
    scripting::parameter_list* parameterList58;
    scripting::instruction_list* body59;





        node = wn_nullptr;



    {
        {
            this->followPush(FOLLOW_param_in_function4582);
            param57=param();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefunctionEx;
            }


            this->followPush(FOLLOW_parameterList_in_function4584);
            parameterList58=parameterList();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefunctionEx;
            }


            this->followPush(FOLLOW_body_in_function4586);
            body59=body();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefunctionEx;
            }


            {
                 node = m_allocator->make_allocated<scripting::function>(m_allocator, param57
                , parameterList58
                , body59
                ); SET_LOCATION_FROM_NODE(node, param57
                ); SET_END_LOCATION_FROM_NODE(node, body59
                );
            }


        }

    }
    goto rulefunctionEx;
    rulefunctionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::struct_definition*
WNScriptASTParser::structDecl()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::struct_definition* node;


    const ImplTraits::CommonTokenType* TYPE60 = NULL;
    const ImplTraits::CommonTokenType* STRUCT61 = NULL;
    const ImplTraits::CommonTokenType* RBRACE62 = NULL;
    scripting::declaration* a;





        node = wn_nullptr;



    {
        {
            STRUCT61 =  this->matchToken(STRUCT, &FOLLOW_STRUCT_in_structDecl4616);
            if  (this->hasException())
            {
                goto rulestructDeclEx;
            }


            TYPE60 =  this->matchToken(TYPE, &FOLLOW_TYPE_in_structDecl4618);
            if  (this->hasException())
            {
                goto rulestructDeclEx;
            }


            {
                node= m_allocator->make_allocated<scripting::struct_definition>(m_allocator, (TYPE60->getText()).c_str()); SET_LOCATION(node, STRUCT61);
            }


             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_structDecl4634);
            if  (this->hasException())
            {
                goto rulestructDeclEx;
            }



            for (;;)
            {
                int alt41=2;
                switch ( this->LA(1) )
                {
                case BOOL_TYPE:
                case CHAR_TYPE:
                case FLOAT_TYPE:
                case INT_TYPE:
                case SHARED_REF:
                case STRING_TYPE:
                case TYPE:
                case VOID_TYPE:
                case WEAK_REF:
                	{
                		alt41=1;
                	}
                    break;

                }

                switch (alt41)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_declaration_in_structDecl4639);
            	        a=declaration();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulestructDeclEx;
            	        }


            	        {
            	             node->add_struct_elem(a
            	            );
            	        }


            	         this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_structDecl4643);
            	        if  (this->hasException())
            	        {
            	            goto rulestructDeclEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop41;
            	    break;
                }
            }
            loop41: ;


            RBRACE62 =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_structDecl4648);
            if  (this->hasException())
            {
                goto rulestructDeclEx;
            }


            {
                 SET_END_LOCATION(node, RBRACE62);
            }


        }

    }
    goto rulestructDeclEx;
    rulestructDeclEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::struct_definition*
WNScriptASTParser::classDecl()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::struct_definition* node;


    const ImplTraits::CommonTokenType* f = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    const ImplTraits::CommonTokenType* g = NULL;
    const ImplTraits::CommonTokenType* d = NULL;
    const ImplTraits::CommonTokenType* e = NULL;
    const ImplTraits::CommonTokenType* RBRACE63 = NULL;
    scripting::declaration* a;
    scripting::function* b;
    scripting::function* h;
    scripting::function* i;





        node = wn_nullptr;



    {
        {
            {
                int alt42=2;
                switch ( this->LA(1) )
                {
                case CLASS:
                	{
                		switch ( this->LA(2) )
                		{
                		case TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case COLON:
                					{
                						alt42=2;
                					}
                				    break;
                				case LBRACE:
                					{
                						alt42=1;
                					}
                				    break;

                				default:
                				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 42 );
                				    ex->set_state( 2 );


                				    goto ruleclassDeclEx;

                				}

                			}
                		    break;

                		default:
                		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 42 );
                		    ex->set_state( 1 );


                		    goto ruleclassDeclEx;

                		}

                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 42 );
                    ex->set_state( 0 );


                    goto ruleclassDeclEx;

                }

                switch (alt42)
                {
            	case 1:
            	    {
            	        {
            	            f =  this->matchToken(CLASS, &FOLLOW_CLASS_in_classDecl4701);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            c =  this->matchToken(TYPE, &FOLLOW_TYPE_in_classDecl4705);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                node= m_allocator->make_allocated<scripting::struct_definition>(m_allocator, (c->getText()).c_str(), true); SET_LOCATION(node, f);
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	            g =  this->matchToken(CLASS, &FOLLOW_CLASS_in_classDecl4725);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            d =  this->matchToken(TYPE, &FOLLOW_TYPE_in_classDecl4729);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	             this->matchToken(COLON, &FOLLOW_COLON_in_classDecl4731);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            e =  this->matchToken(TYPE, &FOLLOW_TYPE_in_classDecl4735);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                node= m_allocator->make_allocated<scripting::struct_definition>(m_allocator, (d->getText()).c_str(), true, (e->getText()).c_str()); SET_LOCATION(node, g);
            	            }


            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_classDecl4762);
            if  (this->hasException())
            {
                goto ruleclassDeclEx;
            }



            for (;;)
            {
                int alt43=5;
                alt43 = cdfa43.predict(this, this->get_rec(), this->get_istream(), cdfa43 );
                if  (this->hasException())
                {
                    goto ruleclassDeclEx;
                }

                switch (alt43)
                {
            	case 1:
            	    {
            	        {
            	            this->followPush(FOLLOW_declaration_in_classDecl4805);
            	            a=declaration();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_struct_elem(a
            	                );
            	            }


            	             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_classDecl4809);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	            this->followPush(FOLLOW_function_in_classDecl4835);
            	            b=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_function(b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	        {
            	             this->matchToken(VIRTUAL, &FOLLOW_VIRTUAL_in_classDecl4864);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            this->followPush(FOLLOW_function_in_classDecl4868);
            	            h=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_function(h
            	                ); h
            	                ->set_is_virtual(wn_true);
            	            }


            	        }


            	    }
            	    break;
            	case 4:
            	    {
            	        {
            	             this->matchToken(OVERRIDE, &FOLLOW_OVERRIDE_in_classDecl4894);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            this->followPush(FOLLOW_function_in_classDecl4898);
            	            i=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_function(i
            	                ); i
            	                ->set_is_override(wn_true);
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop43;
            	    break;
                }
            }
            loop43: ;


            RBRACE63 =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_classDecl4934);
            if  (this->hasException())
            {
                goto ruleclassDeclEx;
            }


            {
                 SET_END_LOCATION(node, RBRACE63);
            }


        }

    }
    goto ruleclassDeclEx;
    ruleclassDeclEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






const wn_char*
WNScriptASTParser::inc()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    const wn_char* file;


    const ImplTraits::CommonTokenType* STRING64 = NULL;






        file = wn_nullptr;



    {
        {
             this->matchToken(INCLUDE, &FOLLOW_INCLUDE_in_inc4964);
            if  (this->hasException())
            {
                goto ruleincEx;
            }


            STRING64 =  this->matchToken(STRING, &FOLLOW_STRING_in_inc4966);
            if  (this->hasException())
            {
                goto ruleincEx;
            }


            {
                 file = (STRING64->getText()).c_str();
            }


        }

    }
    goto ruleincEx;
    ruleincEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return file;
}






scripting::script_file*
WNScriptASTParser::program()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::script_file* node;


    scripting::function* function65;
    scripting::struct_definition* structDecl66;
    scripting::struct_definition* classDecl67;
    const wn_char* inc68;





        node = m_allocator->make_allocated<scripting::script_file>(m_allocator);



    {
        {

            for (;;)
            {
                int alt44=5;
                switch ( this->LA(1) )
                {
                case BOOL_TYPE:
                case CHAR_TYPE:
                case FLOAT_TYPE:
                case INT_TYPE:
                case SHARED_REF:
                case STRING_TYPE:
                case TYPE:
                case VOID_TYPE:
                case WEAK_REF:
                	{
                		alt44=1;
                	}
                    break;
                case STRUCT:
                	{
                		alt44=2;
                	}
                    break;
                case CLASS:
                	{
                		alt44=3;
                	}
                    break;
                case INCLUDE:
                	{
                		alt44=4;
                	}
                    break;

                }

                switch (alt44)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_function_in_program5012);
            	        function65=function();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_function(function65
            	            );
            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        this->followPush(FOLLOW_structDecl_in_program5034);
            	        structDecl66=structDecl();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_struct(structDecl66
            	            );
            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	        this->followPush(FOLLOW_classDecl_in_program5054);
            	        classDecl67=classDecl();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_struct(classDecl67
            	            );
            	        }


            	    }
            	    break;
            	case 4:
            	    {
            	        this->followPush(FOLLOW_inc_in_program5075);
            	        inc68=inc();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_include(inc68
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop44;
            	    break;
                }
            }
            loop44: ;


        }

    }
    goto ruleprogramEx;
    ruleprogramEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}

















