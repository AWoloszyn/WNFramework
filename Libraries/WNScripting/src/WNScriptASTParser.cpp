/** \file
 *  This C++ source file was generated by $ANTLR version 3.5.3-SNAPSHOT
 *
 *     -                for the parser : WNScriptASTParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF

// clang-format off





    #include "WNCore/inc/WNBase.h"
#ifdef _WN_MSVC
    #pragma warning(disable: 4100)
    #pragma warning(disable: 4459)
    #pragma warning(disable: 4703)
#endif
    #include "WNMemory/inc/WNAllocator.h"
    #include "WNScripting/src/WNScriptASTLexer.hpp"
    #include "WNScripting/inc/WNNodeTypes.h"

    using namespace wn;

    #ifndef SET_LOCATION
    #define SET_LOCATION(node, tok) { scripting::source_location loc; \
                                     loc.m_start_index = tok->get_startIndex();\
                                     loc.m_end_index = tok->get_stopIndex();\
                                     loc.m_line_start = tok->get_lineStart();\
                                     loc.m_line_number = tok->get_line();\
                                     loc.m_char_number = tok->get_charPositionInLine();\
                                     node->set_start_location(loc); \
                                   }

    #define SET_LOCATION_FROM_NODE(node, node2) { \
                                        if(node2) { \
                                        node->set_start_location(node2->get_start_location()); \
                                        } \
                                   }
    #define SET_START_LOCATION_FROM_NODE(node, node2) { \
                                        if(node2) { \
                                        scripting::source_location loc = node->get_start_location(); \
                                        scripting::source_location loc2 = node2->get_start_location(); \
                                        loc.m_start_index = loc2.m_start_index; \
                                        loc.m_line_start = loc2.m_line_start; \
                                        loc.m_line_number = loc2.m_line_number; \
                                        loc.m_char_number = loc2.m_char_number; \
                                        node->set_start_location(loc); \
                                        } \
                                    }
    #define SET_END_LOCATION(node, tok) { \
                                        node->set_end_index(tok->get_stopIndex()); \
                                      }
    #define SET_END_LOCATION_FROM_NODE(node, node2) { \
                                            if(node2) { \
                                            node->set_end_index(node2->get_start_location().m_end_index); \
                                            } \
                                            }
    #endif








#include    "WNScriptASTParser.hpp"









using namespace antlr3;



ANTLR_UINT8* WNScriptASTParserTokenNames[68+4]
     = {
        (ANTLR_UINT8*) "<invalid>",
        (ANTLR_UINT8*) "<EOR>",
        (ANTLR_UINT8*) "<DOWN>",
        (ANTLR_UINT8*) "<UP>",
        (ANTLR_UINT8*) "BOOL",
        (ANTLR_UINT8*) "BOOL_TYPE",
        (ANTLR_UINT8*) "BREAK",
        (ANTLR_UINT8*) "CHAR",
        (ANTLR_UINT8*) "CHAR_TYPE",
        (ANTLR_UINT8*) "CLASS",
        (ANTLR_UINT8*) "COLON",
        (ANTLR_UINT8*) "COMMA",
        (ANTLR_UINT8*) "COMMENT",
        (ANTLR_UINT8*) "CONTINUE",
        (ANTLR_UINT8*) "DO",
        (ANTLR_UINT8*) "DOUBDEC",
        (ANTLR_UINT8*) "DOUBINC",
        (ANTLR_UINT8*) "ELSE",
        (ANTLR_UINT8*) "ESC_SEQ",
        (ANTLR_UINT8*) "EXPONENT",
        (ANTLR_UINT8*) "FLOAT",
        (ANTLR_UINT8*) "FLOAT_TYPE",
        (ANTLR_UINT8*) "FOR",
        (ANTLR_UINT8*) "HEX_DIGIT",
        (ANTLR_UINT8*) "ID",
        (ANTLR_UINT8*) "IF",
        (ANTLR_UINT8*) "INCLUDE",
        (ANTLR_UINT8*) "INT",
        (ANTLR_UINT8*) "INT_TYPE",
        (ANTLR_UINT8*) "LBRACE",
        (ANTLR_UINT8*) "LBRACKET",
        (ANTLR_UINT8*) "LSQBRACKET",
        (ANTLR_UINT8*) "NULLTOK",
        (ANTLR_UINT8*) "OCTAL_ESC",
        (ANTLR_UINT8*) "OVERRIDE",
        (ANTLR_UINT8*) "QUESTION",
        (ANTLR_UINT8*) "RBRACE",
        (ANTLR_UINT8*) "RBRACKET",
        (ANTLR_UINT8*) "RETURN",
        (ANTLR_UINT8*) "RSQBRACKET",
        (ANTLR_UINT8*) "SEMICOLON",
        (ANTLR_UINT8*) "SHARED_REF",
        (ANTLR_UINT8*) "STRING",
        (ANTLR_UINT8*) "STRING_TYPE",
        (ANTLR_UINT8*) "STRUCT",
        (ANTLR_UINT8*) "TYPE",
        (ANTLR_UINT8*) "UNICODE_ESC",
        (ANTLR_UINT8*) "VIRTUAL",
        (ANTLR_UINT8*) "VOID_TYPE",
        (ANTLR_UINT8*) "WEAK_REF",
        (ANTLR_UINT8*) "WHILE",
        (ANTLR_UINT8*) "WS",
        (ANTLR_UINT8*) "'!='",
        (ANTLR_UINT8*) "'%'",
        (ANTLR_UINT8*) "'%='",
        (ANTLR_UINT8*) "'&&'",
        (ANTLR_UINT8*) "'*'",
        (ANTLR_UINT8*) "'*='",
        (ANTLR_UINT8*) "'+'",
        (ANTLR_UINT8*) "'+='",
        (ANTLR_UINT8*) "'-'",
        (ANTLR_UINT8*) "'-='",
        (ANTLR_UINT8*) "'.'",
        (ANTLR_UINT8*) "'/'",
        (ANTLR_UINT8*) "'/='",
        (ANTLR_UINT8*) "'<'",
        (ANTLR_UINT8*) "'<='",
        (ANTLR_UINT8*) "'='",
        (ANTLR_UINT8*) "'=='",
        (ANTLR_UINT8*) "'>'",
        (ANTLR_UINT8*) "'>='",
        (ANTLR_UINT8*) "'||'"
       };




static const char fileName[] = "WNScriptAST.g";



const char* WNScriptASTParser::getGrammarFileName()
{
	return fileName;
}






WNScriptASTParser::WNScriptASTParser( StreamType* instream)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, NULL)

{
	this->init(instream);
}







WNScriptASTParser::WNScriptASTParser( StreamType* instream, RecognizerSharedStateType* state)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, state)

{
	this->init(instream );
}

void WNScriptASTParser::init(StreamType* instream)
{


	this->get_psrstate()->set_tokenNames( WNScriptASTParserTokenNames );


}

void
WNScriptASTParser::reset()
{
    this->get_rec()->reset();
}



WNScriptASTParser::~WNScriptASTParser()
 {
}








static ANTLR_UINT8**	getTokenNames()
{
        return WNScriptASTParserTokenNames;
}





static	ANTLR_BITWORD FOLLOW_TYPE_in_objectType1166_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_objectType1166( FOLLOW_TYPE_in_objectType1166_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRING_TYPE_in_objectType1181_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_TYPE_in_objectType1181( FOLLOW_STRING_TYPE_in_objectType1181_bits, 1 );

static	ANTLR_BITWORD FOLLOW_VOID_TYPE_in_scalarType1210_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_VOID_TYPE_in_scalarType1210( FOLLOW_VOID_TYPE_in_scalarType1210_bits, 1 );

static	ANTLR_BITWORD FOLLOW_INT_TYPE_in_scalarType1222_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_INT_TYPE_in_scalarType1222( FOLLOW_INT_TYPE_in_scalarType1222_bits, 1 );

static	ANTLR_BITWORD FOLLOW_FLOAT_TYPE_in_scalarType1234_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_FLOAT_TYPE_in_scalarType1234( FOLLOW_FLOAT_TYPE_in_scalarType1234_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CHAR_TYPE_in_scalarType1246_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CHAR_TYPE_in_scalarType1246( FOLLOW_CHAR_TYPE_in_scalarType1246_bits, 1 );

static	ANTLR_BITWORD FOLLOW_BOOL_TYPE_in_scalarType1258_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_BOOL_TYPE_in_scalarType1258( FOLLOW_BOOL_TYPE_in_scalarType1258_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_arrayType1285_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_arrayType1285( FOLLOW_scalarType_in_arrayType1285_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_arrayType1301_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_arrayType1301( FOLLOW_LSQBRACKET_in_arrayType1301_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_arrayType1303_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_arrayType1303( FOLLOW_RSQBRACKET_in_arrayType1303_bits, 1 );

static	ANTLR_BITWORD FOLLOW_objectType_in_arrayType1314_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_objectType_in_arrayType1314( FOLLOW_objectType_in_arrayType1314_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_arrayType1330_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_arrayType1330( FOLLOW_LSQBRACKET_in_arrayType1330_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_arrayType1332_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_arrayType1332( FOLLOW_RSQBRACKET_in_arrayType1332_bits, 1 );

static	ANTLR_BITWORD FOLLOW_objectType_in_compoundType1360_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_objectType_in_compoundType1360( FOLLOW_objectType_in_compoundType1360_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_nonArrayType1387_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_nonArrayType1387( FOLLOW_scalarType_in_nonArrayType1387_bits, 1 );

static	ANTLR_BITWORD FOLLOW_objectType_in_nonArrayType1397_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_objectType_in_nonArrayType1397( FOLLOW_objectType_in_nonArrayType1397_bits, 1 );

static	ANTLR_BITWORD FOLLOW_compoundType_in_type1427_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_compoundType_in_type1427( FOLLOW_compoundType_in_type1427_bits, 1 );

static	ANTLR_BITWORD FOLLOW_arrayType_in_type1437_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arrayType_in_type1437( FOLLOW_arrayType_in_type1437_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_type1447_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_type1447( FOLLOW_scalarType_in_type1447_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_param1479_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_param1479( FOLLOW_scalarType_in_param1479_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1483_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1483( FOLLOW_ID_in_param1483_bits, 1 );

static	ANTLR_BITWORD FOLLOW_compoundType_in_param1498_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_compoundType_in_param1498( FOLLOW_compoundType_in_param1498_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1502_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1502( FOLLOW_ID_in_param1502_bits, 1 );

static	ANTLR_BITWORD FOLLOW_arrayType_in_param1517_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arrayType_in_param1517( FOLLOW_arrayType_in_param1517_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1521_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1521( FOLLOW_ID_in_param1521_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SHARED_REF_in_param1534_bits[]	= { ANTLR_UINT64_LIT(0x0000280000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SHARED_REF_in_param1534( FOLLOW_SHARED_REF_in_param1534_bits, 1 );

static	ANTLR_BITWORD FOLLOW_compoundType_in_param1538_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_compoundType_in_param1538( FOLLOW_compoundType_in_param1538_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1542_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1542( FOLLOW_ID_in_param1542_bits, 1 );

static	ANTLR_BITWORD FOLLOW_WEAK_REF_in_param1555_bits[]	= { ANTLR_UINT64_LIT(0x0000280000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_WEAK_REF_in_param1555( FOLLOW_WEAK_REF_in_param1555_bits, 1 );

static	ANTLR_BITWORD FOLLOW_compoundType_in_param1559_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_compoundType_in_param1559( FOLLOW_compoundType_in_param1559_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1564_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1564( FOLLOW_ID_in_param1564_bits, 1 );

static	ANTLR_BITWORD FOLLOW_compoundType_in_param1579_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_compoundType_in_param1579( FOLLOW_compoundType_in_param1579_bits, 1 );

static	ANTLR_BITWORD FOLLOW_QUESTION_in_param1581_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_QUESTION_in_param1581( FOLLOW_QUESTION_in_param1581_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1586_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1586( FOLLOW_ID_in_param1586_bits, 1 );

static	ANTLR_BITWORD FOLLOW_param_in_paramList1618_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000802) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_param_in_paramList1618( FOLLOW_param_in_paramList1618_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COMMA_in_paramList1631_bits[]	= { ANTLR_UINT64_LIT(0x00032A0010200120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COMMA_in_paramList1631( FOLLOW_COMMA_in_paramList1631_bits, 1 );

static	ANTLR_BITWORD FOLLOW_param_in_paramList1635_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000802) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_param_in_paramList1635( FOLLOW_param_in_paramList1635_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_parameterList1667_bits[]	= { ANTLR_UINT64_LIT(0x00032A0010200120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_parameterList1667( FOLLOW_LBRACKET_in_parameterList1667_bits, 1 );

static	ANTLR_BITWORD FOLLOW_paramList_in_parameterList1669_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_paramList_in_parameterList1669( FOLLOW_paramList_in_parameterList1669_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_parameterList1671_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_parameterList1671( FOLLOW_RBRACKET_in_parameterList1671_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_parameterList1688_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_parameterList1688( FOLLOW_LBRACKET_in_parameterList1688_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_parameterList1690_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_parameterList1690( FOLLOW_RBRACKET_in_parameterList1690_bits, 1 );

static	ANTLR_BITWORD FOLLOW_67_in_assign_type1726_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_67_in_assign_type1726( FOLLOW_67_in_assign_type1726_bits, 1 );

static	ANTLR_BITWORD FOLLOW_59_in_assign_type1740_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_59_in_assign_type1740( FOLLOW_59_in_assign_type1740_bits, 1 );

static	ANTLR_BITWORD FOLLOW_61_in_assign_type1753_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_61_in_assign_type1753( FOLLOW_61_in_assign_type1753_bits, 1 );

static	ANTLR_BITWORD FOLLOW_57_in_assign_type1766_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_57_in_assign_type1766( FOLLOW_57_in_assign_type1766_bits, 1 );

static	ANTLR_BITWORD FOLLOW_64_in_assign_type1779_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_64_in_assign_type1779( FOLLOW_64_in_assign_type1779_bits, 1 );

static	ANTLR_BITWORD FOLLOW_54_in_assign_type1792_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_54_in_assign_type1792( FOLLOW_54_in_assign_type1792_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_arglist1850_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000802) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arglist1850( FOLLOW_expr_in_arglist1850_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COMMA_in_arglist1883_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593189B2) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COMMA_in_arglist1883( FOLLOW_COMMA_in_arglist1883_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_arglist1927_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000802) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arglist1927( FOLLOW_expr_in_arglist1927_bits, 1 );

static	ANTLR_BITWORD FOLLOW_cond_ex_in_expr2002_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_cond_ex_in_expr2002( FOLLOW_cond_ex_in_expr2002_bits, 1 );

static	ANTLR_BITWORD FOLLOW_or_ex_in_cond_ex2040_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_or_ex_in_cond_ex2040( FOLLOW_or_ex_in_cond_ex2040_bits, 1 );

static	ANTLR_BITWORD FOLLOW_QUESTION_in_cond_ex2063_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_QUESTION_in_cond_ex2063( FOLLOW_QUESTION_in_cond_ex2063_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_cond_ex2067_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_cond_ex2067( FOLLOW_expr_in_cond_ex2067_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COLON_in_cond_ex2069_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COLON_in_cond_ex2069( FOLLOW_COLON_in_cond_ex2069_bits, 1 );

static	ANTLR_BITWORD FOLLOW_cond_ex_in_cond_ex2073_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_cond_ex_in_cond_ex2073( FOLLOW_cond_ex_in_cond_ex2073_bits, 1 );

static	ANTLR_BITWORD FOLLOW_and_ex_in_or_ex2120_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000080) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_and_ex_in_or_ex2120( FOLLOW_and_ex_in_or_ex2120_bits, 2 );

static	ANTLR_BITWORD FOLLOW_71_in_or_ex2137_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_71_in_or_ex2137( FOLLOW_71_in_or_ex2137_bits, 1 );

static	ANTLR_BITWORD FOLLOW_and_ex_in_or_ex2141_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000080) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_and_ex_in_or_ex2141( FOLLOW_and_ex_in_or_ex2141_bits, 2 );

static	ANTLR_BITWORD FOLLOW_eq_ex_in_and_ex2184_bits[]	= { ANTLR_UINT64_LIT(0x0080000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_eq_ex_in_and_ex2184( FOLLOW_eq_ex_in_and_ex2184_bits, 1 );

static	ANTLR_BITWORD FOLLOW_55_in_and_ex2201_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_55_in_and_ex2201( FOLLOW_55_in_and_ex2201_bits, 1 );

static	ANTLR_BITWORD FOLLOW_eq_ex_in_and_ex2205_bits[]	= { ANTLR_UINT64_LIT(0x0080000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_eq_ex_in_and_ex2205( FOLLOW_eq_ex_in_and_ex2205_bits, 1 );

static	ANTLR_BITWORD FOLLOW_rel_ex_in_eq_ex2241_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_rel_ex_in_eq_ex2241( FOLLOW_rel_ex_in_eq_ex2241_bits, 2 );

static	ANTLR_BITWORD FOLLOW_68_in_eq_ex2276_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_68_in_eq_ex2276( FOLLOW_68_in_eq_ex2276_bits, 1 );

static	ANTLR_BITWORD FOLLOW_rel_ex_in_eq_ex2280_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_rel_ex_in_eq_ex2280( FOLLOW_rel_ex_in_eq_ex2280_bits, 2 );

static	ANTLR_BITWORD FOLLOW_52_in_eq_ex2303_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_52_in_eq_ex2303( FOLLOW_52_in_eq_ex2303_bits, 1 );

static	ANTLR_BITWORD FOLLOW_rel_ex_in_eq_ex2307_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_rel_ex_in_eq_ex2307( FOLLOW_rel_ex_in_eq_ex2307_bits, 2 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2365_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000066) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2365( FOLLOW_add_ex_in_rel_ex2365_bits, 2 );

static	ANTLR_BITWORD FOLLOW_65_in_rel_ex2401_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_65_in_rel_ex2401( FOLLOW_65_in_rel_ex2401_bits, 1 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2405_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000066) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2405( FOLLOW_add_ex_in_rel_ex2405_bits, 2 );

static	ANTLR_BITWORD FOLLOW_69_in_rel_ex2429_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_69_in_rel_ex2429( FOLLOW_69_in_rel_ex2429_bits, 1 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2433_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000066) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2433( FOLLOW_add_ex_in_rel_ex2433_bits, 2 );

static	ANTLR_BITWORD FOLLOW_66_in_rel_ex2457_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_66_in_rel_ex2457( FOLLOW_66_in_rel_ex2457_bits, 1 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2461_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000066) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2461( FOLLOW_add_ex_in_rel_ex2461_bits, 2 );

static	ANTLR_BITWORD FOLLOW_70_in_rel_ex2485_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_70_in_rel_ex2485( FOLLOW_70_in_rel_ex2485_bits, 1 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2489_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000066) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2489( FOLLOW_add_ex_in_rel_ex2489_bits, 2 );

static	ANTLR_BITWORD FOLLOW_mult_ex_in_add_ex2550_bits[]	= { ANTLR_UINT64_LIT(0x1400000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_mult_ex_in_add_ex2550( FOLLOW_mult_ex_in_add_ex2550_bits, 1 );

static	ANTLR_BITWORD FOLLOW_58_in_add_ex2585_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_58_in_add_ex2585( FOLLOW_58_in_add_ex2585_bits, 1 );

static	ANTLR_BITWORD FOLLOW_mult_ex_in_add_ex2589_bits[]	= { ANTLR_UINT64_LIT(0x1400000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_mult_ex_in_add_ex2589( FOLLOW_mult_ex_in_add_ex2589_bits, 1 );

static	ANTLR_BITWORD FOLLOW_60_in_add_ex2611_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_60_in_add_ex2611( FOLLOW_60_in_add_ex2611_bits, 1 );

static	ANTLR_BITWORD FOLLOW_mult_ex_in_add_ex2615_bits[]	= { ANTLR_UINT64_LIT(0x1400000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_mult_ex_in_add_ex2615( FOLLOW_mult_ex_in_add_ex2615_bits, 1 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex2674_bits[]	= { ANTLR_UINT64_LIT(0x8120000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex2674( FOLLOW_unary_ex_in_mult_ex2674_bits, 1 );

static	ANTLR_BITWORD FOLLOW_56_in_mult_ex2713_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_56_in_mult_ex2713( FOLLOW_56_in_mult_ex2713_bits, 1 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex2717_bits[]	= { ANTLR_UINT64_LIT(0x8120000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex2717( FOLLOW_unary_ex_in_mult_ex2717_bits, 1 );

static	ANTLR_BITWORD FOLLOW_63_in_mult_ex2743_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_63_in_mult_ex2743( FOLLOW_63_in_mult_ex2743_bits, 1 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex2747_bits[]	= { ANTLR_UINT64_LIT(0x8120000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex2747( FOLLOW_unary_ex_in_mult_ex2747_bits, 1 );

static	ANTLR_BITWORD FOLLOW_53_in_mult_ex2773_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_53_in_mult_ex2773( FOLLOW_53_in_mult_ex2773_bits, 1 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex2777_bits[]	= { ANTLR_UINT64_LIT(0x8120000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex2777( FOLLOW_unary_ex_in_mult_ex2777_bits, 1 );

static	ANTLR_BITWORD FOLLOW_post_ex_in_unary_ex2829_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_post_ex_in_unary_ex2829( FOLLOW_post_ex_in_unary_ex2829_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DOUBINC_in_unary_ex2842_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBINC_in_unary_ex2842( FOLLOW_DOUBINC_in_unary_ex2842_bits, 1 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_unary_ex2846_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_unary_ex2846( FOLLOW_unary_ex_in_unary_ex2846_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DOUBDEC_in_unary_ex2859_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBDEC_in_unary_ex2859( FOLLOW_DOUBDEC_in_unary_ex2859_bits, 1 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_unary_ex2863_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_unary_ex2863( FOLLOW_unary_ex_in_unary_ex2863_bits, 1 );

static	ANTLR_BITWORD FOLLOW_60_in_unary_ex2876_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_60_in_unary_ex2876( FOLLOW_60_in_unary_ex2876_bits, 1 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_unary_ex2880_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_unary_ex2880( FOLLOW_unary_ex_in_unary_ex2880_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_post_ex_proper2918_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_post_ex_proper2918( FOLLOW_LSQBRACKET_in_post_ex_proper2918_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_post_ex_proper2922_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_post_ex_proper2922( FOLLOW_expr_in_post_ex_proper2922_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_post_ex_proper2926_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_post_ex_proper2926( FOLLOW_RSQBRACKET_in_post_ex_proper2926_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_post_ex_proper2941_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_post_ex_proper2941( FOLLOW_LBRACKET_in_post_ex_proper2941_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_post_ex_proper2945_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_post_ex_proper2945( FOLLOW_RBRACKET_in_post_ex_proper2945_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_post_ex_proper2973_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_post_ex_proper2973( FOLLOW_LBRACKET_in_post_ex_proper2973_bits, 1 );

static	ANTLR_BITWORD FOLLOW_arglist_in_post_ex_proper2979_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arglist_in_post_ex_proper2979( FOLLOW_arglist_in_post_ex_proper2979_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_post_ex_proper2983_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_post_ex_proper2983( FOLLOW_RBRACKET_in_post_ex_proper2983_bits, 1 );

static	ANTLR_BITWORD FOLLOW_62_in_post_ex_proper2996_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_62_in_post_ex_proper2996( FOLLOW_62_in_post_ex_proper2996_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_post_ex_proper3000_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_post_ex_proper3000( FOLLOW_ID_in_post_ex_proper3000_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DOUBINC_in_post_ex_proper3027_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBINC_in_post_ex_proper3027( FOLLOW_DOUBINC_in_post_ex_proper3027_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DOUBDEC_in_post_ex_proper3056_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBDEC_in_post_ex_proper3056( FOLLOW_DOUBDEC_in_post_ex_proper3056_bits, 1 );

static	ANTLR_BITWORD FOLLOW_prim_ex_in_post_ex3109_bits[]	= { ANTLR_UINT64_LIT(0x40000000C0018002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_prim_ex_in_post_ex3109( FOLLOW_prim_ex_in_post_ex3109_bits, 1 );

static	ANTLR_BITWORD FOLLOW_post_ex_proper_in_post_ex3128_bits[]	= { ANTLR_UINT64_LIT(0x40000000C0018002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_post_ex_proper_in_post_ex3128( FOLLOW_post_ex_proper_in_post_ex3128_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_assignment_or_expression3159_bits[]	= { ANTLR_UINT64_LIT(0x2A40000000000002), ANTLR_UINT64_LIT(0x0000000000000009) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_assignment_or_expression3159( FOLLOW_expr_in_assignment_or_expression3159_bits, 2 );

static	ANTLR_BITWORD FOLLOW_assign_type_in_assignment_or_expression3191_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_assign_type_in_assignment_or_expression3191( FOLLOW_assign_type_in_assignment_or_expression3191_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_assignment_or_expression3195_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_assignment_or_expression3195( FOLLOW_expr_in_assignment_or_expression3195_bits, 1 );

static	ANTLR_BITWORD FOLLOW_INT_in_constant3261_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_INT_in_constant3261( FOLLOW_INT_in_constant3261_bits, 1 );

static	ANTLR_BITWORD FOLLOW_FLOAT_in_constant3279_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_FLOAT_in_constant3279( FOLLOW_FLOAT_in_constant3279_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CHAR_in_constant3295_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CHAR_in_constant3295( FOLLOW_CHAR_in_constant3295_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRING_in_constant3312_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_in_constant3312( FOLLOW_STRING_in_constant3312_bits, 1 );

static	ANTLR_BITWORD FOLLOW_BOOL_in_constant3327_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_BOOL_in_constant3327( FOLLOW_BOOL_in_constant3327_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_constant3344_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_constant3344( FOLLOW_scalarType_in_constant3344_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACE_in_constant3348_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_constant3348( FOLLOW_LBRACE_in_constant3348_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRING_in_constant3352_bits[]	= { ANTLR_UINT64_LIT(0x0000001000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_in_constant3352( FOLLOW_STRING_in_constant3352_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACE_in_constant3356_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_constant3356( FOLLOW_RBRACE_in_constant3356_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_prim_ex3386_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_prim_ex3386( FOLLOW_ID_in_prim_ex3386_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_prim_ex3401_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_prim_ex3401( FOLLOW_LBRACKET_in_prim_ex3401_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_prim_ex3405_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_prim_ex3405( FOLLOW_expr_in_prim_ex3405_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_prim_ex3409_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_prim_ex3409( FOLLOW_RBRACKET_in_prim_ex3409_bits, 1 );

static	ANTLR_BITWORD FOLLOW_constant_in_prim_ex3424_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_constant_in_prim_ex3424( FOLLOW_constant_in_prim_ex3424_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_prim_ex3439_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_prim_ex3439( FOLLOW_scalarType_in_prim_ex3439_bits, 1 );

static	ANTLR_BITWORD FOLLOW_cast_in_prim_ex3445_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_cast_in_prim_ex3445( FOLLOW_cast_in_prim_ex3445_bits, 1 );

static	ANTLR_BITWORD FOLLOW_NULLTOK_in_prim_ex3460_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_NULLTOK_in_prim_ex3460( FOLLOW_NULLTOK_in_prim_ex3460_bits, 1 );

static	ANTLR_BITWORD FOLLOW_objectType_in_prim_ex3474_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_objectType_in_prim_ex3474( FOLLOW_objectType_in_prim_ex3474_bits, 1 );

static	ANTLR_BITWORD FOLLOW_structInit_in_prim_ex3478_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_structInit_in_prim_ex3478( FOLLOW_structInit_in_prim_ex3478_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SHARED_REF_in_prim_ex3490_bits[]	= { ANTLR_UINT64_LIT(0x0000280000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SHARED_REF_in_prim_ex3490( FOLLOW_SHARED_REF_in_prim_ex3490_bits, 1 );

static	ANTLR_BITWORD FOLLOW_objectType_in_prim_ex3494_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_objectType_in_prim_ex3494( FOLLOW_objectType_in_prim_ex3494_bits, 1 );

static	ANTLR_BITWORD FOLLOW_structInit_in_prim_ex3498_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_structInit_in_prim_ex3498( FOLLOW_structInit_in_prim_ex3498_bits, 1 );

static	ANTLR_BITWORD FOLLOW_nonArrayType_in_prim_ex3512_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_nonArrayType_in_prim_ex3512( FOLLOW_nonArrayType_in_prim_ex3512_bits, 1 );

static	ANTLR_BITWORD FOLLOW_arrayInit_in_prim_ex3516_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arrayInit_in_prim_ex3516( FOLLOW_arrayInit_in_prim_ex3516_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SHARED_REF_in_prim_ex3528_bits[]	= { ANTLR_UINT64_LIT(0x0001280010200120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SHARED_REF_in_prim_ex3528( FOLLOW_SHARED_REF_in_prim_ex3528_bits, 1 );

static	ANTLR_BITWORD FOLLOW_nonArrayType_in_prim_ex3532_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_nonArrayType_in_prim_ex3532( FOLLOW_nonArrayType_in_prim_ex3532_bits, 1 );

static	ANTLR_BITWORD FOLLOW_arrayInit_in_prim_ex3536_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arrayInit_in_prim_ex3536( FOLLOW_arrayInit_in_prim_ex3536_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_cast3565_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_cast3565( FOLLOW_LBRACKET_in_cast3565_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_cast3569_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_cast3569( FOLLOW_expr_in_cast3569_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_cast3573_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_cast3573( FOLLOW_RBRACKET_in_cast3573_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_structInit3602_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_structInit3602( FOLLOW_LBRACKET_in_structInit3602_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_structInit3606_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_structInit3606( FOLLOW_RBRACKET_in_structInit3606_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_arrayInit3642_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_arrayInit3642( FOLLOW_LSQBRACKET_in_arrayInit3642_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_arrayInit3646_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arrayInit3646( FOLLOW_expr_in_arrayInit3646_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_arrayInit3648_bits[]	= { ANTLR_UINT64_LIT(0x00000000C0000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_arrayInit3648( FOLLOW_RSQBRACKET_in_arrayInit3648_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_arrayInit3664_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_arrayInit3664( FOLLOW_LBRACKET_in_arrayInit3664_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_arrayInit3668_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arrayInit3668( FOLLOW_expr_in_arrayInit3668_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_arrayInit3672_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_arrayInit3672( FOLLOW_RBRACKET_in_arrayInit3672_bits, 1 );

static	ANTLR_BITWORD FOLLOW_param_in_declaration3706_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000008) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_param_in_declaration3706( FOLLOW_param_in_declaration3706_bits, 2 );

static	ANTLR_BITWORD FOLLOW_67_in_declaration3741_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_67_in_declaration3741( FOLLOW_67_in_declaration3741_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_declaration3748_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_declaration3748( FOLLOW_expr_in_declaration3748_bits, 1 );

static	ANTLR_BITWORD FOLLOW_declaration_in_instructionScalar3797_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_declaration_in_instructionScalar3797( FOLLOW_declaration_in_instructionScalar3797_bits, 1 );

static	ANTLR_BITWORD FOLLOW_assignment_or_expression_in_instructionScalar3810_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_assignment_or_expression_in_instructionScalar3810( FOLLOW_assignment_or_expression_in_instructionScalar3810_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CONTINUE_in_continueInst3840_bits[]	= { ANTLR_UINT64_LIT(0x0000010000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CONTINUE_in_continueInst3840( FOLLOW_CONTINUE_in_continueInst3840_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_continueInst3844_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_continueInst3844( FOLLOW_SEMICOLON_in_continueInst3844_bits, 1 );

static	ANTLR_BITWORD FOLLOW_BREAK_in_breakInst3870_bits[]	= { ANTLR_UINT64_LIT(0x0000010000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_BREAK_in_breakInst3870( FOLLOW_BREAK_in_breakInst3870_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_breakInst3874_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_breakInst3874( FOLLOW_SEMICOLON_in_breakInst3874_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RETURN_in_returnInst3901_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RETURN_in_returnInst3901( FOLLOW_RETURN_in_returnInst3901_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_returnInst3903_bits[]	= { ANTLR_UINT64_LIT(0x0000010000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_returnInst3903( FOLLOW_expr_in_returnInst3903_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_returnInst3907_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_returnInst3907( FOLLOW_SEMICOLON_in_returnInst3907_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RETURN_in_returnInst3921_bits[]	= { ANTLR_UINT64_LIT(0x0000010000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RETURN_in_returnInst3921( FOLLOW_RETURN_in_returnInst3921_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_returnInst3925_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_returnInst3925( FOLLOW_SEMICOLON_in_returnInst3925_bits, 1 );

static	ANTLR_BITWORD FOLLOW_WHILE_in_whileInst3958_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_WHILE_in_whileInst3958( FOLLOW_WHILE_in_whileInst3958_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_whileInst3960_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_whileInst3960( FOLLOW_LBRACKET_in_whileInst3960_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_whileInst3962_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_whileInst3962( FOLLOW_expr_in_whileInst3962_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_whileInst3964_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_whileInst3964( FOLLOW_RBRACKET_in_whileInst3964_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_whileInst3966_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_whileInst3966( FOLLOW_instruction_list_in_whileInst3966_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DO_in_doInst4002_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DO_in_doInst4002( FOLLOW_DO_in_doInst4002_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_doInst4004_bits[]	= { ANTLR_UINT64_LIT(0x0004000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_doInst4004( FOLLOW_instruction_list_in_doInst4004_bits, 1 );

static	ANTLR_BITWORD FOLLOW_WHILE_in_doInst4006_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_WHILE_in_doInst4006( FOLLOW_WHILE_in_doInst4006_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_doInst4008_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_doInst4008( FOLLOW_LBRACKET_in_doInst4008_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_doInst4010_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_doInst4010( FOLLOW_expr_in_doInst4010_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_doInst4012_bits[]	= { ANTLR_UINT64_LIT(0x0000010000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_doInst4012( FOLLOW_RBRACKET_in_doInst4012_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_doInst4014_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_doInst4014( FOLLOW_SEMICOLON_in_doInst4014_bits, 1 );

static	ANTLR_BITWORD FOLLOW_FOR_in_forInst4046_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_FOR_in_forInst4046( FOLLOW_FOR_in_forInst4046_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_forInst4048_bits[]	= { ANTLR_UINT64_LIT(0x10032F01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_forInst4048( FOLLOW_LBRACKET_in_forInst4048_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instructionScalar_in_forInst4076_bits[]	= { ANTLR_UINT64_LIT(0x0000010000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instructionScalar_in_forInst4076( FOLLOW_instructionScalar_in_forInst4076_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_forInst4082_bits[]	= { ANTLR_UINT64_LIT(0x10012F01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_forInst4082( FOLLOW_SEMICOLON_in_forInst4082_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_forInst4107_bits[]	= { ANTLR_UINT64_LIT(0x0000010000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_forInst4107( FOLLOW_expr_in_forInst4107_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_forInst4121_bits[]	= { ANTLR_UINT64_LIT(0x10032E21593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_forInst4121( FOLLOW_SEMICOLON_in_forInst4121_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instructionScalar_in_forInst4146_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instructionScalar_in_forInst4146( FOLLOW_instructionScalar_in_forInst4146_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_forInst4152_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_forInst4152( FOLLOW_RBRACKET_in_forInst4152_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_forInst4177_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_forInst4177( FOLLOW_instruction_list_in_forInst4177_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ELSE_in_elsemiddle4225_bits[]	= { ANTLR_UINT64_LIT(0x0000000002000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ELSE_in_elsemiddle4225( FOLLOW_ELSE_in_elsemiddle4225_bits, 1 );

static	ANTLR_BITWORD FOLLOW_IF_in_elsemiddle4227_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_IF_in_elsemiddle4227( FOLLOW_IF_in_elsemiddle4227_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_elsemiddle4229_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_elsemiddle4229( FOLLOW_LBRACKET_in_elsemiddle4229_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_elsemiddle4231_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_elsemiddle4231( FOLLOW_expr_in_elsemiddle4231_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_elsemiddle4233_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_elsemiddle4233( FOLLOW_RBRACKET_in_elsemiddle4233_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_elsemiddle4235_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_elsemiddle4235( FOLLOW_instruction_list_in_elsemiddle4235_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ELSE_in_endif4268_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ELSE_in_endif4268( FOLLOW_ELSE_in_endif4268_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_endif4270_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_endif4270( FOLLOW_instruction_list_in_endif4270_bits, 1 );

static	ANTLR_BITWORD FOLLOW_IF_in_ifInst4300_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_IF_in_ifInst4300( FOLLOW_IF_in_ifInst4300_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_ifInst4302_bits[]	= { ANTLR_UINT64_LIT(0x10012E01593181B0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_ifInst4302( FOLLOW_LBRACKET_in_ifInst4302_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_ifInst4304_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_ifInst4304( FOLLOW_expr_in_ifInst4304_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_ifInst4306_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_ifInst4306( FOLLOW_RBRACKET_in_ifInst4306_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_ifInst4308_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_ifInst4308( FOLLOW_instruction_list_in_ifInst4308_bits, 1 );

static	ANTLR_BITWORD FOLLOW_elsemiddle_in_ifInst4325_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_elsemiddle_in_ifInst4325( FOLLOW_elsemiddle_in_ifInst4325_bits, 1 );

static	ANTLR_BITWORD FOLLOW_endif_in_ifInst4345_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_endif_in_ifInst4345( FOLLOW_endif_in_ifInst4345_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ifInst_in_instruction4379_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ifInst_in_instruction4379( FOLLOW_ifInst_in_instruction4379_bits, 1 );

static	ANTLR_BITWORD FOLLOW_whileInst_in_instruction4400_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_whileInst_in_instruction4400( FOLLOW_whileInst_in_instruction4400_bits, 1 );

static	ANTLR_BITWORD FOLLOW_doInst_in_instruction4417_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_doInst_in_instruction4417( FOLLOW_doInst_in_instruction4417_bits, 1 );

static	ANTLR_BITWORD FOLLOW_forInst_in_instruction4437_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_forInst_in_instruction4437( FOLLOW_forInst_in_instruction4437_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instructionScalar_in_instruction4457_bits[]	= { ANTLR_UINT64_LIT(0x0000010000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instructionScalar_in_instruction4457( FOLLOW_instructionScalar_in_instruction4457_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_instruction4459_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_instruction4459( FOLLOW_SEMICOLON_in_instruction4459_bits, 1 );

static	ANTLR_BITWORD FOLLOW_breakInst_in_instruction4472_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_breakInst_in_instruction4472( FOLLOW_breakInst_in_instruction4472_bits, 1 );

static	ANTLR_BITWORD FOLLOW_continueInst_in_instruction4485_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_continueInst_in_instruction4485( FOLLOW_continueInst_in_instruction4485_bits, 1 );

static	ANTLR_BITWORD FOLLOW_returnInst_in_instruction4498_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_returnInst_in_instruction4498( FOLLOW_returnInst_in_instruction4498_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_instruction4511_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_instruction4511( FOLLOW_instruction_list_in_instruction4511_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACE_in_instruction_list4543_bits[]	= { ANTLR_UINT64_LIT(0x10072E517B71E1F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_instruction_list4543( FOLLOW_LBRACE_in_instruction_list4543_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_in_instruction_list4560_bits[]	= { ANTLR_UINT64_LIT(0x10072E517B71E1F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_in_instruction_list4560( FOLLOW_instruction_in_instruction_list4560_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACE_in_instruction_list4577_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_instruction_list4577( FOLLOW_RBRACE_in_instruction_list4577_bits, 1 );

static	ANTLR_BITWORD FOLLOW_param_in_function4607_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_param_in_function4607( FOLLOW_param_in_function4607_bits, 1 );

static	ANTLR_BITWORD FOLLOW_parameterList_in_function4609_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_parameterList_in_function4609( FOLLOW_parameterList_in_function4609_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_function4611_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_function4611( FOLLOW_instruction_list_in_function4611_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRUCT_in_structDecl4641_bits[]	= { ANTLR_UINT64_LIT(0x0000200000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRUCT_in_structDecl4641( FOLLOW_STRUCT_in_structDecl4641_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_structDecl4643_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_structDecl4643( FOLLOW_TYPE_in_structDecl4643_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACE_in_structDecl4659_bits[]	= { ANTLR_UINT64_LIT(0x00032A1010200120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_structDecl4659( FOLLOW_LBRACE_in_structDecl4659_bits, 1 );

static	ANTLR_BITWORD FOLLOW_declaration_in_structDecl4664_bits[]	= { ANTLR_UINT64_LIT(0x0000010000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_declaration_in_structDecl4664( FOLLOW_declaration_in_structDecl4664_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_structDecl4668_bits[]	= { ANTLR_UINT64_LIT(0x00032A1010200120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_structDecl4668( FOLLOW_SEMICOLON_in_structDecl4668_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACE_in_structDecl4673_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_structDecl4673( FOLLOW_RBRACE_in_structDecl4673_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CLASS_in_classDecl4726_bits[]	= { ANTLR_UINT64_LIT(0x0000200000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CLASS_in_classDecl4726( FOLLOW_CLASS_in_classDecl4726_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_classDecl4730_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_classDecl4730( FOLLOW_TYPE_in_classDecl4730_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CLASS_in_classDecl4750_bits[]	= { ANTLR_UINT64_LIT(0x0000200000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CLASS_in_classDecl4750( FOLLOW_CLASS_in_classDecl4750_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_classDecl4754_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_classDecl4754( FOLLOW_TYPE_in_classDecl4754_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COLON_in_classDecl4756_bits[]	= { ANTLR_UINT64_LIT(0x0000200000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COLON_in_classDecl4756( FOLLOW_COLON_in_classDecl4756_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_classDecl4760_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_classDecl4760( FOLLOW_TYPE_in_classDecl4760_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACE_in_classDecl4787_bits[]	= { ANTLR_UINT64_LIT(0x0003AA1410200120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_classDecl4787( FOLLOW_LBRACE_in_classDecl4787_bits, 1 );

static	ANTLR_BITWORD FOLLOW_declaration_in_classDecl4830_bits[]	= { ANTLR_UINT64_LIT(0x0000010000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_declaration_in_classDecl4830( FOLLOW_declaration_in_classDecl4830_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_classDecl4834_bits[]	= { ANTLR_UINT64_LIT(0x0003AA1410200120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_classDecl4834( FOLLOW_SEMICOLON_in_classDecl4834_bits, 1 );

static	ANTLR_BITWORD FOLLOW_function_in_classDecl4860_bits[]	= { ANTLR_UINT64_LIT(0x0003AA1410200120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl4860( FOLLOW_function_in_classDecl4860_bits, 1 );

static	ANTLR_BITWORD FOLLOW_VIRTUAL_in_classDecl4889_bits[]	= { ANTLR_UINT64_LIT(0x00032A0010200120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_VIRTUAL_in_classDecl4889( FOLLOW_VIRTUAL_in_classDecl4889_bits, 1 );

static	ANTLR_BITWORD FOLLOW_function_in_classDecl4893_bits[]	= { ANTLR_UINT64_LIT(0x0003AA1410200120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl4893( FOLLOW_function_in_classDecl4893_bits, 1 );

static	ANTLR_BITWORD FOLLOW_OVERRIDE_in_classDecl4919_bits[]	= { ANTLR_UINT64_LIT(0x00032A0010200120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_OVERRIDE_in_classDecl4919( FOLLOW_OVERRIDE_in_classDecl4919_bits, 1 );

static	ANTLR_BITWORD FOLLOW_function_in_classDecl4923_bits[]	= { ANTLR_UINT64_LIT(0x0003AA1410200120) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl4923( FOLLOW_function_in_classDecl4923_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACE_in_classDecl4959_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_classDecl4959( FOLLOW_RBRACE_in_classDecl4959_bits, 1 );

static	ANTLR_BITWORD FOLLOW_INCLUDE_in_inc4989_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_INCLUDE_in_inc4989( FOLLOW_INCLUDE_in_inc4989_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRING_in_inc4991_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_in_inc4991( FOLLOW_STRING_in_inc4991_bits, 1 );

static	ANTLR_BITWORD FOLLOW_function_in_program5037_bits[]	= { ANTLR_UINT64_LIT(0x00033A0014200322) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_program5037( FOLLOW_function_in_program5037_bits, 1 );

static	ANTLR_BITWORD FOLLOW_structDecl_in_program5059_bits[]	= { ANTLR_UINT64_LIT(0x00033A0014200322) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_structDecl_in_program5059( FOLLOW_structDecl_in_program5059_bits, 1 );

static	ANTLR_BITWORD FOLLOW_classDecl_in_program5079_bits[]	= { ANTLR_UINT64_LIT(0x00033A0014200322) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_classDecl_in_program5079( FOLLOW_classDecl_in_program5079_bits, 1 );

static	ANTLR_BITWORD FOLLOW_inc_in_program5100_bits[]	= { ANTLR_UINT64_LIT(0x00033A0014200322) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_inc_in_program5100( FOLLOW_inc_in_program5100_bits, 1 );









scripting::type*
WNScriptASTParser::objectType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    const ImplTraits::CommonTokenType* TYPE1 = NULL;
    const ImplTraits::CommonTokenType* STRING_TYPE2 = NULL;






        node = nullptr;



    {
        {

            ANTLR_UINT32 alt1;

            alt1=2;

            switch ( this->LA(1) )
            {
            case TYPE:
            	{
            		alt1=1;
            	}
                break;
            case STRING_TYPE:
            	{
            		alt1=2;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 1 );
                ex->set_state( 0 );


                goto ruleobjectTypeEx;

            }

            switch (alt1)
            {
        	case 1:
        	    {
        	        TYPE1 =  this->matchToken(TYPE, &FOLLOW_TYPE_in_objectType1166);
        	        if  (this->hasException())
        	        {
        	            goto ruleobjectTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, (TYPE1->getText()).c_str()); SET_LOCATION(node, TYPE1);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        STRING_TYPE2 =  this->matchToken(STRING_TYPE, &FOLLOW_STRING_TYPE_in_objectType1181);
        	        if  (this->hasException())
        	        {
        	            goto ruleobjectTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::string_type); SET_LOCATION(node, STRING_TYPE2);
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleobjectTypeEx;
    ruleobjectTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::type*
WNScriptASTParser::scalarType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    const ImplTraits::CommonTokenType* VOID_TYPE3 = NULL;
    const ImplTraits::CommonTokenType* INT_TYPE4 = NULL;
    const ImplTraits::CommonTokenType* FLOAT_TYPE5 = NULL;
    const ImplTraits::CommonTokenType* CHAR_TYPE6 = NULL;
    const ImplTraits::CommonTokenType* BOOL_TYPE7 = NULL;






        node = nullptr;



    {
        {

            ANTLR_UINT32 alt2;

            alt2=5;

            switch ( this->LA(1) )
            {
            case VOID_TYPE:
            	{
            		alt2=1;
            	}
                break;
            case INT_TYPE:
            	{
            		alt2=2;
            	}
                break;
            case FLOAT_TYPE:
            	{
            		alt2=3;
            	}
                break;
            case CHAR_TYPE:
            	{
            		alt2=4;
            	}
                break;
            case BOOL_TYPE:
            	{
            		alt2=5;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 2 );
                ex->set_state( 0 );


                goto rulescalarTypeEx;

            }

            switch (alt2)
            {
        	case 1:
        	    {
        	        VOID_TYPE3 =  this->matchToken(VOID_TYPE, &FOLLOW_VOID_TYPE_in_scalarType1210);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::void_type); SET_LOCATION(node, VOID_TYPE3);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        INT_TYPE4 =  this->matchToken(INT_TYPE, &FOLLOW_INT_TYPE_in_scalarType1222);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::int_type); SET_LOCATION(node, INT_TYPE4);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        FLOAT_TYPE5 =  this->matchToken(FLOAT_TYPE, &FOLLOW_FLOAT_TYPE_in_scalarType1234);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::float_type); SET_LOCATION(node, FLOAT_TYPE5);
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        CHAR_TYPE6 =  this->matchToken(CHAR_TYPE, &FOLLOW_CHAR_TYPE_in_scalarType1246);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::char_type); SET_LOCATION(node, CHAR_TYPE6);
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        BOOL_TYPE7 =  this->matchToken(BOOL_TYPE, &FOLLOW_BOOL_TYPE_in_scalarType1258);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::bool_type); SET_LOCATION(node, BOOL_TYPE7);
        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulescalarTypeEx;
    rulescalarTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::type*
WNScriptASTParser::arrayType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    const ImplTraits::CommonTokenType* RSQBRACKET9 = NULL;
    const ImplTraits::CommonTokenType* LSQBRACKET10 = NULL;
    const ImplTraits::CommonTokenType* RSQBRACKET12 = NULL;
    const ImplTraits::CommonTokenType* LSQBRACKET13 = NULL;
    scripting::type* scalarType8;
    scripting::type* objectType11;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt3;

            alt3=2;

            switch ( this->LA(1) )
            {
            case BOOL_TYPE:
            case CHAR_TYPE:
            case FLOAT_TYPE:
            case INT_TYPE:
            case VOID_TYPE:
            	{
            		alt3=1;
            	}
                break;
            case STRING_TYPE:
            case TYPE:
            	{
            		alt3=2;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 3 );
                ex->set_state( 0 );


                goto rulearrayTypeEx;

            }

            switch (alt3)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_arrayType1285);
        	        scalarType8=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulearrayTypeEx;
        	        }


        	        {
        	             node = scalarType8
        	            ; SET_LOCATION_FROM_NODE(node, scalarType8
        	            );
        	        }


        	        {
        	            LSQBRACKET10 =  this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_arrayType1301);
        	            if  (this->hasException())
        	            {
        	                goto rulearrayTypeEx;
        	            }


        	            RSQBRACKET9 =  this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_arrayType1303);
        	            if  (this->hasException())
        	            {
        	                goto rulearrayTypeEx;
        	            }


        	            {

        	                                   SET_END_LOCATION(node, RSQBRACKET9);
        	                                   node = m_allocator->construct<scripting::array_type>(m_allocator, node);
        	                                   SET_LOCATION(node, LSQBRACKET10);
        	                                   SET_END_LOCATION(node, RSQBRACKET9);

        	            }


        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_objectType_in_arrayType1314);
        	        objectType11=objectType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulearrayTypeEx;
        	        }


        	        {
        	             node = objectType11
        	            ; SET_LOCATION_FROM_NODE(node, objectType11
        	            );
        	                                node->set_reference_type(scripting::reference_type::unique);
        	        }


        	        {
        	            LSQBRACKET13 =  this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_arrayType1330);
        	            if  (this->hasException())
        	            {
        	                goto rulearrayTypeEx;
        	            }


        	            RSQBRACKET12 =  this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_arrayType1332);
        	            if  (this->hasException())
        	            {
        	                goto rulearrayTypeEx;
        	            }


        	            {

        	                                   SET_END_LOCATION(node, RSQBRACKET12);
        	                                   node = m_allocator->construct<scripting::array_type>(m_allocator, node);
        	                                   SET_LOCATION(node, LSQBRACKET13);
        	                                   SET_END_LOCATION(node, RSQBRACKET12);

        	            }


        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulearrayTypeEx;
    rulearrayTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::type*
WNScriptASTParser::compoundType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    scripting::type* objectType14;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_objectType_in_compoundType1360);
            objectType14=objectType();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecompoundTypeEx;
            }


            {
                 node = objectType14
                ;
            }


        }

    }
    goto rulecompoundTypeEx;
    rulecompoundTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::type*
WNScriptASTParser::nonArrayType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    scripting::type* scalarType15;
    scripting::type* objectType16;





      node = nullptr;



    {
        {

            ANTLR_UINT32 alt4;

            alt4=2;

            switch ( this->LA(1) )
            {
            case BOOL_TYPE:
            case CHAR_TYPE:
            case FLOAT_TYPE:
            case INT_TYPE:
            case VOID_TYPE:
            	{
            		alt4=1;
            	}
                break;
            case STRING_TYPE:
            case TYPE:
            	{
            		alt4=2;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 4 );
                ex->set_state( 0 );


                goto rulenonArrayTypeEx;

            }

            switch (alt4)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_nonArrayType1387);
        	        scalarType15=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenonArrayTypeEx;
        	        }


        	        {
        	             node = scalarType15
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_objectType_in_nonArrayType1397);
        	        objectType16=objectType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenonArrayTypeEx;
        	        }


        	        {
        	             node = objectType16
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulenonArrayTypeEx;
    rulenonArrayTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::type*
WNScriptASTParser::type()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    scripting::type* compoundType17;
    scripting::type* arrayType18;
    scripting::type* scalarType19;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt5;

            alt5=3;

            switch ( this->LA(1) )
            {
            case TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case EOF:
            			{
            				alt5=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				alt5=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 5 );
            		    ex->set_state( 1 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case STRING_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case EOF:
            			{
            				alt5=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				alt5=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 5 );
            		    ex->set_state( 2 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case VOID_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LSQBRACKET:
            			{
            				alt5=2;
            			}
            		    break;
            		case EOF:
            			{
            				alt5=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 5 );
            		    ex->set_state( 3 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case INT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LSQBRACKET:
            			{
            				alt5=2;
            			}
            		    break;
            		case EOF:
            			{
            				alt5=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 5 );
            		    ex->set_state( 4 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case FLOAT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LSQBRACKET:
            			{
            				alt5=2;
            			}
            		    break;
            		case EOF:
            			{
            				alt5=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 5 );
            		    ex->set_state( 5 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case CHAR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LSQBRACKET:
            			{
            				alt5=2;
            			}
            		    break;
            		case EOF:
            			{
            				alt5=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 5 );
            		    ex->set_state( 6 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case BOOL_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LSQBRACKET:
            			{
            				alt5=2;
            			}
            		    break;
            		case EOF:
            			{
            				alt5=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 5 );
            		    ex->set_state( 7 );


            		    goto ruletypeEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 5 );
                ex->set_state( 0 );


                goto ruletypeEx;

            }

            switch (alt5)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_compoundType_in_type1427);
        	        compoundType17=compoundType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruletypeEx;
        	        }


        	        {
        	             node = compoundType17
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_arrayType_in_type1437);
        	        arrayType18=arrayType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruletypeEx;
        	        }


        	        {
        	             node = arrayType18
        	            ;
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_type1447);
        	        scalarType19=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruletypeEx;
        	        }


        	        {
        	             node = scalarType19
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruletypeEx;
    ruletypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::parameter*
WNScriptASTParser::param()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::parameter* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* aa = NULL;
    const ImplTraits::CommonTokenType* dd = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    const ImplTraits::CommonTokenType* e = NULL;
    const ImplTraits::CommonTokenType* g = NULL;
    const ImplTraits::CommonTokenType* SHARED_REF21 = NULL;
    const ImplTraits::CommonTokenType* WEAK_REF22 = NULL;
    scripting::type* bb;
    scripting::type* cc;
    scripting::type* b;
    scripting::type* d;
    scripting::type* f;
    scripting::type* scalarType20;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt6;

            alt6=6;

            switch ( this->LA(1) )
            {
            case VOID_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt6=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				alt6=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 6 );
            		    ex->set_state( 1 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case INT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt6=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				alt6=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 6 );
            		    ex->set_state( 2 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case FLOAT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt6=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				alt6=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 6 );
            		    ex->set_state( 3 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case CHAR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt6=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				alt6=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 6 );
            		    ex->set_state( 4 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case BOOL_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt6=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				alt6=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 6 );
            		    ex->set_state( 5 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt6=2;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				alt6=3;
            			}
            		    break;
            		case QUESTION:
            			{
            				alt6=6;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 6 );
            		    ex->set_state( 6 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case STRING_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt6=2;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				alt6=3;
            			}
            		    break;
            		case QUESTION:
            			{
            				alt6=6;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 6 );
            		    ex->set_state( 7 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case SHARED_REF:
            	{
            		alt6=4;
            	}
                break;
            case WEAK_REF:
            	{
            		alt6=5;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 6 );
                ex->set_state( 0 );


                goto ruleparamEx;

            }

            switch (alt6)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_param1479);
        	        scalarType20=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        a =  this->matchToken(ID, &FOLLOW_ID_in_param1483);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                        node = m_allocator->construct<scripting::parameter>(m_allocator, scalarType20
        	            , (a->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            scalarType20
        	            ); SET_END_LOCATION(node, a);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_compoundType_in_param1498);
        	        bb=compoundType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        aa =  this->matchToken(ID, &FOLLOW_ID_in_param1502);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                        bb
        	            ->set_reference_type(scripting::reference_type::unique);
        	                        node = m_allocator->construct<scripting::parameter>(m_allocator, bb
        	            , (aa->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            bb
        	            ); SET_END_LOCATION(node, aa);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        this->followPush(FOLLOW_arrayType_in_param1517);
        	        cc=arrayType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        dd =  this->matchToken(ID, &FOLLOW_ID_in_param1521);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                        cc
        	            ->set_reference_type(scripting::reference_type::unique);
        	                        node = m_allocator->construct<scripting::parameter>(m_allocator, cc
        	            , (dd->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            cc
        	            ); SET_END_LOCATION(node, dd);
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        SHARED_REF21 =  this->matchToken(SHARED_REF, &FOLLOW_SHARED_REF_in_param1534);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        this->followPush(FOLLOW_compoundType_in_param1538);
        	        b=compoundType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        c =  this->matchToken(ID, &FOLLOW_ID_in_param1542);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                       b
        	            ->set_reference_type(scripting::reference_type::shared);
        	                       node = m_allocator->construct<scripting::parameter>(m_allocator, b
        	            , (c->getText()).c_str()); SET_LOCATION(node, SHARED_REF21); SET_END_LOCATION(node, c);

        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        WEAK_REF22 =  this->matchToken(WEAK_REF, &FOLLOW_WEAK_REF_in_param1555);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        this->followPush(FOLLOW_compoundType_in_param1559);
        	        d=compoundType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        e =  this->matchToken(ID, &FOLLOW_ID_in_param1564);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                       d
        	            ->set_reference_type(scripting::reference_type::weak);
        	                       node = m_allocator->construct<scripting::parameter>(m_allocator, d
        	            , (e->getText()).c_str()); SET_LOCATION(node, WEAK_REF22); SET_END_LOCATION(node, e);

        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	        this->followPush(FOLLOW_compoundType_in_param1579);
        	        f=compoundType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	         this->matchToken(QUESTION, &FOLLOW_QUESTION_in_param1581);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        g =  this->matchToken(ID, &FOLLOW_ID_in_param1586);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                       f
        	            ->set_reference_type(scripting::reference_type::nullable);
        	                       node = m_allocator->construct<scripting::parameter>(m_allocator, f
        	            , (g->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            f
        	            ); SET_END_LOCATION(node, g);

        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleparamEx;
    ruleparamEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::parameter_list*
WNScriptASTParser::paramList()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::parameter_list* node;


    scripting::parameter* a;
    scripting::parameter* b;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_param_in_paramList1618);
            a=param();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleparamListEx;
            }


            {
                 node = m_allocator->construct<scripting::parameter_list>(m_allocator, a
                ); SET_LOCATION_FROM_NODE(node, a
                );
            }



            for (;;)
            {
                int alt7=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt7=1;
                	}
                    break;

                }

                switch (alt7)
                {
            	case 1:
            	    {
            	         this->matchToken(COMMA, &FOLLOW_COMMA_in_paramList1631);
            	        if  (this->hasException())
            	        {
            	            goto ruleparamListEx;
            	        }


            	        this->followPush(FOLLOW_param_in_paramList1635);
            	        b=param();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleparamListEx;
            	        }


            	        {
            	             node
            	            ->add_parameter(b
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop7;
            	    break;
                }
            }
            loop7: ;


        }

    }
    goto ruleparamListEx;
    ruleparamListEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::parameter_list*
WNScriptASTParser::parameterList()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::parameter_list* node;


    const ImplTraits::CommonTokenType* LBRACKET24 = NULL;
    const ImplTraits::CommonTokenType* RBRACKET25 = NULL;
    scripting::parameter_list* paramList23;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt8;

            alt8=2;

            switch ( this->LA(1) )
            {
            case LBRACKET:
            	{
            		switch ( this->LA(2) )
            		{
            		case RBRACKET:
            			{
            				alt8=2;
            			}
            		    break;
            		case BOOL_TYPE:
            		case CHAR_TYPE:
            		case FLOAT_TYPE:
            		case INT_TYPE:
            		case SHARED_REF:
            		case STRING_TYPE:
            		case TYPE:
            		case VOID_TYPE:
            		case WEAK_REF:
            			{
            				alt8=1;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 8 );
            		    ex->set_state( 1 );


            		    goto ruleparameterListEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 8 );
                ex->set_state( 0 );


                goto ruleparameterListEx;

            }

            switch (alt8)
            {
        	case 1:
        	    {
        	        LBRACKET24 =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_parameterList1667);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        this->followPush(FOLLOW_paramList_in_parameterList1669);
        	        paramList23=paramList();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        RBRACKET25 =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_parameterList1671);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        {
        	             node = paramList23
        	            ; SET_LOCATION(node, LBRACKET24); SET_END_LOCATION(node, RBRACKET25);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	         this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_parameterList1688);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	         this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_parameterList1690);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        {
        	             node = nullptr;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleparameterListEx;
    ruleparameterListEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::assign_type
WNScriptASTParser::assign_type()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::assign_type node;







        node = scripting::assign_type::equal;



    {
        {

            ANTLR_UINT32 alt9;

            alt9=6;

            switch ( this->LA(1) )
            {
            case 67:
            	{
            		alt9=1;
            	}
                break;
            case 59:
            	{
            		alt9=2;
            	}
                break;
            case 61:
            	{
            		alt9=3;
            	}
                break;
            case 57:
            	{
            		alt9=4;
            	}
                break;
            case 64:
            	{
            		alt9=5;
            	}
                break;
            case 54:
            	{
            		alt9=6;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 9 );
                ex->set_state( 0 );


                goto ruleassign_typeEx;

            }

            switch (alt9)
            {
        	case 1:
        	    {
        	         this->matchToken(67, &FOLLOW_67_in_assign_type1726);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::equal;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	         this->matchToken(59, &FOLLOW_59_in_assign_type1740);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::add_equal;
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	         this->matchToken(61, &FOLLOW_61_in_assign_type1753);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::sub_equal;
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	         this->matchToken(57, &FOLLOW_57_in_assign_type1766);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::mult_equal;
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	         this->matchToken(64, &FOLLOW_64_in_assign_type1779);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::div_equal;
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	         this->matchToken(54, &FOLLOW_54_in_assign_type1792);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::mod_equal;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleassign_typeEx;
    ruleassign_typeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::arg_list*
WNScriptASTParser::arglist()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::arg_list* node;


    scripting::expression* a;
    scripting::expression* d;





        node = m_allocator->construct<scripting::arg_list>(m_allocator);



    {
        {
            {
                {
                    this->followPush(FOLLOW_expr_in_arglist1850);
                    a=expr();

                    this->followPop();
                    if  (this->hasException())
                    {
                        goto rulearglistEx;
                    }


                    {
                         node->add_expression(a
                        ); SET_LOCATION_FROM_NODE(node, a
                        );
                    }


                }


            }



            for (;;)
            {
                int alt11=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt11=1;
                	}
                    break;

                }

                switch (alt11)
                {
            	case 1:
            	    {
            	         this->matchToken(COMMA, &FOLLOW_COMMA_in_arglist1883);
            	        if  (this->hasException())
            	        {
            	            goto rulearglistEx;
            	        }


            	        {
            	            int alt10=2;
            	            switch ( this->LA(1) )
            	            {
            	            case BOOL:
            	            case BOOL_TYPE:
            	            case CHAR:
            	            case CHAR_TYPE:
            	            case DOUBDEC:
            	            case DOUBINC:
            	            case FLOAT:
            	            case FLOAT_TYPE:
            	            case ID:
            	            case INT:
            	            case INT_TYPE:
            	            case LBRACKET:
            	            case NULLTOK:
            	            case SHARED_REF:
            	            case STRING:
            	            case STRING_TYPE:
            	            case TYPE:
            	            case VOID_TYPE:
            	            case 60:
            	            	{
            	            		alt10=1;
            	            	}
            	                break;
            	            case COMMA:
            	            case RBRACKET:
            	            	{
            	            		alt10=2;
            	            	}
            	                break;

            	            default:
            	                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 10 );
            	                ex->set_state( 0 );


            	                goto rulearglistEx;

            	            }

            	            switch (alt10)
            	            {
            	        	case 1:
            	        	    {
            	        	        {
            	        	            this->followPush(FOLLOW_expr_in_arglist1927);
            	        	            d=expr();

            	        	            this->followPop();
            	        	            if  (this->hasException())
            	        	            {
            	        	                goto rulearglistEx;
            	        	            }


            	        	            {
            	        	                 node->add_expression(d
            	        	                , true); SET_END_LOCATION_FROM_NODE(node, d
            	        	                );
            	        	            }


            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    {
            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

            	default:
            	    goto loop11;
            	    break;
                }
            }
            loop11: ;


        }

    }
    goto rulearglistEx;
    rulearglistEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::expr()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* cond_ex26;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_cond_ex_in_expr2002);
            cond_ex26=cond_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexprEx;
            }


            {
                 node = cond_ex26
                ;
            }


        }

    }
    goto ruleexprEx;
    ruleexprEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::cond_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* or_ex27;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_or_ex_in_cond_ex2040);
            or_ex27=or_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecond_exEx;
            }


            {
                 node = or_ex27
                ;
            }


            {
                int alt12=2;
                switch ( this->LA(1) )
                {
                    case QUESTION:
                    	{
                    		alt12=1;
                    	}
                        break;
                }

                switch (alt12)
                {
            	case 1:
            	    {
            	         this->matchToken(QUESTION, &FOLLOW_QUESTION_in_cond_ex2063);
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	        this->followPush(FOLLOW_expr_in_cond_ex2067);
            	        b=expr();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	         this->matchToken(COLON, &FOLLOW_COLON_in_cond_ex2069);
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	        this->followPush(FOLLOW_cond_ex_in_cond_ex2073);
            	        c=cond_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	        {
            	             node = m_allocator->construct<scripting::cond_expression>(m_allocator, node, b
            	            , c
            	            );  SET_LOCATION_FROM_NODE(node, or_ex27
            	            ); SET_END_LOCATION_FROM_NODE(node, c
            	            );
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    goto rulecond_exEx;
    rulecond_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::or_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_and_ex_in_or_ex2120);
            a=and_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleor_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt13=2;
                switch ( this->LA(1) )
                {
                case 71:
                	{
                		alt13=1;
                	}
                    break;

                }

                switch (alt13)
                {
            	case 1:
            	    {
            	         this->matchToken(71, &FOLLOW_71_in_or_ex2137);
            	        if  (this->hasException())
            	        {
            	            goto ruleor_exEx;
            	        }


            	        this->followPush(FOLLOW_and_ex_in_or_ex2141);
            	        b=and_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleor_exEx;
            	        }


            	        {
            	             node = m_allocator->construct<scripting::short_circuit_expression>(m_allocator, scripting::short_circuit_type::or_operator, node, b
            	            ); SET_LOCATION_FROM_NODE(node, a
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop13;
            	    break;
                }
            }
            loop13: ;


        }

    }
    goto ruleor_exEx;
    ruleor_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::and_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_eq_ex_in_and_ex2184);
            a=eq_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleand_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt14=2;
                switch ( this->LA(1) )
                {
                case 55:
                	{
                		alt14=1;
                	}
                    break;

                }

                switch (alt14)
                {
            	case 1:
            	    {
            	         this->matchToken(55, &FOLLOW_55_in_and_ex2201);
            	        if  (this->hasException())
            	        {
            	            goto ruleand_exEx;
            	        }


            	        this->followPush(FOLLOW_eq_ex_in_and_ex2205);
            	        b=eq_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleand_exEx;
            	        }


            	        {
            	            node = m_allocator->construct<scripting::short_circuit_expression>(m_allocator, scripting::short_circuit_type::and_operator, node, b
            	            ); SET_LOCATION_FROM_NODE(node, a
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop14;
            	    break;
                }
            }
            loop14: ;


        }

    }
    goto ruleand_exEx;
    ruleand_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::eq_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_rel_ex_in_eq_ex2241);
            a=rel_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleeq_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt15=3;
                switch ( this->LA(1) )
                {
                case 68:
                	{
                		alt15=1;
                	}
                    break;
                case 52:
                	{
                		alt15=2;
                	}
                    break;

                }

                switch (alt15)
                {
            	case 1:
            	    {
            	        {
            	             this->matchToken(68, &FOLLOW_68_in_eq_ex2276);
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            this->followPush(FOLLOW_rel_ex_in_eq_ex2280);
            	            b=rel_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_equal, node, b
            	                );  SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	             this->matchToken(52, &FOLLOW_52_in_eq_ex2303);
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            this->followPush(FOLLOW_rel_ex_in_eq_ex2307);
            	            c=rel_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_not_equal, node, c
            	                ); SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                );
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop15;
            	    break;
                }
            }
            loop15: ;


        }

    }
    goto ruleeq_exEx;
    ruleeq_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::rel_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* d;
    scripting::expression* e;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_add_ex_in_rel_ex2365);
            a=add_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulerel_exEx;
            }


            {
                 node=a
                ;
            }



            for (;;)
            {
                int alt16=5;
                switch ( this->LA(1) )
                {
                case 65:
                	{
                		alt16=1;
                	}
                    break;
                case 69:
                	{
                		alt16=2;
                	}
                    break;
                case 66:
                	{
                		alt16=3;
                	}
                    break;
                case 70:
                	{
                		alt16=4;
                	}
                    break;

                }

                switch (alt16)
                {
            	case 1:
            	    {
            	        {
            	             this->matchToken(65, &FOLLOW_65_in_rel_ex2401);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex2405);
            	            b=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_less_than, node, b
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	             this->matchToken(69, &FOLLOW_69_in_rel_ex2429);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex2433);
            	            c=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_greater_than, node, c
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	        {
            	             this->matchToken(66, &FOLLOW_66_in_rel_ex2457);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex2461);
            	            d=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_less_than_or_equal, node, d
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, d
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 4:
            	    {
            	        {
            	             this->matchToken(70, &FOLLOW_70_in_rel_ex2485);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex2489);
            	            e=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_greater_than_or_equal, node, e
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, e
            	                );
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop16;
            	    break;
                }
            }
            loop16: ;


        }

    }
    goto rulerel_exEx;
    rulerel_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::add_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_mult_ex_in_add_ex2550);
            a=mult_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleadd_exEx;
            }


            {
                node = a
                ;
            }



            for (;;)
            {
                int alt17=3;
                switch ( this->LA(1) )
                {
                case 58:
                	{
                		alt17=1;
                	}
                    break;
                case 60:
                	{
                		alt17=2;
                	}
                    break;

                }

                switch (alt17)
                {
            	case 1:
            	    {
            	        {
            	             this->matchToken(58, &FOLLOW_58_in_add_ex2585);
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            this->followPush(FOLLOW_mult_ex_in_add_ex2589);
            	            b=mult_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_add, node, b
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	             this->matchToken(60, &FOLLOW_60_in_add_ex2611);
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            this->followPush(FOLLOW_mult_ex_in_add_ex2615);
            	            c=mult_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_sub, node, c
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                );
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop17;
            	    break;
                }
            }
            loop17: ;


        }

    }
    goto ruleadd_exEx;
    ruleadd_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::mult_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* d;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_unary_ex_in_mult_ex2674);
            a=unary_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemult_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt18=4;
                switch ( this->LA(1) )
                {
                case 56:
                	{
                		alt18=1;
                	}
                    break;
                case 63:
                	{
                		alt18=2;
                	}
                    break;
                case 53:
                	{
                		alt18=3;
                	}
                    break;

                }

                switch (alt18)
                {
            	case 1:
            	    {
            	        {
            	             this->matchToken(56, &FOLLOW_56_in_mult_ex2713);
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            this->followPush(FOLLOW_unary_ex_in_mult_ex2717);
            	            b=unary_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_mult, node, b
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	             this->matchToken(63, &FOLLOW_63_in_mult_ex2743);
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            this->followPush(FOLLOW_unary_ex_in_mult_ex2747);
            	            c=unary_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_div, node, c
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	        {
            	             this->matchToken(53, &FOLLOW_53_in_mult_ex2773);
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            this->followPush(FOLLOW_unary_ex_in_mult_ex2777);
            	            d=unary_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_mod, node, d
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, d
            	                );
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop18;
            	    break;
                }
            }
            loop18: ;


        }

    }
    goto rulemult_exEx;
    rulemult_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::unary_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* d;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt19;

            alt19=4;

            switch ( this->LA(1) )
            {
            case BOOL:
            case BOOL_TYPE:
            case CHAR:
            case CHAR_TYPE:
            case FLOAT:
            case FLOAT_TYPE:
            case ID:
            case INT:
            case INT_TYPE:
            case LBRACKET:
            case NULLTOK:
            case SHARED_REF:
            case STRING:
            case STRING_TYPE:
            case TYPE:
            case VOID_TYPE:
            	{
            		alt19=1;
            	}
                break;
            case DOUBINC:
            	{
            		alt19=2;
            	}
                break;
            case DOUBDEC:
            	{
            		alt19=3;
            	}
                break;
            case 60:
            	{
            		alt19=4;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 19 );
                ex->set_state( 0 );


                goto ruleunary_exEx;

            }

            switch (alt19)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_post_ex_in_unary_ex2829);
        	        a=post_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             node = a
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	         this->matchToken(DOUBINC, &FOLLOW_DOUBINC_in_unary_ex2842);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        this->followPush(FOLLOW_unary_ex_in_unary_ex2846);
        	        b=unary_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             scripting::node* t = node; node = m_allocator->construct<scripting::unary_expression>(m_allocator, scripting::unary_type::pre_increment, b
        	            );   SET_LOCATION_FROM_NODE(node, t); SET_END_LOCATION_FROM_NODE(node, b
        	            );
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	         this->matchToken(DOUBDEC, &FOLLOW_DOUBDEC_in_unary_ex2859);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        this->followPush(FOLLOW_unary_ex_in_unary_ex2863);
        	        c=unary_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             scripting::node* t = node; node = m_allocator->construct<scripting::unary_expression>(m_allocator, scripting::unary_type::pre_decrement, c
        	            );   SET_LOCATION_FROM_NODE(node, t); SET_END_LOCATION_FROM_NODE(node, c
        	            );
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	         this->matchToken(60, &FOLLOW_60_in_unary_ex2876);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        this->followPush(FOLLOW_unary_ex_in_unary_ex2880);
        	        d=unary_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             scripting::node* t = node; node = m_allocator->construct<scripting::unary_expression>(m_allocator, scripting::unary_type::negation, d
        	            );   SET_LOCATION_FROM_NODE(node, t); SET_END_LOCATION_FROM_NODE(node, d
        	            );
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleunary_exEx;
    ruleunary_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::post_expression*
WNScriptASTParser::post_ex_proper()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::post_expression* node;


    const ImplTraits::CommonTokenType* d = NULL;
    const ImplTraits::CommonTokenType* e = NULL;
    const ImplTraits::CommonTokenType* f = NULL;
    const ImplTraits::CommonTokenType* g = NULL;
    const ImplTraits::CommonTokenType* h = NULL;
    const ImplTraits::CommonTokenType* i = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    const ImplTraits::CommonTokenType* DOUBINC28 = NULL;
    const ImplTraits::CommonTokenType* DOUBDEC29 = NULL;
    scripting::expression* a;
    scripting::arg_list* b;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt20;

            alt20=6;

            switch ( this->LA(1) )
            {
            case LSQBRACKET:
            	{
            		alt20=1;
            	}
                break;
            case LBRACKET:
            	{
            		switch ( this->LA(2) )
            		{
            		case RBRACKET:
            			{
            				alt20=2;
            			}
            		    break;
            		case BOOL:
            		case BOOL_TYPE:
            		case CHAR:
            		case CHAR_TYPE:
            		case DOUBDEC:
            		case DOUBINC:
            		case FLOAT:
            		case FLOAT_TYPE:
            		case ID:
            		case INT:
            		case INT_TYPE:
            		case LBRACKET:
            		case NULLTOK:
            		case SHARED_REF:
            		case STRING:
            		case STRING_TYPE:
            		case TYPE:
            		case VOID_TYPE:
            		case 60:
            			{
            				alt20=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 20 );
            		    ex->set_state( 2 );


            		    goto rulepost_ex_properEx;

            		}

            	}
                break;
            case 62:
            	{
            		alt20=4;
            	}
                break;
            case DOUBINC:
            	{
            		alt20=5;
            	}
                break;
            case DOUBDEC:
            	{
            		alt20=6;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 20 );
                ex->set_state( 0 );


                goto rulepost_ex_properEx;

            }

            switch (alt20)
            {
        	case 1:
        	    {
        	        d =  this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_post_ex_proper2918);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_post_ex_proper2922);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        e =  this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_post_ex_proper2926);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::array_access_expression>(m_allocator, a
        	            ); SET_LOCATION(node, d); SET_END_LOCATION(node, e);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        f =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_post_ex_proper2941);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        g =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_post_ex_proper2945);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::function_call_expression>(m_allocator); SET_LOCATION(node, f); SET_END_LOCATION(node, g);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        h =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_post_ex_proper2973);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        this->followPush(FOLLOW_arglist_in_post_ex_proper2979);
        	        b=arglist();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        i =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_post_ex_proper2983);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::function_call_expression>(m_allocator, b
        	            ); SET_LOCATION(node, h); SET_END_LOCATION(node, i);
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	         this->matchToken(62, &FOLLOW_62_in_post_ex_proper2996);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        c =  this->matchToken(ID, &FOLLOW_ID_in_post_ex_proper3000);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::member_access_expression>(m_allocator, (c->getText()).c_str()); SET_LOCATION(node, c);
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        DOUBINC28 =  this->matchToken(DOUBINC, &FOLLOW_DOUBINC_in_post_ex_proper3027);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::post_unary_expression>(m_allocator, scripting::post_unary_type::post_increment); SET_LOCATION(node, DOUBINC28);
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	        DOUBDEC29 =  this->matchToken(DOUBDEC, &FOLLOW_DOUBDEC_in_post_ex_proper3056);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::post_unary_expression>(m_allocator, scripting::post_unary_type::post_decrement); SET_LOCATION(node, DOUBDEC29);
        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulepost_ex_properEx;
    rulepost_ex_properEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::post_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::post_expression* a;
    scripting::expression * prim_ex30;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_prim_ex_in_post_ex3109);
            prim_ex30=prim_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulepost_exEx;
            }


            {
                 node = prim_ex30
                ;
            }



            for (;;)
            {
                int alt21=2;
                switch ( this->LA(1) )
                {
                case DOUBDEC:
                case DOUBINC:
                case LBRACKET:
                case LSQBRACKET:
                case 62:
                	{
                		alt21=1;
                	}
                    break;

                }

                switch (alt21)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_post_ex_proper_in_post_ex3128);
            	        a=post_ex_proper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulepost_exEx;
            	        }


            	        {
            	            a
            	            ->add_base_expression(node); SET_END_LOCATION_FROM_NODE(a
            	            , node); node = a
            	            ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop21;
            	    break;
                }
            }
            loop21: ;


        }

    }
    goto rulepost_exEx;
    rulepost_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::assignment_or_expression()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    scripting::expression* a;
    scripting::assign_type b;
    scripting::expression* c;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_expr_in_assignment_or_expression3159);
            a=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleassignment_or_expressionEx;
            }


            {
                int alt22=2;
                switch ( this->LA(1) )
                {
                case 54:
                case 57:
                case 59:
                case 61:
                case 64:
                case 67:
                	{
                		alt22=1;
                	}
                    break;
                case RBRACKET:
                case SEMICOLON:
                	{
                		alt22=2;
                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 22 );
                    ex->set_state( 0 );


                    goto ruleassignment_or_expressionEx;

                }

                switch (alt22)
                {
            	case 1:
            	    {
            	        {
            	            this->followPush(FOLLOW_assign_type_in_assignment_or_expression3191);
            	            b=assign_type();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleassignment_or_expressionEx;
            	            }


            	            this->followPush(FOLLOW_expr_in_assignment_or_expression3195);
            	            c=expr();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleassignment_or_expressionEx;
            	            }


            	            {

            	                                  scripting::lvalue* lval = m_allocator->construct<scripting::lvalue>(m_allocator, a
            	                );
            	                                  SET_LOCATION_FROM_NODE(lval, c
            	                );

            	                                  scripting::assignment_instruction* assign = m_allocator->construct<scripting::assignment_instruction>(m_allocator, lval);
            	                                  SET_LOCATION_FROM_NODE(assign , lval);

            	                                  assign->add_value(b
            	                , c
            	                );
            	                                  SET_END_LOCATION_FROM_NODE(assign, c
            	                );
            	                                  node = assign;

            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	            {

            	                                  node = m_allocator->construct<scripting::expression_instruction>(m_allocator, a
            	                );
            	                                  SET_LOCATION_FROM_NODE(node, a
            	                );

            	            }


            	        }


            	    }
            	    break;

                }
            }

        }

    }
    goto ruleassignment_or_expressionEx;
    ruleassignment_or_expressionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::constant_expression*
WNScriptASTParser::constant()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::constant_expression* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* b = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    const ImplTraits::CommonTokenType* d = NULL;
    const ImplTraits::CommonTokenType* e = NULL;
    const ImplTraits::CommonTokenType* g = NULL;
    const ImplTraits::CommonTokenType* h = NULL;
    const ImplTraits::CommonTokenType* i = NULL;
    scripting::type* f;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt23;

            alt23=6;

            switch ( this->LA(1) )
            {
            case INT:
            	{
            		alt23=1;
            	}
                break;
            case FLOAT:
            	{
            		alt23=2;
            	}
                break;
            case CHAR:
            	{
            		alt23=3;
            	}
                break;
            case STRING:
            	{
            		alt23=4;
            	}
                break;
            case BOOL:
            	{
            		alt23=5;
            	}
                break;
            case BOOL_TYPE:
            case CHAR_TYPE:
            case FLOAT_TYPE:
            case INT_TYPE:
            case VOID_TYPE:
            	{
            		alt23=6;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 23 );
                ex->set_state( 0 );


                goto ruleconstantEx;

            }

            switch (alt23)
            {
        	case 1:
        	    {
        	        a =  this->matchToken(INT, &FOLLOW_INT_in_constant3261);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::int_type); SET_LOCATION(type_node, a); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, (a->getText()).c_str()); SET_LOCATION(node, a);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        b =  this->matchToken(FLOAT, &FOLLOW_FLOAT_in_constant3279);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::float_type); SET_LOCATION(type_node, b); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, (b->getText()).c_str()); SET_LOCATION(node, b);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        c =  this->matchToken(CHAR, &FOLLOW_CHAR_in_constant3295);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::char_type); SET_LOCATION(type_node, c); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, (c->getText()).c_str()); SET_LOCATION(node, c);
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        d =  this->matchToken(STRING, &FOLLOW_STRING_in_constant3312);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::string_type); SET_LOCATION(type_node, d); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, (d->getText()).c_str()); SET_LOCATION(node, d);
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        e =  this->matchToken(BOOL, &FOLLOW_BOOL_in_constant3327);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::bool_type); SET_LOCATION(type_node, e); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, (e->getText()).c_str()); SET_LOCATION(node, e);
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_constant3344);
        	        f=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        g =  this->matchToken(LBRACE, &FOLLOW_LBRACE_in_constant3348);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        h =  this->matchToken(STRING, &FOLLOW_STRING_in_constant3352);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        i =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_constant3356);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::constant_expression>(m_allocator, f
        	            , (h->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            f
        	            ); SET_END_LOCATION(node, i);
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleconstantEx;
    ruleconstantEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression *
WNScriptASTParser::prim_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression * node;


    const ImplTraits::CommonTokenType* ba = NULL;
    const ImplTraits::CommonTokenType* bb = NULL;
    const ImplTraits::CommonTokenType* d = NULL;
    const ImplTraits::CommonTokenType* ID31 = NULL;
    scripting::expression* a;
    scripting::constant_expression* b;
    scripting::type* c;
    scripting::cast_expression* f;
    scripting::type* e;
    scripting::struct_allocation_expression* h;
    scripting::type* i;
    scripting::struct_allocation_expression* j;
    scripting::type* k;
    scripting::array_allocation_expression* l;
    scripting::type* m;
    scripting::array_allocation_expression* n;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt24;

            alt24=9;

            switch ( this->LA(1) )
            {
            case ID:
            	{
            		alt24=1;
            	}
                break;
            case LBRACKET:
            	{
            		alt24=2;
            	}
                break;
            case BOOL:
            case CHAR:
            case FLOAT:
            case INT:
            case STRING:
            	{
            		alt24=3;
            	}
                break;
            case VOID_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt24=3;
            			}
            		    break;
            		case LBRACKET:
            			{
            				alt24=4;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				alt24=8;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 24 );
            		    ex->set_state( 4 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case INT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt24=3;
            			}
            		    break;
            		case LBRACKET:
            			{
            				alt24=4;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				alt24=8;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 24 );
            		    ex->set_state( 5 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case FLOAT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt24=3;
            			}
            		    break;
            		case LBRACKET:
            			{
            				alt24=4;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				alt24=8;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 24 );
            		    ex->set_state( 6 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case CHAR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt24=3;
            			}
            		    break;
            		case LBRACKET:
            			{
            				alt24=4;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				alt24=8;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 24 );
            		    ex->set_state( 7 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case BOOL_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt24=3;
            			}
            		    break;
            		case LBRACKET:
            			{
            				alt24=4;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				alt24=8;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 24 );
            		    ex->set_state( 8 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case NULLTOK:
            	{
            		alt24=5;
            	}
                break;
            case TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACKET:
            			{
            				alt24=6;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				alt24=8;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 24 );
            		    ex->set_state( 10 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case STRING_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACKET:
            			{
            				alt24=6;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				alt24=8;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 24 );
            		    ex->set_state( 11 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case SHARED_REF:
            	{
            		switch ( this->LA(2) )
            		{
            		case TYPE:
            			{
            				switch ( this->LA(3) )
            				{
            				case LBRACKET:
            					{
            						alt24=7;
            					}
            				    break;
            				case LSQBRACKET:
            					{
            						alt24=9;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 24 );
            				    ex->set_state( 16 );


            				    goto ruleprim_exEx;

            				}

            			}
            		    break;
            		case STRING_TYPE:
            			{
            				switch ( this->LA(3) )
            				{
            				case LBRACKET:
            					{
            						alt24=7;
            					}
            				    break;
            				case LSQBRACKET:
            					{
            						alt24=9;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 24 );
            				    ex->set_state( 17 );


            				    goto ruleprim_exEx;

            				}

            			}
            		    break;
            		case BOOL_TYPE:
            		case CHAR_TYPE:
            		case FLOAT_TYPE:
            		case INT_TYPE:
            		case VOID_TYPE:
            			{
            				alt24=9;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 24 );
            		    ex->set_state( 12 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 24 );
                ex->set_state( 0 );


                goto ruleprim_exEx;

            }

            switch (alt24)
            {
        	case 1:
        	    {
        	        ID31 =  this->matchToken(ID, &FOLLOW_ID_in_prim_ex3386);
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::id_expression>(m_allocator, (ID31->getText()).c_str()); SET_LOCATION(node, ID31);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        ba =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_prim_ex3401);
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_prim_ex3405);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        bb =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_prim_ex3409);
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	            node = a
        	            ; SET_LOCATION(node, ba); SET_END_LOCATION(node, bb);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        this->followPush(FOLLOW_constant_in_prim_ex3424);
        	        b=constant();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	            node = b
        	            ;
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_prim_ex3439);
        	        c=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	            this->followPush(FOLLOW_cast_in_prim_ex3445);
        	            f=cast();

        	            this->followPop();
        	            if  (this->hasException())
        	            {
        	                goto ruleprim_exEx;
        	            }


        	        }


        	        {
        	             f
        	            ->set_type(c
        	            ); node=f
        	            ; SET_START_LOCATION_FROM_NODE(node, c
        	            );
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        d =  this->matchToken(NULLTOK, &FOLLOW_NULLTOK_in_prim_ex3460);
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::null_allocation_expression>(m_allocator); SET_LOCATION(node, d);
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	        this->followPush(FOLLOW_objectType_in_prim_ex3474);
        	        e=objectType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        this->followPush(FOLLOW_structInit_in_prim_ex3478);
        	        h=structInit();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	             e
        	            ->set_reference_type(scripting::reference_type::unique); h
        	            ->set_type(e
        	            ); node=h
        	            ; SET_START_LOCATION_FROM_NODE(node, e
        	            );
        	        }


        	    }
        	    break;
        	case 7:
        	    {
        	         this->matchToken(SHARED_REF, &FOLLOW_SHARED_REF_in_prim_ex3490);
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        this->followPush(FOLLOW_objectType_in_prim_ex3494);
        	        i=objectType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        this->followPush(FOLLOW_structInit_in_prim_ex3498);
        	        j=structInit();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	             i
        	            ->set_reference_type(scripting::reference_type::shared); j
        	            ->set_type(i
        	            ); node=j
        	            ; SET_START_LOCATION_FROM_NODE(node, i
        	            );
        	        }


        	    }
        	    break;
        	case 8:
        	    {
        	        this->followPush(FOLLOW_nonArrayType_in_prim_ex3512);
        	        k=nonArrayType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        this->followPush(FOLLOW_arrayInit_in_prim_ex3516);
        	        l=arrayInit();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	             l
        	            ->set_type(k
        	            ); node=l
        	            ; SET_START_LOCATION_FROM_NODE(node, k
        	            );
        	        }


        	    }
        	    break;
        	case 9:
        	    {
        	         this->matchToken(SHARED_REF, &FOLLOW_SHARED_REF_in_prim_ex3528);
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        this->followPush(FOLLOW_nonArrayType_in_prim_ex3532);
        	        m=nonArrayType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        this->followPush(FOLLOW_arrayInit_in_prim_ex3536);
        	        n=arrayInit();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	             n
        	            ->set_type(m
        	            ); node=n
        	            ; SET_START_LOCATION_FROM_NODE(node, m
        	            );
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleprim_exEx;
    ruleprim_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::cast_expression*
WNScriptASTParser::cast()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::cast_expression* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    scripting::expression* b;





      node = nullptr;



    {
        {
            a =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_cast3565);
            if  (this->hasException())
            {
                goto rulecastEx;
            }


            this->followPush(FOLLOW_expr_in_cast3569);
            b=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecastEx;
            }


            c =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_cast3573);
            if  (this->hasException())
            {
                goto rulecastEx;
            }


            {
                 node = m_allocator->construct<scripting::cast_expression>(m_allocator, b
                ); SET_LOCATION(node, a); SET_END_LOCATION(node, c);
            }


        }

    }
    goto rulecastEx;
    rulecastEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::struct_allocation_expression*
WNScriptASTParser::structInit()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::struct_allocation_expression* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* b = NULL;






        node = nullptr;



    {
        {
            a =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_structInit3602);
            if  (this->hasException())
            {
                goto rulestructInitEx;
            }


            b =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_structInit3606);
            if  (this->hasException())
            {
                goto rulestructInitEx;
            }


            {
                 node = m_allocator->construct<scripting::struct_allocation_expression>(m_allocator); SET_LOCATION(node, a); SET_END_LOCATION(node, b);
            }


        }

    }
    goto rulestructInitEx;
    rulestructInitEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::array_allocation_expression*
WNScriptASTParser::arrayInit()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::array_allocation_expression* node;


    const ImplTraits::CommonTokenType* c = NULL;
    scripting::expression* e;
    scripting::expression* b;





        node = m_allocator->construct<scripting::array_allocation_expression>(m_allocator);



    {
        {
            {
                int cnt25=0;

                for (;;)
                {
                    int alt25=2;
            	switch ( this->LA(1) )
            	{
            	case LSQBRACKET:
            		{
            			alt25=1;
            		}
            	    break;

            	}

            	switch (alt25)
            	{
            	    case 1:
            	        {
            	             this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_arrayInit3642);
            	            if  (this->hasException())
            	            {
            	                goto rulearrayInitEx;
            	            }


            	            this->followPush(FOLLOW_expr_in_arrayInit3646);
            	            e=expr();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulearrayInitEx;
            	            }


            	             this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_arrayInit3648);
            	            if  (this->hasException())
            	            {
            	                goto rulearrayInitEx;
            	            }


            	            {
            	                 node->add_expression(e
            	                );
            	            }


            	        }
            	        break;

            	    default:

            		if ( cnt25 >= 1 )
            		{
            		    goto loop25;
            		}


            		new ANTLR_Exception< WNScriptASTParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto rulearrayInitEx;
            	}
            	cnt25++;
                }
                loop25: ;
            }

            {
                 this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_arrayInit3664);
                if  (this->hasException())
                {
                    goto rulearrayInitEx;
                }


                this->followPush(FOLLOW_expr_in_arrayInit3668);
                b=expr();

                this->followPop();
                if  (this->hasException())
                {
                    goto rulearrayInitEx;
                }


                c =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_arrayInit3672);
                if  (this->hasException())
                {
                    goto rulearrayInitEx;
                }


                {
                     node->set_copy_initializer(b); SET_LOCATION(node, c);
                }


            }


        }

    }
    goto rulearrayInitEx;
    rulearrayInitEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::declaration*
WNScriptASTParser::declaration()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::declaration* node;


    scripting::parameter* a;
    scripting::expression* c;





        node =  m_allocator->construct<scripting::declaration>(m_allocator);



    {
        {
            this->followPush(FOLLOW_param_in_declaration3706);
            a=param();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledeclarationEx;
            }


            {
                 node->set_parameter(a
                ); SET_LOCATION_FROM_NODE(node, a
                );
            }


            {
                {
                     this->matchToken(67, &FOLLOW_67_in_declaration3741);
                    if  (this->hasException())
                    {
                        goto ruledeclarationEx;
                    }


                    {
                        {
                            this->followPush(FOLLOW_expr_in_declaration3748);
                            c=expr();

                            this->followPop();
                            if  (this->hasException())
                            {
                                goto ruledeclarationEx;
                            }


                        }


                        {
                             node->add_expression_initializer(c
                            ); SET_END_LOCATION_FROM_NODE(node, c
                            );
                        }


                    }


                }


            }


        }

    }
    goto ruledeclarationEx;
    ruledeclarationEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::instructionScalar()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    scripting::declaration* declaration32;
    scripting::instruction* assignment_or_expression33;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt26;

            alt26=2;

            switch ( this->LA(1) )
            {
            case VOID_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt26=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case RSQBRACKET:
            					{
            						alt26=1;
            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case NULLTOK:
            				case SHARED_REF:
            				case STRING:
            				case STRING_TYPE:
            				case TYPE:
            				case VOID_TYPE:
            				case 60:
            					{
            						alt26=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 26 );
            				    ex->set_state( 11 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt26=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 26 );
            		    ex->set_state( 1 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case INT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt26=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case RSQBRACKET:
            					{
            						alt26=1;
            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case NULLTOK:
            				case SHARED_REF:
            				case STRING:
            				case STRING_TYPE:
            				case TYPE:
            				case VOID_TYPE:
            				case 60:
            					{
            						alt26=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 26 );
            				    ex->set_state( 11 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt26=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 26 );
            		    ex->set_state( 2 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case FLOAT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt26=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case RSQBRACKET:
            					{
            						alt26=1;
            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case NULLTOK:
            				case SHARED_REF:
            				case STRING:
            				case STRING_TYPE:
            				case TYPE:
            				case VOID_TYPE:
            				case 60:
            					{
            						alt26=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 26 );
            				    ex->set_state( 11 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt26=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 26 );
            		    ex->set_state( 3 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case CHAR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt26=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case RSQBRACKET:
            					{
            						alt26=1;
            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case NULLTOK:
            				case SHARED_REF:
            				case STRING:
            				case STRING_TYPE:
            				case TYPE:
            				case VOID_TYPE:
            				case 60:
            					{
            						alt26=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 26 );
            				    ex->set_state( 11 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt26=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 26 );
            		    ex->set_state( 4 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case BOOL_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt26=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case RSQBRACKET:
            					{
            						alt26=1;
            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case NULLTOK:
            				case SHARED_REF:
            				case STRING:
            				case STRING_TYPE:
            				case TYPE:
            				case VOID_TYPE:
            				case 60:
            					{
            						alt26=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 26 );
            				    ex->set_state( 11 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt26=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 26 );
            		    ex->set_state( 5 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            		case QUESTION:
            			{
            				alt26=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case RSQBRACKET:
            					{
            						alt26=1;
            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case NULLTOK:
            				case SHARED_REF:
            				case STRING:
            				case STRING_TYPE:
            				case TYPE:
            				case VOID_TYPE:
            				case 60:
            					{
            						alt26=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 26 );
            				    ex->set_state( 12 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACKET:
            			{
            				alt26=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 26 );
            		    ex->set_state( 6 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case STRING_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            		case QUESTION:
            			{
            				alt26=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case RSQBRACKET:
            					{
            						alt26=1;
            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case NULLTOK:
            				case SHARED_REF:
            				case STRING:
            				case STRING_TYPE:
            				case TYPE:
            				case VOID_TYPE:
            				case 60:
            					{
            						alt26=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 26 );
            				    ex->set_state( 12 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACKET:
            			{
            				alt26=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 26 );
            		    ex->set_state( 7 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case SHARED_REF:
            	{
            		switch ( this->LA(2) )
            		{
            		case TYPE:
            			{
            				switch ( this->LA(3) )
            				{
            				case ID:
            					{
            						alt26=1;
            					}
            				    break;
            				case LBRACKET:
            				case LSQBRACKET:
            					{
            						alt26=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 26 );
            				    ex->set_state( 13 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case STRING_TYPE:
            			{
            				switch ( this->LA(3) )
            				{
            				case ID:
            					{
            						alt26=1;
            					}
            				    break;
            				case LBRACKET:
            				case LSQBRACKET:
            					{
            						alt26=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 26 );
            				    ex->set_state( 14 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case BOOL_TYPE:
            		case CHAR_TYPE:
            		case FLOAT_TYPE:
            		case INT_TYPE:
            		case VOID_TYPE:
            			{
            				alt26=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 26 );
            		    ex->set_state( 8 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case WEAK_REF:
            	{
            		alt26=1;
            	}
                break;
            case BOOL:
            case CHAR:
            case DOUBDEC:
            case DOUBINC:
            case FLOAT:
            case ID:
            case INT:
            case LBRACKET:
            case NULLTOK:
            case STRING:
            case 60:
            	{
            		alt26=2;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 26 );
                ex->set_state( 0 );


                goto ruleinstructionScalarEx;

            }

            switch (alt26)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_declaration_in_instructionScalar3797);
        	        declaration32=declaration();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionScalarEx;
        	        }


        	        {
        	            node = declaration32
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_assignment_or_expression_in_instructionScalar3810);
        	        assignment_or_expression33=assignment_or_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionScalarEx;
        	        }


        	        {
        	            node = assignment_or_expression33
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleinstructionScalarEx;
    ruleinstructionScalarEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::continue_instruction*
WNScriptASTParser::continueInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::continue_instruction* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* b = NULL;






      node = nullptr;



    {
        {
            a =  this->matchToken(CONTINUE, &FOLLOW_CONTINUE_in_continueInst3840);
            if  (this->hasException())
            {
                goto rulecontinueInstEx;
            }


            b =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_continueInst3844);
            if  (this->hasException())
            {
                goto rulecontinueInstEx;
            }


            {
                 node = m_allocator->construct<scripting::continue_instruction>(m_allocator); SET_LOCATION(node, a); SET_END_LOCATION(node, b);
            }


        }

    }
    goto rulecontinueInstEx;
    rulecontinueInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::break_instruction*
WNScriptASTParser::breakInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::break_instruction* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* b = NULL;






        node = nullptr;



    {
        {
            a =  this->matchToken(BREAK, &FOLLOW_BREAK_in_breakInst3870);
            if  (this->hasException())
            {
                goto rulebreakInstEx;
            }


            b =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_breakInst3874);
            if  (this->hasException())
            {
                goto rulebreakInstEx;
            }


            {
                 node = m_allocator->construct<scripting::break_instruction>(m_allocator); SET_LOCATION(node, a); SET_END_LOCATION(node, b);
            }


        }

    }
    goto rulebreakInstEx;
    rulebreakInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::return_instruction*
WNScriptASTParser::returnInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::return_instruction* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* b = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    const ImplTraits::CommonTokenType* d = NULL;
    scripting::expression* expr34;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt27;

            alt27=2;

            switch ( this->LA(1) )
            {
            case RETURN:
            	{
            		switch ( this->LA(2) )
            		{
            		case SEMICOLON:
            			{
            				alt27=2;
            			}
            		    break;
            		case BOOL:
            		case BOOL_TYPE:
            		case CHAR:
            		case CHAR_TYPE:
            		case DOUBDEC:
            		case DOUBINC:
            		case FLOAT:
            		case FLOAT_TYPE:
            		case ID:
            		case INT:
            		case INT_TYPE:
            		case LBRACKET:
            		case NULLTOK:
            		case SHARED_REF:
            		case STRING:
            		case STRING_TYPE:
            		case TYPE:
            		case VOID_TYPE:
            		case 60:
            			{
            				alt27=1;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 27 );
            		    ex->set_state( 1 );


            		    goto rulereturnInstEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 27 );
                ex->set_state( 0 );


                goto rulereturnInstEx;

            }

            switch (alt27)
            {
        	case 1:
        	    {
        	        a =  this->matchToken(RETURN, &FOLLOW_RETURN_in_returnInst3901);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_returnInst3903);
        	        expr34=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        b =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_returnInst3907);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::return_instruction>(m_allocator, expr34
        	            ); SET_LOCATION(node, a); SET_END_LOCATION(node, b);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        c =  this->matchToken(RETURN, &FOLLOW_RETURN_in_returnInst3921);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        d =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_returnInst3925);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::return_instruction>(m_allocator); SET_LOCATION(node, c); SET_END_LOCATION(node, d);
        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulereturnInstEx;
    rulereturnInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::whileInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    const ImplTraits::CommonTokenType* WHILE37 = NULL;
    scripting::expression* expr35;
    scripting::instruction_list* instruction_list36;





        node = nullptr;



    {
        {
            WHILE37 =  this->matchToken(WHILE, &FOLLOW_WHILE_in_whileInst3958);
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_whileInst3960);
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


            this->followPush(FOLLOW_expr_in_whileInst3962);
            expr35=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_whileInst3964);
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


            this->followPush(FOLLOW_instruction_list_in_whileInst3966);
            instruction_list36=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


            {
                 node = m_allocator->construct<scripting::while_instruction>(m_allocator, expr35
                , instruction_list36
                ); SET_LOCATION(node, WHILE37); SET_END_LOCATION_FROM_NODE(node,
                instruction_list36
                );
            }


        }

    }
    goto rulewhileInstEx;
    rulewhileInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::doInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    const ImplTraits::CommonTokenType* DO40 = NULL;
    const ImplTraits::CommonTokenType* SEMICOLON41 = NULL;
    scripting::expression* expr38;
    scripting::instruction_list* instruction_list39;





        node = nullptr;



    {
        {
            DO40 =  this->matchToken(DO, &FOLLOW_DO_in_doInst4002);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            this->followPush(FOLLOW_instruction_list_in_doInst4004);
            instruction_list39=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


             this->matchToken(WHILE, &FOLLOW_WHILE_in_doInst4006);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_doInst4008);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            this->followPush(FOLLOW_expr_in_doInst4010);
            expr38=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_doInst4012);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            SEMICOLON41 =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_doInst4014);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            {
                node = m_allocator->construct<scripting::do_instruction>(m_allocator, expr38
                , instruction_list39
                ); SET_LOCATION(node, DO40); SET_END_LOCATION(node, SEMICOLON41);
            }


        }

    }
    goto ruledoInstEx;
    ruledoInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::for_instruction*
WNScriptASTParser::forInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::for_instruction* node;


    const ImplTraits::CommonTokenType* FOR42 = NULL;
    scripting::instruction* a;
    scripting::expression* b;
    scripting::instruction* c;
    scripting::instruction_list* d;





        node =  m_allocator->construct<scripting::for_instruction>(m_allocator);



    {
        {
            FOR42 =  this->matchToken(FOR, &FOLLOW_FOR_in_forInst4046);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_forInst4048);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            {
                 SET_LOCATION(node, FOR42);
            }


            {
                int alt28=2;
                switch ( this->LA(1) )
                {
                    case BOOL:
                    case BOOL_TYPE:
                    case CHAR:
                    case CHAR_TYPE:
                    case DOUBDEC:
                    case DOUBINC:
                    case FLOAT:
                    case FLOAT_TYPE:
                    case ID:
                    case INT:
                    case INT_TYPE:
                    case LBRACKET:
                    case NULLTOK:
                    case SHARED_REF:
                    case STRING:
                    case STRING_TYPE:
                    case TYPE:
                    case VOID_TYPE:
                    case WEAK_REF:
                    case 60:
                    	{
                    		alt28=1;
                    	}
                        break;
                }

                switch (alt28)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_instructionScalar_in_forInst4076);
            	        a=instructionScalar();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleforInstEx;
            	        }


            	        {
            	            node->add_initializer(a
            	            );
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_forInst4082);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            {
                int alt29=2;
                switch ( this->LA(1) )
                {
                    case BOOL:
                    case BOOL_TYPE:
                    case CHAR:
                    case CHAR_TYPE:
                    case DOUBDEC:
                    case DOUBINC:
                    case FLOAT:
                    case FLOAT_TYPE:
                    case ID:
                    case INT:
                    case INT_TYPE:
                    case LBRACKET:
                    case NULLTOK:
                    case SHARED_REF:
                    case STRING:
                    case STRING_TYPE:
                    case TYPE:
                    case VOID_TYPE:
                    case 60:
                    	{
                    		alt29=1;
                    	}
                        break;
                }

                switch (alt29)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_expr_in_forInst4107);
            	        b=expr();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleforInstEx;
            	        }


            	        {
            	            node->add_condition(b
            	            );
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_forInst4121);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            {
                int alt30=2;
                switch ( this->LA(1) )
                {
                    case BOOL:
                    case BOOL_TYPE:
                    case CHAR:
                    case CHAR_TYPE:
                    case DOUBDEC:
                    case DOUBINC:
                    case FLOAT:
                    case FLOAT_TYPE:
                    case ID:
                    case INT:
                    case INT_TYPE:
                    case LBRACKET:
                    case NULLTOK:
                    case SHARED_REF:
                    case STRING:
                    case STRING_TYPE:
                    case TYPE:
                    case VOID_TYPE:
                    case WEAK_REF:
                    case 60:
                    	{
                    		alt30=1;
                    	}
                        break;
                }

                switch (alt30)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_instructionScalar_in_forInst4146);
            	        c=instructionScalar();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleforInstEx;
            	        }


            	        {
            	            node->add_post_op(c
            	            );
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_forInst4152);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            {
                this->followPush(FOLLOW_instruction_list_in_forInst4177);
                d=instruction_list();

                this->followPop();
                if  (this->hasException())
                {
                    goto ruleforInstEx;
                }


                {
                    node->add_body(d
                    ); SET_END_LOCATION_FROM_NODE(node, d
                    );
                }


            }


        }

    }
    goto ruleforInstEx;
    ruleforInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::else_if_instruction*
WNScriptASTParser::elsemiddle()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::else_if_instruction* node;


    const ImplTraits::CommonTokenType* ELSE45 = NULL;
    scripting::expression* expr43;
    scripting::instruction_list* instruction_list44;





        node = nullptr;



    {
        {
            ELSE45 =  this->matchToken(ELSE, &FOLLOW_ELSE_in_elsemiddle4225);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


             this->matchToken(IF, &FOLLOW_IF_in_elsemiddle4227);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_elsemiddle4229);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


            this->followPush(FOLLOW_expr_in_elsemiddle4231);
            expr43=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_elsemiddle4233);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


            this->followPush(FOLLOW_instruction_list_in_elsemiddle4235);
            instruction_list44=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


            {
                 node = m_allocator->construct<scripting::else_if_instruction>(m_allocator, expr43
                , instruction_list44
                ); SET_LOCATION(node, ELSE45); SET_END_LOCATION_FROM_NODE(node,
                instruction_list44
                );
            }


        }

    }
    goto ruleelsemiddleEx;
    ruleelsemiddleEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction_list*
WNScriptASTParser::endif()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction_list* node;


    scripting::instruction_list* instruction_list46;





        node = nullptr;



    {
        {
             this->matchToken(ELSE, &FOLLOW_ELSE_in_endif4268);
            if  (this->hasException())
            {
                goto ruleendifEx;
            }


            this->followPush(FOLLOW_instruction_list_in_endif4270);
            instruction_list46=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleendifEx;
            }


            {
                node = instruction_list46
                ;
            }


        }

    }
    goto ruleendifEx;
    ruleendifEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::if_instruction*
WNScriptASTParser::ifInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::if_instruction* node;


    const ImplTraits::CommonTokenType* IF49 = NULL;
    scripting::expression* expr47;
    scripting::instruction_list* instruction_list48;
    scripting::else_if_instruction* elsemiddle50;
    scripting::instruction_list* endif51;





        node = nullptr;



    {
        {
            IF49 =  this->matchToken(IF, &FOLLOW_IF_in_ifInst4300);
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_ifInst4302);
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


            this->followPush(FOLLOW_expr_in_ifInst4304);
            expr47=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_ifInst4306);
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


            this->followPush(FOLLOW_instruction_list_in_ifInst4308);
            instruction_list48=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


            {
                node = m_allocator->construct<scripting::if_instruction>(m_allocator, expr47
                , instruction_list48
                ); SET_LOCATION(node, IF49); SET_END_LOCATION_FROM_NODE(node,
                instruction_list48
                );
            }



            for (;;)
            {
                int alt31=2;
                switch ( this->LA(1) )
                {
                case ELSE:
                	{
                		switch ( this->LA(2) )
                		{
                		case IF:
                			{
                				alt31=1;
                			}
                		    break;

                		}

                	}
                    break;

                }

                switch (alt31)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_elsemiddle_in_ifInst4325);
            	        elsemiddle50=elsemiddle();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleifInstEx;
            	        }


            	        {
            	            node->add_else_if(elsemiddle50
            	            ); SET_END_LOCATION_FROM_NODE(node, elsemiddle50
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop31;
            	    break;
                }
            }
            loop31: ;


            {
                int alt32=2;
                switch ( this->LA(1) )
                {
                    case ELSE:
                    	{
                    		alt32=1;
                    	}
                        break;
                }

                switch (alt32)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_endif_in_ifInst4345);
            	        endif51=endif();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleifInstEx;
            	        }


            	        {
            	            node->add_else(endif51
            	            ); SET_LOCATION(node, IF49); SET_END_LOCATION_FROM_NODE(node,
            	            endif51
            	            );
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    goto ruleifInstEx;
    ruleifInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::instruction()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    scripting::if_instruction* ifInst52;
    scripting::instruction* whileInst53;
    scripting::instruction* doInst54;
    scripting::for_instruction* forInst55;
    scripting::instruction* instructionScalar56;
    scripting::break_instruction* breakInst57;
    scripting::continue_instruction* continueInst58;
    scripting::return_instruction* returnInst59;
    scripting::instruction_list* instruction_list60;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt33;

            alt33=9;

            switch ( this->LA(1) )
            {
            case IF:
            	{
            		alt33=1;
            	}
                break;
            case WHILE:
            	{
            		alt33=2;
            	}
                break;
            case DO:
            	{
            		alt33=3;
            	}
                break;
            case FOR:
            	{
            		alt33=4;
            	}
                break;
            case BOOL:
            case BOOL_TYPE:
            case CHAR:
            case CHAR_TYPE:
            case DOUBDEC:
            case DOUBINC:
            case FLOAT:
            case FLOAT_TYPE:
            case ID:
            case INT:
            case INT_TYPE:
            case LBRACKET:
            case NULLTOK:
            case SHARED_REF:
            case STRING:
            case STRING_TYPE:
            case TYPE:
            case VOID_TYPE:
            case WEAK_REF:
            case 60:
            	{
            		alt33=5;
            	}
                break;
            case BREAK:
            	{
            		alt33=6;
            	}
                break;
            case CONTINUE:
            	{
            		alt33=7;
            	}
                break;
            case RETURN:
            	{
            		alt33=8;
            	}
                break;
            case LBRACE:
            	{
            		alt33=9;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 33 );
                ex->set_state( 0 );


                goto ruleinstructionEx;

            }

            switch (alt33)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_ifInst_in_instruction4379);
        	        ifInst52=ifInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	             node = ifInst52
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_whileInst_in_instruction4400);
        	        whileInst53=whileInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = whileInst53
        	            ;
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        this->followPush(FOLLOW_doInst_in_instruction4417);
        	        doInst54=doInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = doInst54
        	            ;
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        this->followPush(FOLLOW_forInst_in_instruction4437);
        	        forInst55=forInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = forInst55
        	            ;
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        this->followPush(FOLLOW_instructionScalar_in_instruction4457);
        	        instructionScalar56=instructionScalar();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	         this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_instruction4459);
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = instructionScalar56
        	            ;
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	        this->followPush(FOLLOW_breakInst_in_instruction4472);
        	        breakInst57=breakInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = breakInst57
        	            ;
        	        }


        	    }
        	    break;
        	case 7:
        	    {
        	        this->followPush(FOLLOW_continueInst_in_instruction4485);
        	        continueInst58=continueInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = continueInst58
        	            ;
        	        }


        	    }
        	    break;
        	case 8:
        	    {
        	        this->followPush(FOLLOW_returnInst_in_instruction4498);
        	        returnInst59=returnInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = returnInst59
        	            ;
        	        }


        	    }
        	    break;
        	case 9:
        	    {
        	        this->followPush(FOLLOW_instruction_list_in_instruction4511);
        	        instruction_list60=instruction_list();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	             node = instruction_list60
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleinstructionEx;
    ruleinstructionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction_list*
WNScriptASTParser::instruction_list()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction_list* node;


    const ImplTraits::CommonTokenType* lb = NULL;
    const ImplTraits::CommonTokenType* rb = NULL;
    scripting::instruction* b;





        node = m_allocator->construct<scripting::instruction_list>(m_allocator);



    {
        {
            lb =  this->matchToken(LBRACE, &FOLLOW_LBRACE_in_instruction_list4543);
            if  (this->hasException())
            {
                goto ruleinstruction_listEx;
            }



            for (;;)
            {
                int alt34=2;
                switch ( this->LA(1) )
                {
                case BOOL:
                case BOOL_TYPE:
                case BREAK:
                case CHAR:
                case CHAR_TYPE:
                case CONTINUE:
                case DO:
                case DOUBDEC:
                case DOUBINC:
                case FLOAT:
                case FLOAT_TYPE:
                case FOR:
                case ID:
                case IF:
                case INT:
                case INT_TYPE:
                case LBRACE:
                case LBRACKET:
                case NULLTOK:
                case RETURN:
                case SHARED_REF:
                case STRING:
                case STRING_TYPE:
                case TYPE:
                case VOID_TYPE:
                case WEAK_REF:
                case WHILE:
                case 60:
                	{
                		alt34=1;
                	}
                    break;

                }

                switch (alt34)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_instruction_in_instruction_list4560);
            	        b=instruction();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleinstruction_listEx;
            	        }


            	        {
            	            node->add_instruction(b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop34;
            	    break;
                }
            }
            loop34: ;


            rb =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_instruction_list4577);
            if  (this->hasException())
            {
                goto ruleinstruction_listEx;
            }


            {

                          SET_LOCATION(node, lb); SET_END_LOCATION(node, rb);

            }


        }

    }
    goto ruleinstruction_listEx;
    ruleinstruction_listEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::function*
WNScriptASTParser::function()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::function* node;


    scripting::parameter* param61;
    scripting::parameter_list* parameterList62;
    scripting::instruction_list* instruction_list63;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_param_in_function4607);
            param61=param();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefunctionEx;
            }


            this->followPush(FOLLOW_parameterList_in_function4609);
            parameterList62=parameterList();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefunctionEx;
            }


            this->followPush(FOLLOW_instruction_list_in_function4611);
            instruction_list63=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefunctionEx;
            }


            {
                 node = m_allocator->construct<scripting::function>(m_allocator, param61
                , parameterList62
                , instruction_list63
                ); SET_LOCATION_FROM_NODE(node, param61
                ); SET_END_LOCATION_FROM_NODE(node, instruction_list63
                );
            }


        }

    }
    goto rulefunctionEx;
    rulefunctionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::struct_definition*
WNScriptASTParser::structDecl()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::struct_definition* node;


    const ImplTraits::CommonTokenType* TYPE64 = NULL;
    const ImplTraits::CommonTokenType* STRUCT65 = NULL;
    const ImplTraits::CommonTokenType* RBRACE66 = NULL;
    scripting::declaration* a;





        node = nullptr;



    {
        {
            STRUCT65 =  this->matchToken(STRUCT, &FOLLOW_STRUCT_in_structDecl4641);
            if  (this->hasException())
            {
                goto rulestructDeclEx;
            }


            TYPE64 =  this->matchToken(TYPE, &FOLLOW_TYPE_in_structDecl4643);
            if  (this->hasException())
            {
                goto rulestructDeclEx;
            }


            {
                node= m_allocator->construct<scripting::struct_definition>(m_allocator, (TYPE64->getText()).c_str()); SET_LOCATION(node, STRUCT65);
            }


             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_structDecl4659);
            if  (this->hasException())
            {
                goto rulestructDeclEx;
            }



            for (;;)
            {
                int alt35=2;
                switch ( this->LA(1) )
                {
                case BOOL_TYPE:
                case CHAR_TYPE:
                case FLOAT_TYPE:
                case INT_TYPE:
                case SHARED_REF:
                case STRING_TYPE:
                case TYPE:
                case VOID_TYPE:
                case WEAK_REF:
                	{
                		alt35=1;
                	}
                    break;

                }

                switch (alt35)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_declaration_in_structDecl4664);
            	        a=declaration();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulestructDeclEx;
            	        }


            	        {
            	             node->add_struct_elem(a
            	            );
            	        }


            	         this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_structDecl4668);
            	        if  (this->hasException())
            	        {
            	            goto rulestructDeclEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop35;
            	    break;
                }
            }
            loop35: ;


            RBRACE66 =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_structDecl4673);
            if  (this->hasException())
            {
                goto rulestructDeclEx;
            }


            {
                 SET_END_LOCATION(node, RBRACE66);
            }


        }

    }
    goto rulestructDeclEx;
    rulestructDeclEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::struct_definition*
WNScriptASTParser::classDecl()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::struct_definition* node;


    const ImplTraits::CommonTokenType* f = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    const ImplTraits::CommonTokenType* g = NULL;
    const ImplTraits::CommonTokenType* d = NULL;
    const ImplTraits::CommonTokenType* e = NULL;
    const ImplTraits::CommonTokenType* RBRACE67 = NULL;
    scripting::declaration* a;
    scripting::function* b;
    scripting::function* h;
    scripting::function* i;





        node = nullptr;



    {
        {
            {
                int alt36=2;
                switch ( this->LA(1) )
                {
                case CLASS:
                	{
                		switch ( this->LA(2) )
                		{
                		case TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case COLON:
                					{
                						alt36=2;
                					}
                				    break;
                				case LBRACE:
                					{
                						alt36=1;
                					}
                				    break;

                				default:
                				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 36 );
                				    ex->set_state( 2 );


                				    goto ruleclassDeclEx;

                				}

                			}
                		    break;

                		default:
                		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 36 );
                		    ex->set_state( 1 );


                		    goto ruleclassDeclEx;

                		}

                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 36 );
                    ex->set_state( 0 );


                    goto ruleclassDeclEx;

                }

                switch (alt36)
                {
            	case 1:
            	    {
            	        {
            	            f =  this->matchToken(CLASS, &FOLLOW_CLASS_in_classDecl4726);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            c =  this->matchToken(TYPE, &FOLLOW_TYPE_in_classDecl4730);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                node= m_allocator->construct<scripting::struct_definition>(m_allocator, (c->getText()).c_str(), true); SET_LOCATION(node, f);
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	            g =  this->matchToken(CLASS, &FOLLOW_CLASS_in_classDecl4750);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            d =  this->matchToken(TYPE, &FOLLOW_TYPE_in_classDecl4754);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	             this->matchToken(COLON, &FOLLOW_COLON_in_classDecl4756);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            e =  this->matchToken(TYPE, &FOLLOW_TYPE_in_classDecl4760);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                node= m_allocator->construct<scripting::struct_definition>(m_allocator, (d->getText()).c_str(), true, (e->getText()).c_str()); SET_LOCATION(node, g);
            	            }


            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_classDecl4787);
            if  (this->hasException())
            {
                goto ruleclassDeclEx;
            }



            for (;;)
            {
                int alt37=5;
                switch ( this->LA(1) )
                {
                case VOID_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 67:
                					{
                						alt37=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt37=2;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 67:
                									{
                										alt37=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt37=2;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case INT_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 67:
                					{
                						alt37=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt37=2;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 67:
                									{
                										alt37=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt37=2;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case FLOAT_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 67:
                					{
                						alt37=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt37=2;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 67:
                									{
                										alt37=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt37=2;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case CHAR_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 67:
                					{
                						alt37=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt37=2;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 67:
                									{
                										alt37=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt37=2;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case BOOL_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 67:
                					{
                						alt37=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt37=2;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 67:
                									{
                										alt37=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt37=2;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 67:
                					{
                						alt37=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt37=2;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 67:
                									{
                										alt37=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt37=2;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case QUESTION:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 67:
                							{
                								alt37=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt37=2;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case STRING_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 67:
                					{
                						alt37=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt37=2;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 67:
                									{
                										alt37=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt37=2;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case QUESTION:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 67:
                							{
                								alt37=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt37=2;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case SHARED_REF:
                	{
                		switch ( this->LA(2) )
                		{
                		case TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 67:
                							{
                								alt37=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt37=2;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case STRING_TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 67:
                							{
                								alt37=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt37=2;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case WEAK_REF:
                	{
                		switch ( this->LA(2) )
                		{
                		case TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 67:
                							{
                								alt37=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt37=2;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case STRING_TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 67:
                							{
                								alt37=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt37=2;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case VIRTUAL:
                	{
                		alt37=3;
                	}
                    break;
                case OVERRIDE:
                	{
                		alt37=4;
                	}
                    break;

                }

                switch (alt37)
                {
            	case 1:
            	    {
            	        {
            	            this->followPush(FOLLOW_declaration_in_classDecl4830);
            	            a=declaration();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_struct_elem(a
            	                );
            	            }


            	             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_classDecl4834);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	            this->followPush(FOLLOW_function_in_classDecl4860);
            	            b=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_function(b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	        {
            	             this->matchToken(VIRTUAL, &FOLLOW_VIRTUAL_in_classDecl4889);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            this->followPush(FOLLOW_function_in_classDecl4893);
            	            h=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_function(h
            	                ); h
            	                ->set_is_virtual(true);
            	            }


            	        }


            	    }
            	    break;
            	case 4:
            	    {
            	        {
            	             this->matchToken(OVERRIDE, &FOLLOW_OVERRIDE_in_classDecl4919);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            this->followPush(FOLLOW_function_in_classDecl4923);
            	            i=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_function(i
            	                ); i
            	                ->set_is_override(true);
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop37;
            	    break;
                }
            }
            loop37: ;


            RBRACE67 =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_classDecl4959);
            if  (this->hasException())
            {
                goto ruleclassDeclEx;
            }


            {
                 SET_END_LOCATION(node, RBRACE67);
            }


        }

    }
    goto ruleclassDeclEx;
    ruleclassDeclEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






const char*
WNScriptASTParser::inc()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    const char* file;


    const ImplTraits::CommonTokenType* STRING68 = NULL;






        file = nullptr;



    {
        {
             this->matchToken(INCLUDE, &FOLLOW_INCLUDE_in_inc4989);
            if  (this->hasException())
            {
                goto ruleincEx;
            }


            STRING68 =  this->matchToken(STRING, &FOLLOW_STRING_in_inc4991);
            if  (this->hasException())
            {
                goto ruleincEx;
            }


            {
                 file = (STRING68->getText()).c_str();
            }


        }

    }
    goto ruleincEx;
    ruleincEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return file;
}






scripting::script_file*
WNScriptASTParser::program()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::script_file* node;


    scripting::function* function69;
    scripting::struct_definition* structDecl70;
    scripting::struct_definition* classDecl71;
    const char* inc72;





        node = m_allocator->construct<scripting::script_file>(m_allocator);



    {
        {

            for (;;)
            {
                int alt38=5;
                switch ( this->LA(1) )
                {
                case BOOL_TYPE:
                case CHAR_TYPE:
                case FLOAT_TYPE:
                case INT_TYPE:
                case SHARED_REF:
                case STRING_TYPE:
                case TYPE:
                case VOID_TYPE:
                case WEAK_REF:
                	{
                		alt38=1;
                	}
                    break;
                case STRUCT:
                	{
                		alt38=2;
                	}
                    break;
                case CLASS:
                	{
                		alt38=3;
                	}
                    break;
                case INCLUDE:
                	{
                		alt38=4;
                	}
                    break;

                }

                switch (alt38)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_function_in_program5037);
            	        function69=function();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_function(function69
            	            );
            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        this->followPush(FOLLOW_structDecl_in_program5059);
            	        structDecl70=structDecl();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_struct(structDecl70
            	            );
            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	        this->followPush(FOLLOW_classDecl_in_program5079);
            	        classDecl71=classDecl();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_struct(classDecl71
            	            );
            	        }


            	    }
            	    break;
            	case 4:
            	    {
            	        this->followPush(FOLLOW_inc_in_program5100);
            	        inc72=inc();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_include(inc72
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop38;
            	    break;
                }
            }
            loop38: ;


        }

    }
    goto ruleprogramEx;
    ruleprogramEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}

















